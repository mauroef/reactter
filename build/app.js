/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(9);

	var _firebase = __webpack_require__(18);

	var _firebase2 = _interopRequireDefault(_firebase);

	var _App = __webpack_require__(33);

	var _App2 = _interopRequireDefault(_App);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_firebase2.default.initializeApp({
	  apiKey: 'AIzaSyAZHbE3Pugc6d77E_wCtNyGBbeDCr6rBp8',
	  authDomain: 'twittagra-react.firebaseapp.com',
	  databaseURL: 'https://twittagra-react.firebaseio.com',
	  projectId: 'twittagra-react',
	  storageBucket: 'twittagra-react.appspot.com',
	  messagingSenderId: '920944816285'
	});

	(0, _reactDom.render)(_react2.default.createElement(_App2.default, null), document.getElementById('root'));

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(4);
	} else {
	  module.exports = __webpack_require__(6);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/** @license React v16.6.1
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';var k=__webpack_require__(5),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.concurrent_mode"):60111,y=n?Symbol.for("react.forward_ref"):60112,z=n?Symbol.for("react.suspense"):60113,A=n?Symbol.for("react.memo"):
	60115,B=n?Symbol.for("react.lazy"):60116,C="function"===typeof Symbol&&Symbol.iterator;function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
	function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e)}var E={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};
	function G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E}var J=I.prototype=new H;
	J.constructor=I;k(J,G.prototype);J.isPureReactComponent=!0;var K={current:null,currentDispatcher:null},L=Object.prototype.hasOwnProperty,M={key:!0,ref:!0,__self:!0,__source:!0};
	function N(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:d,_owner:K.current}}
	function ba(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,e,c){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}
	function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
	function T(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return e(c,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+U(d,h);g+=T(d,f,e,c)}else if(null===a||"object"!==typeof a?f=null:(f=C&&a[C]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),h=
	0;!(d=a.next()).done;)d=d.value,f=b+U(d,h++),g+=T(d,f,e,c);else"object"===d&&(e=""+a,D("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function V(a,b,e){return null==a?0:T(a,"",b,e)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ca(a,b){a.func.call(a.context,b,a.count++)}
	function da(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,function(a){return a}):null!=a&&(O(a)&&(a=ba(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+e)),c.push(a))}function W(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(P,"$&/")+"/");b=R(b,g,c,d);V(a,da,b);S(b)}
	var X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=R(null,null,b,e);V(a,ca,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){O(a)?void 0:D("143");return a}},createRef:function(){return{current:null}},Component:G,PureComponent:I,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
	_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:y,render:a}},lazy:function(a){return{$$typeof:B,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:A,type:a,compare:void 0===b?null:b}},Fragment:r,StrictMode:t,Suspense:z,createElement:N,cloneElement:function(a,b,e){null===a||void 0===a?D("267",a):void 0;var c=void 0,d=k({},a.props),g=a.key,h=a.ref,f=a._owner;
	if(null!=b){void 0!==b.ref&&(h=b.ref,f=K.current);void 0!==b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l}return{$$typeof:p,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=N.bind(null,a);b.type=a;return b},isValidElement:O,version:"16.6.3",
	__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:K,assign:k}};X.unstable_ConcurrentMode=x;X.unstable_Profiler=u;var Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.1
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	var _assign = __webpack_require__(5);
	var checkPropTypes = __webpack_require__(7);

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.6.3';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	var enableHooks = false;
	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:


	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.


	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


	// Gather advanced timing metrics for Profiler subtrees.


	// Trace which interactions trigger each commit.


	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties


	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
	var enableStableConcurrentModeAPIs = false;

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + '.' + callerName;
	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};
	{
	  Object.freeze(emptyObject);
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	Component.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	        return undefined;
	      }
	    });
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = Component.prototype;

	/**
	 * Convenience component with default shallow equality check for sCU.
	 */
	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };
	  {
	    Object.seal(refObject);
	  }
	  return refObject;
	}

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null,
	  currentDispatcher: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	var Resolved = 1;


	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = {};

	var currentlyValidatingElement = null;

	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = '';

	    // Add an extra top frame while an element is being validated
	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    }

	    // Delegate to the injected renderer-specific implementation
	    var impl = ReactDebugCurrentFrame.getCurrentStack;
	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	var ReactSharedInternals = {
	  ReactCurrentOwner: ReactCurrentOwner,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown = void 0;
	var specialPropRefWarningShown = void 0;

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    });
	    // self and source are DEV only properties.
	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    });
	    // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.
	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */
	function createElement(type, config, children) {
	  var propName = void 0;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }
	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://reactjs.org/docs/react-api.html#createfactory
	 */


	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	}

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */
	function cloneElement(element, config, children) {
	  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

	  var propName = void 0;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps = void 0;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}

	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */
	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];
	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;
	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;
	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }
	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child = void 0;
	  var nextName = void 0;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (typeof iteratorFn === 'function') {
	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step = void 0;
	      var ii = 0;
	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }
	      var childrenString = '' + children;
	      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };

	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };

	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    };
	    // $FlowFixMe: Flow complains about not setting a value, which is intentional here
	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;
	            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }
	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;
	            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }
	          return context.Consumer;
	        }
	      }
	    });
	    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  return {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      !(
	      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
	      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
	    }

	    if (render != null) {
	      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }
	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentOwner.currentDispatcher;
	  !(dispatcher !== null) ? invariant(false, 'Hooks can only be called inside the body of a function component.') : void 0;
	  return dispatcher;
	}

	function useContext(Context, observedBits) {
	  var dispatcher = resolveDispatcher();
	  {
	    // TODO: add a more generic warning for invalid values.
	    if (Context._context !== undefined) {
	      var realContext = Context._context;
	      // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.
	      if (realContext.Consumer === Context) {
	        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }
	  return dispatcher.useContext(Context, observedBits);
	}

	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}

	function useReducer(reducer, initialState, initialAction) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialState, initialAction);
	}

	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}

	function useEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, inputs);
	}

	function useMutationEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMutationEffect(create, inputs);
	}

	function useLayoutEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, inputs);
	}

	function useCallback(callback, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, inputs);
	}

	function useMemo(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, inputs);
	}

	function useImperativeMethods(ref, create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeMethods(ref, create, inputs);
	}

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	var propTypesMisspellWarningShown = void 0;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);
	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
	  }

	  setCurrentlyValidatingElement(element);
	  {
	    warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }
	  setCurrentlyValidatingElement(null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step = void 0;
	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var type = element.type;
	  var name = void 0,
	      propTypes = void 0;
	  if (typeof type === 'function') {
	    // Class or function component
	    name = type.displayName || type.name;
	    propTypes = type.propTypes;
	  } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
	    // ForwardRef
	    var functionName = type.render.displayName || type.render.name || '';
	    name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
	    propTypes = type.propTypes;
	  } else {
	    return;
	  }
	  if (propTypes) {
	    setCurrentlyValidatingElement(element);
	    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	    setCurrentlyValidatingElement(null);
	  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	    propTypesMisspellWarningShown = true;
	    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	  }
	  if (typeof type.getDefaultProps === 'function') {
	    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */
	function validateFragmentProps(fragment) {
	  setCurrentlyValidatingElement(fragment);

	  var keys = Object.keys(fragment.props);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (key !== 'children' && key !== 'key') {
	      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	      break;
	    }
	  }

	  if (fragment.ref !== null) {
	    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
	  }

	  setCurrentlyValidatingElement(null);
	}

	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type);

	  // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.
	  if (!validType) {
	    var info = '';
	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendum(props);
	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString = void 0;
	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	  }

	  var element = createElement.apply(this, arguments);

	  // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.
	  if (element == null) {
	    return element;
	  }

	  // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)
	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}

	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;
	  // Legacy hook: remove it
	  {
	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}

	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);
	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }
	  validatePropTypes(newElement);
	  return newElement;
	}

	var React = {
	  Children: {
	    map: mapChildren,
	    forEach: forEachChildren,
	    count: countChildren,
	    toArray: toArray,
	    only: onlyChild
	  },

	  createRef: createRef,
	  Component: Component,
	  PureComponent: PureComponent,

	  createContext: createContext,
	  forwardRef: forwardRef,
	  lazy: lazy,
	  memo: memo,

	  Fragment: REACT_FRAGMENT_TYPE,
	  StrictMode: REACT_STRICT_MODE_TYPE,
	  Suspense: REACT_SUSPENSE_TYPE,

	  createElement: createElementWithValidation,
	  cloneElement: cloneElementWithValidation,
	  createFactory: createFactoryWithValidation,
	  isValidElement: isValidElement,

	  version: ReactVersion,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
	};

	if (enableStableConcurrentModeAPIs) {
	  React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	  React.Profiler = REACT_PROFILER_TYPE;
	} else {
	  React.unstable_ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	  React.unstable_Profiler = REACT_PROFILER_TYPE;
	}

	if (enableHooks) {
	  React.useCallback = useCallback;
	  React.useContext = useContext;
	  React.useEffect = useEffect;
	  React.useImperativeMethods = useImperativeMethods;
	  React.useLayoutEffect = useLayoutEffect;
	  React.useMemo = useMemo;
	  React.useMutationEffect = useMutationEffect;
	  React.useReducer = useReducer;
	  React.useRef = useRef;
	  React.useState = useState;
	}



	var React$2 = Object.freeze({
		default: React
	});

	var React$3 = ( React$2 && React ) || React$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var react = React$3.default || React$3;

	module.exports = react;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(8);
	  var loggedTypeFailures = {};

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          )

	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if (process.env.NODE_ENV === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  module.exports = __webpack_require__(10);
	} else {
	  module.exports = __webpack_require__(14);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/** @license React v16.6.1
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/*
	 Modernizr 3.0.0pre (Custom Build) | MIT
	*/
	'use strict';var aa=__webpack_require__(2),n=__webpack_require__(5),ba=__webpack_require__(11);function ca(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[c,d,e,f,g,h],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
	function t(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ca(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}aa?void 0:t("227");function da(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}
	var ea=!1,fa=null,ha=!1,ia=null,ja={onError:function(a){ea=!0;fa=a}};function ka(a,b,c,d,e,f,g,h,k){ea=!1;fa=null;da.apply(ja,arguments)}function la(a,b,c,d,e,f,g,h,k){ka.apply(this,arguments);if(ea){if(ea){var l=fa;ea=!1;fa=null}else t("198"),l=void 0;ha||(ha=!0,ia=l)}}var ma=null,na={};
	function oa(){if(ma)for(var a in na){var b=na[a],c=ma.indexOf(a);-1<c?void 0:t("96",a);if(!pa[c]){b.extractEvents?void 0:t("97",a);pa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.hasOwnProperty(h)?t("99",h):void 0;qa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:t("98",d,a)}}}}
	function ra(a,b,c){sa[a]?t("100",a):void 0;sa[a]=b;ta[a]=b.eventTypes[c].dependencies}var pa=[],qa={},sa={},ta={},ua=null,va=null,wa=null;function xa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=wa(c);la(d,b,void 0,a);a.currentTarget=null}function ya(a,b){null==b?t("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
	function za(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Aa=null;function Ba(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)xa(a,b[d],c[d]);else b&&xa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}
	var Ca={injectEventPluginOrder:function(a){ma?t("101"):void 0;ma=Array.prototype.slice.call(a);oa()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];na.hasOwnProperty(c)&&na[c]===d||(na[c]?t("102",c):void 0,na[c]=d,b=!0)}b&&oa()}};
	function Da(a,b){var c=a.stateNode;if(!c)return null;var d=ua(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?t("231",b,typeof c):void 0;
	return c}function Ea(a){null!==a&&(Aa=ya(Aa,a));a=Aa;Aa=null;if(a&&(za(a,Ba),Aa?t("95"):void 0,ha))throw a=ia,ha=!1,ia=null,a;}var Fa=Math.random().toString(36).slice(2),Ga="__reactInternalInstance$"+Fa,Ha="__reactEventHandlers$"+Fa;function Ia(a){if(a[Ga])return a[Ga];for(;!a[Ga];)if(a.parentNode)a=a.parentNode;else return null;a=a[Ga];return 5===a.tag||6===a.tag?a:null}function Ja(a){a=a[Ga];return!a||5!==a.tag&&6!==a.tag?null:a}
	function Ka(a){if(5===a.tag||6===a.tag)return a.stateNode;t("33")}function La(a){return a[Ha]||null}function Ma(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Na(a,b,c){if(b=Da(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a)}
	function Oa(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Ma(b);for(b=c.length;0<b--;)Na(c[b],"captured",a);for(b=0;b<c.length;b++)Na(c[b],"bubbled",a)}}function Pa(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Da(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a))}function Qa(a){a&&a.dispatchConfig.registrationName&&Pa(a._targetInst,null,a)}
	function Ra(a){za(a,Oa)}var Sa=!("undefined"===typeof window||!window.document||!window.document.createElement);function Ta(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ua={animationend:Ta("Animation","AnimationEnd"),animationiteration:Ta("Animation","AnimationIteration"),animationstart:Ta("Animation","AnimationStart"),transitionend:Ta("Transition","TransitionEnd")},Va={},Wa={};
	Sa&&(Wa=document.createElement("div").style,"AnimationEvent"in window||(delete Ua.animationend.animation,delete Ua.animationiteration.animation,delete Ua.animationstart.animation),"TransitionEvent"in window||delete Ua.transitionend.transition);function Xa(a){if(Va[a])return Va[a];if(!Ua[a])return a;var b=Ua[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Wa)return Va[a]=b[c];return a}
	var Ya=Xa("animationend"),Za=Xa("animationiteration"),$a=Xa("animationstart"),ab=Xa("transitionend"),bb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cb=null,eb=null,fb=null;
	function gb(){if(fb)return fb;var a,b=eb,c=b.length,d,e="value"in cb?cb.value:cb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return fb=e.slice(a,1<d?1-d:void 0)}function hb(){return!0}function ib(){return!1}
	function A(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?hb:ib;this.isPropagationStopped=ib;return this}
	n(A.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=hb)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=hb)},persist:function(){this.isPersistent=hb},isPersistent:ib,destructor:function(){var a=this.constructor.Interface,
	b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ib;this._dispatchInstances=this._dispatchListeners=null}});A.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
	A.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;jb(c);return c};jb(A);function kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function lb(a){a instanceof this?void 0:t("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}
	function jb(a){a.eventPool=[];a.getPooled=kb;a.release=lb}var mb=A.extend({data:null}),nb=A.extend({data:null}),ob=[9,13,27,32],pb=Sa&&"CompositionEvent"in window,qb=null;Sa&&"documentMode"in document&&(qb=document.documentMode);
	var rb=Sa&&"TextEvent"in window&&!qb,sb=Sa&&(!pb||qb&&8<qb&&11>=qb),tb=String.fromCharCode(32),ub={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
	captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},vb=!1;
	function wb(a,b){switch(a){case "keyup":return-1!==ob.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function xb(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var yb=!1;function zb(a,b){switch(a){case "compositionend":return xb(b);case "keypress":if(32!==b.which)return null;vb=!0;return tb;case "textInput":return a=b.data,a===tb&&vb?null:a;default:return null}}
	function Ab(a,b){if(yb)return"compositionend"===a||!pb&&wb(a,b)?(a=gb(),fb=eb=cb=null,yb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return sb&&"ko"!==b.locale?null:b.data;default:return null}}
	var Bb={eventTypes:ub,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(pb)b:{switch(a){case "compositionstart":e=ub.compositionStart;break b;case "compositionend":e=ub.compositionEnd;break b;case "compositionupdate":e=ub.compositionUpdate;break b}e=void 0}else yb?wb(a,c)&&(e=ub.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=ub.compositionStart);e?(sb&&"ko"!==c.locale&&(yb||e!==ub.compositionStart?e===ub.compositionEnd&&yb&&(f=gb()):(cb=d,eb="value"in cb?cb.value:cb.textContent,yb=
	!0)),e=mb.getPooled(e,b,c,d),f?e.data=f:(f=xb(c),null!==f&&(e.data=f)),Ra(e),f=e):f=null;(a=rb?zb(a,c):Ab(a,c))?(b=nb.getPooled(ub.beforeInput,b,c,d),b.data=a,Ra(b)):b=null;return null===f?b:null===b?f:[f,b]}},Cb=null,Db=null,Eb=null;function Hb(a){if(a=va(a)){"function"!==typeof Cb?t("280"):void 0;var b=ua(a.stateNode);Cb(a.stateNode,a.type,b)}}function Ib(a){Db?Eb?Eb.push(a):Eb=[a]:Db=a}function Jb(){if(Db){var a=Db,b=Eb;Eb=Db=null;Hb(a);if(b)for(a=0;a<b.length;a++)Hb(b[a])}}
	function Kb(a,b){return a(b)}function Lb(a,b,c){return a(b,c)}function Mb(){}var Nb=!1;function Ob(a,b){if(Nb)return a(b);Nb=!0;try{return Kb(a,b)}finally{if(Nb=!1,null!==Db||null!==Eb)Mb(),Jb()}}var Pb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Pb[a.type]:"textarea"===b?!0:!1}
	function Rb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Sb(a){if(!Sa)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Tb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ub(a){var b=Tb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
	null;delete a[b]}}}}function Vb(a){a._valueTracker||(a._valueTracker=Ub(a))}function Wb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Tb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
	var Xb=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Yb=/^(.*)[\\\/]/,D="function"===typeof Symbol&&Symbol.for,Zb=D?Symbol.for("react.element"):60103,$b=D?Symbol.for("react.portal"):60106,ac=D?Symbol.for("react.fragment"):60107,bc=D?Symbol.for("react.strict_mode"):60108,cc=D?Symbol.for("react.profiler"):60114,dc=D?Symbol.for("react.provider"):60109,ec=D?Symbol.for("react.context"):60110,fc=D?Symbol.for("react.concurrent_mode"):60111,gc=D?Symbol.for("react.forward_ref"):60112,hc=D?Symbol.for("react.suspense"):
	60113,ic=D?Symbol.for("react.memo"):60115,jc=D?Symbol.for("react.lazy"):60116,kc="function"===typeof Symbol&&Symbol.iterator;function lc(a){if(null===a||"object"!==typeof a)return null;a=kc&&a[kc]||a["@@iterator"];return"function"===typeof a?a:null}
	function mc(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case fc:return"ConcurrentMode";case ac:return"Fragment";case $b:return"Portal";case cc:return"Profiler";case bc:return"StrictMode";case hc:return"Suspense"}if("object"===typeof a)switch(a.$$typeof){case ec:return"Context.Consumer";case dc:return"Context.Provider";case gc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+
	")":"ForwardRef");case ic:return mc(a.type);case jc:if(a=1===a._status?a._result:null)return mc(a)}return null}function nc(a){var b="";do{a:switch(a.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var c=a._debugOwner,d=a._debugSource,e=mc(a.type);var f=null;c&&(f=mc(c.type));c=e;e="";d?e=" (at "+d.fileName.replace(Yb,"")+":"+d.lineNumber+")":f&&(e=" (created by "+f+")");f="\n    in "+(c||"Unknown")+e;break a;default:f=""}b+=f;a=a.return}while(a);return b}
	var oc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pc=Object.prototype.hasOwnProperty,qc={},rc={};
	function sc(a){if(pc.call(rc,a))return!0;if(pc.call(qc,a))return!1;if(oc.test(a))return rc[a]=!0;qc[a]=!0;return!1}function tc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
	function uc(a,b,c,d){if(null===b||"undefined"===typeof b||tc(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function E(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var F={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){F[a]=new E(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];F[b]=new E(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){F[a]=new E(a,2,!1,a.toLowerCase(),null)});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){F[a]=new E(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){F[a]=new E(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){F[a]=new E(a,3,!0,a,null)});
	["capture","download"].forEach(function(a){F[a]=new E(a,4,!1,a,null)});["cols","rows","size","span"].forEach(function(a){F[a]=new E(a,6,!1,a,null)});["rowSpan","start"].forEach(function(a){F[a]=new E(a,5,!1,a.toLowerCase(),null)});var vc=/[\-:]([a-z])/g;function xc(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(vc,
	xc);F[b]=new E(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(vc,xc);F[b]=new E(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(vc,xc);F[b]=new E(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});F.tabIndex=new E("tabIndex",1,!1,"tabindex",null);
	function yc(a,b,c,d){var e=F.hasOwnProperty(b)?F[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(uc(b,c,e,d)&&(c=null),d||null===e?sc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
	function zc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function Ac(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
	function Bc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=zc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Cc(a,b){b=b.checked;null!=b&&yc(a,"checked",b,!1)}
	function Dc(a,b){Cc(a,b);var c=zc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ec(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ec(a,b.type,zc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
	function Fc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
	function Ec(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}var Gc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Hc(a,b,c){a=A.getPooled(Gc.change,a,b,c);a.type="change";Ib(c);Ra(a);return a}var Jc=null,Kc=null;function Lc(a){Ea(a)}
	function Mc(a){var b=Ka(a);if(Wb(b))return a}function Nc(a,b){if("change"===a)return b}var Oc=!1;Sa&&(Oc=Sb("input")&&(!document.documentMode||9<document.documentMode));function Pc(){Jc&&(Jc.detachEvent("onpropertychange",Qc),Kc=Jc=null)}function Qc(a){"value"===a.propertyName&&Mc(Kc)&&(a=Hc(Kc,a,Rb(a)),Ob(Lc,a))}function Rc(a,b,c){"focus"===a?(Pc(),Jc=b,Kc=c,Jc.attachEvent("onpropertychange",Qc)):"blur"===a&&Pc()}function Sc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Mc(Kc)}
	function Tc(a,b){if("click"===a)return Mc(b)}function Uc(a,b){if("input"===a||"change"===a)return Mc(b)}
	var Vc={eventTypes:Gc,_isInputEventSupported:Oc,extractEvents:function(a,b,c,d){var e=b?Ka(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Nc:Qb(e)?Oc?f=Uc:(f=Sc,g=Rc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Tc);if(f&&(f=f(a,b)))return Hc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ec(e,"number",e.value)}},Wc=A.extend({view:null,detail:null}),Xc={Alt:"altKey",
	Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Yc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Xc[a])?!!b[a]:!1}function Zc(){return Yc}
	var $c=0,ad=0,bd=!1,cd=!1,dd=Wc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Zc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=$c;$c=a.screenX;return bd?"mousemove"===a.type?a.screenX-b:0:(bd=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
	var b=ad;ad=a.screenY;return cd?"mousemove"===a.type?a.screenY-b:0:(cd=!0,0)}}),ed=dd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),fd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
	dependencies:["pointerout","pointerover"]}},gd={eventTypes:fd,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ia(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,l=void 0;if("mouseout"===a||"mouseover"===a)g=dd,h=fd.mouseLeave,k=fd.mouseEnter,l="mouse";
	else if("pointerout"===a||"pointerover"===a)g=ed,h=fd.pointerLeave,k=fd.pointerEnter,l="pointer";var m=null==f?e:Ka(f);e=null==b?e:Ka(b);a=g.getPooled(h,f,c,d);a.type=l+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=l+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;l=0;for(g=b;g;g=Ma(g))l++;g=0;for(k=e;k;k=Ma(k))g++;for(;0<l-g;)b=Ma(b),l--;for(;0<g-l;)e=Ma(e),g--;for(;l--;){if(b===e||b===e.alternate)break a;b=Ma(b);e=Ma(e)}b=null}else b=null;e=b;for(b=[];f&&f!==e;){l=
	f.alternate;if(null!==l&&l===e)break;b.push(f);f=Ma(f)}for(f=[];d&&d!==e;){l=d.alternate;if(null!==l&&l===e)break;f.push(d);d=Ma(d)}for(d=0;d<b.length;d++)Pa(b[d],"bubbled",a);for(d=f.length;0<d--;)Pa(f[d],"captured",c);return[a,c]}},hd=Object.prototype.hasOwnProperty;function id(a,b){return a===b?0!==a||0!==b||1/a===1/b:a!==a&&b!==b}
	function jd(a,b){if(id(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!hd.call(b,c[d])||!id(a[c[d]],b[c[d]]))return!1;return!0}function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?t("188"):void 0}
	function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?t("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling}t("188")}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
	void 0:t("189")}}c.alternate!==d?t("190"):void 0}3!==c.tag?t("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
	var od=A.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pd=A.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),qd=Wc.extend({relatedTarget:null});function rd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
	var sd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},td={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
	116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ud=Wc.extend({key:function(a){if(a.key){var b=sd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=rd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?td[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Zc,charCode:function(a){return"keypress"===
	a.type?rd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?rd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),vd=dd.extend({dataTransfer:null}),wd=Wc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Zc}),xd=A.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yd=dd.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
	a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),zd=[["abort","abort"],[Ya,"animationEnd"],[Za,"animationIteration"],[$a,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
	["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
	["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ab,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Ad={},Bd={};function Cd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Ad[a]=b;Bd[c]=b}
	[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
	["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Cd(a,!0)});zd.forEach(function(a){Cd(a,!1)});
	var Dd={eventTypes:Ad,isInteractiveTopLevelEventType:function(a){a=Bd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Bd[a];if(!e)return null;switch(a){case "keypress":if(0===rd(c))return null;case "keydown":case "keyup":a=ud;break;case "blur":case "focus":a=qd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=dd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
	vd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=wd;break;case Ya:case Za:case $a:a=od;break;case ab:a=xd;break;case "scroll":a=Wc;break;case "wheel":a=yd;break;case "copy":case "cut":case "paste":a=pd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=ed;break;default:a=A}b=a.getPooled(e,b,c,d);Ra(b);return b}},Ed=Dd.isInteractiveTopLevelEventType,
	Fd=[];function Gd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ia(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Rb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<pa.length;h++){var k=pa[h];k&&(k=k.extractEvents(d,b,f,e))&&(g=ya(g,k))}Ea(g)}}var Hd=!0;
	function G(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!1)}function Kd(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!0)}function Id(a,b){Lb(Jd,a,b)}
	function Jd(a,b){if(Hd){var c=Rb(b);c=Ia(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Fd.length){var d=Fd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Ob(Gd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Fd.length&&Fd.push(a)}}}var Ld={},Md=0,Nd="_reactListenersID"+(""+Math.random()).slice(2);
	function Od(a){Object.prototype.hasOwnProperty.call(a,Nd)||(a[Nd]=Md++,Ld[a[Nd]]={});return Ld[a[Nd]]}function Pd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Qd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Rd(a,b){var c=Qd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Qd(c)}}function Sd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Sd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Td(){for(var a=window,b=Pd();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView}catch(c){break}b=Pd(a.document)}return b}function Ud(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	var Vd=Sa&&"documentMode"in document&&11>=document.documentMode,Wd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xd=null,Yd=null,Zd=null,$d=!1;
	function ae(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if($d||null==Xd||Xd!==Pd(c))return null;c=Xd;"selectionStart"in c&&Ud(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Zd&&jd(Zd,c)?null:(Zd=c,a=A.getPooled(Wd.select,Yd,a,b),a.type="select",a.target=Xd,Ra(a),a)}
	var be={eventTypes:Wd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Od(e);f=ta.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Ka(b):window;switch(a){case "focus":if(Qb(e)||"true"===e.contentEditable)Xd=e,Yd=b,Zd=null;break;case "blur":Zd=Yd=Xd=null;break;case "mousedown":$d=!0;break;case "contextmenu":case "mouseup":case "dragend":return $d=!1,ae(c,d);case "selectionchange":if(Vd)break;
	case "keydown":case "keyup":return ae(c,d)}return null}};Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ua=La;va=Ja;wa=Ka;Ca.injectEventPluginsByName({SimpleEventPlugin:Dd,EnterLeaveEventPlugin:gd,ChangeEventPlugin:Vc,SelectEventPlugin:be,BeforeInputEventPlugin:Bb});function de(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}
	function ee(a,b){a=n({children:void 0},b);if(b=de(b.children))a.children=b;return a}function fe(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+zc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
	function ge(a,b){null!=b.dangerouslySetInnerHTML?t("91"):void 0;return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function he(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?t("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:t("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:zc(c)}}
	function ie(a,b){var c=zc(b.value),d=zc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function je(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var ke={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function le(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function me(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?le(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var ne=void 0,oe=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==ke.svg||"innerHTML"in a)a.innerHTML=b;else{ne=ne||document.createElement("div");ne.innerHTML="<svg>"+b+"</svg>";for(b=ne.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
	function pe(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
	var qe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},re=["Webkit","ms","Moz","O"];Object.keys(qe).forEach(function(a){re.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qe[b]=qe[a]})});function se(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qe.hasOwnProperty(a)&&qe[a]?(""+b).trim():b+"px"}
	function te(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=se(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var ue=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function ve(a,b){b&&(ue[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?t("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?t("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:t("61")),null!=b.style&&"object"!==typeof b.style?t("62",""):void 0)}
	function we(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}
	function xe(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Od(a);b=ta[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Kd("scroll",a);break;case "focus":case "blur":Kd("focus",a);Kd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Sb(e)&&Kd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===bb.indexOf(e)&&G(e,a)}c[e]=!0}}}function ye(){}var ze=null,Ae=null;
	function Be(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}function Ce(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var De="function"===typeof setTimeout?setTimeout:void 0,Ee="function"===typeof clearTimeout?clearTimeout:void 0;
	function Fe(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function Ge(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}new Set;var He=[],Ie=-1;function H(a){0>Ie||(a.current=He[Ie],He[Ie]=null,Ie--)}function I(a,b){Ie++;He[Ie]=a.current;a.current=b}var Je={},J={current:Je},K={current:!1},Ke=Je;
	function Le(a,b){var c=a.type.contextTypes;if(!c)return Je;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Me(a){H(K,a);H(J,a)}function Ne(a){H(K,a);H(J,a)}
	function Oe(a,b,c){J.current!==Je?t("168"):void 0;I(J,b,a);I(K,c,a)}function Pe(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:t("108",mc(b)||"Unknown",e);return n({},c,d)}function Qe(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Je;Ke=J.current;I(J,b,a);I(K,K.current,a);return!0}
	function Re(a,b,c){var d=a.stateNode;d?void 0:t("169");c?(b=Pe(a,b,Ke),d.__reactInternalMemoizedMergedChildContext=b,H(K,a),H(J,a),I(J,b,a)):H(K,a);I(K,c,a)}var Se=null,Te=null;function Ue(a){return function(b){try{return a(b)}catch(c){}}}
	function Ve(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Se=Ue(function(a){return b.onCommitFiberRoot(c,a)});Te=Ue(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}
	function We(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function M(a,b,c,d){return new We(a,b,c,d)}
	function Xe(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Ye(a){if("function"===typeof a)return Xe(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gc)return 11;if(a===ic)return 14}return 2}
	function Ze(a,b){var c=a.alternate;null===c?(c=M(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.firstContextDependency=a.firstContextDependency;c.sibling=a.sibling;
	c.index=a.index;c.ref=a.ref;return c}
	function $e(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Xe(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ac:return af(c.children,e,f,b);case fc:return bf(c,e|3,f,b);case bc:return bf(c,e|2,f,b);case cc:return a=M(12,c,b,e|4),a.elementType=cc,a.type=cc,a.expirationTime=f,a;case hc:return a=M(13,c,b,e),a.elementType=hc,a.type=hc,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case dc:g=10;break a;case ec:g=9;break a;case gc:g=11;break a;case ic:g=
	14;break a;case jc:g=16;d=null;break a}t("130",null==a?a:typeof a,"")}b=M(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function af(a,b,c,d){a=M(7,a,d,b);a.expirationTime=c;return a}function bf(a,b,c,d){a=M(8,a,d,b);b=0===(b&1)?bc:fc;a.elementType=b;a.type=b;a.expirationTime=c;return a}function cf(a,b,c){a=M(6,a,null,b);a.expirationTime=c;return a}
	function df(a,b,c){b=M(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function ef(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c<b?a.earliestPendingTime=b:a.latestPendingTime>b&&(a.latestPendingTime=b);ff(b,a)}
	function gf(a,b){a.didError=!1;var c=a.latestPingedTime;0!==c&&c>=b&&(a.latestPingedTime=0);c=a.earliestPendingTime;var d=a.latestPendingTime;c===b?a.earliestPendingTime=d===b?a.latestPendingTime=0:d:d===b&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;d=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=b:c<b?a.earliestSuspendedTime=b:d>b&&(a.latestSuspendedTime=b);ff(b,a)}
	function hf(a,b){var c=a.earliestPendingTime;a=a.earliestSuspendedTime;c>b&&(b=c);a>b&&(b=a);return b}function ff(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d<a)&&(e=d);a=e;0!==a&&c>a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a}var jf=!1;
	function kf(a){return{baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lf(a){return{baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
	function mf(a){return{expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function nf(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b)}
	function of(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=kf(a.memoizedState))}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=kf(a.memoizedState),e=c.updateQueue=kf(c.memoizedState)):d=a.updateQueue=lf(e):null===e&&(e=c.updateQueue=lf(d));null===e||d===e?nf(d,b):null===d.lastUpdate||null===e.lastUpdate?(nf(d,b),nf(e,b)):(nf(d,b),e.lastUpdate=b)}
	function pf(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=kf(a.memoizedState):qf(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b)}function qf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=lf(b));return b}
	function rf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-2049|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return n({},d,e);case 2:jf=!0}return d}
	function sf(a,b,c,d,e){jf=!1;b=qf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;m<e?(null===g&&(g=k,f=l),h<m&&(h=m)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k)));k=k.next}m=null;for(k=b.firstCapturedUpdate;null!==k;){var q=k.expirationTime;q<e?(null===m&&(m=k,null===g&&(f=l)),h<q&&(h=q)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=
	32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k)));k=k.next}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=l}
	function tf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);uf(b.firstEffect,c);b.firstEffect=b.lastEffect=null;uf(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null}function uf(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?t("191",c):void 0;c.call(d)}a=a.nextEffect}}
	function vf(a,b){return{value:a,source:b,stack:nc(b)}}var wf={current:null},xf=null,yf=null,zf=null;function Af(a,b){var c=a.type._context;I(wf,c._currentValue,a);c._currentValue=b}function Bf(a){var b=wf.current;H(wf,a);a.type._context._currentValue=b}function Cf(a){xf=a;zf=yf=null;a.firstContextDependency=null}
	function Df(a,b){if(zf!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)zf=a,b=1073741823;b={context:a,observedBits:b,next:null};null===yf?(null===xf?t("293"):void 0,xf.firstContextDependency=yf=b):yf=yf.next=b}return a._currentValue}var Ef={},N={current:Ef},Ff={current:Ef},Gf={current:Ef};function Hf(a){a===Ef?t("174"):void 0;return a}
	function If(a,b){I(Gf,b,a);I(Ff,a,a);I(N,Ef,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:me(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=me(b,c)}H(N,a);I(N,b,a)}function Jf(a){H(N,a);H(Ff,a);H(Gf,a)}function Kf(a){Hf(Gf.current);var b=Hf(N.current);var c=me(b,a.type);b!==c&&(I(Ff,a,a),I(N,c,a))}function Lf(a){Ff.current===a&&(H(N,a),H(Ff,a))}
	function O(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}function Mf(a){var b=a._result;switch(a._status){case 1:return b;case 2:throw b;case 0:throw b;default:throw a._status=0,b=a._ctor,b=b(),b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)}),a._result=b,b;}}var Nf=Xb.ReactCurrentOwner,Of=(new aa.Component).refs;
	function Pf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c)}
	var Uf={isMounted:function(a){return(a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Sf();of(a,e);Tf(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);Sf();of(a,e);Tf(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Qf();c=Rf(c,a);var d=mf(c);d.tag=
	2;void 0!==b&&null!==b&&(d.callback=b);Sf();of(a,d);Tf(a,c)}};function Vf(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!jd(c,d)||!jd(e,f):!0}
	function Wf(a,b,c){var d=!1,e=Je;var f=b.contextType;"object"===typeof f&&null!==f?f=Nf.currentDispatcher.readContext(f):(e=L(b)?Ke:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Le(a,e):Je);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Uf;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Xf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Uf.enqueueReplaceState(b,b.state,null)}
	function Yf(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Of;var f=b.contextType;"object"===typeof f&&null!==f?e.context=Nf.currentDispatcher.readContext(f):(f=L(b)?Ke:J.current,e.context=Le(a,f));f=a.updateQueue;null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Pf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&
	"function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Uf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Zf=Array.isArray;
	function $f(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(1!==c.tag?t("289"):void 0,d=c.stateNode);d?void 0:t("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Of&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?t("284"):void 0;c._owner?void 0:t("290",a)}return a}
	function ag(a,b){"textarea"!==a.type&&t("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
	function bg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Ze(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
	2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=cf(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=$f(a,b,c),d.return=a,d;d=$e(c.type,c.key,c.props,null,a.mode,d);d.ref=$f(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
	c.implementation)return b=df(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,g){if(null===b||7!==b.tag)return b=af(c,a.mode,d,g),b.return=a,b;b=e(b,c,d);b.return=a;return b}function q(a,b,c){if("string"===typeof b||"number"===typeof b)return b=cf(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Zb:return c=$e(b.type,b.key,b.props,null,a.mode,c),c.ref=$f(a,null,b),c.return=a,c;case $b:return b=df(b,a.mode,c),b.return=a,b}if(Zf(b)||
	lc(b))return b=af(b,a.mode,c,null),b.return=a,b;ag(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Zb:return c.key===e?c.type===ac?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $b:return c.key===e?l(a,b,c,d):null}if(Zf(c)||lc(c))return null!==e?null:m(a,b,c,d,null);ag(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
	a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Zb:return a=a.get(null===d.key?c:d.key)||null,d.type===ac?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $b:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Zf(d)||lc(d))return a=a.get(c)||null,m(b,a,d,e,null);ag(b,d)}return null}function B(e,g,h,k){for(var l=null,r=null,m=g,u=g=0,p=null;null!==m&&u<h.length;u++){m.index>u?(p=m,m=null):p=m.sibling;var v=x(e,m,h[u],k);if(null===v){null===m&&(m=p);break}a&&
	m&&null===v.alternate&&b(e,m);g=f(v,g,u);null===r?l=v:r.sibling=v;r=v;m=p}if(u===h.length)return c(e,m),l;if(null===m){for(;u<h.length;u++)if(m=q(e,h[u],k))g=f(m,g,u),null===r?l=m:r.sibling=m,r=m;return l}for(m=d(e,m);u<h.length;u++)if(p=z(m,e,u,h[u],k))a&&null!==p.alternate&&m.delete(null===p.key?u:p.key),g=f(p,g,u),null===r?l=p:r.sibling=p,r=p;a&&m.forEach(function(a){return b(e,a)});return l}function Q(e,g,h,k){var l=lc(h);"function"!==typeof l?t("150"):void 0;h=l.call(h);null==h?t("151"):void 0;
	for(var m=l=null,r=g,u=g=0,p=null,v=h.next();null!==r&&!v.done;u++,v=h.next()){r.index>u?(p=r,r=null):p=r.sibling;var y=x(e,r,v.value,k);if(null===y){r||(r=p);break}a&&r&&null===y.alternate&&b(e,r);g=f(y,g,u);null===m?l=y:m.sibling=y;m=y;r=p}if(v.done)return c(e,r),l;if(null===r){for(;!v.done;u++,v=h.next())v=q(e,v.value,k),null!==v&&(g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);return l}for(r=d(e,r);!v.done;u++,v=h.next())v=z(r,e,u,v.value,k),null!==v&&(a&&null!==v.alternate&&r.delete(null===v.key?u:
	v.key),g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);a&&r.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ac&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Zb:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===ac:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===ac?f.props.children:f.props,h);d.ref=$f(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=
	k.sibling}f.type===ac?(d=af(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=$e(f.type,f.key,f.props,null,a.mode,h),h.ref=$f(a,d,f),h.return=a,a=h)}return g(a);case $b:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=df(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=
	""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=cf(f,a.mode,h),d.return=a,a=d),g(a);if(Zf(f))return B(a,d,f,h);if(lc(f))return Q(a,d,f,h);l&&ag(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:h=a.type,t("152",h.displayName||h.name||"Component")}return c(a,d)}}var cg=bg(!0),dg=bg(!1),eg=null,fg=null,gg=!1;
	function hg(a,b){var c=M(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function ig(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return!1}}
	function jg(a){if(gg){var b=fg;if(b){var c=b;if(!ig(a,b)){b=Fe(c);if(!b||!ig(a,b)){a.effectTag|=2;gg=!1;eg=a;return}hg(eg,c)}eg=a;fg=Ge(b)}else a.effectTag|=2,gg=!1,eg=a}}function kg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;eg=a}function lg(a){if(a!==eg)return!1;if(!gg)return kg(a),gg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Ce(b,a.memoizedProps))for(b=fg;b;)hg(a,b),b=Fe(b);kg(a);fg=eg?Fe(a.stateNode):null;return!0}function mg(){fg=eg=null;gg=!1}var ng=Xb.ReactCurrentOwner;
	function P(a,b,c,d){b.child=null===a?dg(b,null,c,d):cg(b,a.child,c,d)}function og(a,b,c,d,e){c=c.render;var f=b.ref;Cf(b,e);d=c(d,f);b.effectTag|=1;P(a,b,d,e);return b.child}
	function pg(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Xe(g)&&void 0===g.defaultProps&&null===c.compare)return b.tag=15,b.type=g,qg(a,b,g,d,e,f);a=$e(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:jd,c(e,d)&&a.ref===b.ref))return rg(a,b,f);b.effectTag|=1;a=Ze(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
	function qg(a,b,c,d,e,f){return null!==a&&e<f&&jd(a.memoizedProps,d)&&a.ref===b.ref?rg(a,b,f):sg(a,b,c,d,f)}function tg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function sg(a,b,c,d,e){var f=L(c)?Ke:J.current;f=Le(b,f);Cf(b,e);c=c(d,f);b.effectTag|=1;P(a,b,c,e);return b.child}
	function ug(a,b,c,d,e){if(L(c)){var f=!0;Qe(b)}else f=!1;Cf(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Wf(b,c,d,e),Yf(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L(c)?Ke:J.current,l=Le(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l);jf=!1;var x=b.memoizedState;k=g.state=x;var z=b.updateQueue;null!==z&&(sf(b,z,d,g,e),k=b.memoizedState);h!==d||x!==k||K.current||jf?("function"===typeof m&&(Pf(b,c,m,d),k=b.memoizedState),(h=jf||Vf(b,c,h,d,x,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
	g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:O(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L(c)?Ke:J.current,l=Le(b,l)),m=c.getDerivedStateFromProps,
	(q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l),jf=!1,k=b.memoizedState,x=g.state=k,z=b.updateQueue,null!==z&&(sf(b,z,d,g,e),x=b.memoizedState),h!==d||k!==x||K.current||jf?("function"===typeof m&&(Pf(b,c,m,d),x=b.memoizedState),(m=jf||Vf(b,c,h,d,k,x,l))?(q||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||
	("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=
	d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return vg(a,b,c,d,f,e)}
	function vg(a,b,c,d,e,f){tg(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Re(b,c,!1),rg(a,b,f);d=b.stateNode;ng.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=cg(b,a.child,null,f),b.child=cg(b,null,h,f)):P(a,b,h,f);b.memoizedState=d.state;e&&Re(b,c,!0);return b.child}function wg(a){var b=a.stateNode;b.pendingContext?Oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Oe(a,b.context,!1);If(a,b.containerInfo)}
	function xg(a,b,c){var d=b.mode,e=b.pendingProps,f=b.memoizedState;if(0===(b.effectTag&64)){f=null;var g=!1}else f={timedOutAt:null!==f?f.timedOutAt:0},g=!0,b.effectTag&=-65;null===a?g?(g=e.fallback,e=af(null,d,0,null),0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=af(g,d,c,null),e.sibling=d,c=e,c.return=d.return=b):c=d=dg(b,null,e.children,c):null!==a.memoizedState?(d=a.child,a=d.sibling,g?(c=e.fallback,e=Ze(d,d.pendingProps,0),0===(b.mode&1)&&(g=null!==b.memoizedState?
	b.child.child:b.child,g!==d.child&&(e.child=g)),d=e.sibling=Ze(a,c,a.expirationTime),c=e,e.childExpirationTime=0,c.return=d.return=b):c=d=cg(b,d.child,e.children,c)):(a=a.child,g?(g=e.fallback,e=af(null,d,0,null),e.child=a,0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=e.sibling=af(g,d,c,null),d.effectTag|=2,c=e,e.childExpirationTime=0,c.return=d.return=b):d=c=cg(b,a,e.children,c));b.memoizedState=f;b.child=c;return d}
	function rg(a,b,c){null!==a&&(b.firstContextDependency=a.firstContextDependency);if(b.childExpirationTime<c)return null;null!==a&&b.child!==a.child?t("153"):void 0;if(null!==b.child){a=b.child;c=Ze(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ze(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}
	function yg(a,b,c){var d=b.expirationTime;if(null!==a&&a.memoizedProps===b.pendingProps&&!K.current&&d<c){switch(b.tag){case 3:wg(b);mg();break;case 5:Kf(b);break;case 1:L(b.type)&&Qe(b);break;case 4:If(b,b.stateNode.containerInfo);break;case 10:Af(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return xg(a,b,c);b=rg(a,b,c);return null!==b?b.sibling:null}}return rg(a,b,c)}b.expirationTime=0;switch(b.tag){case 2:d=b.elementType;null!==
	a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;var e=Le(b,J.current);Cf(b,c);e=d(a,e);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;if(L(d)){var f=!0;Qe(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&Pf(b,d,g,a);e.updater=Uf;b.stateNode=e;e._reactInternalFiber=b;Yf(b,d,a,c);b=vg(null,b,d,!0,f,c)}else b.tag=0,P(null,b,e,c),b=b.child;
	return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);f=b.pendingProps;a=Mf(e);b.type=a;e=b.tag=Ye(a);f=O(a,f);g=void 0;switch(e){case 0:g=sg(null,b,a,f,c);break;case 1:g=ug(null,b,a,f,c);break;case 11:g=og(null,b,a,f,c);break;case 14:g=pg(null,b,a,O(a.type,f),d,c);break;default:t("283",a)}return g;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),sg(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),ug(a,b,d,
	e,c);case 3:wg(b);d=b.updateQueue;null===d?t("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;sf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)mg(),b=rg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)fg=Ge(b.stateNode.containerInfo),eg=b,e=gg=!0;e?(b.effectTag|=2,b.child=dg(b,null,d,c)):(P(a,b,d,c),mg());b=b.child}return b;case 5:return Kf(b),null===a&&jg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ce(d,e)?g=null:null!==
	f&&Ce(d,f)&&(b.effectTag|=16),tg(a,b),1!==c&&b.mode&1&&e.hidden?(b.expirationTime=1,b=null):(P(a,b,g,c),b=b.child),b;case 6:return null===a&&jg(b),null;case 13:return xg(a,b,c);case 4:return If(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=cg(b,null,d,c):P(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),og(a,b,d,e,c);case 7:return P(a,b,b.pendingProps,c),b.child;case 8:return P(a,b,b.pendingProps.children,c),b.child;case 12:return P(a,b,b.pendingProps.children,
	c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;Af(b,f);if(null!==g){var h=g.value;f=h===f&&(0!==h||1/h===1/f)||h!==h&&f!==f?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!K.current){b=rg(a,b,c);break a}}else for(g=b.child,null!==g&&(g.return=b);null!==g;){h=g.firstContextDependency;if(null!==h){do{if(h.context===d&&0!==(h.observedBits&f)){if(1===g.tag){var k=mf(c);k.tag=2;of(g,k)}g.expirationTime<
	c&&(g.expirationTime=c);k=g.alternate;null!==k&&k.expirationTime<c&&(k.expirationTime=c);for(var l=g.return;null!==l;){k=l.alternate;if(l.childExpirationTime<c)l.childExpirationTime=c,null!==k&&k.childExpirationTime<c&&(k.childExpirationTime=c);else if(null!==k&&k.childExpirationTime<c)k.childExpirationTime=c;else break;l=l.return}}k=g.child;h=h.next}while(null!==h)}else k=10===g.tag?g.type===b.type?null:g.child:g.child;if(null!==k)k.return=g;else for(k=g;null!==k;){if(k===b){k=null;break}g=k.sibling;
	if(null!==g){g.return=k.return;k=g;break}k=k.return}g=k}}P(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,Cf(b,c),e=Df(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,P(a,b,d,c),b.child;case 14:return e=b.type,f=O(e.type,b.pendingProps),pg(a,b,e,f,d,c);case 15:return qg(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Qe(b)):
	a=!1,Cf(b,c),Wf(b,d,e,c),Yf(b,d,e,c),vg(null,b,d,!0,a,c);default:t("156")}}function zg(a){a.effectTag|=4}var Ag=void 0,Bg=void 0,Fg=void 0,Gg=void 0;Ag=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bg=function(){};
	Fg=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;Hf(N.current);a=null;switch(c){case "input":f=Ac(g,f);d=Ac(g,d);a=[];break;case "option":f=ee(g,f);d=ee(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=ge(g,f);d=ge(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=ye)}ve(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
	c){var k=f[c];for(g in k)k.hasOwnProperty(g)&&(h||(h={}),h[g]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(sa.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var l=d[c];k=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&l!==k&&(null!=l||null!=k))if("style"===c)if(k){for(g in k)!k.hasOwnProperty(g)||l&&l.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in l)l.hasOwnProperty(g)&&k[g]!==l[g]&&(h||
	(h={}),h[g]=l[g])}else h||(a||(a=[]),a.push(c,h)),h=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,k=k?k.__html:void 0,null!=l&&k!==l&&(a=a||[]).push(c,""+l)):"children"===c?k===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(sa.hasOwnProperty(c)?(null!=l&&xe(e,c),a||k===l||(a=[])):(a=a||[]).push(c,l))}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&zg(b)}};Gg=function(a,b,c,d){c!==d&&zg(b)};
	function Hg(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=nc(c));null!==c&&mc(c.type);b=b.value;null!==a&&1===a.tag&&mc(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Ig(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Jg(a,c)}else b.current=null}
	function Kg(a){"function"===typeof Te&&Te(a);switch(a.tag){case 0:case 11:case 14:case 15:var b=a.updateQueue;if(null!==b&&(b=b.lastEffect,null!==b)){var c=b=b.next;do{var d=c.destroy;if(null!==d){var e=a;try{d()}catch(f){Jg(e,f)}}c=c.next}while(c!==b)}break;case 1:Ig(a);b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(f){Jg(a,f)}break;case 5:Ig(a);break;case 4:Lg(a)}}
	function Mg(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Ng(a){a:{for(var b=a.return;null!==b;){if(Mg(b)){var c=b;break a}b=b.return}t("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:t("161")}c.effectTag&16&&(pe(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Mg(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
	if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h)}else b.insertBefore(e.stateNode,c);else d?(g=b,h=e.stateNode,8===g.nodeType?(f=g.parentNode,f.insertBefore(h,g)):(f=g,f.appendChild(h)),g=g._reactRootContainer,null!==g&&void 0!==g||null!==f.onclick||(f.onclick=ye)):b.appendChild(e.stateNode);
	else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
	function Lg(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?t("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return}c=!0}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(Kg(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return}g.sibling.return=g.return;g=g.sibling}e?
	(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode)}else if(4===b.tag?(d=b.stateNode.containerInfo,e=!0):Kg(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1)}b.sibling.return=b.return;b=b.sibling}}
	function Og(a,b){switch(b.tag){case 0:case 11:case 14:case 15:break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Ha]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cc(c,d);we(a,e);b=we(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?te(c,h):"dangerouslySetInnerHTML"===g?oe(c,h):"children"===g?pe(c,h):yc(c,g,h,b)}switch(a){case "input":Dc(c,d);break;case "textarea":ie(c,
	d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?fe(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?fe(c,!!d.multiple,d.defaultValue,!0):fe(c,!!d.multiple,d.multiple?[]:"",!1))}}}break;case 6:null===b.stateNode?t("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 12:break;case 13:c=b.memoizedState;a=b;null===c?d=!1:(d=!0,a=b.child,0===c.timedOutAt&&(c.timedOutAt=Qf()));if(null!==a)a:for(b=c=a;;){if(5===
	b.tag)a=b.stateNode,d?a.style.display="none":(a=b.stateNode,f=b.memoizedProps.style,f=void 0!==f&&null!==f&&f.hasOwnProperty("display")?f.display:null,a.style.display=se("display",f));else if(6===b.tag)b.stateNode.nodeValue=d?"":b.memoizedProps;else if(13===b.tag&&null!==b.memoizedState){a=b.child.sibling;a.return=b;b=a;continue}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===c)break a;for(;null===b.sibling;){if(null===b.return||b.return===c)break a;b=b.return}b.sibling.return=
	b.return;b=b.sibling}break;case 17:break;default:t("163")}}function Pg(a,b,c){c=mf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qg(d);Hg(a,b)};return c}
	function Rg(a,b,c){c=mf(c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Sg?Sg=new Set([this]):Sg.add(this));var c=b.value,e=b.stack;Hg(a,b);this.componentDidCatch(c,{componentStack:null!==e?e:""})});return c}
	function Tg(a){switch(a.tag){case 1:L(a.type)&&Me(a);var b=a.effectTag;return b&2048?(a.effectTag=b&-2049|64,a):null;case 3:return Jf(a),Ne(a),b=a.effectTag,0!==(b&64)?t("285"):void 0,a.effectTag=b&-2049|64,a;case 5:return Lf(a),null;case 13:return b=a.effectTag,b&2048?(a.effectTag=b&-2049|64,a):null;case 4:return Jf(a),null;case 10:return Bf(a),null;default:return null}}
	var Ug={readContext:Df},Vg=Xb.ReactCurrentOwner,Wg=1073741822,Xg=0,Yg=!1,R=null,S=null,T=0,Zg=-1,$g=!1,U=null,ah=!1,bh=null,ch=null,Sg=null;function dh(){if(null!==R)for(var a=R.return;null!==a;){var b=a;switch(b.tag){case 1:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Me(b);break;case 3:Jf(b);Ne(b);break;case 5:Lf(b);break;case 4:Jf(b);break;case 10:Bf(b)}a=a.return}S=null;T=0;Zg=-1;$g=!1;R=null}function Sf(){null!==ch&&(ba.unstable_cancelCallback(bh),ch())}
	function eh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&1024)){R=a;a:{var e=b;b=a;var f=T;var g=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:L(b.type)&&Me(b);break;case 3:Jf(b);Ne(b);g=b.stateNode;g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null);if(null===e||null===e.child)lg(b),b.effectTag&=-3;Bg(b);break;case 5:Lf(b);var h=Hf(Gf.current);f=b.type;if(null!==e&&null!=b.stateNode)Fg(e,b,f,g,h),e.ref!==b.ref&&(b.effectTag|=
	128);else if(g){var k=Hf(N.current);if(lg(b)){g=b;e=g.stateNode;var l=g.type,m=g.memoizedProps,q=h;e[Ga]=g;e[Ha]=m;f=void 0;h=l;switch(h){case "iframe":case "object":G("load",e);break;case "video":case "audio":for(l=0;l<bb.length;l++)G(bb[l],e);break;case "source":G("error",e);break;case "img":case "image":case "link":G("error",e);G("load",e);break;case "form":G("reset",e);G("submit",e);break;case "details":G("toggle",e);break;case "input":Bc(e,m);G("invalid",e);xe(q,"onChange");break;case "select":e._wrapperState=
	{wasMultiple:!!m.multiple};G("invalid",e);xe(q,"onChange");break;case "textarea":he(e,m),G("invalid",e),xe(q,"onChange")}ve(h,m);l=null;for(f in m)m.hasOwnProperty(f)&&(k=m[f],"children"===f?"string"===typeof k?e.textContent!==k&&(l=["children",k]):"number"===typeof k&&e.textContent!==""+k&&(l=["children",""+k]):sa.hasOwnProperty(f)&&null!=k&&xe(q,f));switch(h){case "input":Vb(e);Fc(e,m,!0);break;case "textarea":Vb(e);je(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
	(e.onclick=ye)}f=l;g.updateQueue=f;g=null!==f?!0:!1;g&&zg(b)}else{m=b;e=f;q=g;l=9===h.nodeType?h:h.ownerDocument;k===ke.html&&(k=le(e));k===ke.html?"script"===e?(e=l.createElement("div"),e.innerHTML="<script>\x3c/script>",l=e.removeChild(e.firstChild)):"string"===typeof q.is?l=l.createElement(e,{is:q.is}):(l=l.createElement(e),"select"===e&&q.multiple&&(l.multiple=!0)):l=l.createElementNS(k,e);e=l;e[Ga]=m;e[Ha]=g;Ag(e,b,!1,!1);q=e;l=f;m=g;var x=h,z=we(l,m);switch(l){case "iframe":case "object":G("load",
	q);h=m;break;case "video":case "audio":for(h=0;h<bb.length;h++)G(bb[h],q);h=m;break;case "source":G("error",q);h=m;break;case "img":case "image":case "link":G("error",q);G("load",q);h=m;break;case "form":G("reset",q);G("submit",q);h=m;break;case "details":G("toggle",q);h=m;break;case "input":Bc(q,m);h=Ac(q,m);G("invalid",q);xe(x,"onChange");break;case "option":h=ee(q,m);break;case "select":q._wrapperState={wasMultiple:!!m.multiple};h=n({},m,{value:void 0});G("invalid",q);xe(x,"onChange");break;case "textarea":he(q,
	m);h=ge(q,m);G("invalid",q);xe(x,"onChange");break;default:h=m}ve(l,h);k=void 0;var B=l,Q=q,v=h;for(k in v)if(v.hasOwnProperty(k)){var r=v[k];"style"===k?te(Q,r):"dangerouslySetInnerHTML"===k?(r=r?r.__html:void 0,null!=r&&oe(Q,r)):"children"===k?"string"===typeof r?("textarea"!==B||""!==r)&&pe(Q,r):"number"===typeof r&&pe(Q,""+r):"suppressContentEditableWarning"!==k&&"suppressHydrationWarning"!==k&&"autoFocus"!==k&&(sa.hasOwnProperty(k)?null!=r&&xe(x,k):null!=r&&yc(Q,k,r,z))}switch(l){case "input":Vb(q);
	Fc(q,m,!1);break;case "textarea":Vb(q);je(q,m);break;case "option":null!=m.value&&q.setAttribute("value",""+zc(m.value));break;case "select":h=q;h.multiple=!!m.multiple;q=m.value;null!=q?fe(h,!!m.multiple,q,!1):null!=m.defaultValue&&fe(h,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof h.onClick&&(q.onclick=ye)}(g=Be(f,g))&&zg(b);b.stateNode=e}null!==b.ref&&(b.effectTag|=128)}else null===b.stateNode?t("166"):void 0;break;case 6:e&&null!=b.stateNode?Gg(e,b,e.memoizedProps,g):("string"!==
	typeof g&&(null===b.stateNode?t("166"):void 0),e=Hf(Gf.current),Hf(N.current),lg(b)?(g=b,f=g.stateNode,e=g.memoizedProps,f[Ga]=g,(g=f.nodeValue!==e)&&zg(b)):(f=b,g=(9===e.nodeType?e:e.ownerDocument).createTextNode(g),g[Ga]=b,f.stateNode=g));break;case 11:break;case 13:g=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=f;R=b;break a}g=null!==g;f=null!==e&&null!==e.memoizedState;null!==e&&!g&&f&&(e=e.child.sibling,null!==e&&(h=b.firstEffect,null!==h?(b.firstEffect=e,e.nextEffect=h):(b.firstEffect=
	b.lastEffect=e,e.nextEffect=null),e.effectTag=8));if(g!==f||0===(b.effectTag&1)&&g)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:Jf(b);Bg(b);break;case 10:Bf(b);break;case 9:break;case 14:break;case 17:L(b.type)&&Me(b);break;default:t("156")}R=null}b=a;if(1===T||1!==b.childExpirationTime){g=0;for(f=b.child;null!==f;)e=f.expirationTime,h=f.childExpirationTime,e>g&&(g=e),h>g&&(g=h),f=f.sibling;b.childExpirationTime=g}if(null!==R)return R;null!==c&&0===(c.effectTag&1024)&&(null===
	c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a))}else{a=Tg(a,T);if(null!==a)return a.effectTag&=1023,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=1024)}if(null!==d)return d;if(null!==c)a=c;else break}return null}
	function fh(a){var b=yg(a.alternate,a,T);a.memoizedProps=a.pendingProps;null===b&&(b=eh(a));Vg.current=null;return b}
	function gh(a,b){Yg?t("243"):void 0;Sf();Yg=!0;Vg.currentDispatcher=Ug;var c=a.nextExpirationTimeToWorkOn;if(c!==T||a!==S||null===R)dh(),S=a,T=c,R=Ze(S.current,null,T),a.pendingCommitExpirationTime=0;var d=!1;do{try{if(b)for(;null!==R&&!hh();)R=fh(R);else for(;null!==R;)R=fh(R)}catch(B){if(zf=yf=xf=null,null===R)d=!0,Qg(B);else{null===R?t("271"):void 0;var e=R,f=e.return;if(null===f)d=!0,Qg(B);else{a:{var g=a,h=f,k=e,l=B;f=T;k.effectTag|=1024;k.firstEffect=k.lastEffect=null;if(null!==l&&"object"===
	typeof l&&"function"===typeof l.then){var m=l;l=h;var q=-1,x=-1;do{if(13===l.tag){var z=l.alternate;if(null!==z&&(z=z.memoizedState,null!==z)){x=10*(1073741822-z.timedOutAt);break}z=l.pendingProps.maxDuration;if("number"===typeof z)if(0>=z)q=0;else if(-1===q||z<q)q=z}l=l.return}while(null!==l);l=h;do{if(z=13===l.tag)z=void 0===l.memoizedProps.fallback?!1:null===l.memoizedState;if(z){h=ih.bind(null,g,l,k,0===(l.mode&1)?1073741823:f);m.then(h,h);if(0===(l.mode&1)){l.effectTag|=64;k.effectTag&=-1957;
	1===k.tag&&null===k.alternate&&(k.tag=17);k.expirationTime=f;break a}-1===q?g=1073741823:(-1===x&&(x=10*(1073741822-hf(g,f))-5E3),g=x+q);0<=g&&Zg<g&&(Zg=g);l.effectTag|=2048;l.expirationTime=f;break a}l=l.return}while(null!==l);l=Error((mc(k.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+nc(k))}$g=!0;l=vf(l,k);g=h;do{switch(g.tag){case 3:k=
	l;g.effectTag|=2048;g.expirationTime=f;f=Pg(g,k,f);pf(g,f);break a;case 1:if(k=l,h=g.type,m=g.stateNode,0===(g.effectTag&64)&&("function"===typeof h.getDerivedStateFromError||null!==m&&"function"===typeof m.componentDidCatch&&(null===Sg||!Sg.has(m)))){g.effectTag|=2048;g.expirationTime=f;f=Rg(g,k,f);pf(g,f);break a}}g=g.return}while(null!==g)}R=eh(e);continue}}}break}while(1);Yg=!1;zf=yf=xf=Vg.currentDispatcher=null;if(d)S=null,a.finishedWork=null;else if(null!==R)a.finishedWork=null;else{d=a.current.alternate;
	null===d?t("281"):void 0;S=null;if($g){e=a.latestPendingTime;f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e<c||0!==f&&f<c||0!==g&&g<c){gf(a,c);jh(a,d,c,a.expirationTime,-1);return}if(!a.didError&&b){a.didError=!0;c=a.nextExpirationTimeToWorkOn=c;b=a.expirationTime=1073741823;jh(a,d,c,b,-1);return}}b&&-1!==Zg?(gf(a,c),b=10*(1073741822-hf(a,c)),b<Zg&&(Zg=b),b=10*(1073741822-Qf()),b=Zg-b,jh(a,d,c,a.expirationTime,0>b?0:b)):(a.pendingCommitExpirationTime=c,a.finishedWork=d)}}
	function Jg(a,b){for(var c=a.return;null!==c;){switch(c.tag){case 1:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Sg||!Sg.has(d))){a=vf(b,a);a=Rg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}break;case 3:a=vf(b,a);a=Pg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}c=c.return}3===a.tag&&(c=vf(b,a),c=Pg(a,c,1073741823),of(a,c),Tf(a,1073741823))}
	function Rf(a,b){0!==Xg?a=Xg:Yg?a=ah?1073741823:T:b.mode&1?(a=kh?1073741822-10*(((1073741822-a+15)/10|0)+1):1073741822-25*(((1073741822-a+500)/25|0)+1),null!==S&&a===T&&--a):a=1073741823;kh&&(0===lh||a<lh)&&(lh=a);return a}
	function ih(a,b,c,d){var e=a.earliestSuspendedTime;var f=a.latestSuspendedTime;if(0!==e&&d<=e&&d>=f){f=e=d;a.didError=!1;var g=a.latestPingedTime;if(0===g||g>f)a.latestPingedTime=f;ff(f,a)}else e=Qf(),e=Rf(e,b),ef(a,e);0!==(b.mode&1)&&a===S&&T===d&&(S=null);mh(b,e);0===(b.mode&1)&&(mh(c,e),1===c.tag&&null!==c.stateNode&&(b=mf(e),b.tag=2,of(c,b)));c=a.expirationTime;0!==c&&nh(a,c)}
	function mh(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}return e}
	function Tf(a,b){a=mh(a,b);null!==a&&(!Yg&&0!==T&&b>T&&dh(),ef(a,b),Yg&&!ah&&S===a||nh(a,a.expirationTime),oh>ph&&(oh=0,t("185")))}function qh(a,b,c,d,e){var f=Xg;Xg=1073741823;try{return a(b,c,d,e)}finally{Xg=f}}var rh=null,V=null,sh=0,th=void 0,W=!1,uh=null,X=0,lh=0,vh=!1,wh=null,Z=!1,xh=!1,kh=!1,yh=null,zh=ba.unstable_now(),Ah=1073741822-(zh/10|0),Bh=Ah,ph=50,oh=0,Ch=null;function Dh(){Ah=1073741822-((ba.unstable_now()-zh)/10|0)}
	function Eh(a,b){if(0!==sh){if(b<sh)return;null!==th&&ba.unstable_cancelCallback(th)}sh=b;a=ba.unstable_now()-zh;th=ba.unstable_scheduleCallback(Fh,{timeout:10*(1073741822-b)-a})}function jh(a,b,c,d,e){a.expirationTime=d;0!==e||hh()?0<e&&(a.timeoutHandle=De(Gh.bind(null,a,b,c),e)):(a.pendingCommitExpirationTime=c,a.finishedWork=b)}function Gh(a,b,c){a.pendingCommitExpirationTime=c;a.finishedWork=b;Dh();Bh=Ah;Hh(a,c)}function Qf(){if(W)return Bh;Ih();if(0===X||1===X)Dh(),Bh=Ah;return Bh}
	function nh(a,b){null===a.nextScheduledRoot?(a.expirationTime=b,null===V?(rh=V=a,a.nextScheduledRoot=a):(V=V.nextScheduledRoot=a,V.nextScheduledRoot=rh)):b>a.expirationTime&&(a.expirationTime=b);W||(Z?xh&&(uh=a,X=1073741823,Jh(a,1073741823,!1)):1073741823===b?Kh(1073741823,!1):Eh(a,b))}
	function Ih(){var a=0,b=null;if(null!==V)for(var c=V,d=rh;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===V?t("244"):void 0;if(d===d.nextScheduledRoot){rh=V=d.nextScheduledRoot=null;break}else if(d===rh)rh=e=d.nextScheduledRoot,V.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V){V=c;V.nextScheduledRoot=rh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{e>a&&(a=e,b=d);if(d===V)break;if(1073741823===
	a)break;c=d;d=d.nextScheduledRoot}}uh=b;X=a}var Lh=!1;function hh(){return Lh?!0:ba.unstable_shouldYield()?Lh=!0:!1}function Fh(){try{if(!hh()&&null!==rh){Dh();var a=rh;do{var b=a.expirationTime;0!==b&&Ah<=b&&(a.nextExpirationTimeToWorkOn=Ah);a=a.nextScheduledRoot}while(a!==rh)}Kh(0,!0)}finally{Lh=!1}}
	function Kh(a,b){Ih();if(b)for(Dh(),Bh=Ah;null!==uh&&0!==X&&a<=X&&!(Lh&&Ah>X);)Jh(uh,X,Ah>X),Ih(),Dh(),Bh=Ah;else for(;null!==uh&&0!==X&&a<=X;)Jh(uh,X,!1),Ih();b&&(sh=0,th=null);0!==X&&Eh(uh,X);oh=0;Ch=null;if(null!==yh)for(a=yh,yh=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(d){vh||(vh=!0,wh=d)}}if(vh)throw a=wh,wh=null,vh=!1,a;}function Hh(a,b){W?t("253"):void 0;uh=a;X=b;Jh(a,b,!1);Kh(1073741823,!1)}
	function Jh(a,b,c){W?t("245"):void 0;W=!0;if(c){var d=a.finishedWork;null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&(hh()?a.finishedWork=d:Mh(a,d,b)))}else d=a.finishedWork,null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&Mh(a,d,b));W=!1}
	function Mh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime>=c&&(null===yh?yh=[d]:yh.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===Ch?oh++:(Ch=a,oh=0);ah=Yg=!0;a.current===b?t("177"):void 0;c=a.pendingCommitExpirationTime;0===c?t("261"):void 0;a.pendingCommitExpirationTime=0;d=b.expirationTime;var e=b.childExpirationTime;d=e>d?e:d;a.didError=!1;0===d?(a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=
	0):(e=a.latestPendingTime,0!==e&&(e>d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime>d&&(a.earliestPendingTime=a.latestPendingTime)),e=a.earliestSuspendedTime,0===e?ef(a,d):d<a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,ef(a,d)):d>e&&ef(a,d));ff(0,a);Vg.current=null;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;ze=Hd;e=Td();if(Ud(e)){if("selectionStart"in e)var f={start:e.selectionStart,
	end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g&&0!==g.rangeCount){f=g.anchorNode;var h=g.anchorOffset,k=g.focusNode;g=g.focusOffset;try{f.nodeType,k.nodeType}catch(db){f=null;break a}var l=0,m=-1,q=-1,x=0,z=0,B=e,Q=null;b:for(;;){for(var v;;){B!==f||0!==h&&3!==B.nodeType||(m=l+h);B!==k||0!==g&&3!==B.nodeType||(q=l+g);3===B.nodeType&&(l+=B.nodeValue.length);if(null===(v=B.firstChild))break;Q=B;B=v}for(;;){if(B===e)break b;Q===f&&
	++x===h&&(m=l);Q===k&&++z===g&&(q=l);if(null!==(v=B.nextSibling))break;B=Q;Q=B.parentNode}B=v}f=-1===m||-1===q?null:{start:m,end:q}}else f=null}f=f||{start:0,end:0}}else f=null;Ae={focusedElem:e,selectionRange:f};Hd=!1;for(U=d;null!==U;){e=!1;f=void 0;try{for(;null!==U;){if(U.effectTag&256)a:{var r=U.alternate;h=U;switch(h.tag){case 0:case 11:case 15:break a;case 1:if(h.effectTag&256&&null!==r){var u=r.memoizedProps,y=r.memoizedState,Y=h.stateNode,Th=Y.getSnapshotBeforeUpdate(h.elementType===h.type?
	u:O(h.type,u),y);Y.__reactInternalSnapshotBeforeUpdate=Th}break a;case 3:case 5:case 6:case 4:case 17:break a;default:t("163")}}U=U.nextEffect}}catch(db){e=!0,f=db}e&&(null===U?t("178"):void 0,Jg(U,f),null!==U&&(U=U.nextEffect))}for(U=d;null!==U;){r=!1;u=void 0;try{for(;null!==U;){var w=U.effectTag;w&16&&pe(U.stateNode,"");if(w&128){var C=U.alternate;if(null!==C){var p=C.ref;null!==p&&("function"===typeof p?p(null):p.current=null)}}switch(w&14){case 2:Ng(U);U.effectTag&=-3;break;case 6:Ng(U);U.effectTag&=
	-3;Og(U.alternate,U);break;case 4:Og(U.alternate,U);break;case 8:y=U,Lg(y),y.return=null,y.child=null,y.alternate&&(y.alternate.child=null,y.alternate.return=null)}U=U.nextEffect}}catch(db){r=!0,u=db}r&&(null===U?t("178"):void 0,Jg(U,u),null!==U&&(U=U.nextEffect))}p=Ae;C=Td();w=p.focusedElem;u=p.selectionRange;if(C!==w&&w&&w.ownerDocument&&Sd(w.ownerDocument.documentElement,w)){null!==u&&Ud(w)&&(C=u.start,p=u.end,void 0===p&&(p=C),"selectionStart"in w?(w.selectionStart=C,w.selectionEnd=Math.min(p,
	w.value.length)):(p=(C=w.ownerDocument||document)&&C.defaultView||window,p.getSelection&&(p=p.getSelection(),y=w.textContent.length,r=Math.min(u.start,y),u=void 0===u.end?r:Math.min(u.end,y),!p.extend&&r>u&&(y=u,u=r,r=y),y=Rd(w,r),Y=Rd(w,u),y&&Y&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==Y.node||p.focusOffset!==Y.offset)&&(C=C.createRange(),C.setStart(y.node,y.offset),p.removeAllRanges(),r>u?(p.addRange(C),p.extend(Y.node,Y.offset)):(C.setEnd(Y.node,Y.offset),
	p.addRange(C))))));C=[];for(p=w;p=p.parentNode;)1===p.nodeType&&C.push({element:p,left:p.scrollLeft,top:p.scrollTop});"function"===typeof w.focus&&w.focus();for(w=0;w<C.length;w++)p=C[w],p.element.scrollLeft=p.left,p.element.scrollTop=p.top}Ae=null;Hd=!!ze;ze=null;a.current=b;for(U=d;null!==U;){d=!1;w=void 0;try{for(C=c;null!==U;){var Fb=U.effectTag;if(Fb&36){var Gb=U.alternate;p=U;r=C;switch(p.tag){case 0:case 11:case 15:break;case 1:var wc=p.stateNode;if(p.effectTag&4)if(null===Gb)wc.componentDidMount();
	else{var ci=p.elementType===p.type?Gb.memoizedProps:O(p.type,Gb.memoizedProps);wc.componentDidUpdate(ci,Gb.memoizedState,wc.__reactInternalSnapshotBeforeUpdate)}var Cg=p.updateQueue;null!==Cg&&tf(p,Cg,wc,r);break;case 3:var Dg=p.updateQueue;if(null!==Dg){u=null;if(null!==p.child)switch(p.child.tag){case 5:u=p.child.stateNode;break;case 1:u=p.child.stateNode}tf(p,Dg,u,r)}break;case 5:var di=p.stateNode;null===Gb&&p.effectTag&4&&Be(p.type,p.memoizedProps)&&di.focus();break;case 6:break;case 4:break;
	case 12:break;case 13:break;case 17:break;default:t("163")}}if(Fb&128){var Ic=U.ref;if(null!==Ic){var Eg=U.stateNode;switch(U.tag){case 5:var ce=Eg;break;default:ce=Eg}"function"===typeof Ic?Ic(ce):Ic.current=ce}}U=U.nextEffect}}catch(db){d=!0,w=db}d&&(null===U?t("178"):void 0,Jg(U,w),null!==U&&(U=U.nextEffect))}Yg=ah=!1;"function"===typeof Se&&Se(b.stateNode);Fb=b.expirationTime;b=b.childExpirationTime;b=b>Fb?b:Fb;0===b&&(Sg=null);a.expirationTime=b;a.finishedWork=null}
	function Qg(a){null===uh?t("246"):void 0;uh.expirationTime=0;vh||(vh=!0,wh=a)}function Nh(a,b){var c=Z;Z=!0;try{return a(b)}finally{(Z=c)||W||Kh(1073741823,!1)}}function Oh(a,b){if(Z&&!xh){xh=!0;try{return a(b)}finally{xh=!1}}return a(b)}function Ph(a,b,c){if(kh)return a(b,c);Z||W||0===lh||(Kh(lh,!1),lh=0);var d=kh,e=Z;Z=kh=!0;try{return a(b,c)}finally{kh=d,(Z=e)||W||Kh(1073741823,!1)}}
	function Qh(a,b,c,d,e){var f=b.current;a:if(c){c=c._reactInternalFiber;b:{2===kd(c)&&1===c.tag?void 0:t("170");var g=c;do{switch(g.tag){case 3:g=g.stateNode.context;break b;case 1:if(L(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break b}}g=g.return}while(null!==g);t("171");g=void 0}if(1===c.tag){var h=c.type;if(L(h)){c=Pe(c,h,g);break a}}c=g}else c=Je;null===b.context?b.context=c:b.pendingContext=c;b=e;e=mf(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);
	Sf();of(f,e);Tf(f,d);return d}function Rh(a,b,c,d){var e=b.current,f=Qf();e=Rf(f,e);return Qh(a,b,c,e,d)}function Sh(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function Uh(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$b,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	Cb=function(a,b,c){switch(b){case "input":Dc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=La(d);e?void 0:t("90");Wb(d);Dc(d,e)}}}break;case "textarea":ie(a,c);break;case "select":b=c.value,null!=b&&fe(a,!!c.multiple,b,!1)}};
	function Vh(a){var b=1073741822-25*(((1073741822-Qf()+500)/25|0)+1);b>=Wg&&(b=Wg-1);this._expirationTime=Wg=b;this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}Vh.prototype.render=function(a){this._defer?void 0:t("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new Wh;Qh(a,b,null,c,d._onCommit);return d};
	Vh.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
	Vh.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:t("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?t("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;Hh(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children)}else this._next=
	null,this._defer=!1};Vh.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function Wh(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}Wh.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
	Wh.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?t("191",c):void 0;c()}}};
	function Xh(a,b,c){b=M(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:c,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null};this._internalRoot=b.stateNode=a}
	Xh.prototype.render=function(a,b){var c=this._internalRoot,d=new Wh;b=void 0===b?null:b;null!==b&&d.then(b);Rh(a,c,null,d._onCommit);return d};Xh.prototype.unmount=function(a){var b=this._internalRoot,c=new Wh;a=void 0===a?null:a;null!==a&&c.then(a);Rh(null,b,null,c._onCommit);return c};Xh.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new Wh;c=void 0===c?null:c;null!==c&&e.then(c);Rh(b,d,a,e._onCommit);return e};
	Xh.prototype.createBatch=function(){var a=new Vh(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime>=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function Yh(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Kb=Nh;Lb=Ph;Mb=function(){W||0===lh||(Kh(lh,!1),lh=0)};
	function Zh(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new Xh(a,!1,b)}
	function $h(a,b,c,d,e){Yh(c)?void 0:t("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=Sh(f._internalRoot);g.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=Zh(c,d);if("function"===typeof e){var h=e;e=function(){var a=Sh(f._internalRoot);h.call(a)}}Oh(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return Sh(f._internalRoot)}
	function ai(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Yh(b)?void 0:t("200");return Uh(a,b,null,c)}
	var bi={createPortal:ai,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?t("188"):t("268",Object.keys(a)));a=nd(b);a=null===a?null:a.stateNode;return a},hydrate:function(a,b,c){return $h(null,a,b,!0,c)},render:function(a,b,c){return $h(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?t("38"):void 0;return $h(a,b,c,!1,d)},unmountComponentAtNode:function(a){Yh(a)?
	void 0:t("40");return a._reactRootContainer?(Oh(function(){$h(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return ai.apply(void 0,arguments)},unstable_batchedUpdates:Nh,unstable_interactiveUpdates:Ph,flushSync:function(a,b){W?t("187"):void 0;var c=Z;Z=!0;try{return qh(a,b)}finally{Z=c,Kh(1073741823,!1)}},unstable_flushControlled:function(a){var b=Z;Z=!0;try{qh(a)}finally{(Z=b)||W||Kh(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[Ja,
	Ka,La,Ca.injectEventPluginsByName,qa,Ra,function(a){za(a,Qa)},Ib,Jb,Jd,Ea]},unstable_createRoot:function(a,b){Yh(a)?void 0:t("299","unstable_createRoot");return new Xh(a,!0,null!=b&&!0===b.hydrate)}};(function(a){var b=a.findFiberByHostInstance;return Ve(n({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ia,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});
	var ei={default:bi},fi=ei&&bi||ei;module.exports=fi.default||fi;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(12);
	} else {
	  module.exports = __webpack_require__(13);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	/** @license React v16.6.1
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var d=null,f=!1,h=3,k=-1,l=-1,m=!1,n=!1;function p(){if(!m){var a=d.expirationTime;n?q():n=!0;r(t,a)}}
	function u(){var a=d,b=d.next;if(d===b)d=null;else{var c=d.previous;d=c.next=b;b.previous=c}a.next=a.previous=null;c=a.callback;b=a.expirationTime;a=a.priorityLevel;var e=h,Q=l;h=a;l=b;try{var g=c()}finally{h=e,l=Q}if("function"===typeof g)if(g={callback:g,priorityLevel:a,expirationTime:b,next:null,previous:null},null===d)d=g.next=g.previous=g;else{c=null;a=d;do{if(a.expirationTime>=b){c=a;break}a=a.next}while(a!==d);null===c?c=d:c===d&&(d=g,p());b=c.previous;b.next=c.previous=g;g.next=c;g.previous=
	b}}function v(){if(-1===k&&null!==d&&1===d.priorityLevel){m=!0;try{do u();while(null!==d&&1===d.priorityLevel)}finally{m=!1,null!==d?p():n=!1}}}function t(a){m=!0;var b=f;f=a;try{if(a)for(;null!==d;){var c=exports.unstable_now();if(d.expirationTime<=c){do u();while(null!==d&&d.expirationTime<=c)}else break}else if(null!==d){do u();while(null!==d&&!w())}}finally{m=!1,f=b,null!==d?p():n=!1,v()}}
	var x=Date,y="function"===typeof setTimeout?setTimeout:void 0,z="function"===typeof clearTimeout?clearTimeout:void 0,A="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,B="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,C,D;function E(a){C=A(function(b){z(D);a(b)});D=y(function(){B(C);a(exports.unstable_now())},100)}
	if("object"===typeof performance&&"function"===typeof performance.now){var F=performance;exports.unstable_now=function(){return F.now()}}else exports.unstable_now=function(){return x.now()};var r,q,w;
	if("undefined"!==typeof window&&window._schedMock){var G=window._schedMock;r=G[0];q=G[1];w=G[2]}else if("undefined"===typeof window||"function"!==typeof window.addEventListener){var H=null,I=-1,J=function(a,b){if(null!==H){var c=H;H=null;try{I=b,c(a)}finally{I=-1}}};r=function(a,b){-1!==I?setTimeout(r,0,a,b):(H=a,setTimeout(J,b,!0,b),setTimeout(J,1073741823,!1,1073741823))};q=function(){H=null};w=function(){return!1};exports.unstable_now=function(){return-1===I?0:I}}else{"undefined"!==typeof console&&
	("function"!==typeof A&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K=null,L=!1,M=-1,N=!1,O=!1,P=0,R=33,S=33;w=function(){return P<=exports.unstable_now()};var T="__reactIdleCallback$"+Math.random().toString(36).slice(2);
	window.addEventListener("message",function(a){if(a.source===window&&a.data===T){L=!1;a=K;var b=M;K=null;M=-1;var c=exports.unstable_now(),e=!1;if(0>=P-c)if(-1!==b&&b<=c)e=!0;else{N||(N=!0,E(U));K=a;M=b;return}if(null!==a){O=!0;try{a(e)}finally{O=!1}}}},!1);var U=function(a){if(null!==K){E(U);var b=a-P+S;b<S&&R<S?(8>b&&(b=8),S=b<R?R:b):R=b;P=a+S;L||(L=!0,window.postMessage(T,"*"))}else N=!1};r=function(a,b){K=a;M=b;O||0>b?window.postMessage(T,"*"):N||(N=!0,E(U))};q=function(){K=null;L=!1;M=-1}}
	exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=h,e=k;h=a;k=exports.unstable_now();try{return b()}finally{h=c,k=e,v()}};
	exports.unstable_scheduleCallback=function(a,b){var c=-1!==k?k:exports.unstable_now();if("object"===typeof b&&null!==b&&"number"===typeof b.timeout)b=c+b.timeout;else switch(h){case 1:b=c+-1;break;case 2:b=c+250;break;case 5:b=c+1073741823;break;case 4:b=c+1E4;break;default:b=c+5E3}a={callback:a,priorityLevel:h,expirationTime:b,next:null,previous:null};if(null===d)d=a.next=a.previous=a,p();else{c=null;var e=d;do{if(e.expirationTime>b){c=e;break}e=e.next}while(e!==d);null===c?c=d:c===d&&(d=a,p());
	b=c.previous;b.next=c.previous=a;a.next=c;a.previous=b}return a};exports.unstable_cancelCallback=function(a){var b=a.next;if(null!==b){if(b===a)d=null;else{a===d&&(d=b);var c=a.previous;c.next=b;b.previous=c}a.next=a.previous=null}};exports.unstable_wrapCallback=function(a){var b=h;return function(){var c=h,e=k;h=b;k=exports.unstable_now();try{return a.apply(this,arguments)}finally{h=c,k=e,v()}}};exports.unstable_getCurrentPriorityLevel=function(){return h};
	exports.unstable_shouldYield=function(){return!f&&(null!==d&&d.expirationTime<l||w())};


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.1
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	/* eslint-disable no-var */

	// TODO: Use symbols?
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	// Times out immediately
	var IMMEDIATE_PRIORITY_TIMEOUT = -1;
	// Eventually times out
	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000;
	// Never times out
	var IDLE_PRIORITY = maxSigned31BitInt;

	// Callbacks are stored as a circular, doubly linked list.
	var firstCallbackNode = null;

	var currentDidTimeout = false;
	var currentPriorityLevel = NormalPriority;
	var currentEventStartTime = -1;
	var currentExpirationTime = -1;

	// This is set when a callback is being executed, to prevent re-entrancy.
	var isExecutingCallback = false;

	var isHostCallbackScheduled = false;

	var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	function ensureHostCallbackIsScheduled() {
	  if (isExecutingCallback) {
	    // Don't schedule work yet; wait until the next time we yield.
	    return;
	  }
	  // Schedule the host callback using the earliest expiration in the list.
	  var expirationTime = firstCallbackNode.expirationTime;
	  if (!isHostCallbackScheduled) {
	    isHostCallbackScheduled = true;
	  } else {
	    // Cancel the existing host callback.
	    cancelHostCallback();
	  }
	  requestHostCallback(flushWork, expirationTime);
	}

	function flushFirstCallback() {
	  var flushedNode = firstCallbackNode;

	  // Remove the node from the list before calling the callback. That way the
	  // list is in a consistent state even if the callback throws.
	  var next = firstCallbackNode.next;
	  if (firstCallbackNode === next) {
	    // This is the last callback in the list.
	    firstCallbackNode = null;
	    next = null;
	  } else {
	    var lastCallbackNode = firstCallbackNode.previous;
	    firstCallbackNode = lastCallbackNode.next = next;
	    next.previous = lastCallbackNode;
	  }

	  flushedNode.next = flushedNode.previous = null;

	  // Now it's safe to call the callback.
	  var callback = flushedNode.callback;
	  var expirationTime = flushedNode.expirationTime;
	  var priorityLevel = flushedNode.priorityLevel;
	  var previousPriorityLevel = currentPriorityLevel;
	  var previousExpirationTime = currentExpirationTime;
	  currentPriorityLevel = priorityLevel;
	  currentExpirationTime = expirationTime;
	  var continuationCallback;
	  try {
	    continuationCallback = callback();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentExpirationTime = previousExpirationTime;
	  }

	  // A callback may return a continuation. The continuation should be scheduled
	  // with the same priority and expiration as the just-finished callback.
	  if (typeof continuationCallback === 'function') {
	    var continuationNode = {
	      callback: continuationCallback,
	      priorityLevel: priorityLevel,
	      expirationTime: expirationTime,
	      next: null,
	      previous: null
	    };

	    // Insert the new callback into the list, sorted by its expiration. This is
	    // almost the same as the code in `scheduleCallback`, except the callback
	    // is inserted into the list *before* callbacks of equal expiration instead
	    // of after.
	    if (firstCallbackNode === null) {
	      // This is the first callback in the list.
	      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
	    } else {
	      var nextAfterContinuation = null;
	      var node = firstCallbackNode;
	      do {
	        if (node.expirationTime >= expirationTime) {
	          // This callback expires at or after the continuation. We will insert
	          // the continuation *before* this callback.
	          nextAfterContinuation = node;
	          break;
	        }
	        node = node.next;
	      } while (node !== firstCallbackNode);

	      if (nextAfterContinuation === null) {
	        // No equal or lower priority callback was found, which means the new
	        // callback is the lowest priority callback in the list.
	        nextAfterContinuation = firstCallbackNode;
	      } else if (nextAfterContinuation === firstCallbackNode) {
	        // The new callback is the highest priority callback in the list.
	        firstCallbackNode = continuationNode;
	        ensureHostCallbackIsScheduled();
	      }

	      var previous = nextAfterContinuation.previous;
	      previous.next = nextAfterContinuation.previous = continuationNode;
	      continuationNode.next = nextAfterContinuation;
	      continuationNode.previous = previous;
	    }
	  }
	}

	function flushImmediateWork() {
	  if (
	  // Confirm we've exited the outer most event handler
	  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
	    isExecutingCallback = true;
	    try {
	      do {
	        flushFirstCallback();
	      } while (
	      // Keep flushing until there are no more immediate callbacks
	      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
	    } finally {
	      isExecutingCallback = false;
	      if (firstCallbackNode !== null) {
	        // There's still work remaining. Request another callback.
	        ensureHostCallbackIsScheduled();
	      } else {
	        isHostCallbackScheduled = false;
	      }
	    }
	  }
	}

	function flushWork(didTimeout) {
	  isExecutingCallback = true;
	  var previousDidTimeout = currentDidTimeout;
	  currentDidTimeout = didTimeout;
	  try {
	    if (didTimeout) {
	      // Flush all the expired callbacks without yielding.
	      while (firstCallbackNode !== null) {
	        // Read the current time. Flush all the callbacks that expire at or
	        // earlier than that time. Then read the current time again and repeat.
	        // This optimizes for as few performance.now calls as possible.
	        var currentTime = exports.unstable_now();
	        if (firstCallbackNode.expirationTime <= currentTime) {
	          do {
	            flushFirstCallback();
	          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);
	          continue;
	        }
	        break;
	      }
	    } else {
	      // Keep flushing callbacks until we run out of time in the frame.
	      if (firstCallbackNode !== null) {
	        do {
	          flushFirstCallback();
	        } while (firstCallbackNode !== null && !shouldYieldToHost());
	      }
	    }
	  } finally {
	    isExecutingCallback = false;
	    currentDidTimeout = previousDidTimeout;
	    if (firstCallbackNode !== null) {
	      // There's still work remaining. Request another callback.
	      ensureHostCallbackIsScheduled();
	    } else {
	      isHostCallbackScheduled = false;
	    }
	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;
	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  var previousEventStartTime = currentEventStartTime;
	  currentPriorityLevel = priorityLevel;
	  currentEventStartTime = exports.unstable_now();

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentEventStartTime = previousEventStartTime;

	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    var previousEventStartTime = currentEventStartTime;
	    currentPriorityLevel = parentPriorityLevel;
	    currentEventStartTime = exports.unstable_now();

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	      currentEventStartTime = previousEventStartTime;
	      flushImmediateWork();
	    }
	  };
	}

	function unstable_scheduleCallback(callback, deprecated_options) {
	  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

	  var expirationTime;
	  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
	    // FIXME: Remove this branch once we lift expiration times out of React.
	    expirationTime = startTime + deprecated_options.timeout;
	  } else {
	    switch (currentPriorityLevel) {
	      case ImmediatePriority:
	        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
	        break;
	      case UserBlockingPriority:
	        expirationTime = startTime + USER_BLOCKING_PRIORITY;
	        break;
	      case IdlePriority:
	        expirationTime = startTime + IDLE_PRIORITY;
	        break;
	      case LowPriority:
	        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
	        break;
	      case NormalPriority:
	      default:
	        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
	    }
	  }

	  var newNode = {
	    callback: callback,
	    priorityLevel: currentPriorityLevel,
	    expirationTime: expirationTime,
	    next: null,
	    previous: null
	  };

	  // Insert the new callback into the list, ordered first by expiration, then
	  // by insertion. So the new callback is inserted any other callback with
	  // equal expiration.
	  if (firstCallbackNode === null) {
	    // This is the first callback in the list.
	    firstCallbackNode = newNode.next = newNode.previous = newNode;
	    ensureHostCallbackIsScheduled();
	  } else {
	    var next = null;
	    var node = firstCallbackNode;
	    do {
	      if (node.expirationTime > expirationTime) {
	        // The new callback expires before this one.
	        next = node;
	        break;
	      }
	      node = node.next;
	    } while (node !== firstCallbackNode);

	    if (next === null) {
	      // No callback with a later expiration was found, which means the new
	      // callback has the latest expiration in the list.
	      next = firstCallbackNode;
	    } else if (next === firstCallbackNode) {
	      // The new callback has the earliest expiration in the entire list.
	      firstCallbackNode = newNode;
	      ensureHostCallbackIsScheduled();
	    }

	    var previous = next.previous;
	    previous.next = next.previous = newNode;
	    newNode.next = next;
	    newNode.previous = previous;
	  }

	  return newNode;
	}

	function unstable_cancelCallback(callbackNode) {
	  var next = callbackNode.next;
	  if (next === null) {
	    // Already cancelled.
	    return;
	  }

	  if (next === callbackNode) {
	    // This is the only scheduled callback. Clear the list.
	    firstCallbackNode = null;
	  } else {
	    // Remove the callback from its position in the list.
	    if (callbackNode === firstCallbackNode) {
	      firstCallbackNode = next;
	    }
	    var previous = callbackNode.previous;
	    previous.next = next;
	    next.previous = previous;
	  }

	  callbackNode.next = callbackNode.previous = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
	}

	// The remaining code is essentially a polyfill for requestIdleCallback. It
	// works by scheduling a requestAnimationFrame, storing the time for the start
	// of the frame, then scheduling a postMessage which gets scheduled after paint.
	// Within the postMessage handler do as much work as possible until time + frame
	// rate. By separating the idle call into a separate event tick we ensure that
	// layout, paint and other browser work is counted against the available time.
	// The frame rate is dynamically adjusted.

	// We capture a local reference to any global, in case it gets polyfilled after
	// this module is initially evaluated. We want to be using a
	// consistent implementation.
	var localDate = Date;

	// This initialization code may run even on server environments if a component
	// just imports ReactDOM (e.g. for findDOMNode). Some environments might not
	// have setTimeout or clearTimeout. However, we always expect them to be defined
	// on the client. https://github.com/facebook/react/pull/13088
	var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

	// We don't expect either of these to necessarily be defined, but we will error
	// later if they are missing on the client.
	var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
	var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

	// requestAnimationFrame does not run when the tab is in the background. If
	// we're backgrounded we prefer for that work to happen so that the page
	// continues to load in the background. So we also schedule a 'setTimeout' as
	// a fallback.
	// TODO: Need a better heuristic for backgrounded work.
	var ANIMATION_FRAME_TIMEOUT = 100;
	var rAFID;
	var rAFTimeoutID;
	var requestAnimationFrameWithTimeout = function (callback) {
	  // schedule rAF and also a setTimeout
	  rAFID = localRequestAnimationFrame(function (timestamp) {
	    // cancel the setTimeout
	    localClearTimeout(rAFTimeoutID);
	    callback(timestamp);
	  });
	  rAFTimeoutID = localSetTimeout(function () {
	    // cancel the requestAnimationFrame
	    localCancelAnimationFrame(rAFID);
	    callback(exports.unstable_now());
	  }, ANIMATION_FRAME_TIMEOUT);
	};

	if (hasNativePerformanceNow) {
	  var Performance = performance;
	  exports.unstable_now = function () {
	    return Performance.now();
	  };
	} else {
	  exports.unstable_now = function () {
	    return localDate.now();
	  };
	}

	var requestHostCallback;
	var cancelHostCallback;
	var shouldYieldToHost;

	if (typeof window !== 'undefined' && window._schedMock) {
	  // Dynamic injection, only for testing purposes.
	  var impl = window._schedMock;
	  requestHostCallback = impl[0];
	  cancelHostCallback = impl[1];
	  shouldYieldToHost = impl[2];
	} else if (
	// If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' ||
	// "addEventListener" might not be available on the window object
	// if this is a mocked "window" object. So we need to validate that too.
	typeof window.addEventListener !== 'function') {
	  var _callback = null;
	  var _currentTime = -1;
	  var _flushCallback = function (didTimeout, ms) {
	    if (_callback !== null) {
	      var cb = _callback;
	      _callback = null;
	      try {
	        _currentTime = ms;
	        cb(didTimeout);
	      } finally {
	        _currentTime = -1;
	      }
	    }
	  };
	  requestHostCallback = function (cb, ms) {
	    if (_currentTime !== -1) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb, ms);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, ms, true, ms);
	      setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);
	    }
	  };
	  cancelHostCallback = function () {
	    _callback = null;
	  };
	  shouldYieldToHost = function () {
	    return false;
	  };
	  exports.unstable_now = function () {
	    return _currentTime === -1 ? 0 : _currentTime;
	  };
	} else {
	  if (typeof console !== 'undefined') {
	    // TODO: Remove fb.me link
	    if (typeof localRequestAnimationFrame !== 'function') {
	      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	    if (typeof localCancelAnimationFrame !== 'function') {
	      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  var scheduledHostCallback = null;
	  var isMessageEventScheduled = false;
	  var timeoutTime = -1;

	  var isAnimationFrameScheduled = false;

	  var isFlushingHostCallback = false;

	  var frameDeadline = 0;
	  // We start out assuming that we run at 30fps but then the heuristic tracking
	  // will adjust this value to a faster fps if we get more frequent animation
	  // frames.
	  var previousFrameTime = 33;
	  var activeFrameTime = 33;

	  shouldYieldToHost = function () {
	    return frameDeadline <= exports.unstable_now();
	  };

	  // We use the postMessage trick to defer idle work until after the repaint.
	  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
	  var idleTick = function (event) {
	    if (event.source !== window || event.data !== messageKey) {
	      return;
	    }

	    isMessageEventScheduled = false;

	    var prevScheduledCallback = scheduledHostCallback;
	    var prevTimeoutTime = timeoutTime;
	    scheduledHostCallback = null;
	    timeoutTime = -1;

	    var currentTime = exports.unstable_now();

	    var didTimeout = false;
	    if (frameDeadline - currentTime <= 0) {
	      // There's no time left in this idle period. Check if the callback has
	      // a timeout and whether it's been exceeded.
	      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
	        // Exceeded the timeout. Invoke the callback even though there's no
	        // time left.
	        didTimeout = true;
	      } else {
	        // No timeout.
	        if (!isAnimationFrameScheduled) {
	          // Schedule another animation callback so we retry later.
	          isAnimationFrameScheduled = true;
	          requestAnimationFrameWithTimeout(animationTick);
	        }
	        // Exit without invoking the callback.
	        scheduledHostCallback = prevScheduledCallback;
	        timeoutTime = prevTimeoutTime;
	        return;
	      }
	    }

	    if (prevScheduledCallback !== null) {
	      isFlushingHostCallback = true;
	      try {
	        prevScheduledCallback(didTimeout);
	      } finally {
	        isFlushingHostCallback = false;
	      }
	    }
	  };
	  // Assumes that we have addEventListener in this environment. Might need
	  // something better for old IE.
	  window.addEventListener('message', idleTick, false);

	  var animationTick = function (rafTime) {
	    if (scheduledHostCallback !== null) {
	      // Eagerly schedule the next animation callback at the beginning of the
	      // frame. If the scheduler queue is not empty at the end of the frame, it
	      // will continue flushing inside that callback. If the queue *is* empty,
	      // then it will exit immediately. Posting the callback at the start of the
	      // frame ensures it's fired within the earliest possible frame. If we
	      // waited until the end of the frame to post the callback, we risk the
	      // browser skipping a frame and not firing the callback until the frame
	      // after that.
	      requestAnimationFrameWithTimeout(animationTick);
	    } else {
	      // No pending work. Exit.
	      isAnimationFrameScheduled = false;
	      return;
	    }

	    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
	    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
	      if (nextFrameTime < 8) {
	        // Defensive coding. We don't support higher frame rates than 120hz.
	        // If the calculated frame time gets lower than 8, it is probably a bug.
	        nextFrameTime = 8;
	      }
	      // If one frame goes long, then the next one can be short to catch up.
	      // If two frames are short in a row, then that's an indication that we
	      // actually have a higher frame rate than what we're currently optimizing.
	      // We adjust our heuristic dynamically accordingly. For example, if we're
	      // running on 120hz display or 90hz VR display.
	      // Take the max of the two in case one of them was an anomaly due to
	      // missed frame deadlines.
	      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
	    } else {
	      previousFrameTime = nextFrameTime;
	    }
	    frameDeadline = rafTime + activeFrameTime;
	    if (!isMessageEventScheduled) {
	      isMessageEventScheduled = true;
	      window.postMessage(messageKey, '*');
	    }
	  };

	  requestHostCallback = function (callback, absoluteTimeout) {
	    scheduledHostCallback = callback;
	    timeoutTime = absoluteTimeout;
	    if (isFlushingHostCallback || absoluteTimeout < 0) {
	      // Don't wait for the next frame. Continue working ASAP, in a new event.
	      window.postMessage(messageKey, '*');
	    } else if (!isAnimationFrameScheduled) {
	      // If rAF didn't already schedule one, we need to schedule a frame.
	      // TODO: If this rAF doesn't materialize because the browser throttles, we
	      // might want to still have setTimeout trigger rIC as a backup to ensure
	      // that we keep performing work.
	      isAnimationFrameScheduled = true;
	      requestAnimationFrameWithTimeout(animationTick);
	    }
	  };

	  cancelHostCallback = function () {
	    scheduledHostCallback = null;
	    isMessageEventScheduled = false;
	    timeoutTime = -1;
	  };
	}

	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_shouldYield = unstable_shouldYield;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.1
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	var React = __webpack_require__(2);
	var _assign = __webpack_require__(5);
	var checkPropTypes = __webpack_require__(7);
	var scheduler = __webpack_require__(11);
	var tracing = __webpack_require__(15);

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);
	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // untintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!

	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
	      var evt = document.createEvent('Event');

	      // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.
	      var didError = true;

	      // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.
	      var windowEvent = window.event;

	      // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688
	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.
	      var funcArgs = Array.prototype.slice.call(arguments, 3);
	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false);

	        // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.
	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      }

	      // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.
	      var error = void 0;
	      // Use this to track whether the error event is ever called.
	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;
	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }
	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {
	              // Ignore.
	            }
	          }
	        }
	      }

	      // Create a fake event type.
	      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

	      // Attach our event handlers
	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false);

	      // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }
	        this.onError(error);
	      }

	      // Remove our event listeners
	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	// Used by Fiber to simulate a try-catch.
	var hasError = false;
	var caughtError = null;

	// Used by event system to capture/rethrow the first error.
	var hasRethrowError = false;
	var rethrowError = null;

	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};

	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}

	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);
	  if (hasError) {
	    var error = clearCaughtError();
	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}

	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */
	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}

	function hasCaughtError() {
	  return hasError;
	}

	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
	    if (plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
	  eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */

	/**
	 * Ordered list of injected plugins.
	 */
	var plugins = [];

	/**
	 * Mapping from event name to dispatch config
	 */
	var eventNameDispatchConfigs = {};

	/**
	 * Mapping from registration name to plugin module
	 */
	var registrationNameModules = {};

	/**
	 * Mapping from registration name to event name
	 */
	var registrationNameDependencies = {};

	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */
	var possibleRegistrationNames = {};
	// Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginOrder}
	 */
	function injectEventPluginOrder(injectedEventPluginOrder) {
	  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
	  // Clone the ordering so it cannot be dynamically mutated.
	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}

	/**
	 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginsByName}
	 */
	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;
	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }
	    var pluginModule = injectedNamesToPlugins[pluginName];
	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }
	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;

	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;
	  {
	    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	  }
	}

	var validateEventDispatches = void 0;
	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */


	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */


	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */

	/**
	 * Methods for injecting dependencies.
	 */
	var injection = {
	  /**
	   * @param {array} InjectedEventPluginOrder
	   * @public
	   */
	  injectEventPluginOrder: injectEventPluginOrder,

	  /**
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   */
	  injectEventPluginsByName: injectEventPluginsByName
	};

	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */
	function getListener(inst, registrationName) {
	  var listener = void 0;

	  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon
	  var stateNode = inst.stateNode;
	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }
	  var props = getFiberCurrentPropsFromNode(stateNode);
	  if (!props) {
	    // Work in progress.
	    return null;
	  }
	  listener = props[registrationName];
	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }
	  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
	  return listener;
	}

	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */
	function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = null;
	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];
	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }
	  return events;
	}

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  }

	  // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.
	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
	  // This would be a good time to rethrow if any of the event handlers threw.
	  rethrowCaughtError();
	}

	function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	  runEventsInBatch(events);
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class
	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  while (!node[internalInstanceKey]) {
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var inst = node[internalInstanceKey];
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber, this will always be the deepest root.
	    return inst;
	  }

	  return null;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey];
	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText) {
	      return inst;
	    } else {
	      return null;
	    }
	  }
	  return null;
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  }

	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  invariant(false, 'getNodeFromInstance: Invalid argument.');
	}

	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}

	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return;
	    // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);
	  if (inst) {
	    return inst;
	  }
	  return null;
	}

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }
	    instA = getParent(instA);
	    instB = getParent(instB);
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */


	/**
	 * Return the parent instance of the passed-in instance.
	 */


	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }
	  var i = void 0;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (true) {
	    if (!from) {
	      break;
	    }
	    if (from === common) {
	      break;
	    }
	    var alternate = from.alternate;
	    if (alternate !== null && alternate === common) {
	      break;
	    }
	    pathFrom.push(from);
	    from = getParent(from);
	  }
	  var pathTo = [];
	  while (true) {
	    if (!to) {
	      break;
	    }
	    if (to === common) {
	      break;
	    }
	    var _alternate = to.alternate;
	    if (_alternate !== null && _alternate === common) {
	      break;
	    }
	    pathTo.push(to);
	    to = getParent(to);
	  }
	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}



	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	// Do not uses the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)

	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}

	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */
	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

	// List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */

	var root = null;
	var startText = null;
	var fallbackText = null;

	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}

	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}

	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start = void 0;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end = void 0;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;
	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}

	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }
	  return root.textContent;
	}

	/* eslint valid-typeof: 0 */

	var EVENT_POOL_SIZE = 10;

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }
	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }
	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;
	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */
	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);

	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);

	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;
	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }
	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;
	  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
	  event.destructor();
	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;
	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;
	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	}

	// Track the current IME composition status, if any.
	var isComposing = false;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType = void 0;
	  var fallbackData = void 0;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);
	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }
	      return null;
	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars = void 0;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	// Use to restore controlled state after a change event has fired.

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);
	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }
	  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
	  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}

	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}

	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}

	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }
	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;

	  restoreStateOfTarget(target);
	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// Used as a way to call batchedUpdates when we don't have a reference to
	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.

	// Defaults
	var _batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};
	var _interactiveUpdatesImpl = function (fn, a, b) {
	  return fn(a, b);
	};
	var _flushInteractiveUpdatesImpl = function () {};

	var isBatching = false;
	function batchedUpdates(fn, bookkeeping) {
	  if (isBatching) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }
	  isBatching = true;
	  try {
	    return _batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    // Here we wait until all updates have propagated, which is important
	    // when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    // Then we restore state of any controlled component.
	    isBatching = false;
	    var controlledComponentsHavePendingUpdates = needsStateRestore();
	    if (controlledComponentsHavePendingUpdates) {
	      // If a controlled event was fired, we may need to restore the state of
	      // the DOM node back to the controlled value. This is necessary when React
	      // bails out of the update without touching the DOM.
	      _flushInteractiveUpdatesImpl();
	      restoreStateIfNeeded();
	    }
	  }
	}

	function interactiveUpdates(fn, a, b) {
	  return _interactiveUpdatesImpl(fn, a, b);
	}



	function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
	  _batchedUpdatesImpl = batchedUpdatesImpl;
	  _interactiveUpdatesImpl = interactiveUpdatesImpl;
	  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * HTML nodeType values that represent the type of the node
	 */

	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';
	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  var currentValue = '' + node[valueField];

	  // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)
	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }
	  var get = descriptor.get,
	      set = descriptor.set;

	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  });
	  // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768
	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });

	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  }

	  // TODO: Once it's just Fiber we can move this to node._wrapperState
	  node._valueTracker = trackValueOnNode(node);
	}

	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node);
	  // if there is no tracker at this point it's unlikely
	  // that trying again will succeed
	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);
	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }
	  return false;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;

	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case FunctionComponent:
	    case ClassComponent:
	    case HostComponent:
	    case Mode:
	    case SuspenseComponent:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;
	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }
	      return describeComponentFrame(name, source, ownerName);
	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;
	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);
	  return info;
	}

	var current = null;
	var phase = null;

	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }
	    var owner = current._debugOwner;
	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }
	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    }
	    // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.
	    return getStackByFiberInDevAndProd(current);
	  }
	  return '';
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    phase = null;
	  }
	}

	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    phase = null;
	  }
	}

	function setCurrentPhase(lifeCyclePhase) {
	  {
	    phase = lifeCyclePhase;
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0;

	// A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.
	var STRING = 1;

	// A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.
	var BOOLEANISH_STRING = 2;

	// A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	var BOOLEAN = 3;

	// An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.
	var OVERLOADED_BOOLEAN = 4;

	// An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.
	var NUMERIC = 5;

	// An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.
	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }
	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  {
	    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
	  }
	  return false;
	}

	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }
	  return false;
	}

	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }
	  switch (typeof value) {
	    case 'function':
	    // $FlowIssue symbol is perfectly valid here
	    case 'symbol':
	      // eslint-disable-line
	      return true;
	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }
	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }
	    default:
	      return false;
	  }
	}

	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }
	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;
	      case OVERLOADED_BOOLEAN:
	        return value === false;
	      case NUMERIC:
	        return isNaN(value);
	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }
	  return false;
	}

	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	}

	// When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.
	var properties = {};

	// These props are reserved by React. They shouldn't be written to the DOM.
	['children', 'dangerouslySetInnerHTML',
	// TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.
	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];

	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.
	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML boolean attributes.
	['allowFullScreen', 'async',
	// Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
	// Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.
	['checked',
	// Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.
	['capture', 'download'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be positive numbers.
	['cols', 'rows', 'size', 'span'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be numbers.
	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	var CAMELIZE = /[\-\:]([a-z])/g;
	var capitalize = function (token) {
	  return token[1].toUpperCase();
	};

	// This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scrapping the MDN documentation.
	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null);
	} // attributeNamespace
	);

	// String SVG attributes with the xlink namespace.
	['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink');
	});

	// String SVG attributes with the xml namespace.
	['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace');
	});

	// Special case: this attribute exists both in HTML and SVG.
	// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
	// its React `tabIndex` name, like we do for attributes that exist only in HTML.
	properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
	'tabindex', // attributeName
	null);

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;

	      return node[propertyName];
	    } else {
	      var attributeName = propertyInfo.attributeName;

	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);
	          if (value === '') {
	            return true;
	          }
	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }
	          if (value === '' + expected) {
	            return expected;
	          }
	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }
	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        }
	        // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.
	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}

	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */
	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }
	    var value = node.getAttribute(name);
	    if (value === '' + expected) {
	      return expected;
	    }
	    return value;
	  }
	}

	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */
	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);
	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }
	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }
	  // If the prop isn't in the special list, treat it as a simple attribute.
	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;
	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName, '' + value);
	      }
	    }
	    return;
	  }
	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;

	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }
	    return;
	  }
	  // The rest are treated as attributes with special cases.
	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;

	    var attributeValue = void 0;
	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      attributeValue = '' + value;
	    }
	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}

	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;
	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$1 = null;

	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };

	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };

	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */
	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
	  };
	}

	var enableUserTimingAPI = true;

	var enableHooks = false;
	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
	var debugRenderPhaseSideEffects = false;

	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:
	var debugRenderPhaseSideEffectsForStrictMode = true;

	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.
	var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
	var warnAboutDeprecatedLifecycles = false;

	// Gather advanced timing metrics for Profiler subtrees.
	var enableProfilerTimer = true;

	// Trace which interactions trigger each commit.
	var enableSchedulerTracing = true;

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties
	var disableInputAttributeSyncing = false;

	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
	var enableStableConcurrentModeAPIs = false;

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */

	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}

	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnCheckedDefaultChecked = true;
	    }
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}

	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;
	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}

	function updateWrapper(element, props) {
	  var node = element;
	  {
	    var _controlled = isControlled(props);

	    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
	      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnUncontrolledToControlled = true;
	    }
	    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
	      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);

	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' ||
	      // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the value attribute, React only assigns a new value
	    // whenever the defaultValue React prop has changed. When not present,
	    // React does nothing
	    if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  } else {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the checked attribute, the attribute is directly
	    // controllable from the defaultValue React property. It needs to be
	    // updated as new props come in.
	    if (props.defaultChecked == null) {
	      node.removeAttribute('checked');
	    } else {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  } else {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}

	function postMountWrapper(element, props, isHydrating) {
	  var node = element;

	  // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.
	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset';

	    // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872
	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var _initialValue = toString(node._wrapperState.initialValue);

	    // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.
	    if (!isHydrating) {
	      if (disableInputAttributeSyncing) {
	        var value = getToStringValue(props.value);

	        // When not syncing the value attribute, the value property points
	        // directly to the React prop. Only assign it if it exists.
	        if (value != null) {
	          // Always assign on buttons so that it is possible to assign an
	          // empty string to clear button text.
	          //
	          // Otherwise, do not re-assign the value property if is empty. This
	          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
	          // prematurely marking required inputs as invalid. Equality is compared
	          // to the current value in case the browser provided value is not an
	          // empty string.
	          if (isButton || value !== node.value) {
	            node.value = toString(value);
	          }
	        }
	      } else {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (_initialValue !== node.value) {
	          node.value = _initialValue;
	        }
	      }
	    }

	    if (disableInputAttributeSyncing) {
	      // When not syncing the value attribute, assign the value attribute
	      // directly from the defaultValue React property (when present)
	      var defaultValue = getToStringValue(props.defaultValue);
	      if (defaultValue != null) {
	        node.defaultValue = toString(defaultValue);
	      }
	    } else {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = _initialValue;
	    }
	  }

	  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.
	  var name = node.name;
	  if (name !== '') {
	    node.name = '';
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the checked attribute, the checked property
	    // never gets assigned. It must be manually set. We don't want
	    // to do this when hydrating so that existing user input isn't
	    // modified
	    if (!isHydrating) {
	      updateChecked(element, props);
	    }

	    // Only assign the checked attribute if it is defined. This saves
	    // a DOM write when controlling the checked attribute isn't needed
	    // (text inputs, submit/reset)
	    if (props.hasOwnProperty('defaultChecked')) {
	      node.defaultChecked = !node.defaultChecked;
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  } else {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}

	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
	      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

	      // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set
	      updateValueIfChanged(otherNode);

	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      updateWrapper(otherNode, otherProps);
	    }
	  }
	}

	// In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253
	function setDefaultValue(node, type, value) {
	  if (
	  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change';
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);
	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  if (!disableInputAttributeSyncing) {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,

	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    var getTargetInstFunc = void 0,
	        handleEventFunc = void 0;
	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0;
	// Use flags to signal movementX/Y has already been set
	var isMovementXSet = false;
	var isMovementYSet = false;

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */
	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win = void 0;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from = void 0;
	    var to = void 0;
	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface = void 0,
	        leaveEventType = void 0,
	        enterEventType = void 0,
	        eventTypePrefix = void 0;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);

	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	/*eslint-disable no-self-compare */

	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */

	/**
	 * This API should be called `delete` but we'd have to make sure to always
	 * transform these to strings for IE support. When this transform is fully
	 * supported we can rename it.
	 */


	function get(key) {
	  return key._reactInternalFiber;
	}

	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}

	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect = /*              */0;
	var PerformedWork = /*         */1;

	// You can change the rest (and add more).
	var Placement = /*             */2;
	var Update = /*                */4;
	var PlacementAndUpdate = /*    */6;
	var Deletion = /*              */8;
	var ContentReset = /*          */16;
	var Callback = /*              */32;
	var DidCapture = /*            */64;
	var Ref = /*                   */128;
	var Snapshot = /*              */256;
	var Passive = /*               */512;

	// Passive & Update & Callback & Ref & Snapshot
	var LifecycleEffectMask = /*   */932;

	// Union of all host effects
	var HostEffectMask = /*        */1023;

	var Incomplete = /*            */1024;
	var ShouldCapture = /*         */2048;

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

	var MOUNTING = 1;
	var MOUNTED = 2;
	var UNMOUNTED = 3;

	function isFiberMountedImpl(fiber) {
	  var node = fiber;
	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    if ((node.effectTag & Placement) !== NoEffect) {
	      return MOUNTING;
	    }
	    while (node.return) {
	      node = node.return;
	      if ((node.effectTag & Placement) !== NoEffect) {
	        return MOUNTING;
	      }
	    }
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }
	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return MOUNTED;
	  }
	  // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.
	  return UNMOUNTED;
	}

	function isFiberMounted(fiber) {
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner$1.current;
	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;
	      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);
	  if (!fiber) {
	    return false;
	  }
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function assertIsMounted(fiber) {
	  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;
	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var state = isFiberMountedImpl(fiber);
	    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	    if (state === MOUNTING) {
	      return null;
	    }
	    return fiber;
	  }
	  // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.
	  var a = fiber;
	  var b = alternate;
	  while (true) {
	    var parentA = a.return;
	    var parentB = parentA ? parentA.alternate : null;
	    if (!parentA || !parentB) {
	      // We're at the root.
	      break;
	    }

	    // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.
	    if (parentA.child === parentB.child) {
	      var child = parentA.child;
	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }
	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }
	        child = child.sibling;
	      }
	      // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.
	      invariant(false, 'Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;
	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }
	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }
	        _child = _child.sibling;
	      }
	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;
	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }
	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }
	          _child = _child.sibling;
	        }
	        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
	      }
	    }

	    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  }
	  // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.
	  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  }
	  // Otherwise B has to be current branch.
	  return alternate;
	}

	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}

	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode = void 0;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.
	  if (charCode === 10) {
	    charCode = 13;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },

	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
	var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

	var eventTypes$4 = {};
	var topLevelEventsToDispatchConfig = {};

	function addEventTypeNameToConfig(_ref, isInteractive) {
	  var topEvent = _ref[0],
	      event = _ref[1];

	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent],
	    isInteractive: isInteractive
	  };
	  eventTypes$4[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	}

	interactiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, true);
	});
	nonInteractiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, false);
	});

	// Only used in DEV for exhaustiveness validation.
	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

	var SimpleEventPlugin = {
	  eventTypes: eventTypes$4,

	  isInteractiveTopLevelEventType: function (topLevelType) {
	    var config = topLevelEventsToDispatchConfig[topLevelType];
	    return config !== undefined && config.isInteractive === true;
	  },


	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor = void 0;
	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP:
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;
	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        }
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	    }
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findRootContainerNode(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst.return) {
	    inst = inst.return;
	  }
	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }
	  return inst.stateNode.containerInfo;
	}

	// Used to store ancestor hierarchy in top level callback
	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }
	  return {
	    topLevelType: topLevelType,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;
	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    if (!ancestor) {
	      bookKeeping.ancestors.push(ancestor);
	      break;
	    }
	    var root = findRootContainerNode(ancestor);
	    if (!root) {
	      break;
	    }
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// TODO: can we stop exporting these?
	var _enabled = true;

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}

	function isEnabled() {
	  return _enabled;
	}

	/**
	 * Traps top-level events by using event bubbling.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapBubbledEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventBubbleListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	/**
	 * Traps a top-level event by using event capturing.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapCapturedEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventCaptureListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	function dispatchInteractiveEvent(topLevelType, nativeEvent) {
	  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
	}

	function dispatchEvent(topLevelType, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
	  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
	    // If we get an event (ex: img onload) before committing that
	    // component's mount, ignore it for now (that is, treat it as if it was an
	    // event on a non-React tree). We might also consider queueing events and
	    // dispatching them after the mount.
	    targetInst = null;
	  }

	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var reactTopListenersCounter = 0;

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */
	function listenTo(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      switch (dependency) {
	        case TOP_SCROLL:
	          trapCapturedEvent(TOP_SCROLL, mountAt);
	          break;
	        case TOP_FOCUS:
	        case TOP_BLUR:
	          trapCapturedEvent(TOP_FOCUS, mountAt);
	          trapCapturedEvent(TOP_BLUR, mountAt);
	          // We set the flag for a single dependency later in this function,
	          // but this ensures we mark both as attached rather than just one.
	          isListening[TOP_BLUR] = true;
	          isListening[TOP_FOCUS] = true;
	          break;
	        case TOP_CANCEL:
	        case TOP_CLOSE:
	          if (isEventSupported(getRawEventName(dependency))) {
	            trapCapturedEvent(dependency, mountAt);
	          }
	          break;
	        case TOP_INVALID:
	        case TOP_SUBMIT:
	        case TOP_RESET:
	          // We listen to them on the target DOM elements.
	          // Some of them bubble so we don't want them to fire twice.
	          break;
	        default:
	          // By default, listen on the top level to all non-media events.
	          // Media events don't bubble so adding the listener wouldn't do anything.
	          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
	          if (!isMediaEvent) {
	            trapBubbledEvent(dependency, mountAt);
	          }
	          break;
	      }
	      isListening[dependency] = true;
	    }
	  }
	}

	function isListeningToAllDependencies(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];
	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      return false;
	    }
	  }
	  return true;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */
	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;

	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset;

	  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}

	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */
	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }
	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      }
	      // Moving from `node` to its first child `next`.
	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }
	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }
	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }
	      if ((next = node.nextSibling) !== null) {
	        break;
	      }
	      node = parentNode;
	      parentNode = node.parentNode;
	    }

	    // Moving from `node` to its next sibling `next`.
	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window;

	  // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)
	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }
	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();
	  while (element instanceof win.HTMLIFrameElement) {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute
	    try {
	      win = element.contentDocument.defaultView;
	    } catch (e) {
	      return element;
	    }
	    element = getActiveElement(win.document);
	  }
	  return element;
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */
	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}

	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
	  };
	}

	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */
	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;
	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    }

	    // Focusing a node can change the scroll position, which is undesirable
	    var ancestors = [];
	    var ancestor = priorFocusedElem;
	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}

	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */
	function getSelection$1(input) {
	  var selection = void 0;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || { start: 0, end: 0 };
	}

	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */
	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}

	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */
	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement$1);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;

	    accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var doc = getEventTargetDocument(nativeEventTarget);
	    // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.
	    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;
	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */
	injection.injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */
	injection.injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    content += child;
	    // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }
	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }
	        if (typeof child.type !== 'string') {
	          return;
	        }
	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;
	          warning$1(false, 'Only strings and numbers are supported as <option> children.');
	        }
	      });
	    }

	    // TODO: Remove support for `selected` in <option>.
	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}

	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	function getHostProps$1(element, props) {
	  var hostProps = _assign({ children: undefined }, props);
	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue$1 = void 0;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 */
	function checkSelectPropTypes(props) {
	  ReactControlledValuePropTypes.checkPropTypes('select', props);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	    } else if (!props.multiple && isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};
	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }
	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }
	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));
	    var defaultSelected = null;
	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;
	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }
	        return;
	      }
	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }
	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */

	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}

	function initWrapperState$1(element, props) {
	  var node = element;
	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}

	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}

	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;

	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}

	function restoreControlledState$2(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */

	function getHostProps$3(element, props) {
	  var node = element;
	  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

	  // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.
	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}

	function initWrapperState$2(element, props) {
	  var node = element;
	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value;

	  // Only bother fetching default value if we're going to use it
	  if (initialValue == null) {
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      {
	        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }
	      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
	        children = children[0];
	      }

	      defaultValue = children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}

	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);
	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value);
	    // To avoid side effects (such as losing text selection), only set value if changed
	    if (newValue !== node.value) {
	      node.value = newValue;
	    }
	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }
	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}

	function postMountWrapper$3(element, props) {
	  var node = element;
	  // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.
	  var textContent = node.textContent;

	  // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	  if (textContent === node._wrapperState.initialValue) {
	    node.value = textContent;
	  }
	}

	function restoreControlledState$3(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

	var Namespaces = {
	  html: HTML_NAMESPACE$1,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	};

	// Assumes there is no parent namespace.
	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;
	    case 'math':
	      return MATH_NAMESPACE;
	    default:
	      return HTML_NAMESPACE$1;
	  }
	}

	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }
	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE$1;
	  }
	  // By default, pass namespace below.
	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer = void 0;

	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node

	  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */
	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
	    // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;
	    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */
	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + hyphenateStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

	        delimiter = ';';
	      }
	    }
	    return serialized || null;
	  }
	}

	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */
	function setValueForStyles(node, styles) {
	  var style = node.style;
	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }
	    var isCustomProperty = styleName.indexOf('--') === 0;
	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }
	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }
	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// TODO: We can remove this if we add invariantWithStack()
	// or add stack by default to invariants where possible.
	var HTML$1 = '__html';

	var ReactDebugCurrentFrame$2 = null;
	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
	  }
	  {
	    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }
	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;
	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',

	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0, // state
	  'aria-details': 0,
	  'aria-disabled': 0, // state
	  'aria-hidden': 0, // state
	  'aria-invalid': 0, // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIACamel.test(name)) {
	    var ariaName = 'aria-' + name.slice(4).toLowerCase();
	    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (correctName == null) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
	      warnedProperties[name] = true;
	      return true;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== correctName) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  var invalidProps = [];

	  for (var key in props) {
	    var isValid = validateProperty(type, key);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  } else if (invalidProps.length > 1) {
	    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;

	function validateProperties$1(type, props) {
	  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	    return;
	  }

	  if (props != null && props.value === null && !didWarnValueNull) {
	    didWarnValueNull = true;
	    if (type === 'select' && props.multiple) {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	    } else {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();
	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // We can't rely on the event system being injected on the server.
	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }
	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
	      if (registrationName != null) {
	        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	      if (EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Let the ARIA attribute hook validate ARIA attributes
	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

	    // Known attributes should match the casing specified in the property config.
	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];
	      if (standardName !== name) {
	        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Now that we've validated casing, do not validate
	    // data types for reserved props
	    if (isReserved) {
	      return true;
	    }

	    // Warn when a known attribute is a bad type
	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    }

	    // Warn when passing the strings 'false' or 'true' into a boolean prop
	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  var unknownProps = [];
	  for (var key in props) {
	    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	  if (unknownProps.length === 1) {
	    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  } else if (unknownProps.length > 1) {
	    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnInvalidHydration = false;
	var didWarnShadyDOM = false;

	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE$1 = 'style';
	var HTML = '__html';

	var HTML_NAMESPACE = Namespaces.html;


	var warnedUnknownTags = void 0;
	var suppressHydrationWarning = void 0;

	var validatePropertiesInDevelopment = void 0;
	var warnForTextDifference = void 0;
	var warnForPropDifference = void 0;
	var warnForExtraAttributes = void 0;
	var warnForInvalidEventListener = void 0;
	var canDiffStyleForHydrationWarning = void 0;

	var normalizeMarkupForTextOrAttribute = void 0;
	var normalizeHTML = void 0;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, /* canUseEventSystem */true);
	  };

	  // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807
	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.
	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });
	    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  };

	  // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.
	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  listenTo(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = nextProps[propKey];
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      // Relies on `updateStylesByID` not mutating `styleUpdates`.
	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // We polyfill it separately on the client during commit.
	      // We could have excluded it in the property list instead of
	      // adding a special case here, but then it wouldn't be emitted
	      // on server rendering (but we *do* want to emit it in SSR).
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];
	    if (propKey === STYLE$1) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag = void 0;

	  // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.
	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement = void 0;
	  var namespaceURI = parentNamespace;
	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }
	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props);
	      // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.
	      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');
	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.
	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, { is: props.is });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type);
	      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
	      // attribute on `select`s needs to be added before `option`s are inserted. This prevents
	      // a bug where the `select` does not scroll to the correct option because singular
	      // `select` elements automatically pick the first item.
	      // See https://github.com/facebook/react/issues/13222
	      if (type === 'select' && props.multiple) {
	        var node = domElement;
	        node.multiple = true;
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;
	        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}

	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}

	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);
	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  var props = void 0;
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      props = rawProps;
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);

	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;
	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;
	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }
	}

	// Calculate the diff between the two objects.
	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;

	  var lastProps = void 0;
	  var nextProps = void 0;
	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;
	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  assertValidProps(tag, nextProps);

	  var propKey = void 0;
	  var styleName = void 0;
	  var styleUpdates = null;
	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      var lastStyle = lastProps[propKey];
	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }
	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
	      // Noop. This is handled by the clear text mechanism.
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // Noop. It doesn't work on updates anyway.
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }
	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = '';
	          }
	        }
	        // Update styles that changed since `lastProp`.
	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }
	          updatePayload.push(propKey, styleUpdates);
	        }
	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML] : undefined;
	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
	        }
	      } else {
	        // TODO: It might be too late to clear this if we have children
	        // inserted already.
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }
	  if (styleUpdates) {
	    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
	  }
	  return updatePayload;
	}

	// Apply the diff.
	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
	  // Apply the diff.
	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

	  // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.
	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;
	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;
	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();
	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }
	    return possibleStandardNames[lowerCasedName] || null;
	  }
	  return null;
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag = void 0;
	  var extraAttributeNames = void 0;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;
	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();
	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;
	        case 'checked':
	          break;
	        case 'selected':
	          break;
	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;
	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = rawProps[propKey];
	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (true &&
	    // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);
	      if (suppressHydrationWarning) {
	        // Don't bother comparing. We're ignoring all these warnings.
	      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
	      // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
	        // Noop
	      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE$1) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');
	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;
	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;
	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }
	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);
	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true;
	              // $FlowFixMe - Should be inferred as not undefined.
	              extraAttributeNames.delete(standardName);
	            }
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey);
	          }
	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;
	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  return updatePayload;
	}

	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}

	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}

	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}

	function restoreControlledState$1(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;
	    case 'textarea':
	      restoreControlledState$3(domElement, props);
	      return;
	    case 'select':
	      restoreControlledState$2(domElement, props);
	      return;
	  }
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var validateDOMNesting = function () {};
	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;
	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();

	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
	    if (didWarn[warnKey]) {
	      return;
	    }
	    didWarn[warnKey] = true;

	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';
	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';
	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	      }
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
	    } else {
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
	    }
	  };
	}

	// Renderers that don't support persistence
	// can re-export everything from this module.

	function shim() {
	  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
	}

	// Persistence (when unsupported)
	var supportsPersistence = false;
	var cloneInstance = shim;
	var createContainerChildSet = shim;
	var appendChildToContainerChildSet = shim;
	var finalizeContainerChildren = shim;
	var replaceContainerChildren = shim;
	var cloneHiddenInstance = shim;
	var cloneUnhiddenInstance = shim;
	var createHiddenTextInstance = shim;

	var SUPPRESS_HYDRATION_WARNING = void 0;
	{
	  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	}

	var STYLE = 'style';

	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }
	  return false;
	}

	function getRootHostContext(rootContainerInstance) {
	  var type = void 0;
	  var namespace = void 0;
	  var nodeType = rootContainerInstance.nodeType;
	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }
	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }
	  {
	    var validatedTag = type.toLowerCase();
	    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return { namespace: namespace, ancestorInfo: _ancestorInfo };
	  }
	  return namespace;
	}

	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
	  }
	  var parentNamespace = parentHostContext;
	  return getChildNamespace(parentNamespace, type);
	}

	function getPublicInstance(instance) {
	  return instance;
	}

	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}

	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  selectionInformation = null;
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	}

	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace = void 0;
	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	    parentNamespace = hostContextDev.namespace;
	  }
	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}

	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}

	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;
	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }
	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}

	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}

	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}

	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }
	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}

	var isPrimaryRenderer = true;
	// This initialization code may run even on server environments
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.
	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;

	// -------------------
	//     Mutation
	// -------------------

	var supportsMutation = true;

	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}

	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps);
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}

	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}

	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}

	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function appendChildToContainer(container, child) {
	  var parentNode = void 0;
	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  }
	  // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918
	  var reactRootContainer = container._reactRootContainer;
	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}

	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}

	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}

	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  instance.style.display = 'none';
	}

	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}

	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}

	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}

	// -------------------
	//     Hydration
	// -------------------

	var supportsHydration = true;

	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  }
	  // This has now been refined to an element node.
	  return instance;
	}

	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  }
	  // This has now been refined to a text node.
	  return instance;
	}

	function getNextHydratableSibling(instance) {
	  var node = instance.nextSibling;
	  // Skip non-hydratable nodes.
	  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
	    node = node.nextSibling;
	  }
	  return node;
	}

	function getFirstHydratableChild(parentInstance) {
	  var next = parentInstance.firstChild;
	  // Skip non-hydratable nodes.
	  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
	    next = next.nextSibling;
	  }
	  return next;
	}

	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance);
	  // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.
	  updateFiberProps(instance, props);
	  var parentNamespace = void 0;
	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}

	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}

	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}

	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}

	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type, props);
	  }
	}

	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}

	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type, props);
	  }
	}

	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = '\u269B';
	var warningEmoji = '\u26D4';
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	// Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
	var currentFiber = null;
	// If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).
	var currentPhase = null;
	var currentPhaseFiber = null;
	// Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.
	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	var isWaitingForCallback = false;
	// During commits, we only show a measurement once per method name
	// to avoid stretch the commit phase with measurement overhead.
	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + ' ' + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
	  var suffix = warning ? ' Warning: ' + warning : '';
	  return '' + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);
	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {}
	  // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.

	  // Clear marks immediately to avoid growing buffer.
	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + ' (#' + debugID + ')';
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
	  } else {
	    // Composite component methods.
	    return componentName + '.' + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }
	  labelsInCurrentCommit.add(label);

	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;
	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }
	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;
	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }
	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }
	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  if (enableUserTimingAPI) {
	    effectCountInCurrentCommit++;
	  }
	}

	function recordScheduleUpdate() {
	  if (enableUserTimingAPI) {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }
	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}

	function startRequestCallbackTimer() {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming && !isWaitingForCallback) {
	      isWaitingForCallback = true;
	      beginMark('(Waiting for async callback...)');
	    }
	  }
	}

	function stopRequestCallbackTimer(didExpire, expirationTime) {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming) {
	      isWaitingForCallback = false;
	      var warning = didExpire ? 'React was blocked by main thread' : null;
	      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
	    }
	  }
	}

	function startWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, this is the fiber to unwind from.
	    currentFiber = fiber;
	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = true;
	  }
	}

	function cancelWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.
	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}

	function stopWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}

	function stopFailedWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}

	function startPhaseTimer(fiber, phase) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    clearPendingPhaseMeasurement();
	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }
	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}

	function stopPhaseTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }
	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}

	function startWorkLoopTimer(nextUnitOfWork) {
	  if (enableUserTimingAPI) {
	    currentFiber = nextUnitOfWork;
	    if (!supportsUserTiming) {
	      return;
	    }
	    commitCountInCurrentWorkLoop = 0;
	    // This is top level call.
	    // Any other measurements are performed within.
	    beginMark('(React Tree Reconciliation)');
	    // Resume any measurements that were in progress during the last loop.
	    resumeTimers();
	  }
	}

	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var warning = null;
	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = 'An update to ' + componentName + ' interrupted the previous render';
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }
	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
	    // Pause any measurements until the next loop.
	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}

	function startCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}

	function stopCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;
	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }
	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();

	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}

	function startCommitSnapshotEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}

	function stopCommitSnapshotEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
	  }
	}

	function startCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}

	function stopCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
	  }
	}

	function startCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}

	function stopCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];

	var fiberStack = void 0;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      warningWithoutStack$1(false, 'Unexpected pop.');
	    }
	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];

	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;

	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	function checkThatStackIsEmpty() {
	  {
	    if (index !== -1) {
	      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
	    }
	  }
	}

	function resetStackAfterFatalErrorInDev() {
	  {
	    index = -1;
	    valueStack.length = 0;
	    fiberStack.length = 0;
	  }
	}

	var warnedAboutMissingGetChildContext = void 0;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};
	{
	  Object.freeze(emptyContextObject);
	}

	// A cursor to the current merged context object on the stack.
	var contextStackCursor = createCursor(emptyContextObject);
	// A cursor to a boolean indicating whether the context has changed.
	var didPerformWorkStackCursor = createCursor(false);
	// Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.
	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	    // If the fiber is a context provider itself, when we read its context
	    // we may have already pushed its own child context on the stack. A context
	    // provider should not "see" its own child context. Therefore we read the
	    // previous (parent) context instead for a context provider.
	    return previousContext;
	  }
	  return contextStackCursor.current;
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  var instance = workInProgress.stateNode;
	  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  var type = workInProgress.type;
	  var contextTypes = type.contextTypes;
	  if (!contextTypes) {
	    return emptyContextObject;
	  }

	  // Avoid recreating masked context unless unmasked context has changed.
	  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	  // This may trigger infinite loops if componentWillReceiveProps calls setState.
	  var instance = workInProgress.stateNode;
	  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	    return instance.__reactInternalMemoizedMaskedChildContext;
	  }

	  var context = {};
	  for (var key in contextTypes) {
	    context[key] = unmaskedContext[key];
	  }

	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // Context is created before the class component is instantiated so check for instance.
	  if (instance) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return context;
	}

	function hasContextChanged() {
	  return didPerformWorkStackCursor.current;
	}

	function isContextProvider(type) {
	  var childContextTypes = type.childContextTypes;
	  return childContextTypes !== null && childContextTypes !== undefined;
	}

	function popContext(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function popTopLevelContextObject(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  push(contextStackCursor, context, fiber);
	  push(didPerformWorkStackCursor, didChange, fiber);
	}

	function processChildContext(fiber, type, parentContext) {
	  var instance = fiber.stateNode;
	  var childContextTypes = type.childContextTypes;

	  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
	  if (typeof instance.getChildContext !== 'function') {
	    {
	      var componentName = getComponentName(type) || 'Unknown';

	      if (!warnedAboutMissingGetChildContext[componentName]) {
	        warnedAboutMissingGetChildContext[componentName] = true;
	        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	      }
	    }
	    return parentContext;
	  }

	  var childContext = void 0;
	  {
	    setCurrentPhase('getChildContext');
	  }
	  startPhaseTimer(fiber, 'getChildContext');
	  childContext = instance.getChildContext();
	  stopPhaseTimer();
	  {
	    setCurrentPhase(null);
	  }
	  for (var contextKey in childContext) {
	    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
	  }
	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(childContextTypes, childContext, 'child context', name,
	    // In practice, there is one case in which we won't get a stack. It's when
	    // somebody calls unstable_renderSubtreeIntoContainer() and we process
	    // context from the parent component instance. The stack will be missing
	    // because it's outside of the reconciliation, and so the pointer has not
	    // been set. This is rare and doesn't matter. We'll also remove that API.
	    getCurrentFiberStackInDev);
	  }

	  return _assign({}, parentContext, childContext);
	}

	function pushContextProvider(workInProgress) {
	  var instance = workInProgress.stateNode;
	  // We push the context as early as possible to ensure stack integrity.
	  // If the instance does not exist yet, we will push null at first,
	  // and replace it on the stack later when invalidating the context.
	  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

	  // Remember the parent context so we can merge with it later.
	  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	  previousContext = contextStackCursor.current;
	  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

	  return true;
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  var instance = workInProgress.stateNode;
	  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  if (didChange) {
	    // Merge parent and own context.
	    // Skip this if we're not updating due to sCU.
	    // This avoids unnecessarily recomputing memoized values.
	    var mergedContext = processChildContext(workInProgress, type, previousContext);
	    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

	    // Replace the old (or empty) context with the new one.
	    // It is important to unwind the context in the reverse order.
	    pop(didPerformWorkStackCursor, workInProgress);
	    pop(contextStackCursor, workInProgress);
	    // Now push the new context and mark that it has changed.
	    push(contextStackCursor, mergedContext, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  } else {
	    pop(didPerformWorkStackCursor, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	  // makes sense elsewhere
	  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  var node = fiber;
	  do {
	    switch (node.tag) {
	      case HostRoot:
	        return node.stateNode.context;
	      case ClassComponent:
	        {
	          var Component = node.type;
	          if (isContextProvider(Component)) {
	            return node.stateNode.__reactInternalMemoizedMergedChildContext;
	          }
	          break;
	        }
	    }
	    node = node.return;
	  } while (node !== null);
	  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;

	function catchErrors(fn) {
	  return function (arg) {
	    try {
	      return fn(arg);
	    } catch (err) {
	      if (true && !hasLoggedError) {
	        hasLoggedError = true;
	        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
	      }
	    }
	  };
	}

	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }
	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }
	  if (!hook.supportsFiber) {
	    {
	      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    }
	    // DevTools exists, even though it doesn't support Fiber.
	    return true;
	  }
	  try {
	    var rendererID = hook.inject(internals);
	    // We have successfully injected, so now it is safe to set up hooks.
	    onCommitFiberRoot = catchErrors(function (root) {
	      return hook.onCommitFiberRoot(rendererID, root);
	    });
	    onCommitFiberUnmount = catchErrors(function (fiber) {
	      return hook.onCommitFiberUnmount(rendererID, fiber);
	    });
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
	    }
	  }
	  // DevTools exists
	  return true;
	}

	function onCommitRoot(root) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root);
	  }
	}

	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	var NoWork = 0;
	var Never = 1;
	var Sync = maxSigned31BitInt;

	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;

	// 1 unit of expiration time represents 10ms.
	function msToExpirationTime(ms) {
	  // Always add an offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}

	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	}

	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;

	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}

	// We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.
	var HIGH_PRIORITY_EXPIRATION = 500;
	var HIGH_PRIORITY_BATCH_SIZE = 100;

	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}

	var NoContext = 0;
	var ConcurrentMode = 1;
	var StrictMode = 2;
	var ProfileMode = 4;

	var hasBadMapPolyfill = void 0;

	{
	  hasBadMapPolyfill = false;
	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]);
	    // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.
	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	// A Fiber is work on a Component that needs to be done or was done. There can
	// be more than one per component.


	var debugCounter = void 0;

	{
	  debugCounter = 1;
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null;

	  // Fiber
	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;

	  this.ref = null;

	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.firstContextDependency = null;

	  this.mode = mode;

	  // Effects
	  this.effectTag = NoEffect;
	  this.nextEffect = null;

	  this.firstEffect = null;
	  this.lastEffect = null;

	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;

	  this.alternate = null;

	  if (enableProfilerTimer) {
	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    this._debugID = debugCounter++;
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugIsCurrentlyTiming = false;
	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	}

	// This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.
	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}

	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;
	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }
	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }
	  return IndeterminateComponent;
	}

	// This is used to create an alternate fiber to do work on.
	function createWorkInProgress(current, pendingProps, expirationTime) {
	  var workInProgress = current.alternate;
	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps;

	    // We already have an alternate.
	    // Reset the effect tag.
	    workInProgress.effectTag = NoEffect;

	    // The effect list is no longer valid.
	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    if (enableProfilerTimer) {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;

	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.firstContextDependency = current.firstContextDependency;

	  // These will be overridden during the parent's reconciliation
	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  if (enableProfilerTimer) {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  return workInProgress;
	}

	function createHostRootFiber(isConcurrent) {
	  var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

	  if (enableProfilerTimer && isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}

	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber = void 0;

	  var fiberTag = IndeterminateComponent;
	  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
	  var resolvedType = type;
	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
	      case REACT_CONCURRENT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
	      case REACT_STRICT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;
	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;
	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;
	                break getTag;
	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;
	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }
	          var info = '';
	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }
	            var ownerName = owner ? getComponentName(owner.type) : null;
	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }
	          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;
	  {
	    owner = element._owner;
	  }
	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }
	  return fiber;
	}

	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  // TODO: The Profiler fiber shouldn't have a type. It has a tag.
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromMode(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(Mode, pendingProps, key, mode);

	  // TODO: The Mode fiber shouldn't have a type. It has a tag.
	  var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

	  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  var type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoContext);
	  // TODO: These should not need a type.
	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}

	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null, // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	}

	// Used for stashing WIP properties to replay failed work in DEV.
	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoContext);
	  }

	  // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.

	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.firstContextDependency = source.firstContextDependency;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;
	  if (enableProfilerTimer) {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }
	  target._debugID = source._debugID;
	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  return target;
	}

	// TODO: This should be lifted into the renderer.


	// The following attributes are only used by interaction tracing builds.
	// They enable interactions to be associated with their async work,
	// And expose interaction metadata to the React DevTools Profiler plugin.
	// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


	// Exported FiberRoot type includes all properties,
	// To avoid requiring potentially error-prone :any casts throughout the project.
	// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
	// The types are defined separately within this file to ensure they stay in sync.
	// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


	function createFiberRoot(containerInfo, isConcurrent, hydrate) {
	  // Cyclic construction. This cheats the type system right now because
	  // stateNode is any.
	  var uninitializedFiber = createHostRootFiber(isConcurrent);

	  var root = void 0;
	  if (enableSchedulerTracing) {
	    root = {
	      current: uninitializedFiber,
	      containerInfo: containerInfo,
	      pendingChildren: null,

	      earliestPendingTime: NoWork,
	      latestPendingTime: NoWork,
	      earliestSuspendedTime: NoWork,
	      latestSuspendedTime: NoWork,
	      latestPingedTime: NoWork,

	      didError: false,

	      pendingCommitExpirationTime: NoWork,
	      finishedWork: null,
	      timeoutHandle: noTimeout,
	      context: null,
	      pendingContext: null,
	      hydrate: hydrate,
	      nextExpirationTimeToWorkOn: NoWork,
	      expirationTime: NoWork,
	      firstBatch: null,
	      nextScheduledRoot: null,

	      interactionThreadID: tracing.unstable_getThreadID(),
	      memoizedInteractions: new Set(),
	      pendingInteractionMap: new Map()
	    };
	  } else {
	    root = {
	      current: uninitializedFiber,
	      containerInfo: containerInfo,
	      pendingChildren: null,

	      earliestPendingTime: NoWork,
	      latestPendingTime: NoWork,
	      earliestSuspendedTime: NoWork,
	      latestSuspendedTime: NoWork,
	      latestPingedTime: NoWork,

	      didError: false,

	      pendingCommitExpirationTime: NoWork,
	      finishedWork: null,
	      timeoutHandle: noTimeout,
	      context: null,
	      pendingContext: null,
	      hydrate: hydrate,
	      nextExpirationTimeToWorkOn: NoWork,
	      expirationTime: NoWork,
	      firstBatch: null,
	      nextScheduledRoot: null
	    };
	  }

	  uninitializedFiber.stateNode = root;

	  // The reason for the way the Flow types are structured in this file,
	  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
	  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
	  // $FlowFixMe Remove this :any cast and replace it with something better.
	  return root;
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	var ReactStrictModeWarnings = {
	  discardPendingWarnings: function () {},
	  flushPendingDeprecationWarnings: function () {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordDeprecationWarnings: function (fiber, instance) {},
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {}
	};

	{
	  var LIFECYCLE_SUGGESTIONS = {
	    UNSAFE_componentWillMount: 'componentDidMount',
	    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
	    UNSAFE_componentWillUpdate: 'componentDidUpdate'
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUnsafeLifecycleWarnings = new Map();
	  var pendingLegacyContextWarning = new Map();

	  // Tracks components we have already warned about.
	  var didWarnAboutDeprecatedLifecycles = new Set();
	  var didWarnAboutUnsafeLifecycles = new Set();
	  var didWarnAboutLegacyContext = new Set();

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUnsafeLifecycleWarnings = new Map();
	    pendingLegacyContextWarning = new Map();
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
	      var lifecyclesWarningMesages = [];

	      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
	        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
	        if (lifecycleWarnings.length > 0) {
	          var componentNames = new Set();
	          lifecycleWarnings.forEach(function (fiber) {
	            componentNames.add(getComponentName(fiber.type) || 'Component');
	            didWarnAboutUnsafeLifecycles.add(fiber.type);
	          });

	          var formatted = lifecycle.replace('UNSAFE_', '');
	          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
	          var sortedComponentNames = setToSortedString(componentNames);

	          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
	        }
	      });

	      if (lifecyclesWarningMesages.length > 0) {
	        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
	      }
	    });

	    pendingUnsafeLifecycleWarnings = new Map();
	  };

	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;

	    var node = fiber;
	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }
	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
	    if (pendingComponentWillMountWarnings.length > 0) {
	      var uniqueNames = new Set();
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

	      pendingComponentWillMountWarnings = [];
	    }

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      var _uniqueNames = new Set();
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames = setToSortedString(_uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      var _uniqueNames2 = new Set();
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames2 = setToSortedString(_uniqueNames2);

	      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

	      pendingComponentWillUpdateWarnings = [];
	    }
	  };

	  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
	      return;
	    }

	    // Don't warn about react-lifecycles-compat polyfilled components.
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    // This is difficult to track any other way since component names
	    // are often vague and are likely to collide between 3rd party libraries.
	    // An expand property is probably okay to use here since it's DEV-only,
	    // and will only be set in the event of serious warnings.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = void 0;
	    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
	      warningsForRoot = {
	        UNSAFE_componentWillMount: [],
	        UNSAFE_componentWillReceiveProps: [],
	        UNSAFE_componentWillUpdate: []
	      };

	      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
	    } else {
	      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
	    }

	    var unsafeLifecycles = [];
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillMount');
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
	    }

	    if (unsafeLifecycles.length > 0) {
	      unsafeLifecycles.forEach(function (lifecycle) {
	        warningsForRoot[lifecycle].push(fiber);
	      });
	    }
	  };

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }
	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);
	      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
	    });
	  };
	}

	// This lets us hook into Fiber to debug what it's doing.
	// See https://github.com/facebook/react/pull/8033.
	// This is not part of the public API, not even for React DevTools.
	// You may only inject a debugTool if you work on React Fiber itself.
	var ReactFiberInstrumentation = {
	  debugTool: null
	};

	var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

	// TODO: Offscreen updates should never suspend. However, a promise that
	// suspended inside an offscreen subtree should be able to ping at the priority
	// of the outer render.

	function markPendingPriorityLevel(root, expirationTime) {
	  // If there's a gap between completing a failed root and retrying it,
	  // additional updates may be scheduled. Clear `didError`, in case the update
	  // is sufficient to fix the error.
	  root.didError = false;

	  // Update the latest and earliest pending times
	  var earliestPendingTime = root.earliestPendingTime;
	  if (earliestPendingTime === NoWork) {
	    // No other pending updates.
	    root.earliestPendingTime = root.latestPendingTime = expirationTime;
	  } else {
	    if (earliestPendingTime < expirationTime) {
	      // This is the earliest pending update.
	      root.earliestPendingTime = expirationTime;
	    } else {
	      var latestPendingTime = root.latestPendingTime;
	      if (latestPendingTime > expirationTime) {
	        // This is the latest pending update
	        root.latestPendingTime = expirationTime;
	      }
	    }
	  }
	  findNextExpirationTimeToWorkOn(expirationTime, root);
	}

	function markCommittedPriorityLevels(root, earliestRemainingTime) {
	  root.didError = false;

	  if (earliestRemainingTime === NoWork) {
	    // Fast path. There's no remaining work. Clear everything.
	    root.earliestPendingTime = NoWork;
	    root.latestPendingTime = NoWork;
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  // Let's see if the previous latest known pending level was just flushed.
	  var latestPendingTime = root.latestPendingTime;
	  if (latestPendingTime !== NoWork) {
	    if (latestPendingTime > earliestRemainingTime) {
	      // We've flushed all the known pending levels.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      var earliestPendingTime = root.earliestPendingTime;
	      if (earliestPendingTime > earliestRemainingTime) {
	        // We've flushed the earliest known pending level. Set this to the
	        // latest pending time.
	        root.earliestPendingTime = root.latestPendingTime;
	      }
	    }
	  }

	  // Now let's handle the earliest remaining level in the whole tree. We need to
	  // decide whether to treat it as a pending level or as suspended. Check
	  // it falls within the range of known suspended levels.

	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestRemainingTime < latestSuspendedTime) {
	    // The earliest remaining level is later than all the suspended work. That
	    // means we've flushed all the suspended work.
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;

	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  if (earliestRemainingTime > earliestSuspendedTime) {
	    // The earliest remaining time is earlier than all the suspended work.
	    // Treat it as a pending update.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  // The earliest remaining time falls within the range of known suspended
	  // levels. We should treat this as suspended work.
	  findNextExpirationTimeToWorkOn(NoWork, root);
	}

	function hasLowerPriorityWork(root, erroredExpirationTime) {
	  var latestPendingTime = root.latestPendingTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var latestPingedTime = root.latestPingedTime;
	  return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
	}

	function isPriorityLevelSuspended(root, expirationTime) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
	}

	function markSuspendedPriorityLevel(root, suspendedTime) {
	  root.didError = false;
	  clearPing(root, suspendedTime);

	  // First, check the known pending levels and update them if needed.
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPendingTime = root.latestPendingTime;
	  if (earliestPendingTime === suspendedTime) {
	    if (latestPendingTime === suspendedTime) {
	      // Both known pending levels were suspended. Clear them.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      // The earliest pending level was suspended. Clear by setting it to the
	      // latest pending level.
	      root.earliestPendingTime = latestPendingTime;
	    }
	  } else if (latestPendingTime === suspendedTime) {
	    // The latest pending level was suspended. Clear by setting it to the
	    // latest pending level.
	    root.latestPendingTime = earliestPendingTime;
	  }

	  // Finally, update the known suspended levels.
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // No other suspended levels.
	    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
	  } else {
	    if (earliestSuspendedTime < suspendedTime) {
	      // This is the earliest suspended level.
	      root.earliestSuspendedTime = suspendedTime;
	    } else if (latestSuspendedTime > suspendedTime) {
	      // This is the latest suspended level
	      root.latestSuspendedTime = suspendedTime;
	    }
	  }

	  findNextExpirationTimeToWorkOn(suspendedTime, root);
	}

	function markPingedPriorityLevel(root, pingedTime) {
	  root.didError = false;

	  // TODO: When we add back resuming, we need to ensure the progressed work
	  // is thrown out and not reused during the restarted render. One way to
	  // invalidate the progressed work is to restart at expirationTime + 1.
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
	    root.latestPingedTime = pingedTime;
	  }
	  findNextExpirationTimeToWorkOn(pingedTime, root);
	}

	function clearPing(root, completedTime) {
	  // TODO: Track whether the root was pinged during the render phase. If so,
	  // we need to make sure we don't lose track of it.
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime !== NoWork && latestPingedTime >= completedTime) {
	    root.latestPingedTime = NoWork;
	  }
	}

	function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
	  var earliestExpirationTime = renderExpirationTime;

	  var earliestPendingTime = root.earliestPendingTime;
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestPendingTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestPendingTime;
	  }
	  if (earliestSuspendedTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestSuspendedTime;
	  }
	  return earliestExpirationTime;
	}

	function didExpireAtExpirationTime(root, currentTime) {
	  var expirationTime = root.expirationTime;
	  if (expirationTime !== NoWork && currentTime <= expirationTime) {
	    // The root has expired. Flush all work up to the current time.
	    root.nextExpirationTimeToWorkOn = currentTime;
	  }
	}

	function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPingedTime = root.latestPingedTime;

	  // Work on the earliest pending time. Failing that, work on the latest
	  // pinged time.
	  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

	  // If there is no pending or pinged work, check if there's suspended work
	  // that's lower priority than what we just completed.
	  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
	    // The lowest priority suspended work is the work most likely to be
	    // committed next. Let's start rendering it again, so that if it times out,
	    // it's ready to commit.
	    nextExpirationTimeToWorkOn = latestSuspendedTime;
	  }

	  var expirationTime = nextExpirationTimeToWorkOn;
	  if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
	    // Expire using the earliest known expiration time.
	    expirationTime = earliestSuspendedTime;
	  }

	  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
	  root.expirationTime = expirationTime;
	}

	// UpdateQueue is a linked list of prioritized updates.
	//
	// Like fibers, update queues come in pairs: a current queue, which represents
	// the visible state of the screen, and a work-in-progress queue, which is
	// can be mutated and processed asynchronously before it is committed — a form
	// of double buffering. If a work-in-progress render is discarded before
	// finishing, we create a new work-in-progress by cloning the current queue.
	//
	// Both queues share a persistent, singly-linked list structure. To schedule an
	// update, we append it to the end of both queues. Each queue maintains a
	// pointer to first update in the persistent list that hasn't been processed.
	// The work-in-progress pointer always has a position equal to or greater than
	// the current queue, since we always work on that one. The current queue's
	// pointer is only updated during the commit phase, when we swap in the
	// work-in-progress.
	//
	// For example:
	//
	//   Current pointer:           A - B - C - D - E - F
	//   Work-in-progress pointer:              D - E - F
	//                                          ^
	//                                          The work-in-progress queue has
	//                                          processed more updates than current.
	//
	// The reason we append to both queues is because otherwise we might drop
	// updates without ever processing them. For example, if we only add updates to
	// the work-in-progress queue, some updates could be lost whenever a work-in
	// -progress render restarts by cloning from current. Similarly, if we only add
	// updates to the current queue, the updates will be lost whenever an already
	// in-progress queue commits and swaps with the current queue. However, by
	// adding to both queues, we guarantee that the update will be part of the next
	// work-in-progress. (And because the work-in-progress queue becomes the
	// current queue once it commits, there's no danger of applying the same
	// update twice.)
	//
	// Prioritization
	// --------------
	//
	// Updates are not sorted by priority, but by insertion; new updates are always
	// appended to the end of the list.
	//
	// The priority is still important, though. When processing the update queue
	// during the render phase, only the updates with sufficient priority are
	// included in the result. If we skip an update because it has insufficient
	// priority, it remains in the queue to be processed later, during a lower
	// priority render. Crucially, all updates subsequent to a skipped update also
	// remain in the queue *regardless of their priority*. That means high priority
	// updates are sometimes processed twice, at two separate priorities. We also
	// keep track of a base state, that represents the state before the first
	// update in the queue is applied.
	//
	// For example:
	//
	//   Given a base state of '', and the following queue of updates
	//
	//     A1 - B2 - C1 - D2
	//
	//   where the number indicates the priority, and the update is applied to the
	//   previous state by appending a letter, React will process these updates as
	//   two separate renders, one per distinct priority level:
	//
	//   First render, at priority 1:
	//     Base state: ''
	//     Updates: [A1, C1]
	//     Result state: 'AC'
	//
	//   Second render, at priority 2:
	//     Base state: 'A'            <-  The base state does not include C1,
	//                                    because B2 was skipped.
	//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
	//     Result state: 'ABCD'
	//
	// Because we process updates in insertion order, and rebase high priority
	// updates when preceding updates are skipped, the final result is deterministic
	// regardless of priority. Intermediate state may vary according to system
	// resources, but the final state is always the same.

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3;

	// Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.
	var hasForceUpdate = false;

	var didWarnUpdateInsideUpdate = void 0;
	var currentlyProcessingQueue = void 0;
	var resetCurrentlyProcessingQueue = void 0;
	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	  resetCurrentlyProcessingQueue = function () {
	    currentlyProcessingQueue = null;
	  };
	}

	function createUpdateQueue(baseState) {
	  var queue = {
	    baseState: baseState,
	    firstUpdate: null,
	    lastUpdate: null,
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,
	    firstEffect: null,
	    lastEffect: null,
	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function cloneUpdateQueue(currentQueue) {
	  var queue = {
	    baseState: currentQueue.baseState,
	    firstUpdate: currentQueue.firstUpdate,
	    lastUpdate: currentQueue.lastUpdate,

	    // TODO: With resuming, if we bail out and resuse the child tree, we should
	    // keep these effects.
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,

	    firstEffect: null,
	    lastEffect: null,

	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function createUpdate(expirationTime) {
	  return {
	    expirationTime: expirationTime,

	    tag: UpdateState,
	    payload: null,
	    callback: null,

	    next: null,
	    nextEffect: null
	  };
	}

	function appendUpdateToQueue(queue, update) {
	  // Append the update to the end of the list.
	  if (queue.lastUpdate === null) {
	    // Queue is empty
	    queue.firstUpdate = queue.lastUpdate = update;
	  } else {
	    queue.lastUpdate.next = update;
	    queue.lastUpdate = update;
	  }
	}

	function enqueueUpdate(fiber, update) {
	  // Update queues are created lazily.
	  var alternate = fiber.alternate;
	  var queue1 = void 0;
	  var queue2 = void 0;
	  if (alternate === null) {
	    // There's only one fiber.
	    queue1 = fiber.updateQueue;
	    queue2 = null;
	    if (queue1 === null) {
	      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	    }
	  } else {
	    // There are two owners.
	    queue1 = fiber.updateQueue;
	    queue2 = alternate.updateQueue;
	    if (queue1 === null) {
	      if (queue2 === null) {
	        // Neither fiber has an update queue. Create new ones.
	        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
	      } else {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
	      }
	    } else {
	      if (queue2 === null) {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
	      } else {
	        // Both owners have an update queue.
	      }
	    }
	  }
	  if (queue2 === null || queue1 === queue2) {
	    // There's only a single queue.
	    appendUpdateToQueue(queue1, update);
	  } else {
	    // There are two queues. We need to append the update to both queues,
	    // while accounting for the persistent structure of the list — we don't
	    // want the same update to be added multiple times.
	    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
	      // One of the queues is not empty. We must add the update to both queues.
	      appendUpdateToQueue(queue1, update);
	      appendUpdateToQueue(queue2, update);
	    } else {
	      // Both queues are non-empty. The last update is the same in both lists,
	      // because of structural sharing. So, only append to one of the lists.
	      appendUpdateToQueue(queue1, update);
	      // But we still need to update the `lastUpdate` pointer of queue2.
	      queue2.lastUpdate = update;
	    }
	  }

	  {
	    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
	      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}

	function enqueueCapturedUpdate(workInProgress, update) {
	  // Captured updates go into a separate list, and only on the work-in-
	  // progress queue.
	  var workInProgressQueue = workInProgress.updateQueue;
	  if (workInProgressQueue === null) {
	    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
	  } else {
	    // TODO: I put this here rather than createWorkInProgress so that we don't
	    // clone the queue unnecessarily. There's probably a better way to
	    // structure this.
	    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
	  }

	  // Append the update to the end of the list.
	  if (workInProgressQueue.lastCapturedUpdate === null) {
	    // This is the first render phase update
	    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
	  } else {
	    workInProgressQueue.lastCapturedUpdate.next = update;
	    workInProgressQueue.lastCapturedUpdate = update;
	  }
	}

	function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
	  var current = workInProgress.alternate;
	  if (current !== null) {
	    // If the work-in-progress queue is equal to the current queue,
	    // we need to clone it first.
	    if (queue === current.updateQueue) {
	      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
	    }
	  }
	  return queue;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var _payload = update.payload;
	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }
	          return _payload.call(instance, prevState, nextProps);
	        }
	        // State object
	        return _payload;
	      }
	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough
	    case UpdateState:
	      {
	        var _payload2 = update.payload;
	        var partialState = void 0;
	        if (typeof _payload2 === 'function') {
	          // Updater function
	          {
	            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	              _payload2.call(instance, prevState, nextProps);
	            }
	          }
	          partialState = _payload2.call(instance, prevState, nextProps);
	        } else {
	          // Partial state object
	          partialState = _payload2;
	        }
	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        }
	        // Merge the partial state and the previous state.
	        return _assign({}, prevState, partialState);
	      }
	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }
	  return prevState;
	}

	function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
	  hasForceUpdate = false;

	  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

	  {
	    currentlyProcessingQueue = queue;
	  }

	  // These values may change as we process the queue.
	  var newBaseState = queue.baseState;
	  var newFirstUpdate = null;
	  var newExpirationTime = NoWork;

	  // Iterate through the list of updates to compute the result.
	  var update = queue.firstUpdate;
	  var resultState = newBaseState;
	  while (update !== null) {
	    var updateExpirationTime = update.expirationTime;
	    if (updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstUpdate === null) {
	        // This is the first skipped update. It will be the first update in
	        // the new list.
	        newFirstUpdate = update;
	        // Since this is the first update that was skipped, the current result
	        // is the new base state.
	        newBaseState = resultState;
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < updateExpirationTime) {
	        newExpirationTime = updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback = update.callback;
	      if (_callback !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastEffect === null) {
	          queue.firstEffect = queue.lastEffect = update;
	        } else {
	          queue.lastEffect.nextEffect = update;
	          queue.lastEffect = update;
	        }
	      }
	    }
	    // Continue to the next update.
	    update = update.next;
	  }

	  // Separately, iterate though the list of captured updates.
	  var newFirstCapturedUpdate = null;
	  update = queue.firstCapturedUpdate;
	  while (update !== null) {
	    var _updateExpirationTime = update.expirationTime;
	    if (_updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstCapturedUpdate === null) {
	        // This is the first skipped captured update. It will be the first
	        // update in the new list.
	        newFirstCapturedUpdate = update;
	        // If this is the first update that was skipped, the current result is
	        // the new base state.
	        if (newFirstUpdate === null) {
	          newBaseState = resultState;
	        }
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < _updateExpirationTime) {
	        newExpirationTime = _updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback2 = update.callback;
	      if (_callback2 !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastCapturedEffect === null) {
	          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
	        } else {
	          queue.lastCapturedEffect.nextEffect = update;
	          queue.lastCapturedEffect = update;
	        }
	      }
	    }
	    update = update.next;
	  }

	  if (newFirstUpdate === null) {
	    queue.lastUpdate = null;
	  }
	  if (newFirstCapturedUpdate === null) {
	    queue.lastCapturedUpdate = null;
	  } else {
	    workInProgress.effectTag |= Callback;
	  }
	  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
	    // We processed every update, without skipping. That means the new base
	    // state is the same as the result state.
	    newBaseState = resultState;
	  }

	  queue.baseState = newBaseState;
	  queue.firstUpdate = newFirstUpdate;
	  queue.firstCapturedUpdate = newFirstCapturedUpdate;

	  // Set the remaining expiration time to be whatever is remaining in the queue.
	  // This should be fine because the only two other things that contribute to
	  // expiration time are props and context. We're already in the middle of the
	  // begin phase by the time we start processing the queue, so we've already
	  // dealt with the props. Context in components that specify
	  // shouldComponentUpdate is tricky; but we'll have to account for
	  // that regardless.
	  workInProgress.expirationTime = newExpirationTime;
	  workInProgress.memoizedState = resultState;

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}

	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}

	function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
	  // If the finished render included captured updates, and there are still
	  // lower priority updates left over, we need to keep the captured updates
	  // in the queue so that they are rebased and not dropped once we process the
	  // queue again at the lower priority.
	  if (finishedQueue.firstCapturedUpdate !== null) {
	    // Join the captured update list to the end of the normal list.
	    if (finishedQueue.lastUpdate !== null) {
	      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
	      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
	    }
	    // Clear the list of captured updates.
	    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
	  }

	  // Commit the effects
	  commitUpdateEffects(finishedQueue.firstEffect, instance);
	  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

	  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
	  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
	}

	function commitUpdateEffects(effect, instance) {
	  while (effect !== null) {
	    var _callback3 = effect.callback;
	    if (_callback3 !== null) {
	      effect.callback = null;
	      callCallback(_callback3, instance);
	    }
	    effect = effect.nextEffect;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	var valueCursor = createCursor(null);

	var rendererSigil = void 0;
	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;

	function resetContextDependences() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	}

	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  if (isPrimaryRenderer) {
	    push(valueCursor, context._currentValue, providerFiber);

	    context._currentValue = nextValue;
	    {
	      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer = rendererSigil;
	    }
	  } else {
	    push(valueCursor, context._currentValue2, providerFiber);

	    context._currentValue2 = nextValue;
	    {
	      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer2 = rendererSigil;
	    }
	  }
	}

	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;

	  pop(valueCursor, providerFiber);

	  var context = providerFiber.type._context;
	  if (isPrimaryRenderer) {
	    context._currentValue = currentValue;
	  } else {
	    context._currentValue2 = currentValue;
	  }
	}

	function calculateChangedBits(context, newValue, oldValue) {
	  // Use Object.is to compare the new context value to the old value. Inlined
	  // Object.is polyfill.
	  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	  if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
	  ) {
	      // No change
	      return 0;
	    } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

	    {
	      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
	    }
	    return changedBits | 0;
	  }
	}

	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;
	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }
	  while (fiber !== null) {
	    var nextFiber = void 0;

	    // Visit this fiber.
	    var dependency = fiber.firstContextDependency;
	    if (dependency !== null) {
	      do {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.

	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime);
	            update.tag = ForceUpdate;
	            // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }
	          var alternate = fiber.alternate;
	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }
	          // Update the child expiration time of all the ancestors, including
	          // the alternates.
	          var node = fiber.return;
	          while (node !== null) {
	            alternate = node.alternate;
	            if (node.childExpirationTime < renderExpirationTime) {
	              node.childExpirationTime = renderExpirationTime;
	              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	                alternate.childExpirationTime = renderExpirationTime;
	              }
	            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	              alternate.childExpirationTime = renderExpirationTime;
	            } else {
	              // Neither alternate was updated, which means the rest of the
	              // ancestor path already has sufficient priority.
	              break;
	            }
	            node = node.return;
	          }
	        }
	        nextFiber = fiber.child;
	        dependency = dependency.next;
	      } while (dependency !== null);
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;
	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }
	        var sibling = nextFiber.sibling;
	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        }
	        // No more siblings. Traverse up.
	        nextFiber = nextFiber.return;
	      }
	    }
	    fiber = nextFiber;
	  }
	}

	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  // Reset the work-in-progress list
	  workInProgress.firstContextDependency = null;
	}

	function readContext(context, observedBits) {
	  if (lastContextWithAllBitsObserved === context) {
	    // Nothing to do. We already observe everything in this context.
	  } else if (observedBits === false || observedBits === 0) {
	    // Do not observe any updates.
	  } else {
	    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
	    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = maxSigned31BitInt;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
	      // This is the first dependency in the list
	      currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }
	  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
	}

	var NoEffect$1 = /*             */0;
	var UnmountSnapshot = /*      */2;
	var UnmountMutation = /*      */4;
	var MountMutation = /*        */8;
	var UnmountLayout = /*        */16;
	var MountLayout = /*          */32;
	var MountPassive = /*         */64;
	var UnmountPassive = /*       */128;

	function areHookInputsEqual(arr1, arr2) {
	  // Don't bother comparing lengths in prod because these arrays should be
	  // passed inline.
	  {
	    !(arr1.length === arr2.length) ? warning$1(false, 'Detected a variable number of hook dependencies. The length of the ' + 'dependencies array should be constant between renders.\n\n' + 'Previous: %s\n' + 'Incoming: %s', arr1.join(', '), arr2.join(', ')) : void 0;
	  }
	  for (var i = 0; i < arr1.length; i++) {
	    // Inlined Object.is polyfill.
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	    var val1 = arr1[i];
	    var val2 = arr2[i];
	    if (val1 === val2 && (val1 !== 0 || 1 / val1 === 1 / val2) || val1 !== val1 && val2 !== val2 // eslint-disable-line no-self-compare
	    ) {
	        continue;
	      }
	    return false;
	  }
	  return true;
	}

	// These are set right before calling the component.
	var renderExpirationTime = NoWork;
	// The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.
	var currentlyRenderingFiber$1 = null;

	// Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.
	var firstCurrentHook = null;
	var currentHook = null;
	var firstWorkInProgressHook = null;
	var workInProgressHook = null;

	var remainingExpirationTime = NoWork;
	var componentUpdateQueue = null;

	// Updates scheduled during render will trigger an immediate re-render at the
	// end of the current pass. We can't store these updates on the normal queue,
	// because if the work is aborted, they should be discarded. Because this is
	// a relatively rare case, we also don't want to add an additional field to
	// either the hook or queue object types. So we store them in a lazily create
	// map of queue -> render-phase updates, which are discarded once the component
	// completes without re-rendering.

	// Whether the work-in-progress hook is a re-rendered hook
	var isReRender = false;
	// Whether an update was scheduled during the currently executing render pass.
	var didScheduleRenderPhaseUpdate = false;
	// Lazily created map of render-phase updates
	var renderPhaseUpdates = null;
	// Counter to prevent infinite loops.
	var numberOfReRenders = 0;
	var RE_RENDER_LIMIT = 25;

	function resolveCurrentlyRenderingFiber() {
	  !(currentlyRenderingFiber$1 !== null) ? invariant(false, 'Hooks can only be called inside the body of a function component.') : void 0;
	  return currentlyRenderingFiber$1;
	}

	function prepareToUseHooks(current, workInProgress, nextRenderExpirationTime) {
	  if (!enableHooks) {
	    return;
	  }
	  renderExpirationTime = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;
	  firstCurrentHook = current !== null ? current.memoizedState : null;

	  // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;

	  // remainingExpirationTime = NoWork;
	  // componentUpdateQueue = null;

	  // isReRender = false;
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;
	}

	function finishHooks(Component, props, children, refOrContext) {
	  if (!enableHooks) {
	    return children;
	  }

	  // This must be called after every function component to prevent hooks from
	  // being used in classes.

	  while (didScheduleRenderPhaseUpdate) {
	    // Updates were scheduled during the render phase. They are stored in
	    // the `renderPhaseUpdates` map. Call the component again, reusing the
	    // work-in-progress hooks and applying the additional updates on top. Keep
	    // restarting until no more updates are scheduled.
	    didScheduleRenderPhaseUpdate = false;
	    numberOfReRenders += 1;

	    // Start over from the beginning of the list
	    currentHook = null;
	    workInProgressHook = null;
	    componentUpdateQueue = null;

	    children = Component(props, refOrContext);
	  }
	  renderPhaseUpdates = null;
	  numberOfReRenders = 0;

	  var renderedWork = currentlyRenderingFiber$1;

	  renderedWork.memoizedState = firstWorkInProgressHook;
	  renderedWork.expirationTime = remainingExpirationTime;
	  renderedWork.updateQueue = componentUpdateQueue;

	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;

	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;

	  // Always set during createWorkInProgress
	  // isReRender = false;

	  // These were reset above
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;

	  !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;

	  return children;
	}

	function resetHooks() {
	  if (!enableHooks) {
	    return;
	  }

	  // This is called instead of `finishHooks` if the component throws. It's also
	  // called inside mountIndeterminateComponent if we determine the component
	  // is a module-style component.
	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;

	  // Always set during createWorkInProgress
	  // isReRender = false;

	  didScheduleRenderPhaseUpdate = false;
	  renderPhaseUpdates = null;
	  numberOfReRenders = 0;
	}

	function createHook() {
	  return {
	    memoizedState: null,

	    baseState: null,
	    queue: null,
	    baseUpdate: null,

	    next: null
	  };
	}

	function cloneHook(hook) {
	  return {
	    memoizedState: hook.memoizedState,

	    baseState: hook.memoizedState,
	    queue: hook.queue,
	    baseUpdate: hook.baseUpdate,

	    next: null
	  };
	}

	function createWorkInProgressHook() {
	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    if (firstWorkInProgressHook === null) {
	      isReRender = false;
	      currentHook = firstCurrentHook;
	      if (currentHook === null) {
	        // This is a newly mounted hook
	        workInProgressHook = createHook();
	      } else {
	        // Clone the current hook.
	        workInProgressHook = cloneHook(currentHook);
	      }
	      firstWorkInProgressHook = workInProgressHook;
	    } else {
	      // There's already a work-in-progress. Reuse it.
	      isReRender = true;
	      currentHook = firstCurrentHook;
	      workInProgressHook = firstWorkInProgressHook;
	    }
	  } else {
	    if (workInProgressHook.next === null) {
	      isReRender = false;
	      var hook = void 0;
	      if (currentHook === null) {
	        // This is a newly mounted hook
	        hook = createHook();
	      } else {
	        currentHook = currentHook.next;
	        if (currentHook === null) {
	          // This is a newly mounted hook
	          hook = createHook();
	        } else {
	          // Clone the current hook.
	          hook = cloneHook(currentHook);
	        }
	      }
	      // Append to the end of the list
	      workInProgressHook = workInProgressHook.next = hook;
	    } else {
	      // There's already a work-in-progress. Reuse it.
	      isReRender = true;
	      workInProgressHook = workInProgressHook.next;
	      currentHook = currentHook !== null ? currentHook.next : null;
	    }
	  }
	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  return typeof action === 'function' ? action(state) : action;
	}

	function useContext(context, observedBits) {
	  // Ensure we're in a function component (class components support only the
	  // .unstable_read() form)
	  resolveCurrentlyRenderingFiber();
	  return readContext(context, observedBits);
	}

	function useState(initialState) {
	  return useReducer(basicStateReducer,
	  // useReducer has a special case to support lazy useState initializers
	  initialState);
	}

	function useReducer(reducer, initialState, initialAction) {
	  currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
	  workInProgressHook = createWorkInProgressHook();
	  var queue = workInProgressHook.queue;
	  if (queue !== null) {
	    // Already have a queue, so this is an update.
	    if (isReRender) {
	      // This is a re-render. Apply the new render phase updates to the previous
	      var _dispatch2 = queue.dispatch;
	      if (renderPhaseUpdates !== null) {
	        // Render phase updates are stored in a map of queue -> linked list
	        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
	        if (firstRenderPhaseUpdate !== undefined) {
	          renderPhaseUpdates.delete(queue);
	          var newState = workInProgressHook.memoizedState;
	          var update = firstRenderPhaseUpdate;
	          do {
	            // Process this render phase update. We don't have to check the
	            // priority because it will always be the same as the current
	            // render's.
	            var _action = update.action;
	            newState = reducer(newState, _action);
	            update = update.next;
	          } while (update !== null);

	          workInProgressHook.memoizedState = newState;

	          // Don't persist the state accumlated from the render phase updates to
	          // the base state unless the queue is empty.
	          // TODO: Not sure if this is the desired semantics, but it's what we
	          // do for gDSFP. I can't remember why.
	          if (workInProgressHook.baseUpdate === queue.last) {
	            workInProgressHook.baseState = newState;
	          }

	          return [newState, _dispatch2];
	        }
	      }
	      return [workInProgressHook.memoizedState, _dispatch2];
	    }

	    // The last update in the entire queue
	    var _last = queue.last;
	    // The last update that is part of the base state.
	    var _baseUpdate = workInProgressHook.baseUpdate;

	    // Find the first unprocessed update.
	    var first = void 0;
	    if (_baseUpdate !== null) {
	      if (_last !== null) {
	        // For the first update, the queue is a circular linked list where
	        // `queue.last.next = queue.first`. Once the first update commits, and
	        // the `baseUpdate` is no longer empty, we can unravel the list.
	        _last.next = null;
	      }
	      first = _baseUpdate.next;
	    } else {
	      first = _last !== null ? _last.next : null;
	    }
	    if (first !== null) {
	      var _newState = workInProgressHook.baseState;
	      var newBaseState = null;
	      var newBaseUpdate = null;
	      var prevUpdate = _baseUpdate;
	      var _update = first;
	      var didSkip = false;
	      do {
	        var updateExpirationTime = _update.expirationTime;
	        if (updateExpirationTime < renderExpirationTime) {
	          // Priority is insufficient. Skip this update. If this is the first
	          // skipped update, the previous update/state is the new base
	          // update/state.
	          if (!didSkip) {
	            didSkip = true;
	            newBaseUpdate = prevUpdate;
	            newBaseState = _newState;
	          }
	          // Update the remaining priority in the queue.
	          if (updateExpirationTime > remainingExpirationTime) {
	            remainingExpirationTime = updateExpirationTime;
	          }
	        } else {
	          // Process this update.
	          var _action2 = _update.action;
	          _newState = reducer(_newState, _action2);
	        }
	        prevUpdate = _update;
	        _update = _update.next;
	      } while (_update !== null && _update !== first);

	      if (!didSkip) {
	        newBaseUpdate = prevUpdate;
	        newBaseState = _newState;
	      }

	      workInProgressHook.memoizedState = _newState;
	      workInProgressHook.baseUpdate = newBaseUpdate;
	      workInProgressHook.baseState = newBaseState;
	    }

	    var _dispatch = queue.dispatch;
	    return [workInProgressHook.memoizedState, _dispatch];
	  }

	  // There's no existing queue, so this is the initial render.
	  if (reducer === basicStateReducer) {
	    // Special case for `useState`.
	    if (typeof initialState === 'function') {
	      initialState = initialState();
	    }
	  } else if (initialAction !== undefined && initialAction !== null) {
	    initialState = reducer(initialState, initialAction);
	  }
	  workInProgressHook.memoizedState = workInProgressHook.baseState = initialState;
	  queue = workInProgressHook.queue = {
	    last: null,
	    dispatch: null
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [workInProgressHook.memoizedState, dispatch];
	}

	function pushEffect(tag, create, destroy, inputs) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    inputs: inputs,
	    // Circular
	    next: null
	  };
	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var _lastEffect = componentUpdateQueue.lastEffect;
	    if (_lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = _lastEffect.next;
	      _lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }
	  return effect;
	}

	function useRef(initialValue) {
	  currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
	  workInProgressHook = createWorkInProgressHook();
	  var ref = void 0;

	  if (workInProgressHook.memoizedState === null) {
	    ref = { current: initialValue };
	    {
	      Object.seal(ref);
	    }
	    workInProgressHook.memoizedState = ref;
	  } else {
	    ref = workInProgressHook.memoizedState;
	  }
	  return ref;
	}

	function useMutationEffect(create, inputs) {
	  useEffectImpl(Snapshot | Update, UnmountSnapshot | MountMutation, create, inputs);
	}

	function useLayoutEffect(create, inputs) {
	  useEffectImpl(Update, UnmountMutation | MountLayout, create, inputs);
	}

	function useEffect(create, inputs) {
	  useEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, inputs);
	}

	function useEffectImpl(fiberEffectTag, hookEffectTag, create, inputs) {
	  currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
	  workInProgressHook = createWorkInProgressHook();

	  var nextInputs = inputs !== undefined && inputs !== null ? inputs : [create];
	  var destroy = null;
	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;
	    if (areHookInputsEqual(nextInputs, prevEffect.inputs)) {
	      pushEffect(NoEffect$1, create, destroy, nextInputs);
	      return;
	    }
	  }

	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  workInProgressHook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextInputs);
	}

	function useImperativeMethods(ref, create, inputs) {
	  // TODO: If inputs are provided, should we skip comparing the ref itself?
	  var nextInputs = inputs !== null && inputs !== undefined ? inputs.concat([ref]) : [ref, create];

	  // TODO: I've implemented this on top of useEffect because it's almost the
	  // same thing, and it would require an equal amount of code. It doesn't seem
	  // like a common enough use case to justify the additional size.
	  useEffectImpl(Update, UnmountMutation | MountLayout, function () {
	    if (typeof ref === 'function') {
	      var refCallback = ref;
	      var _inst = create();
	      refCallback(_inst);
	      return function () {
	        return refCallback(null);
	      };
	    } else if (ref !== null && ref !== undefined) {
	      var refObject = ref;
	      var _inst2 = create();
	      refObject.current = _inst2;
	      return function () {
	        refObject.current = null;
	      };
	    }
	  }, nextInputs);
	}

	function useCallback(callback, inputs) {
	  currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
	  workInProgressHook = createWorkInProgressHook();

	  var nextInputs = inputs !== undefined && inputs !== null ? inputs : [callback];

	  var prevState = workInProgressHook.memoizedState;
	  if (prevState !== null) {
	    var prevInputs = prevState[1];
	    if (areHookInputsEqual(nextInputs, prevInputs)) {
	      return prevState[0];
	    }
	  }
	  workInProgressHook.memoizedState = [callback, nextInputs];
	  return callback;
	}

	function useMemo(nextCreate, inputs) {
	  currentlyRenderingFiber$1 = resolveCurrentlyRenderingFiber();
	  workInProgressHook = createWorkInProgressHook();

	  var nextInputs = inputs !== undefined && inputs !== null ? inputs : [nextCreate];

	  var prevState = workInProgressHook.memoizedState;
	  if (prevState !== null) {
	    var prevInputs = prevState[1];
	    if (areHookInputsEqual(nextInputs, prevInputs)) {
	      return prevState[0];
	    }
	  }

	  var nextValue = nextCreate();
	  workInProgressHook.memoizedState = [nextValue, nextInputs];
	  return nextValue;
	}

	function dispatchAction(fiber, queue, action) {
	  !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;

	  var alternate = fiber.alternate;
	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    var update = {
	      expirationTime: renderExpirationTime,
	      action: action,
	      next: null
	    };
	    if (renderPhaseUpdates === null) {
	      renderPhaseUpdates = new Map();
	    }
	    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
	    if (firstRenderPhaseUpdate === undefined) {
	      renderPhaseUpdates.set(queue, update);
	    } else {
	      // Append the update to the end of the list.
	      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
	      while (lastRenderPhaseUpdate.next !== null) {
	        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	      }
	      lastRenderPhaseUpdate.next = update;
	    }
	  } else {
	    var currentTime = requestCurrentTime();
	    var _expirationTime = computeExpirationForFiber(currentTime, fiber);
	    var _update2 = {
	      expirationTime: _expirationTime,
	      action: action,
	      next: null
	    };
	    flushPassiveEffects();
	    // Append the update to the end of the list.
	    var _last2 = queue.last;
	    if (_last2 === null) {
	      // This is the first update. Create a circular list.
	      _update2.next = _update2;
	    } else {
	      var first = _last2.next;
	      if (first !== null) {
	        // Still circular.
	        _update2.next = first;
	      }
	      _last2.next = _update2;
	    }
	    queue.last = _update2;
	    scheduleWork(fiber, _expirationTime);
	  }
	}

	var NO_CONTEXT = {};

	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber);
	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);

	  // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.
	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance);
	  // Now that we know this function doesn't throw, replace it.
	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

	  // Don't push this Fiber's context unless it's unique.
	  if (context === nextContext) {
	    return;
	  }

	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {
	  if (!enableProfilerTimer) {
	    return;
	  }
	  commitTime = scheduler.unstable_now();
	}

	function startProfilerTimer(fiber) {
	  if (!enableProfilerTimer) {
	    return;
	  }

	  profilerStartTime = scheduler.unstable_now();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = scheduler.unstable_now();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {
	  if (!enableProfilerTimer) {
	    return;
	  }
	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
	  if (!enableProfilerTimer) {
	    return;
	  }

	  if (profilerStartTime >= 0) {
	    var elapsedTime = scheduler.unstable_now() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;
	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }
	    profilerStartTime = -1;
	  }
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);
	    var defaultProps = Component.defaultProps;
	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	    return props;
	  }
	  return baseProps;
	}

	function readLazyComponentType(lazyComponent) {
	  var status = lazyComponent._status;
	  var result = lazyComponent._result;
	  switch (status) {
	    case Resolved:
	      {
	        var Component = result;
	        return Component;
	      }
	    case Rejected:
	      {
	        var error = result;
	        throw error;
	      }
	    case Pending:
	      {
	        var thenable = result;
	        throw thenable;
	      }
	    default:
	      {
	        lazyComponent._status = Pending;
	        var ctor = lazyComponent._ctor;
	        var _thenable = ctor();
	        _thenable.then(function (moduleObject) {
	          if (lazyComponent._status === Pending) {
	            var defaultExport = moduleObject.default;
	            {
	              if (defaultExport === undefined) {
	                warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	              }
	            }
	            lazyComponent._status = Resolved;
	            lazyComponent._result = defaultExport;
	          }
	        }, function (error) {
	          if (lazyComponent._status === Pending) {
	            lazyComponent._status = Rejected;
	            lazyComponent._result = error;
	          }
	        });
	        lazyComponent._result = _thenable;
	        throw _thenable;
	      }
	  }
	}

	var ReactCurrentOwner$4 = ReactSharedInternals.ReactCurrentOwner;

	function readContext$1(contextType) {
	  var dispatcher = ReactCurrentOwner$4.currentDispatcher;
	  return dispatcher.readContext(contextType);
	}

	var fakeInternalInstance = {};
	var isArray$1 = Array.isArray;

	// React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.
	var emptyRefsObject = new React.Component().refs;

	var didWarnAboutStateAssignmentForComponent = void 0;
	var didWarnAboutUninitializedState = void 0;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
	var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
	var didWarnAboutUndefinedDerivedState = void 0;
	var warnOnUndefinedDerivedState = void 0;
	var warnOnInvalidCallback$1 = void 0;
	var didWarnAboutDirectlyAssigningPropsToState = void 0;
	var didWarnAboutContextTypeAndContextTypes = void 0;
	var didWarnAboutInvalidateContextType = void 0;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();

	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback$1 = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }
	    var key = callerName + '_' + callback;
	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);
	      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';
	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);
	        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  };

	  // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.
	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  }
	  // Merge the partial state and the previous state.
	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState;

	  // Once the update queue is empty, persist the derived state onto the
	  // base state.
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.payload = payload;
	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'setState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'replaceState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'forceUpdate');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;
	  if (typeof instance.shouldComponentUpdate === 'function') {
	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;
	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
	    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
	    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
	    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
	    var noInstancePropTypes = !instance.propTypes;
	    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
	    var noInstanceContextType = !instance.contextType;
	    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
	    var noInstanceContextTypes = !instance.contextTypes;
	    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

	    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	      didWarnAboutContextTypeAndContextTypes.add(ctor);
	      warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	    }

	    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
	    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }
	    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
	    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
	    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
	    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
	    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
	    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
	    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
	    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
	    var hasMutatedProps = instance.props !== newProps;
	    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
	    var noInstanceDefaultProps = !instance.defaultProps;
	    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
	      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
	    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
	    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
	    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
	    var _state = instance.state;
	    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
	      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
	    }
	    if (typeof instance.getChildContext === 'function') {
	      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance;
	  // The instance needs access to the fiber so that it can schedule updates
	  set(instance, workInProgress);
	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = null;
	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    {
	      if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');
	      }
	    }

	    context = readContext$1(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  // Instantiate twice to help detect side-effects.
	  {
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);
	        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    }

	    // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.
	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;
	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }
	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }
	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }
	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';
	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
	          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
	        }
	      }
	    }
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.
	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }
	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }
	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }
	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';
	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);
	        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	// Invokes the mount life-cycles on a previously never rendered instance.
	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;

	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext$1(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
	        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    if (warnAboutDeprecatedLifecycles) {
	      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
	    }
	  }

	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  }

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance);
	    // If we had additional state updates during this life-cycle, let's
	    // process them now.
	    updateQueue = workInProgress.updateQueue;
	    if (updateQueue !== null) {
	      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	      instance.state = workInProgress.memoizedState;
	    }
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext$1(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }
	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }
	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	// Invokes the update life-cycles and returns false if it shouldn't rerender.
	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext$1(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }
	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	var didWarnAboutMaps = void 0;
	var didWarnAboutGenerators = void 0;
	var didWarnAboutStringRefInStrictMode = void 0;
	var ownerHasKeyUseWarning = void 0;
	var ownerHasFunctionTypeWarning = void 0;
	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefInStrictMode = {};

	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */
	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }
	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }
	    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    child._store.validated = true;

	    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }
	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray = Array.isArray;

	function coerceRef(returnFiber, current$$1, element) {
	  var mixedRef = element.ref;
	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      if (returnFiber.mode & StrictMode) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';
	        if (!didWarnAboutStringRefInStrictMode[componentName]) {
	          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          didWarnAboutStringRefInStrictMode[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst = void 0;
	      if (owner) {
	        var ownerFiber = owner;
	        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs.') : void 0;
	        inst = ownerFiber.stateNode;
	      }
	      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
	      var stringRef = '' + mixedRef;
	      // Check if previous string ref matches new string ref
	      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
	        return current$$1.ref;
	      }
	      var ref = function (value) {
	        var refs = inst.refs;
	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }
	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };
	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
	      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
	    }
	  }
	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';
	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }
	    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
	  }
	}

	function warnOnFunctionType() {
	  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	}

	// This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.
	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }
	    // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.
	    var last = returnFiber.lastEffect;
	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }
	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    }

	    // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.
	    var childToDelete = currentFirstChild;
	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }
	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    var existingChildren = new Map();

	    var existingChild = currentFirstChild;
	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }
	      existingChild = existingChild.sibling;
	    }
	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps, expirationTime) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }
	    var current$$1 = newFiber.alternate;
	    if (current$$1 !== null) {
	      var oldIndex = current$$1.index;
	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }
	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current$$1, element, expirationTime) {
	    if (current$$1 !== null && current$$1.elementType === element.type) {
	      // Move based on index
	      var existing = useFiber(current$$1, element.props, expirationTime);
	      existing.ref = coerceRef(returnFiber, current$$1, element);
	      existing.return = returnFiber;
	      {
	        existing._debugSource = element._source;
	        existing._debugOwner = element._owner;
	      }
	      return existing;
	    } else {
	      // Insert
	      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      created.ref = coerceRef(returnFiber, current$$1, element);
	      created.return = returnFiber;
	      return created;
	    }
	  }

	  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, portal.children || [], expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
	    if (current$$1 === null || current$$1.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, fragment, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.

	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }
	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }
	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }
	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;
	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  /**
	   * Warns if there is a duplicate or missing key
	   */
	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }
	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;
	          if (typeof key !== 'string') {
	            break;
	          }
	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }
	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }
	          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
	          break;
	        default:
	          break;
	      }
	    }
	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from boths ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.

	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.

	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.

	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.

	    {
	      // First, validate keys.
	      var knownKeys = null;
	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
	        if (!_newFiber) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }
	        previousNewFiber = _newFiber;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
	      if (_newFiber2) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }
	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.

	    var iteratorFn = getIteratorFn(newChildrenIterable);
	    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' &&
	      // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
	        didWarnAboutGenerators = true;
	      }

	      // Warn about using Maps as children
	      if (newChildrenIterable.entries === iteratorFn) {
	        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	        didWarnAboutMaps = true;
	      }

	      // First, validate keys.
	      // We'll get a different iterator later for the main pass.
	      var _newChildren = iteratorFn.call(newChildrenIterable);
	      if (_newChildren) {
	        var knownKeys = null;
	        var _step = _newChildren.next();
	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);
	    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    var step = newChildren.next();
	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (!oldFiber) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
	        if (_newFiber3 === null) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }
	        previousNewFiber = _newFiber3;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }
	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	    // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.
	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
	          existing.ref = coerceRef(returnFiber, child, element);
	          existing.return = returnFiber;
	          {
	            existing._debugSource = element._source;
	            existing._debugOwner = element._owner;
	          }
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || [], expirationTime);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.
	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.

	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    }

	    // Handle object types
	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }
	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;
	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough
	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;
	            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
	          }
	      }
	    }

	    // Remaining cases are all treated as empty.
	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);

	function cloneChildFibers(current$$1, workInProgress) {
	  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	  workInProgress.child = newChild;

	  newChild.return = workInProgress;
	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	    newChild.return = workInProgress;
	  }
	  newChild.sibling = null;
	}

	// The deepest Fiber on the stack involved in a hydration context.
	// This may have been an insertion or a hydration.
	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;
	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion;

	  // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.
	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag |= Placement;
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;
	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type, props);
	              break;
	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }
	          break;
	        }
	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;
	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
	              break;
	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;
	          }
	          break;
	        }
	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type, props);
	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }
	        return false;
	      }
	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);
	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }
	        return false;
	      }
	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }
	  var nextInstance = nextHydratableInstance;
	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }
	  var firstAttemptedInstance = nextInstance;
	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    }
	    // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.
	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }
	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
	  if (!supportsHydration) {
	    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
	  // TODO: Type this specific to this type of component.
	  fiber.updateQueue = updatePayload;
	  // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.
	  if (updatePayload !== null) {
	    return true;
	  }
	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {
	  if (!supportsHydration) {
	    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;
	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }
	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }
	  return shouldUpdate;
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;
	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
	    parent = parent.return;
	  }
	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }
	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }
	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type;

	  // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.
	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;
	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);
	  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  return true;
	}

	function resetHydrationState() {
	  if (!supportsHydration) {
	    return;
	  }

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

	var didWarnAboutBadClass = void 0;
	var didWarnAboutContextTypeOnFunctionComponent = void 0;
	var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
	var didWarnAboutFunctionRefs = void 0;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	}

	function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  if (current$$1 === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.

	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
	  // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their their
	  // identity matches.
	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  var render = Component.render;
	  var ref = workInProgress.ref;

	  // The rest is a fork of updateFunctionComponent
	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = render(nextProps, ref);
	    setCurrentPhase(null);
	  }
	  nextChildren = finishHooks(render, nextProps, nextChildren, ref);

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 === null) {
	    var type = Component.type;
	    if (isSimpleFunctionComponent(type) && Component.compare === null) {
	      // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.
	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = type;
	      return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
	    }
	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }
	  var currentChild = current$$1.child; // This is always exactly one child
	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps;
	    // Default to shallow comparison
	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;
	    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 !== null && updateExpirationTime < renderExpirationTime) {
	    var prevProps = current$$1.memoizedProps;
	    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }
	  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
	  if (enableProfilerTimer) {
	    workInProgress.effectTag |= Update;
	  }
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current$$1, workInProgress) {
	  var ref = workInProgress.ref;
	  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(current$$1, workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = Component(nextProps, context);
	    setCurrentPhase(null);
	  }
	  nextChildren = finishHooks(Component, nextProps, nextChildren, context);

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  var instance = workInProgress.stateNode;
	  var shouldUpdate = void 0;
	  if (instance === null) {
	    if (current$$1 !== null) {
	      // An class component without an instance only mounts if it suspended
	      // inside a non- concurrent tree, in an inconsistent state. We want to
	      // tree it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current$$1.alternate = null;
	      workInProgress.alternate = null;
	      // Since this is conceptually a new fiber, schedule a Placement effect
	      workInProgress.effectTag |= Placement;
	    }
	    // In the initial pass we might need to construct the instance.
	    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current$$1 === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	  }
	  return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
	}

	function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current$$1, workInProgress);

	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode;

	  // Rerender
	  ReactCurrentOwner$3.current = workInProgress;
	  var nextChildren = void 0;
	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFrom catch is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    if (enableProfilerTimer) {
	      stopProfilerTimerIfRunning(workInProgress);
	    }
	  } else {
	    {
	      setCurrentPhase('render');
	      nextChildren = instance.render();
	      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	        instance.render();
	      }
	      setCurrentPhase(null);
	    }
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  if (current$$1 !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }

	  // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.
	  workInProgress.memoizedState = instance.state;

	  // The context might have changed so we need to recalculate it.
	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;
	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }
	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;
	  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  var nextChildren = nextState.element;
	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }
	  var root = workInProgress.stateNode;
	  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.

	    // This is a bit of a hack. We track the host root as a placement to
	    // know that we're currently in a mounting state. That way isMounted
	    // works as expected. We must reset this before committing.
	    // TODO: Delete this when we delete isMounted and findDOMNode.
	    workInProgress.effectTag |= Placement;

	    // Ensure that children mount into this root without tracking
	    // side-effects. This ensures that we don't store Placement effects on
	    // nodes that will be hydrated.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }
	  return workInProgress.child;
	}

	function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also have access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current$$1, workInProgress);

	  // Check the host config to see if the children are offscreen/hidden.
	  if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
	    // Schedule this fiber to re-render at offscreen priority. Then bailout.
	    workInProgress.expirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current$$1, workInProgress) {
	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }
	  // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.
	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // An lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.
	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType);
	  // Store the unwrapped component in the type.
	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child = void 0;
	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ClassComponent:
	      {
	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ForwardRef:
	      {
	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case MemoComponent:
	      {
	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        break;
	      }
	    default:
	      {
	        // This message intentionally doesn't mention ForwardRef or MemoComponent
	        // because the fact that it's a separate type of work is an
	        // implementation detail.
	        invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
	      }
	  }
	  return child;
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  // Promote the fiber to a class and try rendering again.
	  workInProgress.tag = ClassComponent;

	  // The rest of this function is a fork of `updateClassComponent`

	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  prepareToUseHooks(null, workInProgress, renderExpirationTime);

	  var value = void 0;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    ReactCurrentOwner$3.current = workInProgress;
	    value = Component(props, context);
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    // Proceed under the assumption that this is a class instance
	    workInProgress.tag = ClassComponent;

	    // Throw out any hooks that were used.
	    resetHooks();

	    // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.
	    var hasContext = false;
	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;
	    value = finishHooks(Component, props, value, context);
	    {
	      if (Component) {
	        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	      if (workInProgress.ref !== null) {
	        var info = '';
	        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	        if (ownerName) {
	          info += '\n\nCheck the render method of `' + ownerName + '`.';
	        }

	        var warningKey = ownerName || workInProgress._debugID || '';
	        var debugSource = workInProgress._debugSource;
	        if (debugSource) {
	          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	        }
	        if (!didWarnAboutFunctionRefs[warningKey]) {
	          didWarnAboutFunctionRefs[warningKey] = true;
	          warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
	        }
	      }

	      if (typeof Component.getDerivedStateFromProps === 'function') {
	        var _componentName = getComponentName(Component) || 'Unknown';

	        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]) {
	          warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', _componentName);
	          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName] = true;
	        }
	      }

	      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	        var _componentName2 = getComponentName(Component) || 'Unknown';

	        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName2]) {
	          warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName2);
	          didWarnAboutContextTypeOnFunctionComponent[_componentName2] = true;
	        }
	      }
	    }
	    reconcileChildren(null, workInProgress, value, renderExpirationTime);
	    return workInProgress.child;
	  }
	}

	function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps;

	  // We should attempt to render the primary children unless this boundary
	  // already suspended during this render (`alreadyCaptured` is true).
	  var nextState = workInProgress.memoizedState;

	  var nextDidTimeout = void 0;
	  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
	    // This is the first attempt.
	    nextState = null;
	    nextDidTimeout = false;
	  } else {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextState = {
	      timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
	    };
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  }

	  // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  // `child` points to the child fiber. In the normal case, this is the first
	  // fiber of the primary children set. In the timed-out case, it's a
	  // a fragment fiber containing the primary children.
	  var child = void 0;
	  // `next` points to the next fiber React should render. In the normal case,
	  // it's the same as `child`: the first fiber of the primary children set.
	  // In the timed-out case, it's a fragment fiber containing the *fallback*
	  // children -- we skip over the primary children entirely.
	  var next = void 0;
	  if (current$$1 === null) {
	    // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.
	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

	      if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	        // Outside of concurrent mode, we commit the effects from the
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      primaryChildFragment.sibling = fallbackChildFragment;
	      child = primaryChildFragment;
	      // Skip the primary children, and continue working on the
	      // fallback children.
	      next = fallbackChildFragment;
	      child.return = next.return = workInProgress;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current$$1.memoizedState;
	    var prevDidTimeout = prevState !== null;
	    if (prevDidTimeout) {
	      // The current tree already timed out. That means each child set is
	      var currentPrimaryChildFragment = current$$1.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren = nextProps.fallback;
	        var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState = workInProgress.memoizedState;
	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment.child = _progressedPrimaryChild;
	          }
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var treeBaseDuration = 0;
	          var hiddenChild = _primaryChildFragment.child;
	          while (hiddenChild !== null) {
	            treeBaseDuration += hiddenChild.treeBaseDuration;
	            hiddenChild = hiddenChild.sibling;
	          }
	          _primaryChildFragment.treeBaseDuration = treeBaseDuration;
	        }

	        // Clone the fallback child fragment, too. These we'll continue
	        // working on.
	        var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
	        child = _primaryChildFragment;
	        _primaryChildFragment.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment;
	        child.return = next.return = workInProgress;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);

	        // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?

	        // Continue rendering the children, like we normally do.
	        child = next = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current$$1.child;
	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren2 = nextProps.fallback;
	        var _primaryChildFragment2 = createFiberFromFragment(
	        // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);
	        _primaryChildFragment2.child = _currentPrimaryChild;

	        // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState2 = workInProgress.memoizedState;
	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
	          _primaryChildFragment2.child = _progressedPrimaryChild2;
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;
	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }
	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        }

	        // Create a fragment from the fallback children, too.
	        var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
	        _fallbackChildFragment2.effectTag |= Placement;
	        child = _primaryChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment2;
	        child.return = next.return = workInProgress;
	      } else {
	        // Still haven't timed out.  Continue rendering the children, like we
	        // normally do.
	        var _nextPrimaryChildren2 = nextProps.children;
	        next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }

	  workInProgress.memoizedState = nextState;
	  workInProgress.child = child;
	  return next;
	}

	function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;
	  if (current$$1 === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }
	  return workInProgress.child;
	}

	function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;

	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;

	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);
	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type;
	  // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.
	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;
	          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }
	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren = void 0;
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    newChildren = render(newValue);
	    setCurrentPhase(null);
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current$$1 !== null) {
	    // Reuse previous context list
	    workInProgress.firstContextDependency = current$$1.firstContextDependency;
	  }

	  if (enableProfilerTimer) {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning(workInProgress);
	  }

	  // Check if the children have any pending work.
	  var childExpirationTime = workInProgress.childExpirationTime;
	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current$$1, workInProgress);
	    return workInProgress.child;
	  }
	}

	function beginWork(current$$1, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  if (current$$1 !== null) {
	    var oldProps = current$$1.memoizedProps;
	    var newProps = workInProgress.pendingProps;
	    if (oldProps === newProps && !hasContextChanged() && updateExpirationTime < renderExpirationTime) {
	      // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.
	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;
	        case HostComponent:
	          pushHostContext(workInProgress);
	          break;
	        case ClassComponent:
	          {
	            var Component = workInProgress.type;
	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }
	            break;
	          }
	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;
	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }
	        case Profiler:
	          if (enableProfilerTimer) {
	            workInProgress.effectTag |= Update;
	          }
	          break;
	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;
	            var didTimeout = state !== null;
	            if (didTimeout) {
	              // If this boundary is currently timed out, we need to decide
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	              } else {
	                // The primary children do not have pending work with sufficient
	                // priority. Bailout.
	                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            }
	            break;
	          }
	      }
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }

	  // Before entering the begin phase, clear the expiration time.
	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
	      }
	    case LazyComponent:
	      {
	        var _elementType = workInProgress.elementType;
	        return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
	      }
	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }
	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;
	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
	        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }
	    case HostRoot:
	      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
	    case HostComponent:
	      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostText:
	      return updateHostText(current$$1, workInProgress);
	    case SuspenseComponent:
	      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostPortal:
	      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;
	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
	        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }
	    case Fragment:
	      return updateFragment(current$$1, workInProgress, renderExpirationTime);
	    case Mode:
	      return updateMode(current$$1, workInProgress, renderExpirationTime);
	    case Profiler:
	      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
	    case ContextProvider:
	      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
	    case ContextConsumer:
	      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
	    case MemoComponent:
	      {
	        var _type = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps;
	        var _resolvedProps3 = resolveDefaultProps(_type.type, _unresolvedProps3);
	        return updateMemoComponent(current$$1, workInProgress, _type, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }
	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }
	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;
	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
	        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }
	    default:
	      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren = void 0;
	var updateHostContainer = void 0;
	var updateHostComponent$1 = void 0;
	var updateHostText$1 = void 0;
	if (supportsMutation) {
	  // Mutation mode

	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {
	    // Noop
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;
	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    }

	    // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.
	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.
	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    // TODO: Type this specific to this type of component.
	    workInProgress.updateQueue = updatePayload;
	    // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.
	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	} else if (supportsPersistence) {
	  // Persistent host tree mode

	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	      branches: if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var props = node.memoizedProps;
	          var type = node.type;
	          if (isHidden) {
	            // This child is inside a timed out tree. Hide it.
	            instance = cloneHiddenInstance(instance, type, props, node);
	          } else {
	            // This child was previously inside a timed out tree. If it was not
	            // updated during this render, it may need to be unhidden. Clone
	            // again to be sure.
	            instance = cloneUnhiddenInstance(instance, type, props, node);
	          }
	          node.stateNode = instance;
	        }
	        appendInitialChild(parent, instance);
	      } else if (node.tag === HostText) {
	        var _instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var text = node.memoizedProps;
	          var rootContainerInstance = getRootHostContainer();
	          var currentHostContext = getHostContext();
	          if (isHidden) {
	            _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          } else {
	            _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          }
	          node.stateNode = _instance;
	        }
	        appendInitialChild(parent, _instance);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.tag === SuspenseComponent) {
	        var current = node.alternate;
	        if (current !== null) {
	          var oldState = current.memoizedState;
	          var newState = node.memoizedState;
	          var oldIsHidden = oldState !== null;
	          var newIsHidden = newState !== null;
	          if (oldIsHidden !== newIsHidden) {
	            // The placeholder either just timed out or switched back to the normal
	            // children after having previously timed out. Toggle the visibility of
	            // the direct host children.
	            var primaryChildParent = newIsHidden ? node.child : node;
	            if (primaryChildParent !== null) {
	              appendAllChildren(parent, primaryChildParent, true, newIsHidden);
	            }
	            // eslint-disable-next-line no-labels
	            break branches;
	          }
	        }
	        if (node.child !== null) {
	          // Continue traversing like normal
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      // $FlowFixMe This is correct but Flow is confused by the labeled break.
	      node = node;
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  // An unfortunate fork of appendAllChildren because we have two different parent types.
	  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	      branches: if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var props = node.memoizedProps;
	          var type = node.type;
	          if (isHidden) {
	            // This child is inside a timed out tree. Hide it.
	            instance = cloneHiddenInstance(instance, type, props, node);
	          } else {
	            // This child was previously inside a timed out tree. If it was not
	            // updated during this render, it may need to be unhidden. Clone
	            // again to be sure.
	            instance = cloneUnhiddenInstance(instance, type, props, node);
	          }
	          node.stateNode = instance;
	        }
	        appendChildToContainerChildSet(containerChildSet, instance);
	      } else if (node.tag === HostText) {
	        var _instance2 = node.stateNode;
	        if (needsVisibilityToggle) {
	          var text = node.memoizedProps;
	          var rootContainerInstance = getRootHostContainer();
	          var currentHostContext = getHostContext();
	          if (isHidden) {
	            _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          } else {
	            _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          }
	          node.stateNode = _instance2;
	        }
	        appendChildToContainerChildSet(containerChildSet, _instance2);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.tag === SuspenseComponent) {
	        var current = node.alternate;
	        if (current !== null) {
	          var oldState = current.memoizedState;
	          var newState = node.memoizedState;
	          var oldIsHidden = oldState !== null;
	          var newIsHidden = newState !== null;
	          if (oldIsHidden !== newIsHidden) {
	            // The placeholder either just timed out or switched back to the normal
	            // children after having previously timed out. Toggle the visibility of
	            // the direct host children.
	            var primaryChildParent = newIsHidden ? node.child : node;
	            if (primaryChildParent !== null) {
	              appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
	            }
	            // eslint-disable-next-line no-labels
	            break branches;
	          }
	        }
	        if (node.child !== null) {
	          // Continue traversing like normal
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      // $FlowFixMe This is correct but Flow is confused by the labeled break.
	      node = node;
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };
	  updateHostContainer = function (workInProgress) {
	    var portalOrRoot = workInProgress.stateNode;
	    var childrenUnchanged = workInProgress.firstEffect === null;
	    if (childrenUnchanged) {
	      // No changes, just reuse the existing instance.
	    } else {
	      var container = portalOrRoot.containerInfo;
	      var newChildSet = createContainerChildSet(container);
	      // If children might have changed, we have to add them all to the set.
	      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
	      portalOrRoot.pendingChildren = newChildSet;
	      // Schedule an update on the container to swap out the container.
	      markUpdate(workInProgress);
	      finalizeContainerChildren(container, newChildSet);
	    }
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    var currentInstance = current.stateNode;
	    var oldProps = current.memoizedProps;
	    // If there are no effects associated with this node, then none of our children had any updates.
	    // This guarantees that we can reuse all of them.
	    var childrenUnchanged = workInProgress.firstEffect === null;
	    if (childrenUnchanged && oldProps === newProps) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }
	    var recyclableInstance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    var updatePayload = null;
	    if (oldProps !== newProps) {
	      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    }
	    if (childrenUnchanged && updatePayload === null) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }
	    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
	    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
	      markUpdate(workInProgress);
	    }
	    workInProgress.stateNode = newInstance;
	    if (childrenUnchanged) {
	      // If there are no other effects in this tree, we need to flag this node as having one.
	      // Even though we're not going to use it for anything.
	      // Otherwise parents won't know that there are new children to propagate upwards.
	      markUpdate(workInProgress);
	    } else {
	      // If children might have changed, we have to add them all to the set.
	      appendAllChildren(newInstance, workInProgress, false, false);
	    }
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    if (oldText !== newText) {
	      // If the text content differs, we'll create a new text instance for it.
	      var rootContainerInstance = getRootHostContainer();
	      var currentHostContext = getHostContext();
	      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
	      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
	      // This lets the parents know that at least one of their children has changed.
	      markUpdate(workInProgress);
	    }
	  };
	} else {
	  // No host operations
	  updateHostContainer = function (workInProgress) {
	    // Noop
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // Noop
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // Noop
	  };
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      break;
	    case LazyComponent:
	      break;
	    case SimpleMemoComponent:
	    case FunctionComponent:
	      break;
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;
	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }
	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          popHydrationState(workInProgress);
	          // This resets the hacky state to fix isMounted before committing.
	          // TODO: Delete this when we delete isMounted and findDOMNode.
	          workInProgress.effectTag &= ~Placement;
	        }
	        updateHostContainer(workInProgress);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;
	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	            break;
	          }

	          var currentHostContext = getHostContext();
	          // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on we want to add then top->down or
	          // bottom->up. Top->down is faster in IE11.
	          var wasHydrated = popHydrationState(workInProgress);
	          if (wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node needs to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

	            appendAllChildren(instance, workInProgress, false, false);

	            // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.
	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
	              markUpdate(workInProgress);
	            }
	            workInProgress.stateNode = instance;
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }
	        break;
	      }
	    case HostText:
	      {
	        var newText = newProps;
	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps;
	          // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.
	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	          }
	          var _rootContainerInstance = getRootHostContainer();
	          var _currentHostContext = getHostContext();
	          var _wasHydrated = popHydrationState(workInProgress);
	          if (_wasHydrated) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }
	        break;
	      }
	    case ForwardRef:
	      break;
	    case SuspenseComponent:
	      {
	        var nextState = workInProgress.memoizedState;
	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime;
	          // Do not reset the effect list.
	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;

	        if (current !== null && !nextDidTimeout && prevDidTimeout) {
	          // We just switched from the fallback to the normal children. Delete
	          // the fallback.
	          // TODO: Would it be better to store the fallback fragment on
	          var currentFallbackChild = current.child.sibling;
	          if (currentFallbackChild !== null) {
	            // Deletions go at the beginning of the return fiber's effect list
	            var first = workInProgress.firstEffect;
	            if (first !== null) {
	              workInProgress.firstEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = first;
	            } else {
	              workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = null;
	            }
	            currentFallbackChild.effectTag = Deletion;
	          }
	        }

	        // The children either timed out after previously being visible, or
	        // were restored after previously being hidden. Schedule an effect
	        // to update their visiblity.
	        if (
	        //
	        nextDidTimeout !== prevDidTimeout ||
	        // Outside concurrent mode, the primary children commit in an
	        // inconsistent state, even if they are hidden. So if they are hidden,
	        // we need to schedule an effect to re-hide them, just in case.
	        (workInProgress.effectTag & ConcurrentMode) === NoContext && nextDidTimeout) {
	          workInProgress.effectTag |= Update;
	        }
	        break;
	      }
	    case Fragment:
	      break;
	    case Mode:
	      break;
	    case Profiler:
	      break;
	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      break;
	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      break;
	    case ContextConsumer:
	      break;
	    case MemoComponent:
	      break;
	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;
	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    default:
	      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return null;
	}

	function shouldCaptureSuspense(current, workInProgress) {
	  // In order to capture, the Suspense component must have a fallback prop.
	  if (workInProgress.memoizedProps.fallback === undefined) {
	    return false;
	  }
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;
	  return nextState === null;
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(capturedError) {
	  return true;
	}

	function logCapturedError(capturedError) {
	  var logError = showErrorDialog(capturedError);

	  // Allow injected showErrorDialog() to prevent default console.error logging.
	  // This enables renderers like ReactNative to better manage redbox behavior.
	  if (logError === false) {
	    return;
	  }

	  var error = capturedError.error;
	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry;

	    // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      }
	      // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.
	      console.error(error);
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

	    var errorBoundaryMessage = void 0;
	    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
	      } else {
	        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }
	    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

	    // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
	    console.error(combinedMessage);
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;
	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current$$1, instance) {
	  startPhaseTimer(current$$1, 'componentWillUnmount');
	  instance.props = current$$1.memoizedProps;
	  instance.state = current$$1.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	};

	// Capture errors so they don't interrupt unmounting.
	function safelyCallComponentWillUnmount(current$$1, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current$$1, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current$$1) {
	  var ref = current$$1.ref;
	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);
	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current$$1, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current$$1, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);
	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current$$1, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current$$1 !== null) {
	            var prevProps = current$$1.memoizedProps;
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode;
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'getSnapshotBeforeUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);
	                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }
	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }
	        return;
	      }
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitHookEffectList(unmountTag, mountTag, finishedWork) {
	  if (!enableHooks) {
	    return;
	  }
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;
	    do {
	      if ((effect.tag & unmountTag) !== NoEffect$1) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = null;
	        if (destroy !== null) {
	          destroy();
	        }
	      }
	      if ((effect.tag & mountTag) !== NoEffect$1) {
	        // Mount
	        var create = effect.create;
	        var _destroy = create();
	        if (typeof _destroy !== 'function') {
	          {
	            if (_destroy !== null && _destroy !== undefined) {
	              warningWithoutStack$1(false, 'useEffect function must return a cleanup function or ' + 'nothing.%s%s', typeof _destroy.then === 'function' ? ' Promises and useEffect(async () => ...) are not ' + 'supported, but you can call an async function inside an ' + 'effect.' : '', getStackByFiberInDevAndProd(finishedWork));
	            }
	          }
	          _destroy = null;
	        }
	        effect.destroy = _destroy;
	      }
	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
	  commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
	}

	function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
	        break;
	      }
	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (finishedWork.effectTag & Update) {
	          if (current$$1 === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidMount. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'componentDidUpdate. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              }
	            }
	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }
	        var updateQueue = finishedWork.updateQueue;
	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType) {
	              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected instance props to match memoized props before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected instance state to match memoized state before ' + 'processing the update queue. This is likely due to a bug in React. ' + 'Please file an issue.') : void 0;
	            }
	          }
	          // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.
	          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;
	        if (_updateQueue !== null) {
	          var _instance = null;
	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;
	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }
	          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode;

	        // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.
	        if (current$$1 === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props, finishedWork);
	        }

	        return;
	      }
	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }
	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }
	    case Profiler:
	      {
	        if (enableProfilerTimer) {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (enableSchedulerTracing) {
	            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	          } else {
	            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
	          }
	        }
	        return;
	      }
	    case SuspenseComponent:
	      break;
	    case IncompleteClassComponent:
	      break;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  if (supportsMutation) {
	    // We only have the top Fiber that was inserted but we need recurse down its
	    var node = finishedWork;
	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;
	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === finishedWork) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;
	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse = void 0;
	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;
	      default:
	        instanceToUse = instance;
	    }
	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current$$1) {
	  var currentRef = current$$1.ref;
	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	}

	// User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay
	function commitUnmount(current$$1) {
	  onCommitUnmount(current$$1);

	  switch (current$$1.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        var updateQueue = current$$1.updateQueue;
	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;
	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;
	            var effect = firstEffect;
	            do {
	              var destroy = effect.destroy;
	              if (destroy !== null) {
	                safelyCallDestroy(current$$1, destroy);
	              }
	              effect = effect.next;
	            } while (effect !== firstEffect);
	          }
	        }
	        break;
	      }
	    case ClassComponent:
	      {
	        safelyDetachRef(current$$1);
	        var instance = current$$1.stateNode;
	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current$$1, instance);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        safelyDetachRef(current$$1);
	        return;
	      }
	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        if (supportsMutation) {
	          unmountHostComponents(current$$1);
	        } else if (supportsPersistence) {
	          emptyPortalContainer(current$$1);
	        }
	        return;
	      }
	  }
	}

	function commitNestedUnmounts(root) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  var node = root;
	  while (true) {
	    commitUnmount(node);
	    // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.
	    if (node.child !== null && (
	    // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	    !supportsMutation || node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === root) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current$$1) {
	  // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.
	  current$$1.return = null;
	  current$$1.child = null;
	  if (current$$1.alternate) {
	    current$$1.alternate.child = null;
	    current$$1.alternate.return = null;
	  }
	}

	function emptyPortalContainer(current$$1) {
	  if (!supportsPersistence) {
	    return;
	  }

	  var portal = current$$1.stateNode;
	  var containerInfo = portal.containerInfo;

	  var emptyChildSet = createContainerChildSet(containerInfo);
	  replaceContainerChildren(containerInfo, emptyChildSet);
	}

	function commitContainer(finishedWork) {
	  if (!supportsPersistence) {
	    return;
	  }

	  switch (finishedWork.tag) {
	    case ClassComponent:
	      {
	        return;
	      }
	    case HostComponent:
	      {
	        return;
	      }
	    case HostText:
	      {
	        return;
	      }
	    case HostRoot:
	    case HostPortal:
	      {
	        var portalOrRoot = finishedWork.stateNode;
	        var containerInfo = portalOrRoot.containerInfo,
	            _pendingChildren = portalOrRoot.pendingChildren;

	        replaceContainerChildren(containerInfo, _pendingChildren);
	        return;
	      }
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;
	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }
	    parent = parent.return;
	  }
	  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  var node = fiber;
	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	    while (node.tag !== HostComponent && node.tag !== HostText) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      }
	      // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.
	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    }
	    // Check if this host node is stable or about to be placed.
	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {
	  if (!supportsMutation) {
	    return;
	  }

	  // Recursively insert all host nodes into the parent.
	  var parentFiber = getHostParentFiber(finishedWork);

	  // Note: these two variables *must* always be updated together.
	  var parent = void 0;
	  var isContainer = void 0;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentFiber.stateNode;
	      isContainer = false;
	      break;
	    case HostRoot:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    case HostPortal:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    default:
	      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
	  }
	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent);
	    // Clear ContentReset from the effect tag
	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork);
	  // We only have the top Fiber that was inserted but we need recurse down its
	  // children to find all the terminal nodes.
	  var node = finishedWork;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      if (before) {
	        if (isContainer) {
	          insertInContainerBefore(parent, node.stateNode, before);
	        } else {
	          insertBefore(parent, node.stateNode, before);
	        }
	      } else {
	        if (isContainer) {
	          appendChildToContainer(parent, node.stateNode);
	        } else {
	          appendChild(parent, node.stateNode);
	        }
	      }
	    } else if (node.tag === HostPortal) {
	      // If the insertion itself is a portal, then we don't want to traverse
	      // down its children. Instead, we'll get insertions from each child in
	      // the portal directly.
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === finishedWork) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function unmountHostComponents(current$$1) {
	  // We only have the top Fiber that was deleted but we need recurse down its
	  var node = current$$1;

	  // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.
	  var currentParentIsValid = false;

	  // Note: these two variables *must* always be updated together.
	  var currentParent = void 0;
	  var currentParentIsContainer = void 0;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;
	      findParent: while (true) {
	        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parent.stateNode;
	            currentParentIsContainer = false;
	            break findParent;
	          case HostRoot:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	          case HostPortal:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	        }
	        parent = parent.return;
	      }
	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(node);
	      // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.
	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      }
	      // Don't visit children because we already visited them.
	    } else if (node.tag === HostPortal) {
	      // When we go into a portal, it becomes the parent to remove from.
	      // We will reassign it back when we pop the portal on the way up.
	      currentParent = node.stateNode.containerInfo;
	      currentParentIsContainer = true;
	      // Visit children because portals might contain host components.
	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(node);
	      // Visit children because we may find more host components below.
	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }
	    if (node === current$$1) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === current$$1) {
	        return;
	      }
	      node = node.return;
	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(current$$1) {
	  if (supportsMutation) {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(current$$1);
	  } else {
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    commitNestedUnmounts(current$$1);
	  }
	  detachFiber(current$$1);
	}

	function commitWork(current$$1, finishedWork) {
	  if (!supportsMutation) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	          return;
	        }
	    }

	    commitContainer(finishedWork);
	    return;
	  }

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        return;
	      }
	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps;
	          // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.
	          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
	          var type = finishedWork.type;
	          // TODO: Type the updateQueue to be specific to host components.
	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;
	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
	          }
	        }
	        return;
	      }
	    case HostText:
	      {
	        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps;
	        // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.
	        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }
	    case HostRoot:
	      {
	        return;
	      }
	    case Profiler:
	      {
	        return;
	      }
	    case SuspenseComponent:
	      {
	        var newState = finishedWork.memoizedState;

	        var newDidTimeout = void 0;
	        var primaryChildParent = finishedWork;
	        if (newState === null) {
	          newDidTimeout = false;
	        } else {
	          newDidTimeout = true;
	          primaryChildParent = finishedWork.child;
	          if (newState.timedOutAt === NoWork) {
	            // If the children had not already timed out, record the time.
	            // This is used to compute the elapsed time during subsequent
	            // attempts to render the children.
	            newState.timedOutAt = requestCurrentTime();
	          }
	        }

	        if (primaryChildParent !== null) {
	          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	        }
	        return;
	      }
	    case IncompleteClassComponent:
	      {
	        return;
	      }
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitResetTextContent(current$$1) {
	  if (!supportsMutation) {
	    return;
	  }
	  resetTextContent(current$$1.stateNode);
	}

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  // Unmount the root by rendering null.
	  update.tag = CaptureUpdate;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: null };
	  var error = errorInfo.value;
	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };
	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	  if (typeof getDerivedStateFromError === 'function') {
	    var error = errorInfo.value;
	    update.payload = function () {
	      return getDerivedStateFromError(error);
	    };
	  }

	  var inst = fiber.stateNode;
	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }
	      var error = errorInfo.value;
	      var stack = errorInfo.stack;
	      logError(fiber, errorInfo);
	      this.componentDidCatch(error, {
	        componentStack: stack !== null ? stack : ''
	      });
	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
	        }
	      }
	    };
	  }
	  return update;
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete;
	  // Its effect list is no longer valid.
	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    // Find the earliest timeout threshold of all the placeholders in the
	    // ancestor path. We could avoid this traversal by storing the thresholds on
	    // the stack, but we choose not to because we only hit this path if we're
	    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
	    // the non-IO- bound case.
	    var _workInProgress = returnFiber;
	    var earliestTimeoutMs = -1;
	    var startTimeMs = -1;
	    do {
	      if (_workInProgress.tag === SuspenseComponent) {
	        var current$$1 = _workInProgress.alternate;
	        if (current$$1 !== null) {
	          var currentState = current$$1.memoizedState;
	          if (currentState !== null) {
	            // Reached a boundary that already timed out. Do not search
	            // any further.
	            var timedOutAt = currentState.timedOutAt;
	            startTimeMs = expirationTimeToMs(timedOutAt);
	            // Do not search any further.
	            break;
	          }
	        }
	        var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
	        if (typeof timeoutPropMs === 'number') {
	          if (timeoutPropMs <= 0) {
	            earliestTimeoutMs = 0;
	          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
	            earliestTimeoutMs = timeoutPropMs;
	          }
	        }
	      }
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);

	    // Schedule the nearest Suspense to re-render the timed out view.
	    _workInProgress = returnFiber;
	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress.alternate, _workInProgress)) {
	        // Found the nearest boundary.

	        // If the boundary is not in concurrent mode, we should not suspend, and
	        // likewise, when the promise resolves, we should ping synchronously.
	        var pingTime = (_workInProgress.mode & ConcurrentMode) === NoEffect ? Sync : renderExpirationTime;

	        // Attach a listener to the promise to "ping" the root and retry.
	        var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, sourceFiber, pingTime);
	        if (enableSchedulerTracing) {
	          onResolveOrReject = tracing.unstable_wrap(onResolveOrReject);
	        }
	        thenable.then(onResolveOrReject, onResolveOrReject);

	        // If the boundary is outside of concurrent mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a concurrent mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.
	        if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
	          _workInProgress.effectTag |= DidCapture;

	          // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.
	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var _current = sourceFiber.alternate;
	            if (_current === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            }
	          }

	          // The source fiber did not complete. Mark it with the current
	          // render priority to indicate that it still has pending work.
	          sourceFiber.expirationTime = renderExpirationTime;

	          // Exit without suspending.
	          return;
	        }

	        // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.

	        var absoluteTimeoutMs = void 0;
	        if (earliestTimeoutMs === -1) {
	          // If no explicit threshold is given, default to an abitrarily large
	          // value. The actual size doesn't matter because the threshold for the
	          // whole tree will be clamped to the expiration time.
	          absoluteTimeoutMs = maxSigned31BitInt;
	        } else {
	          if (startTimeMs === -1) {
	            // This suspend happened outside of any already timed-out
	            // placeholders. We don't know exactly when the update was
	            // scheduled, but we can infer an approximate start time from the
	            // expiration time. First, find the earliest uncommitted expiration
	            // time in the tree, including work that is suspended. Then subtract
	            // the offset used to compute an async update's expiration time.
	            // This will cause high priority (interactive) work to expire
	            // earlier than necessary, but we can account for this by adjusting
	            // for the Just Noticeable Difference.
	            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
	            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	          }
	          absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
	        }

	        // Mark the earliest timeout in the suspended fiber's ancestor path.
	        // After completing the root, we'll take the largest of all the
	        // suspended fiber's timeouts and use it to compute a timeout for the
	        // whole tree.
	        renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      }
	      // This boundary already captured during this render. Continue to the next
	      // boundary.
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);
	    // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?
	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  }

	  // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.
	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;
	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }
	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;
	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          // Schedule the error boundary to re-render using updated state
	          var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }
	        break;
	      default:
	        break;
	    }
	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        var effectTag = workInProgress.effectTag;
	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }
	        return null;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;
	        !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }
	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        return null;
	      }
	    case SuspenseComponent:
	      {
	        var _effectTag2 = workInProgress.effectTag;
	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
	          // Captured a suspense effect. Re-render the boundary.
	          return workInProgress;
	        }
	        return null;
	      }
	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;
	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;
	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;
	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }
	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;
	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	    default:
	      break;
	  }
	}

	var Dispatcher = {
	  readContext: readContext,
	  useCallback: useCallback,
	  useContext: useContext,
	  useEffect: useEffect,
	  useImperativeMethods: useImperativeMethods,
	  useLayoutEffect: useLayoutEffect,
	  useMemo: useMemo,
	  useMutationEffect: useMutationEffect,
	  useReducer: useReducer,
	  useRef: useRef,
	  useState: useState
	};
	var DispatcherWithoutHooks = {
	  readContext: readContext
	};

	var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


	var didWarnAboutStateTransition = void 0;
	var didWarnSetStateChildContext = void 0;
	var warnAboutUpdateOnUnmounted = void 0;
	var warnAboutInvalidUpdates = void 0;

	if (enableSchedulerTracing) {
	  // Provide explicit error message when production+profiling bundle of e.g. react-dom
	  // is used with production (non-profiling) bundle of scheduler/tracing
	  !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
	}

	{
	  didWarnAboutStateTransition = false;
	  didWarnSetStateChildContext = false;
	  var didWarnStateUpdateForUnmountedComponent = {};

	  warnAboutUpdateOnUnmounted = function (fiber, isClass) {
	    // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.
	    var componentName = getComponentName(fiber.type) || 'ReactComponent';
	    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	    didWarnStateUpdateForUnmountedComponent[componentName] = true;
	  };

	  warnAboutInvalidUpdates = function (instance) {
	    switch (phase) {
	      case 'getChildContext':
	        if (didWarnSetStateChildContext) {
	          return;
	        }
	        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
	        didWarnSetStateChildContext = true;
	        break;
	      case 'render':
	        if (didWarnAboutStateTransition) {
	          return;
	        }
	        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
	        didWarnAboutStateTransition = true;
	        break;
	    }
	  };
	}

	// Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
	var lastUniqueAsyncExpiration = Sync - 1;

	// Represents the expiration time that incoming updates should use. (If this
	// is NoWork, use the default strategy: async updates in async mode, sync
	// updates in sync mode.)
	var expirationContext = NoWork;

	var isWorking = false;

	// The next work in progress fiber that we're currently working on.
	var nextUnitOfWork = null;
	var nextRoot = null;
	// The time at which we're currently rendering work.
	var nextRenderExpirationTime = NoWork;
	var nextLatestAbsoluteTimeoutMs = -1;
	var nextRenderDidError = false;

	// The next fiber with an effect that we're currently committing.
	var nextEffect = null;

	var isCommitting$1 = false;
	var rootWithPendingPassiveEffects = null;
	var passiveEffectCallbackHandle = null;
	var passiveEffectCallback = null;

	var legacyErrorBoundariesThatAlreadyFailed = null;

	// Used for performance tracking.
	var interruptedBy = null;

	var stashedWorkInProgressProperties = void 0;
	var replayUnitOfWork = void 0;
	var mayReplayFailedUnitOfWork = void 0;
	var isReplayingFailedUnitOfWork = void 0;
	var originalReplayError = void 0;
	var rethrowOriginalError = void 0;
	if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	  stashedWorkInProgressProperties = null;
	  mayReplayFailedUnitOfWork = true;
	  isReplayingFailedUnitOfWork = false;
	  originalReplayError = null;
	  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
	    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	      // Don't replay promises. Treat everything else like an error.
	      // TODO: Need to figure out a different strategy if/when we add
	      // support for catching other types.
	      return;
	    }

	    // Restore the original state of the work-in-progress
	    if (stashedWorkInProgressProperties === null) {
	      // This should never happen. Don't throw because this code is DEV-only.
	      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
	      return;
	    }
	    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

	    switch (failedUnitOfWork.tag) {
	      case HostRoot:
	        popHostContainer(failedUnitOfWork);
	        popTopLevelContextObject(failedUnitOfWork);
	        break;
	      case HostComponent:
	        popHostContext(failedUnitOfWork);
	        break;
	      case ClassComponent:
	        {
	          var Component = failedUnitOfWork.type;
	          if (isContextProvider(Component)) {
	            popContext(failedUnitOfWork);
	          }
	          break;
	        }
	      case HostPortal:
	        popHostContainer(failedUnitOfWork);
	        break;
	      case ContextProvider:
	        popProvider(failedUnitOfWork);
	        break;
	    }
	    // Replay the begin phase.
	    isReplayingFailedUnitOfWork = true;
	    originalReplayError = thrownValue;
	    invokeGuardedCallback(null, workLoop, null, isYieldy);
	    isReplayingFailedUnitOfWork = false;
	    originalReplayError = null;
	    if (hasCaughtError()) {
	      var replayError = clearCaughtError();
	      if (replayError != null && thrownValue != null) {
	        try {
	          // Reading the expando property is intentionally
	          // inside `try` because it might be a getter or Proxy.
	          if (replayError._suppressLogging) {
	            // Also suppress logging for the original error.
	            thrownValue._suppressLogging = true;
	          }
	        } catch (inner) {
	          // Ignore.
	        }
	      }
	    } else {
	      // If the begin phase did not fail the second time, set this pointer
	      // back to the original value.
	      nextUnitOfWork = failedUnitOfWork;
	    }
	  };
	  rethrowOriginalError = function () {
	    throw originalReplayError;
	  };
	}

	function resetStack() {
	  if (nextUnitOfWork !== null) {
	    var interruptedWork = nextUnitOfWork.return;
	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	    checkThatStackIsEmpty();
	  }

	  nextRoot = null;
	  nextRenderExpirationTime = NoWork;
	  nextLatestAbsoluteTimeoutMs = -1;
	  nextRenderDidError = false;
	  nextUnitOfWork = null;
	}

	function commitAllHostEffects() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }
	    recordEffect();

	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current$$1 = nextEffect.alternate;
	      if (current$$1 !== null) {
	        commitDetachRef(current$$1);
	      }
	    }

	    // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every
	    // possible bitmap value, we remove the secondary effects from the
	    // effect tag and switch on that value.
	    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted
	          // does and isMounted is deprecated anyway so we should be able
	          // to kill this.
	          nextEffect.effectTag &= ~Placement;
	          break;
	        }
	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          nextEffect.effectTag &= ~Placement;

	          // Update
	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }
	      case Update:
	        {
	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }
	      case Deletion:
	        {
	          commitDeletion(nextEffect);
	          break;
	        }
	    }
	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitBeforeMutationLifecycles() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }

	    var effectTag = nextEffect.effectTag;
	    if (effectTag & Snapshot) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current$$1, nextEffect);
	    }

	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
	  {
	    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    if (warnAboutDeprecatedLifecycles) {
	      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
	    }
	  }
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    if (enableHooks && effectTag & Passive) {
	      rootWithPendingPassiveEffects = finishedRoot;
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitPassiveEffects(root, firstEffect) {
	  rootWithPendingPassiveEffects = null;
	  passiveEffectCallbackHandle = null;
	  passiveEffectCallback = null;

	  // Set this to true to prevent re-entrancy
	  var previousIsRendering = isRendering;
	  isRendering = true;

	  var effect = firstEffect;
	  do {
	    if (effect.effectTag & Passive) {
	      var didError = false;
	      var error = void 0;
	      {
	        invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
	        if (hasCaughtError()) {
	          didError = true;
	          error = clearCaughtError();
	        }
	      }
	      if (didError) {
	        captureCommitPhaseError(effect, error);
	      }
	    }
	    effect = effect.nextEffect;
	  } while (effect !== null);

	  isRendering = previousIsRendering;

	  // Check if work was scheduled by one of the effects
	  var rootExpirationTime = root.expirationTime;
	  if (rootExpirationTime !== NoWork) {
	    requestWork(root, rootExpirationTime);
	  }
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}

	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function flushPassiveEffects() {
	  if (passiveEffectCallback !== null) {
	    scheduler.unstable_cancelCallback(passiveEffectCallbackHandle);
	    // We call the scheduled callback instead of commitPassiveEffects directly
	    // to ensure tracing works correctly.
	    passiveEffectCallback();
	  }
	}

	function commitRoot(root, finishedWork) {
	  isWorking = true;
	  isCommitting$1 = true;
	  startCommitTimer();

	  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var committedExpirationTime = root.pendingCommitExpirationTime;
	  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  root.pendingCommitExpirationTime = NoWork;

	  // Update the pending priority levels to account for the work that we are
	  // about to commit. This needs to happen before calling the lifecycles, since
	  // they may schedule additional updates.
	  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
	  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
	  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

	  var prevInteractions = null;
	  if (enableSchedulerTracing) {
	    // Restore any pending interactions at this point,
	    // So that cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing.__interactionsRef.current;
	    tracing.__interactionsRef.current = root.memoizedInteractions;
	  }

	  // Reset this to null before calling lifecycles
	  ReactCurrentOwner$2.current = null;

	  var firstEffect = void 0;
	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if
	    // it had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  prepareForCommit(root.containerInfo);

	  // Invoke instances of getSnapshotBeforeUpdate before mutation.
	  nextEffect = firstEffect;
	  startCommitSnapshotEffectsTimer();
	  while (nextEffect !== null) {
	    var didError = false;
	    var error = void 0;
	    {
	      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
	      if (hasCaughtError()) {
	        didError = true;
	        error = clearCaughtError();
	      }
	    }
	    if (didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitSnapshotEffectsTimer();

	  if (enableProfilerTimer) {
	    // Mark the current commit time to be shared by all Profilers in this batch.
	    // This enables them to be grouped later.
	    recordCommitTime();
	  }

	  // Commit all the side-effects within a tree. We'll do this in two passes.
	  // The first pass performs all the host insertions, updates, deletions and
	  // ref unmounts.
	  nextEffect = firstEffect;
	  startCommitHostEffectsTimer();
	  while (nextEffect !== null) {
	    var _didError = false;
	    var _error = void 0;
	    {
	      invokeGuardedCallback(null, commitAllHostEffects, null);
	      if (hasCaughtError()) {
	        _didError = true;
	        _error = clearCaughtError();
	      }
	    }
	    if (_didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitHostEffectsTimer();

	  resetAfterCommit(root.containerInfo);

	  // The work-in-progress tree is now the current tree. This must come after
	  // the first pass of the commit phase, so that the previous tree is still
	  // current during componentWillUnmount, but before the second pass, so that
	  // the finished work is current during componentDidMount/Update.
	  root.current = finishedWork;

	  // In the second pass we'll perform all life-cycles and ref callbacks.
	  // Life-cycles happen as a separate pass so that all placements, updates,
	  // and deletions in the entire tree have already been invoked.
	  // This pass also triggers any renderer-specific initial effects.
	  nextEffect = firstEffect;
	  startCommitLifeCyclesTimer();
	  while (nextEffect !== null) {
	    var _didError2 = false;
	    var _error2 = void 0;
	    {
	      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
	      if (hasCaughtError()) {
	        _didError2 = true;
	        _error2 = clearCaughtError();
	      }
	    }
	    if (_didError2) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error2);
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }

	  if (enableHooks && firstEffect !== null && rootWithPendingPassiveEffects !== null) {
	    // This commit included a passive effect. These do not need to fire until
	    // after the next paint. Schedule an callback to fire them in an async
	    // event. To ensure serial execution, the callback will be flushed early if
	    // we enter rootWithPendingPassiveEffects commit phase before then.
	    var callback = commitPassiveEffects.bind(null, root, firstEffect);
	    if (enableSchedulerTracing) {
	      // TODO: Avoid this extra callback by mutating the tracing ref directly,
	      // like we do at the beginning of commitRoot. I've opted not to do that
	      // here because that code is still in flux.
	      callback = tracing.unstable_wrap(callback);
	    }
	    passiveEffectCallbackHandle = scheduler.unstable_scheduleCallback(callback);
	    passiveEffectCallback = callback;
	  }

	  isCommitting$1 = false;
	  isWorking = false;
	  stopCommitLifeCyclesTimer();
	  stopCommitTimer();
	  onCommitRoot(finishedWork.stateNode);
	  if (true && ReactFiberInstrumentation_1.debugTool) {
	    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
	  }

	  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
	  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
	  if (earliestRemainingTimeAfterCommit === NoWork) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }
	  onCommit(root, earliestRemainingTimeAfterCommit);

	  if (enableSchedulerTracing) {
	    tracing.__interactionsRef.current = prevInteractions;

	    var subscriber = void 0;

	    try {
	      subscriber = tracing.__subscriberRef.current;
	      if (subscriber !== null && root.memoizedInteractions.size > 0) {
	        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
	        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	      }
	    } catch (error) {
	      // It's not safe for commitRoot() to throw.
	      // Store the error for now and we'll re-throw in finishRendering().
	      if (!hasUnhandledError) {
	        hasUnhandledError = true;
	        unhandledError = error;
	      }
	    } finally {
	      // Clear completed interactions from the pending Map.
	      // Unless the render was suspended or cascading work was scheduled,
	      // In which case– leave pending interactions until the subsequent render.
	      var pendingInteractionMap = root.pendingInteractionMap;
	      pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        // Only decrement the pending interaction count if we're done.
	        // If there's still work at the current priority,
	        // That indicates that we are waiting for suspense data.
	        if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	          pendingInteractionMap.delete(scheduledExpirationTime);

	          scheduledInteractions.forEach(function (interaction) {
	            interaction.__count--;

	            if (subscriber !== null && interaction.__count === 0) {
	              try {
	                subscriber.onInteractionScheduledWorkCompleted(interaction);
	              } catch (error) {
	                // It's not safe for commitRoot() to throw.
	                // Store the error for now and we'll re-throw in finishRendering().
	                if (!hasUnhandledError) {
	                  hasUnhandledError = true;
	                  unhandledError = error;
	                }
	              }
	            }
	          });
	        }
	      });
	    }
	  }
	}

	function resetChildExpirationTime(workInProgress, renderTime) {
	  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork;

	  // Bubble up the earliest expiration time.
	  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	    // We're in profiling mode.
	    // Let's use this same traversal to update the render durations.
	    var actualDuration = workInProgress.actualDuration;
	    var treeBaseDuration = workInProgress.selfBaseDuration;

	    // When a fiber is cloned, its actualDuration is reset to 0.
	    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration.
	    // If the fiber has not been cloned though, (meaning no work was done),
	    // Then this value will reflect the amount of time spent working on a previous render.
	    // In that case it should not bubble.
	    // We determine whether it was cloned by comparing the child pointer.
	    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

	    var child = workInProgress.child;
	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;
	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }
	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }
	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }
	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }
	    workInProgress.actualDuration = actualDuration;
	    workInProgress.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = workInProgress.child;
	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;
	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }
	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }
	      _child = _child.sibling;
	    }
	  }

	  workInProgress.childExpirationTime = newChildExpirationTime;
	}

	function completeUnitOfWork(workInProgress) {
	  // Attempt to complete the current unit of work, then move to the
	  // next sibling. If there are no more siblings, return to the
	  // parent fiber.
	  while (true) {
	    // The current, flushed, state of this fiber is the alternate.
	    // Ideally nothing should rely on this, but relying on it here
	    // means that we don't need an additional field on the work in
	    // progress.
	    var current$$1 = workInProgress.alternate;
	    {
	      setCurrentFiber(workInProgress);
	    }

	    var returnFiber = workInProgress.return;
	    var siblingFiber = workInProgress.sibling;

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        // Don't replay if it fails during completion phase.
	        mayReplayFailedUnitOfWork = false;
	      }
	      // This fiber completed.
	      // Remember we're completing this unit so we can find a boundary if it fails.
	      nextUnitOfWork = workInProgress;
	      if (enableProfilerTimer) {
	        if (workInProgress.mode & ProfileMode) {
	          startProfilerTimer(workInProgress);
	        }
	        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
	        if (workInProgress.mode & ProfileMode) {
	          // Update render duration assuming we didn't error.
	          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	        }
	      } else {
	        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
	      }
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        // We're out of completion phase so replaying is fine now.
	        mayReplayFailedUnitOfWork = true;
	      }
	      stopWorkTimer(workInProgress);
	      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
	      {
	        resetCurrentFiber();
	      }

	      if (nextUnitOfWork !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return nextUnitOfWork;
	      }

	      if (returnFiber !== null &&
	      // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }
	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }
	          returnFiber.lastEffect = workInProgress.lastEffect;
	        }

	        // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if
	        // needed, by doing multiple passes over the effect list. We don't want
	        // to schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.
	        var effectTag = workInProgress.effectTag;
	        // Skip both NoWork and PerformedWork tags when creating the effect list.
	        // PerformedWork effect is read by React DevTools but shouldn't be committed.
	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }
	          returnFiber.lastEffect = workInProgress;
	        }
	      }

	      if (true && ReactFiberInstrumentation_1.debugTool) {
	        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        // We've reached the root.
	        return null;
	      }
	    } else {
	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

	        // Include the time spent working on failed children before continuing.
	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;
	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }
	        workInProgress.actualDuration = actualDuration;
	      }

	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var next = unwindWork(workInProgress, nextRenderExpirationTime);
	      // Because this fiber did not complete, don't reset its expiration time.
	      if (workInProgress.effectTag & DidCapture) {
	        // Restarting an error boundary
	        stopFailedWorkTimer(workInProgress);
	      } else {
	        stopWorkTimer(workInProgress);
	      }

	      {
	        resetCurrentFiber();
	      }

	      if (next !== null) {
	        stopWorkTimer(workInProgress);
	        if (true && ReactFiberInstrumentation_1.debugTool) {
	          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	        }

	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        next.effectTag &= HostEffectMask;
	        return next;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }

	      if (true && ReactFiberInstrumentation_1.debugTool) {
	        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        return null;
	      }
	    }
	  }

	  // Without this explicit null return Flow complains of invalid return type
	  // TODO Remove the above while(true) loop
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function performUnitOfWork(workInProgress) {
	  // The current, flushed, state of this fiber is the alternate.
	  // Ideally nothing should rely on this, but relying on it here
	  // means that we don't need an additional field on the work in
	  // progress.
	  var current$$1 = workInProgress.alternate;

	  // See if beginning this work spawns more work.
	  startWorkTimer(workInProgress);
	  {
	    setCurrentFiber(workInProgress);
	  }

	  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
	  }

	  var next = void 0;
	  if (enableProfilerTimer) {
	    if (workInProgress.mode & ProfileMode) {
	      startProfilerTimer(workInProgress);
	    }

	    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
	    workInProgress.memoizedProps = workInProgress.pendingProps;

	    if (workInProgress.mode & ProfileMode) {
	      // Record the render duration assuming we didn't bailout (or error).
	      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	    }
	  } else {
	    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
	    workInProgress.memoizedProps = workInProgress.pendingProps;
	  }

	  {
	    resetCurrentFiber();
	    if (isReplayingFailedUnitOfWork) {
	      // Currently replaying a failed unit of work. This should be unreachable,
	      // because the render phase is meant to be idempotent, and it should
	      // have thrown again. Since it didn't, rethrow the original error, so
	      // React's internal stack is not misaligned.
	      rethrowOriginalError();
	    }
	  }
	  if (true && ReactFiberInstrumentation_1.debugTool) {
	    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
	  }

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(workInProgress);
	  }

	  ReactCurrentOwner$2.current = null;

	  return next;
	}

	function workLoop(isYieldy) {
	  if (!isYieldy) {
	    // Flush work without yielding
	    while (nextUnitOfWork !== null) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  } else {
	    // Flush asynchronous work until there's a higher priority event
	    while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  }
	}

	function renderRoot(root, isYieldy) {
	  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  flushPassiveEffects();

	  isWorking = true;
	  if (enableHooks) {
	    ReactCurrentOwner$2.currentDispatcher = Dispatcher;
	  } else {
	    ReactCurrentOwner$2.currentDispatcher = DispatcherWithoutHooks;
	  }

	  var expirationTime = root.nextExpirationTimeToWorkOn;

	  // Check if we're starting from a fresh stack, or if we're resuming from
	  // previously yielded work.
	  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
	    // Reset the stack and start working from the root.
	    resetStack();
	    nextRoot = root;
	    nextRenderExpirationTime = expirationTime;
	    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
	    root.pendingCommitExpirationTime = NoWork;

	    if (enableSchedulerTracing) {
	      // Determine which interactions this batch of work currently includes,
	      // So that we can accurately attribute time spent working on it,
	      var interactions = new Set();
	      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        if (scheduledExpirationTime >= expirationTime) {
	          scheduledInteractions.forEach(function (interaction) {
	            return interactions.add(interaction);
	          });
	        }
	      });

	      // Store the current set of interactions on the FiberRoot for a few reasons:
	      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
	      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
	      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
	      root.memoizedInteractions = interactions;

	      if (interactions.size > 0) {
	        var subscriber = tracing.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          try {
	            subscriber.onWorkStarted(interactions, threadID);
	          } catch (error) {
	            // Work thrown by an interaction tracing subscriber should be rethrown,
	            // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
	            // Store the error for now and we'll re-throw in finishRendering().
	            if (!hasUnhandledError) {
	              hasUnhandledError = true;
	              unhandledError = error;
	            }
	          }
	        }
	      }
	    }
	  }

	  var prevInteractions = null;
	  if (enableSchedulerTracing) {
	    // We're about to start new traced work.
	    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing.__interactionsRef.current;
	    tracing.__interactionsRef.current = root.memoizedInteractions;
	  }

	  var didFatal = false;

	  startWorkLoopTimer(nextUnitOfWork);

	  do {
	    try {
	      workLoop(isYieldy);
	    } catch (thrownValue) {
	      resetContextDependences();
	      resetHooks();

	      // Reset in case completion throws.
	      // This is only used in DEV and when replaying is on.
	      var mayReplay = void 0;
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        mayReplay = mayReplayFailedUnitOfWork;
	        mayReplayFailedUnitOfWork = true;
	      }

	      if (nextUnitOfWork === null) {
	        // This is a fatal error.
	        didFatal = true;
	        onUncaughtError(thrownValue);
	      } else {
	        if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
	          // Record the time spent rendering before an error was thrown.
	          // This avoids inaccurate Profiler durations in the case of a suspended render.
	          stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
	        }

	        {
	          // Reset global debug state
	          // We assume this is defined in DEV
	          resetCurrentlyProcessingQueue();
	        }

	        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	          if (mayReplay) {
	            var failedUnitOfWork = nextUnitOfWork;
	            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
	          }
	        }

	        // TODO: we already know this isn't true in some cases.
	        // At least this shows a nicer error message until we figure out the cause.
	        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
	        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

	        var sourceFiber = nextUnitOfWork;
	        var returnFiber = sourceFiber.return;
	        if (returnFiber === null) {
	          // This is the root. The root could capture its own errors. However,
	          // we don't know if it errors before or after we pushed the host
	          // context. This information is needed to avoid a stack mismatch.
	          // Because we're not sure, treat this as a fatal error. We could track
	          // which phase it fails in, but doesn't seem worth it. At least
	          // for now.
	          didFatal = true;
	          onUncaughtError(thrownValue);
	        } else {
	          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
	          nextUnitOfWork = completeUnitOfWork(sourceFiber);
	          continue;
	        }
	      }
	    }
	    break;
	  } while (true);

	  if (enableSchedulerTracing) {
	    // Traced work is done for now; restore the previous interactions.
	    tracing.__interactionsRef.current = prevInteractions;
	  }

	  // We're done performing work. Time to clean up.
	  isWorking = false;
	  ReactCurrentOwner$2.currentDispatcher = null;
	  resetContextDependences();
	  resetHooks();

	  // Yield back to main thread.
	  if (didFatal) {
	    var _didCompleteRoot = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
	    interruptedBy = null;
	    // There was a fatal error.
	    {
	      resetStackAfterFatalErrorInDev();
	    }
	    // `nextRoot` points to the in-progress root. A non-null value indicates
	    // that we're in the middle of an async render. Set it to null to indicate
	    // there's no more work to be done in the current batch.
	    nextRoot = null;
	    onFatal(root);
	    return;
	  }

	  if (nextUnitOfWork !== null) {
	    // There's still remaining async work in this tree, but we ran out of time
	    // in the current frame. Yield back to the renderer. Unless we're
	    // interrupted by a higher priority update, we'll continue later from where
	    // we left off.
	    var _didCompleteRoot2 = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
	    interruptedBy = null;
	    onYield(root);
	    return;
	  }

	  // We completed the whole tree.
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  var rootWorkInProgress = root.current.alternate;
	  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  // `nextRoot` points to the in-progress root. A non-null value indicates
	  // that we're in the middle of an async render. Set it to null to indicate
	  // there's no more work to be done in the current batch.
	  nextRoot = null;
	  interruptedBy = null;

	  if (nextRenderDidError) {
	    // There was an error
	    if (hasLowerPriorityWork(root, expirationTime)) {
	      // There's lower priority work. If so, it may have the effect of fixing
	      // the exception that was just thrown. Exit without committing. This is
	      // similar to a suspend, but without a timeout because we're not waiting
	      // for a promise to resolve. React will restart at the lower
	      // priority level.
	      markSuspendedPriorityLevel(root, expirationTime);
	      var suspendedExpirationTime = expirationTime;
	      var rootExpirationTime = root.expirationTime;
	      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    } else if (
	    // There's no lower priority work, but we're rendering asynchronously.
	    // Synchronsouly attempt to render the same level one more time. This is
	    // similar to a suspend, but without a timeout because we're not waiting
	    // for a promise to resolve.
	    !root.didError && isYieldy) {
	      root.didError = true;
	      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
	      var _rootExpirationTime = root.expirationTime = Sync;
	      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    }
	  }

	  if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
	    // The tree was suspended.
	    var _suspendedExpirationTime2 = expirationTime;
	    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

	    // Find the earliest uncommitted expiration time in the tree, including
	    // work that is suspended. The timeout threshold cannot be longer than
	    // the overall expiration.
	    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
	    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
	      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
	    }

	    // Subtract the current time from the absolute timeout to get the number
	    // of milliseconds until the timeout. In other words, convert an absolute
	    // timestamp to a relative time. This is the value that is passed
	    // to `setTimeout`.
	    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
	    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
	    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

	    // TODO: Account for the Just Noticeable Difference

	    var _rootExpirationTime2 = root.expirationTime;
	    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
	    return;
	  }

	  // Ready to commit.
	  onComplete(root, rootWorkInProgress, expirationTime);
	}

	function captureCommitPhaseError(sourceFiber, value) {
	  var expirationTime = Sync;
	  var fiber = sourceFiber.return;
	  while (fiber !== null) {
	    switch (fiber.tag) {
	      case ClassComponent:
	        var ctor = fiber.type;
	        var instance = fiber.stateNode;
	        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	          var errorInfo = createCapturedValue(value, sourceFiber);
	          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
	          enqueueUpdate(fiber, update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	        break;
	      case HostRoot:
	        {
	          var _errorInfo = createCapturedValue(value, sourceFiber);
	          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
	          enqueueUpdate(fiber, _update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	    }
	    fiber = fiber.return;
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    var rootFiber = sourceFiber;
	    var _errorInfo2 = createCapturedValue(value, rootFiber);
	    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
	    enqueueUpdate(rootFiber, _update2);
	    scheduleWork(rootFiber, expirationTime);
	  }
	}

	function computeThreadID(expirationTime, interactionThreadID) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + interactionThreadID;
	}

	// Creates a unique async expiration time.
	function computeUniqueAsyncExpiration() {
	  var currentTime = requestCurrentTime();
	  var result = computeAsyncExpiration(currentTime);
	  if (result >= lastUniqueAsyncExpiration) {
	    // Since we assume the current time monotonically increases, we only hit
	    // this branch when computeUniqueAsyncExpiration is fired multiple times
	    // within a 200ms window (or whatever the async bucket size is).
	    result = lastUniqueAsyncExpiration - 1;
	  }
	  lastUniqueAsyncExpiration = result;
	  return lastUniqueAsyncExpiration;
	}

	function computeExpirationForFiber(currentTime, fiber) {
	  var expirationTime = void 0;
	  if (expirationContext !== NoWork) {
	    // An explicit expiration context was set;
	    expirationTime = expirationContext;
	  } else if (isWorking) {
	    if (isCommitting$1) {
	      // Updates that occur during the commit phase should have sync priority
	      // by default.
	      expirationTime = Sync;
	    } else {
	      // Updates during the render phase should expire at the same time as
	      // the work that is being rendered.
	      expirationTime = nextRenderExpirationTime;
	    }
	  } else {
	    // No explicit expiration context was set, and we're not currently
	    // performing work. Calculate a new expiration time.
	    if (fiber.mode & ConcurrentMode) {
	      if (isBatchingInteractiveUpdates) {
	        // This is an interactive update
	        expirationTime = computeInteractiveExpiration(currentTime);
	      } else {
	        // This is an async update
	        expirationTime = computeAsyncExpiration(currentTime);
	      }
	      // If we're in the middle of rendering a tree, do not update at the same
	      // expiration time that is already rendering.
	      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
	        expirationTime -= 1;
	      }
	    } else {
	      // This is a sync update
	      expirationTime = Sync;
	    }
	  }
	  if (isBatchingInteractiveUpdates) {
	    // This is an interactive update. Keep track of the lowest pending
	    // interactive expiration time. This allows us to synchronously flush
	    // all interactive updates when needed.
	    if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime) {
	      lowestPriorityPendingInteractiveExpirationTime = expirationTime;
	    }
	  }
	  return expirationTime;
	}

	function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
	  // Schedule the timeout.
	  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
	    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
	  }
	}

	function renderDidError() {
	  nextRenderDidError = true;
	}

	function retrySuspendedRoot(root, boundaryFiber, sourceFiber, suspendedTime) {
	  var retryTime = void 0;

	  if (isPriorityLevelSuspended(root, suspendedTime)) {
	    // Ping at the original level
	    retryTime = suspendedTime;

	    markPingedPriorityLevel(root, retryTime);
	  } else {
	    // Suspense already timed out. Compute a new expiration time
	    var currentTime = requestCurrentTime();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
	    markPendingPriorityLevel(root, retryTime);
	  }

	  // TODO: If the suspense fiber has already rendered the primary children
	  // without suspending (that is, all of the promises have already resolved),
	  // we should not trigger another update here. One case this happens is when
	  // we are in sync mode and a single promise is thrown both on initial render
	  // and on update; we attach two .then(retrySuspendedRoot) callbacks and each
	  // one performs Sync work, rerendering the Suspense.

	  if ((boundaryFiber.mode & ConcurrentMode) !== NoContext) {
	    if (root === nextRoot && nextRenderExpirationTime === suspendedTime) {
	      // Received a ping at the same priority level at which we're currently
	      // rendering. Restart from the root.
	      nextRoot = null;
	    }
	  }

	  scheduleWorkToRoot(boundaryFiber, retryTime);
	  if ((boundaryFiber.mode & ConcurrentMode) === NoContext) {
	    // Outside of concurrent mode, we must schedule an update on the source
	    // fiber, too, since it already committed in an inconsistent state and
	    // therefore does not have any pending work.
	    scheduleWorkToRoot(sourceFiber, retryTime);
	    var sourceTag = sourceFiber.tag;
	    if (sourceTag === ClassComponent && sourceFiber.stateNode !== null) {
	      // When we try rendering again, we should not reuse the current fiber,
	      // since it's known to be in an inconsistent state. Use a force updte to
	      // prevent a bail out.
	      var update = createUpdate(retryTime);
	      update.tag = ForceUpdate;
	      enqueueUpdate(sourceFiber, update);
	    }
	  }

	  var rootExpirationTime = root.expirationTime;
	  if (rootExpirationTime !== NoWork) {
	    requestWork(root, rootExpirationTime);
	  }
	}

	function scheduleWorkToRoot(fiber, expirationTime) {
	  recordScheduleUpdate();

	  {
	    if (fiber.tag === ClassComponent) {
	      var instance = fiber.stateNode;
	      warnAboutInvalidUpdates(instance);
	    }
	  }

	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }
	  var alternate = fiber.alternate;
	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  }
	  // Walk the parent path to the root and update the child expiration time.
	  var node = fiber.return;
	  var root = null;
	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;
	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;
	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }
	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }
	      node = node.return;
	    }
	  }

	  if (enableSchedulerTracing) {
	    if (root !== null) {
	      var interactions = tracing.__interactionsRef.current;
	      if (interactions.size > 0) {
	        var pendingInteractionMap = root.pendingInteractionMap;
	        var pendingInteractions = pendingInteractionMap.get(expirationTime);
	        if (pendingInteractions != null) {
	          interactions.forEach(function (interaction) {
	            if (!pendingInteractions.has(interaction)) {
	              // Update the pending async work count for previously unscheduled interaction.
	              interaction.__count++;
	            }

	            pendingInteractions.add(interaction);
	          });
	        } else {
	          pendingInteractionMap.set(expirationTime, new Set(interactions));

	          // Update the pending async work count for the current interactions.
	          interactions.forEach(function (interaction) {
	            interaction.__count++;
	          });
	        }

	        var subscriber = tracing.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          subscriber.onWorkScheduled(interactions, threadID);
	        }
	      }
	    }
	  }
	  return root;
	}

	function scheduleWork(fiber, expirationTime) {
	  var root = scheduleWorkToRoot(fiber, expirationTime);
	  if (root === null) {
	    {
	      switch (fiber.tag) {
	        case ClassComponent:
	          warnAboutUpdateOnUnmounted(fiber, true);
	          break;
	        case FunctionComponent:
	        case ForwardRef:
	        case MemoComponent:
	        case SimpleMemoComponent:
	          warnAboutUpdateOnUnmounted(fiber, false);
	          break;
	      }
	    }
	    return;
	  }

	  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
	    // This is an interruption. (Used for performance tracking.)
	    interruptedBy = fiber;
	    resetStack();
	  }
	  markPendingPriorityLevel(root, expirationTime);
	  if (
	  // If we're in the render phase, we don't need to schedule this root
	  // for an update, because we'll do it before we exit...
	  !isWorking || isCommitting$1 ||
	  // ...unless this is a different root than the one we're rendering.
	  nextRoot !== root) {
	    var rootExpirationTime = root.expirationTime;
	    requestWork(root, rootExpirationTime);
	  }
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    // Reset this back to zero so subsequent updates don't throw.
	    nestedUpdateCount = 0;
	    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
	  }
	}

	function syncUpdates(fn, a, b, c, d) {
	  var previousExpirationContext = expirationContext;
	  expirationContext = Sync;
	  try {
	    return fn(a, b, c, d);
	  } finally {
	    expirationContext = previousExpirationContext;
	  }
	}

	// TODO: Everything below this is written as if it has been lifted to the
	// renderers. I'll do this in a follow-up.

	// Linked-list of roots
	var firstScheduledRoot = null;
	var lastScheduledRoot = null;

	var callbackExpirationTime = NoWork;
	var callbackID = void 0;
	var isRendering = false;
	var nextFlushedRoot = null;
	var nextFlushedExpirationTime = NoWork;
	var lowestPriorityPendingInteractiveExpirationTime = NoWork;
	var hasUnhandledError = false;
	var unhandledError = null;

	var isBatchingUpdates = false;
	var isUnbatchingUpdates = false;
	var isBatchingInteractiveUpdates = false;

	var completedBatches = null;

	var originalStartTimeMs = scheduler.unstable_now();
	var currentRendererTime = msToExpirationTime(originalStartTimeMs);
	var currentSchedulerTime = currentRendererTime;

	// Use these to prevent an infinite loop of nested updates
	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var lastCommittedRootDuringThisBatch = null;

	function recomputeCurrentRendererTime() {
	  var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
	  currentRendererTime = msToExpirationTime(currentTimeMs);
	}

	function scheduleCallbackWithExpirationTime(root, expirationTime) {
	  if (callbackExpirationTime !== NoWork) {
	    // A callback is already scheduled. Check its expiration time (timeout).
	    if (expirationTime < callbackExpirationTime) {
	      // Existing callback has sufficient timeout. Exit.
	      return;
	    } else {
	      if (callbackID !== null) {
	        // Existing callback has insufficient timeout. Cancel and schedule a
	        // new one.
	        scheduler.unstable_cancelCallback(callbackID);
	      }
	    }
	    // The request callback timer is already running. Don't start a new one.
	  } else {
	    startRequestCallbackTimer();
	  }

	  callbackExpirationTime = expirationTime;
	  var currentMs = scheduler.unstable_now() - originalStartTimeMs;
	  var expirationTimeMs = expirationTimeToMs(expirationTime);
	  var timeout = expirationTimeMs - currentMs;
	  callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
	}

	// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
	// onYield is called upon exiting. We use these in lieu of returning a tuple.
	// I've also chosen not to inline them into renderRoot because these will
	// eventually be lifted into the renderer.
	function onFatal(root) {
	  root.finishedWork = null;
	}

	function onComplete(root, finishedWork, expirationTime) {
	  root.pendingCommitExpirationTime = expirationTime;
	  root.finishedWork = finishedWork;
	}

	function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
	  root.expirationTime = rootExpirationTime;
	  if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
	    // Don't wait an additional tick. Commit the tree immediately.
	    root.pendingCommitExpirationTime = suspendedExpirationTime;
	    root.finishedWork = finishedWork;
	  } else if (msUntilTimeout > 0) {
	    // Wait `msUntilTimeout` milliseconds before committing.
	    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
	  }
	}

	function onYield(root) {
	  root.finishedWork = null;
	}

	function onTimeout(root, finishedWork, suspendedExpirationTime) {
	  // The root timed out. Commit it.
	  root.pendingCommitExpirationTime = suspendedExpirationTime;
	  root.finishedWork = finishedWork;
	  // Read the current time before entering the commit phase. We can be
	  // certain this won't cause tearing related to batching of event updates
	  // because we're at the top of a timer event.
	  recomputeCurrentRendererTime();
	  currentSchedulerTime = currentRendererTime;
	  flushRoot(root, suspendedExpirationTime);
	}

	function onCommit(root, expirationTime) {
	  root.expirationTime = expirationTime;
	  root.finishedWork = null;
	}

	function requestCurrentTime() {
	  // requestCurrentTime is called by the scheduler to compute an expiration
	  // time.
	  //
	  // Expiration times are computed by adding to the current time (the start
	  // time). However, if two updates are scheduled within the same event, we
	  // should treat their start times as simultaneous, even if the actual clock
	  // time has advanced between the first and second call.

	  // In other words, because expiration times determine how updates are batched,
	  // we want all updates of like priority that occur within the same event to
	  // receive the same expiration time. Otherwise we get tearing.
	  //
	  // We keep track of two separate times: the current "renderer" time and the
	  // current "scheduler" time. The renderer time can be updated whenever; it
	  // only exists to minimize the calls performance.now.
	  //
	  // But the scheduler time can only be updated if there's no pending work, or
	  // if we know for certain that we're not in the middle of an event.

	  if (isRendering) {
	    // We're already rendering. Return the most recently read time.
	    return currentSchedulerTime;
	  }
	  // Check if there's pending work.
	  findHighestPriorityRoot();
	  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
	    // If there's no pending work, or if the pending work is offscreen, we can
	    // read the current time without risk of tearing.
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;
	    return currentSchedulerTime;
	  }
	  // There's already pending work. We might be in the middle of a browser
	  // event. If we were to read the current time, it could cause multiple updates
	  // within the same event to receive different expiration times, leading to
	  // tearing. Return the last read time. During the next idle callback, the
	  // time will be updated.
	  return currentSchedulerTime;
	}

	// requestWork is called by the scheduler whenever a root receives an update.
	// It's up to the renderer to call renderRoot at some point in the future.
	function requestWork(root, expirationTime) {
	  addRootToSchedule(root, expirationTime);
	  if (isRendering) {
	    // Prevent reentrancy. Remaining work will be scheduled at the end of
	    // the currently rendering batch.
	    return;
	  }

	  if (isBatchingUpdates) {
	    // Flush work at the end of the batch.
	    if (isUnbatchingUpdates) {
	      // ...unless we're inside unbatchedUpdates, in which case we should
	      // flush it now.
	      nextFlushedRoot = root;
	      nextFlushedExpirationTime = Sync;
	      performWorkOnRoot(root, Sync, false);
	    }
	    return;
	  }

	  // TODO: Get rid of Sync and use current time?
	  if (expirationTime === Sync) {
	    performSyncWork();
	  } else {
	    scheduleCallbackWithExpirationTime(root, expirationTime);
	  }
	}

	function addRootToSchedule(root, expirationTime) {
	  // Add the root to the schedule.
	  // Check if this root is already part of the schedule.
	  if (root.nextScheduledRoot === null) {
	    // This root is not already scheduled. Add it.
	    root.expirationTime = expirationTime;
	    if (lastScheduledRoot === null) {
	      firstScheduledRoot = lastScheduledRoot = root;
	      root.nextScheduledRoot = root;
	    } else {
	      lastScheduledRoot.nextScheduledRoot = root;
	      lastScheduledRoot = root;
	      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	    }
	  } else {
	    // This root is already scheduled, but its priority may have increased.
	    var remainingExpirationTime = root.expirationTime;
	    if (expirationTime > remainingExpirationTime) {
	      // Update the priority.
	      root.expirationTime = expirationTime;
	    }
	  }
	}

	function findHighestPriorityRoot() {
	  var highestPriorityWork = NoWork;
	  var highestPriorityRoot = null;
	  if (lastScheduledRoot !== null) {
	    var previousScheduledRoot = lastScheduledRoot;
	    var root = firstScheduledRoot;
	    while (root !== null) {
	      var remainingExpirationTime = root.expirationTime;
	      if (remainingExpirationTime === NoWork) {
	        // This root no longer has work. Remove it from the scheduler.

	        // TODO: This check is redudant, but Flow is confused by the branch
	        // below where we set lastScheduledRoot to null, even though we break
	        // from the loop right after.
	        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        if (root === root.nextScheduledRoot) {
	          // This is the only root in the list.
	          root.nextScheduledRoot = null;
	          firstScheduledRoot = lastScheduledRoot = null;
	          break;
	        } else if (root === firstScheduledRoot) {
	          // This is the first root in the list.
	          var next = root.nextScheduledRoot;
	          firstScheduledRoot = next;
	          lastScheduledRoot.nextScheduledRoot = next;
	          root.nextScheduledRoot = null;
	        } else if (root === lastScheduledRoot) {
	          // This is the last root in the list.
	          lastScheduledRoot = previousScheduledRoot;
	          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	          root.nextScheduledRoot = null;
	          break;
	        } else {
	          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
	          root.nextScheduledRoot = null;
	        }
	        root = previousScheduledRoot.nextScheduledRoot;
	      } else {
	        if (remainingExpirationTime > highestPriorityWork) {
	          // Update the priority, if it's higher
	          highestPriorityWork = remainingExpirationTime;
	          highestPriorityRoot = root;
	        }
	        if (root === lastScheduledRoot) {
	          break;
	        }
	        if (highestPriorityWork === Sync) {
	          // Sync is highest priority by definition so
	          // we can stop searching.
	          break;
	        }
	        previousScheduledRoot = root;
	        root = root.nextScheduledRoot;
	      }
	    }
	  }

	  nextFlushedRoot = highestPriorityRoot;
	  nextFlushedExpirationTime = highestPriorityWork;
	}

	// TODO: This wrapper exists because many of the older tests (the ones that use
	// flushDeferredPri) rely on the number of times `shouldYield` is called. We
	// should get rid of it.
	var didYield = false;
	function shouldYieldToRenderer() {
	  if (didYield) {
	    return true;
	  }
	  if (scheduler.unstable_shouldYield()) {
	    didYield = true;
	    return true;
	  }
	  return false;
	}

	function performAsyncWork() {
	  try {
	    if (!shouldYieldToRenderer()) {
	      // The callback timed out. That means at least one update has expired.
	      // Iterate through the root schedule. If they contain expired work, set
	      // the next render expiration time to the current time. This has the effect
	      // of flushing all expired work in a single batch, instead of flushing each
	      // level one at a time.
	      if (firstScheduledRoot !== null) {
	        recomputeCurrentRendererTime();
	        var root = firstScheduledRoot;
	        do {
	          didExpireAtExpirationTime(root, currentRendererTime);
	          // The root schedule is circular, so this is never null.
	          root = root.nextScheduledRoot;
	        } while (root !== firstScheduledRoot);
	      }
	    }
	    performWork(NoWork, true);
	  } finally {
	    didYield = false;
	  }
	}

	function performSyncWork() {
	  performWork(Sync, false);
	}

	function performWork(minExpirationTime, isYieldy) {
	  // Keep working on roots until there's no more work, or until there's a higher
	  // priority event.
	  findHighestPriorityRoot();

	  if (isYieldy) {
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;

	    if (enableUserTimingAPI) {
	      var didExpire = nextFlushedExpirationTime > currentRendererTime;
	      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
	      stopRequestCallbackTimer(didExpire, timeout);
	    }

	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
	      findHighestPriorityRoot();
	      recomputeCurrentRendererTime();
	      currentSchedulerTime = currentRendererTime;
	    }
	  } else {
	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
	      findHighestPriorityRoot();
	    }
	  }

	  // We're done flushing work. Either we ran out of time in this callback,
	  // or there's no more work left with sufficient priority.

	  // If we're inside a callback, set this to false since we just completed it.
	  if (isYieldy) {
	    callbackExpirationTime = NoWork;
	    callbackID = null;
	  }
	  // If there's work left over, schedule a new callback.
	  if (nextFlushedExpirationTime !== NoWork) {
	    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
	  }

	  // Clean-up.
	  finishRendering();
	}

	function flushRoot(root, expirationTime) {
	  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
	  // Perform work on root as if the given expiration time is the current time.
	  // This has the effect of synchronously flushing all work up to and
	  // including the given time.
	  nextFlushedRoot = root;
	  nextFlushedExpirationTime = expirationTime;
	  performWorkOnRoot(root, expirationTime, false);
	  // Flush any sync work that was scheduled by lifecycles
	  performSyncWork();
	}

	function finishRendering() {
	  nestedUpdateCount = 0;
	  lastCommittedRootDuringThisBatch = null;

	  if (completedBatches !== null) {
	    var batches = completedBatches;
	    completedBatches = null;
	    for (var i = 0; i < batches.length; i++) {
	      var batch = batches[i];
	      try {
	        batch._onComplete();
	      } catch (error) {
	        if (!hasUnhandledError) {
	          hasUnhandledError = true;
	          unhandledError = error;
	        }
	      }
	    }
	  }

	  if (hasUnhandledError) {
	    var error = unhandledError;
	    unhandledError = null;
	    hasUnhandledError = false;
	    throw error;
	  }
	}

	function performWorkOnRoot(root, expirationTime, isYieldy) {
	  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  isRendering = true;

	  // Check if this is async work or sync/expired work.
	  if (!isYieldy) {
	    // Flush work without yielding.
	    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
	    // may want to perform some work without yielding, but also without
	    // requiring the root to complete (by triggering placeholders).

	    var finishedWork = root.finishedWork;
	    if (finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var timeoutHandle = root.timeoutHandle;
	      if (timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      finishedWork = root.finishedWork;
	      if (finishedWork !== null) {
	        // We've completed the root. Commit it.
	        completeRoot(root, finishedWork, expirationTime);
	      }
	    }
	  } else {
	    // Flush async work.
	    var _finishedWork = root.finishedWork;
	    if (_finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, _finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var _timeoutHandle = root.timeoutHandle;
	      if (_timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(_timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      _finishedWork = root.finishedWork;
	      if (_finishedWork !== null) {
	        // We've completed the root. Check the if we should yield one more time
	        // before committing.
	        if (!shouldYieldToRenderer()) {
	          // Still time left. Commit the root.
	          completeRoot(root, _finishedWork, expirationTime);
	        } else {
	          // There's no time left. Mark this root as complete. We'll come
	          // back and commit it later.
	          root.finishedWork = _finishedWork;
	        }
	      }
	    }
	  }

	  isRendering = false;
	}

	function completeRoot(root, finishedWork, expirationTime) {
	  // Check if there's a batch that matches this expiration time.
	  var firstBatch = root.firstBatch;
	  if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
	    if (completedBatches === null) {
	      completedBatches = [firstBatch];
	    } else {
	      completedBatches.push(firstBatch);
	    }
	    if (firstBatch._defer) {
	      // This root is blocked from committing by a batch. Unschedule it until
	      // we receive another update.
	      root.finishedWork = finishedWork;
	      root.expirationTime = NoWork;
	      return;
	    }
	  }

	  // Commit the root.
	  root.finishedWork = null;

	  // Check if this is a nested update (a sync update scheduled during the
	  // commit phase).
	  if (root === lastCommittedRootDuringThisBatch) {
	    // If the next root is the same as the previous root, this is a nested
	    // update. To prevent an infinite loop, increment the nested update count.
	    nestedUpdateCount++;
	  } else {
	    // Reset whenever we switch roots.
	    lastCommittedRootDuringThisBatch = root;
	    nestedUpdateCount = 0;
	  }
	  commitRoot(root, finishedWork);
	}

	function onUncaughtError(error) {
	  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  // Unschedule this root so we don't work on it again until there's
	  // another update.
	  nextFlushedRoot.expirationTime = NoWork;
	  if (!hasUnhandledError) {
	    hasUnhandledError = true;
	    unhandledError = error;
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function batchedUpdates$1(fn, a) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return fn(a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function unbatchedUpdates(fn, a) {
	  if (isBatchingUpdates && !isUnbatchingUpdates) {
	    isUnbatchingUpdates = true;
	    try {
	      return fn(a);
	    } finally {
	      isUnbatchingUpdates = false;
	    }
	  }
	  return fn(a);
	}

	// TODO: Batching should be implemented at the renderer level, not within
	// the reconciler.
	function flushSync(fn, a) {
	  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return syncUpdates(fn, a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    performSyncWork();
	  }
	}

	function interactiveUpdates$1(fn, a, b) {
	  if (isBatchingInteractiveUpdates) {
	    return fn(a, b);
	  }
	  // If there are any pending interactive updates, synchronously flush them.
	  // This needs to happen before we read any handlers, because the effect of
	  // the previous event may influence which handlers are called during
	  // this event.
	  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	  var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingInteractiveUpdates = true;
	  isBatchingUpdates = true;
	  try {
	    return fn(a, b);
	  } finally {
	    isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	function flushInteractiveUpdates$1() {
	  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	}

	function flushControlled(fn) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    syncUpdates(fn);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// 0 is PROD, 1 is DEV.
	// Might add PROFILE later.


	var didWarnAboutNestedUpdates = void 0;
	var didWarnAboutFindNodeInStrictMode = void 0;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;
	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
	  {
	    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;
	      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime);
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: element };

	  callback = callback === undefined ? null : callback;
	  if (callback !== null) {
	    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
	    update.callback = callback;
	  }

	  flushPassiveEffects();
	  enqueueUpdate(current$$1, update);
	  scheduleWork(current$$1, expirationTime);

	  return expirationTime;
	}

	function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
	  // TODO: If this is a nested container, this won't be the root.
	  var current$$1 = container.current;

	  {
	    if (ReactFiberInstrumentation_1.debugTool) {
	      if (current$$1.alternate === null) {
	        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
	      } else if (element === null) {
	        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
	      } else {
	        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
	      }
	    }
	  }

	  var context = getContextForSubtree(parentComponent);
	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
	}

	function findHostInstance(component) {
	  var fiber = get(component);
	  if (fiber === undefined) {
	    if (typeof component.render === 'function') {
	      invariant(false, 'Unable to find node on an unmounted component.');
	    } else {
	      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	    }
	  }
	  var hostFiber = findCurrentHostFiber(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);
	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        invariant(false, 'Unable to find node on an unmounted component.');
	      } else {
	        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	      }
	    }
	    var hostFiber = findCurrentHostFiber(fiber);
	    if (hostFiber === null) {
	      return null;
	    }
	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';
	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        if (fiber.mode & StrictMode) {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }
	    return hostFiber.stateNode;
	  }
	  return findHostInstance(component);
	}

	function createContainer(containerInfo, isConcurrent, hydrate) {
	  return createFiberRoot(containerInfo, isConcurrent, hydrate);
	}

	function updateContainer(element, container, parentComponent, callback) {
	  var current$$1 = container.current;
	  var currentTime = requestCurrentTime();
	  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
	  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
	}

	function getPublicRootInstance(container) {
	  var containerFiber = container.current;
	  if (!containerFiber.child) {
	    return null;
	  }
	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);
	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

	  return injectInternals(_assign({}, devToolsConfig, {
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);
	      if (hostFiber === null) {
	        return null;
	      }
	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }
	      return findFiberByHostInstance(instance);
	    }
	  }));
	}

	// This file intentionally does *not* have the Flow annotation.
	// Don't add it. See `./inline-typed.js` for an explanation.

	function createPortal$1(children, containerInfo,
	// TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.6.3';

	// TODO: This type is shared between the reconciler and ReactDOM, but will
	// eventually be lifted out to the renderer.
	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

	var topLevelUpdateWarnings = void 0;
	var warnOnInvalidCallback = void 0;
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }

	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
	      if (hostInstance) {
	        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	  };

	  warnOnInvalidCallback = function (callback, callerName) {
	    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
	  };
	}

	setRestoreImplementation(restoreControlledState$1);

	function ReactBatch(root) {
	  var expirationTime = computeUniqueAsyncExpiration();
	  this._expirationTime = expirationTime;
	  this._root = root;
	  this._next = null;
	  this._callbacks = null;
	  this._didComplete = false;
	  this._hasChildren = false;
	  this._children = null;
	  this._defer = true;
	}
	ReactBatch.prototype.render = function (children) {
	  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
	  this._hasChildren = true;
	  this._children = children;
	  var internalRoot = this._root._internalRoot;
	  var expirationTime = this._expirationTime;
	  var work = new ReactWork();
	  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
	  return work;
	};
	ReactBatch.prototype.then = function (onComplete) {
	  if (this._didComplete) {
	    onComplete();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onComplete);
	};
	ReactBatch.prototype.commit = function () {
	  var internalRoot = this._root._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

	  if (!this._hasChildren) {
	    // This batch is empty. Return.
	    this._next = null;
	    this._defer = false;
	    return;
	  }

	  var expirationTime = this._expirationTime;

	  // Ensure this is the first batch in the list.
	  if (firstBatch !== this) {
	    // This batch is not the earliest batch. We need to move it to the front.
	    // Update its expiration time to be the expiration time of the earliest
	    // batch, so that we can flush it without flushing the other batches.
	    if (this._hasChildren) {
	      expirationTime = this._expirationTime = firstBatch._expirationTime;
	      // Rendering this batch again ensures its children will be the final state
	      // when we flush (updates are processed in insertion order: last
	      // update wins).
	      // TODO: This forces a restart. Should we print a warning?
	      this.render(this._children);
	    }

	    // Remove the batch from the list.
	    var previous = null;
	    var batch = firstBatch;
	    while (batch !== this) {
	      previous = batch;
	      batch = batch._next;
	    }
	    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
	    previous._next = batch._next;

	    // Add it to the front.
	    this._next = firstBatch;
	    firstBatch = internalRoot.firstBatch = this;
	  }

	  // Synchronously flush all the work up to this batch's expiration time.
	  this._defer = false;
	  flushRoot(internalRoot, expirationTime);

	  // Pop the batch from the list.
	  var next = this._next;
	  this._next = null;
	  firstBatch = internalRoot.firstBatch = next;

	  // Append the next earliest batch's children to the update queue.
	  if (firstBatch !== null && firstBatch._hasChildren) {
	    firstBatch.render(firstBatch._children);
	  }
	};
	ReactBatch.prototype._onComplete = function () {
	  if (this._didComplete) {
	    return;
	  }
	  this._didComplete = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback = callbacks[i];
	    _callback();
	  }
	};

	function ReactWork() {
	  this._callbacks = null;
	  this._didCommit = false;
	  // TODO: Avoid need to bind by replacing callbacks in the update queue with
	  // list of Work objects.
	  this._onCommit = this._onCommit.bind(this);
	}
	ReactWork.prototype.then = function (onCommit) {
	  if (this._didCommit) {
	    onCommit();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onCommit);
	};
	ReactWork.prototype._onCommit = function () {
	  if (this._didCommit) {
	    return;
	  }
	  this._didCommit = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback2 = callbacks[i];
	    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
	    _callback2();
	  }
	};

	function ReactRoot(container, isConcurrent, hydrate) {
	  var root = createContainer(container, isConcurrent, hydrate);
	  this._internalRoot = root;
	}
	ReactRoot.prototype.render = function (children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.unmount = function (callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(null, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, parentComponent, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.createBatch = function () {
	  var batch = new ReactBatch(this);
	  var expirationTime = batch._expirationTime;

	  var internalRoot = this._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  if (firstBatch === null) {
	    internalRoot.firstBatch = batch;
	    batch._next = null;
	  } else {
	    // Insert sorted by expiration time then insertion order
	    var insertAfter = null;
	    var insertBefore = firstBatch;
	    while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
	      insertAfter = insertBefore;
	      insertBefore = insertBefore._next;
	    }
	    batch._next = insertBefore;
	    if (insertAfter !== null) {
	      insertAfter._next = batch;
	    }
	  }

	  return batch;
	};

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

	var warnedAboutHydrateAPI = false;

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
	  // First clear any existing content.
	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling = void 0;
	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;
	          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }
	      container.removeChild(rootSibling);
	    }
	  }
	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;
	      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }
	  // Legacy roots are not async by default.
	  var isConcurrent = false;
	  return new ReactRoot(container, isConcurrent, shouldHydrate);
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  // TODO: Ensure all entry points contain this check
	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

	  {
	    topLevelUpdateWarnings(container);
	  }

	  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.
	  var root = container._reactRootContainer;
	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    if (typeof callback === 'function') {
	      var originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        originalCallback.call(instance);
	      };
	    }
	    // Initial mount should not be batched.
	    unbatchedUpdates(function () {
	      if (parentComponent != null) {
	        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	      } else {
	        root.render(children, callback);
	      }
	    });
	  } else {
	    if (typeof callback === 'function') {
	      var _originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        _originalCallback.call(instance);
	      };
	    }
	    // Update
	    if (parentComponent != null) {
	      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	    } else {
	      root.render(children, callback);
	    }
	  }
	  return getPublicRootInstance(root._internalRoot);
	}

	function createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	  // TODO: pass ReactDOM portal implementation as third argument
	  return createPortal$1(children, container, null, key);
	}

	var ReactDOM = {
	  createPortal: createPortal,

	  findDOMNode: function (componentOrElement) {
	    {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null && owner.stateNode !== null) {
	        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
	        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
	        owner.stateNode._warnedAboutRefsInRender = true;
	      }
	    }
	    if (componentOrElement == null) {
	      return null;
	    }
	    if (componentOrElement.nodeType === ELEMENT_NODE) {
	      return componentOrElement;
	    }
	    {
	      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	    }
	    return findHostInstance(componentOrElement);
	  },
	  hydrate: function (element, container, callback) {
	    // TODO: throw or warn if we couldn't hydrate?
	    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	  },
	  render: function (element, container, callback) {
	    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	  },
	  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
	    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
	    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	  },
	  unmountComponentAtNode: function (container) {
	    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

	    if (container._reactRootContainer) {
	      {
	        var rootEl = getReactRootElementInContainer(container);
	        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
	        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	      }

	      // Unmount should not be batched.
	      unbatchedUpdates(function () {
	        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	          container._reactRootContainer = null;
	        });
	      });
	      // If you call unmountComponentAtNode twice in quick succession, you'll
	      // get `true` twice. That's probably fine?
	      return true;
	    } else {
	      {
	        var _rootEl = getReactRootElementInContainer(container);
	        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

	        // Check if the container itself is a React root node.
	        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	  },


	  // Temporary alias since we already shipped React 16 RC with it.
	  // TODO: remove in React 17.
	  unstable_createPortal: function () {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;
	      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	    return createPortal.apply(undefined, arguments);
	  },


	  unstable_batchedUpdates: batchedUpdates$1,

	  unstable_interactiveUpdates: interactiveUpdates$1,

	  flushSync: flushSync,

	  unstable_flushControlled: flushControlled,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    // Keep in sync with ReactDOMUnstableNativeDependencies.js
	    // and ReactTestUtils.js. This is an array for better minification.
	    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
	  }
	};

	function createRoot(container, options) {
	  var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
	  !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
	  var hydrate = options != null && options.hydrate === true;
	  return new ReactRoot(container, true, hydrate);
	}

	if (enableStableConcurrentModeAPIs) {
	  ReactDOM.createRoot = createRoot;
	} else {
	  ReactDOM.unstable_createRoot = createRoot;
	}

	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType: 1,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol;
	      // Don't warn in exotic cases like chrome-extension://.
	      if (/^(https?|file):$/.test(protocol)) {
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}



	var ReactDOM$2 = Object.freeze({
		default: ReactDOM
	});

	var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var reactDom = ReactDOM$3.default || ReactDOM$3;

	module.exports = reactDom;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(16);
	} else {
	  module.exports = __webpack_require__(17);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/** @license React v16.6.1
	 * scheduler-tracing.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.1
	 * scheduler-tracing.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:


	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.


	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


	// Gather advanced timing metrics for Profiler subtrees.


	// Trace which interactions trigger each commit.
	var enableSchedulerTracing = true;

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties


	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

	var DEFAULT_THREAD_ID = 0;

	// Counters used to generate unique IDs.
	var interactionIDCounter = 0;
	var threadIDCounter = 0;

	// Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.
	exports.__interactionsRef = null;

	// Listener(s) to notify when interactions begin and end.
	exports.__subscriberRef = null;

	if (enableSchedulerTracing) {
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}

	function unstable_clear(callback) {
	  if (!enableSchedulerTracing) {
	    return callback();
	  }

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}

	function unstable_getCurrent() {
	  if (!enableSchedulerTracing) {
	    return null;
	  } else {
	    return exports.__interactionsRef.current;
	  }
	}

	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}

	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  if (!enableSchedulerTracing) {
	    return callback();
	  }

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };

	  var prevInteractions = exports.__interactionsRef.current;

	  // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.
	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;

	  var subscriber = exports.__subscriberRef.current;
	  var returnValue = void 0;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--;

	          // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.
	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}

	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  if (!enableSchedulerTracing) {
	    return callback;
	  }

	  var wrappedInteractions = exports.__interactionsRef.current;

	  var subscriber = exports.__subscriberRef.current;
	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  }

	  // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.
	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });

	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;

	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue = void 0;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true;

	        // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.
	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;
	if (enableSchedulerTracing) {
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  if (enableSchedulerTracing) {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}

	function unstable_unsubscribe(subscriber) {
	  if (enableSchedulerTracing) {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_trace = unstable_trace;
	exports.unstable_wrap = unstable_wrap;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	__webpack_require__(19);
	var firebase = _interopDefault(__webpack_require__(22));
	__webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__(28);
	__webpack_require__(30);
	__webpack_require__(31);
	__webpack_require__(32);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport * as firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");

	module.exports = firebase;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, global) {'use strict';

	__webpack_require__(21);

	// Store setTimeout reference so promise-polyfill will be unaffected by
	// other code modifying setTimeout (like sinon.useFakeTimers())
	var setTimeoutFunc = setTimeout;

	function noop() {}

	// Polyfill for Function.prototype.bind
	function bind(fn, thisArg) {
	  return function() {
	    fn.apply(thisArg, arguments);
	  };
	}

	function Promise(fn) {
	  if (!(this instanceof Promise))
	    throw new TypeError('Promises must be constructed via new');
	  if (typeof fn !== 'function') throw new TypeError('not a function');
	  this._state = 0;
	  this._handled = false;
	  this._value = undefined;
	  this._deferreds = [];

	  doResolve(fn, this);
	}

	function handle(self, deferred) {
	  while (self._state === 3) {
	    self = self._value;
	  }
	  if (self._state === 0) {
	    self._deferreds.push(deferred);
	    return;
	  }
	  self._handled = true;
	  Promise._immediateFn(function() {
	    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
	      return;
	    }
	    var ret;
	    try {
	      ret = cb(self._value);
	    } catch (e) {
	      reject(deferred.promise, e);
	      return;
	    }
	    resolve(deferred.promise, ret);
	  });
	}

	function resolve(self, newValue) {
	  try {
	    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	    if (newValue === self)
	      throw new TypeError('A promise cannot be resolved with itself.');
	    if (
	      newValue &&
	      (typeof newValue === 'object' || typeof newValue === 'function')
	    ) {
	      var then = newValue.then;
	      if (newValue instanceof Promise) {
	        self._state = 3;
	        self._value = newValue;
	        finale(self);
	        return;
	      } else if (typeof then === 'function') {
	        doResolve(bind(then, newValue), self);
	        return;
	      }
	    }
	    self._state = 1;
	    self._value = newValue;
	    finale(self);
	  } catch (e) {
	    reject(self, e);
	  }
	}

	function reject(self, newValue) {
	  self._state = 2;
	  self._value = newValue;
	  finale(self);
	}

	function finale(self) {
	  if (self._state === 2 && self._deferreds.length === 0) {
	    Promise._immediateFn(function() {
	      if (!self._handled) {
	        Promise._unhandledRejectionFn(self._value);
	      }
	    });
	  }

	  for (var i = 0, len = self._deferreds.length; i < len; i++) {
	    handle(self, self._deferreds[i]);
	  }
	  self._deferreds = null;
	}

	function Handler(onFulfilled, onRejected, promise) {
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}

	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, self) {
	  var done = false;
	  try {
	    fn(
	      function(value) {
	        if (done) return;
	        done = true;
	        resolve(self, value);
	      },
	      function(reason) {
	        if (done) return;
	        done = true;
	        reject(self, reason);
	      }
	    );
	  } catch (ex) {
	    if (done) return;
	    done = true;
	    reject(self, ex);
	  }
	}

	Promise.prototype['catch'] = function(onRejected) {
	  return this.then(null, onRejected);
	};

	Promise.prototype.then = function(onFulfilled, onRejected) {
	  var prom = new this.constructor(noop);

	  handle(this, new Handler(onFulfilled, onRejected, prom));
	  return prom;
	};

	Promise.prototype['finally'] = function(callback) {
	  var constructor = this.constructor;
	  return this.then(
	    function(value) {
	      return constructor.resolve(callback()).then(function() {
	        return value;
	      });
	    },
	    function(reason) {
	      return constructor.resolve(callback()).then(function() {
	        return constructor.reject(reason);
	      });
	    }
	  );
	};

	Promise.all = function(arr) {
	  return new Promise(function(resolve, reject) {
	    if (!arr || typeof arr.length === 'undefined')
	      throw new TypeError('Promise.all accepts an array');
	    var args = Array.prototype.slice.call(arr);
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;

	    function res(i, val) {
	      try {
	        if (val && (typeof val === 'object' || typeof val === 'function')) {
	          var then = val.then;
	          if (typeof then === 'function') {
	            then.call(
	              val,
	              function(val) {
	                res(i, val);
	              },
	              reject
	            );
	            return;
	          }
	        }
	        args[i] = val;
	        if (--remaining === 0) {
	          resolve(args);
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    }

	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};

	Promise.resolve = function(value) {
	  if (value && typeof value === 'object' && value.constructor === Promise) {
	    return value;
	  }

	  return new Promise(function(resolve) {
	    resolve(value);
	  });
	};

	Promise.reject = function(value) {
	  return new Promise(function(resolve, reject) {
	    reject(value);
	  });
	};

	Promise.race = function(values) {
	  return new Promise(function(resolve, reject) {
	    for (var i = 0, len = values.length; i < len; i++) {
	      values[i].then(resolve, reject);
	    }
	  });
	};

	// Use polyfill for setImmediate for performance gains
	Promise._immediateFn =
	  (typeof setImmediate === 'function' &&
	    function(fn) {
	      setImmediate(fn);
	    }) ||
	  function(fn) {
	    setTimeoutFunc(fn, 0);
	  };

	Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
	  if (typeof console !== 'undefined' && console) {
	    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
	  }
	};

	var globalNS = (function() {
	  // the only reliable means to get the global object is
	  // `Function('return this')()`
	  // However, this causes CSP violations in Chrome apps.
	  if (typeof self !== 'undefined') {
	    return self;
	  }
	  if (typeof window !== 'undefined') {
	    return window;
	  }
	  if (typeof global !== 'undefined') {
	    return global;
	  }
	  throw new Error('unable to locate global object');
	})();

	if (!globalNS.Promise) {
	  globalNS.Promise = Promise;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.5.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document) && _isObject(document.createElement);
	var _domCreate = function (it) {
	  return is ? document.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');
	var TO_STRING = 'toString';
	var $toString = Function[TO_STRING];
	var TPL = ('' + $toString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return $toString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) _redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) _hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var toString = {}.toString;

	var _cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});
	var _shared = function (key) {
	  return store[key] || (store[key] = {});
	};

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var SPECIES = _wks('species');

	var _arraySpeciesConstructor = function (original) {
	  var C;
	  if (_isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
	    if (_isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


	var _arraySpeciesCreate = function (original, length) {
	  return new (_arraySpeciesConstructor(original))(length);
	};

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex





	var _arrayMethods = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || _arraySpeciesCreate;
	  return function ($this, callbackfn, that) {
	    var O = _toObject($this);
	    var self = _iobject(O);
	    var f = _ctx(callbackfn, that, 3);
	    var length = _toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = _wks('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
	var _addToUnscopables = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};

	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

	var $find = _arrayMethods(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	_export(_export.P + _export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY);

	var find = _core.Array.find;

	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

	var $find$1 = _arrayMethods(6);
	var KEY$1 = 'findIndex';
	var forced$1 = true;
	// Shouldn't skip holes
	if (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });
	_export(_export.P + _export.F * forced$1, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY$1);

	var findIndex = _core.Array.findIndex;

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var f$1 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$1
	};

	var f$2 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$2
	};

	// 19.1.2.1 Object.assign(target, source, ...)





	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	var assign = _core.Object.assign;

	// 7.2.8 IsRegExp(argument)


	var MATCH = _wks('match');
	var _isRegexp = function (it) {
	  var isRegExp;
	  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
	};

	// helper for String#{startsWith, endsWith, includes}



	var _stringContext = function (that, searchString, NAME) {
	  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(_defined(that));
	};

	var MATCH$1 = _wks('match');
	var _failsIsRegexp = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH$1] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};

	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = _stringContext(this, searchString, STARTS_WITH);
	    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	var startsWith = _core.String.startsWith;

	var _stringRepeat = function repeat(count) {
	  var str = String(_defined(this));
	  var res = '';
	  var n = _toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};

	_export(_export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: _stringRepeat
	});

	var repeat = _core.String.repeat;

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var f$3 = _wks;

	var _wksExt = {
		f: f$3
	};

	var _library = false;

	var defineProperty = _objectDp.f;
	var _wksDefine = function (name) {
	  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });
	};

	// all enumerable object keys, includes symbols



	var _enumKeys = function (it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$1 = _global.document;
	var _html = document$1 && document$1.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$4
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
		f: f$5
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$6
	};

	// ECMAScript 6 symbols shim





	var META = _meta.KEY;



















	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
	} : dP$1;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

	for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

	_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return _has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	// 19.1.3.6 Object.prototype.toString()

	var test = {};
	test[_wks('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  _redefine(Object.prototype, 'toString', function toString() {
	    return '[object ' + _classof(this) + ']';
	  }, true);
	}

	_wksDefine('asyncIterator');

	_wksDefine('observable');

	var symbol = _core.Symbol;

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _iterators = {};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var ObjectProto$1 = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto$1 : null;
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	_addToUnscopables('keys');
	_addToUnscopables('values');
	_addToUnscopables('entries');

	var ITERATOR$1 = _wks('iterator');
	var TO_STRING_TAG = _wks('toStringTag');
	var ArrayValues = _iterators.Array;

	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};

	for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = _global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);
	    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
	    _iterators[NAME] = ArrayValues;
	    if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);
	  }
	}

	var iterator = _wksExt.f('iterator');

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20).setImmediate, (function() { return this; }())))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(3).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20).setImmediate, __webpack_require__(20).clearImmediate))

/***/ },
/* 21 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]

	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }

	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1])
	      }, this)
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }

	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }

	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)

	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }

	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }

	  function Body() {
	    this.bodyUsed = false

	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }

	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body

	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	    // https://tools.ietf.org/html/rfc7230#section-3.2
	    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
	    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = options.status === undefined ? 200 : options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      } else if (request.credentials === 'omit') {
	        xhr.withCredentials = false
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var util = __webpack_require__(23);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var contains = function (obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	};
	var DEFAULT_ENTRY_NAME = '[DEFAULT]';
	// An array to capture listeners before the true auth functions
	// exist
	var tokenListeners = [];
	/**
	 * Global context object for a collection of services using
	 * a shared authentication state.
	 */
	var FirebaseAppImpl = /** @class */ (function () {
	    function FirebaseAppImpl(options, config, firebase_) {
	        this.firebase_ = firebase_;
	        this.isDeleted_ = false;
	        this.services_ = {};
	        this.name_ = config.name;
	        this._automaticDataCollectionEnabled =
	            config.automaticDataCollectionEnabled || false;
	        this.options_ = util.deepCopy(options);
	        this.INTERNAL = {
	            getUid: function () { return null; },
	            getToken: function () { return Promise.resolve(null); },
	            addAuthTokenListener: function (callback) {
	                tokenListeners.push(callback);
	                // Make sure callback is called, asynchronously, in the absence of the auth module
	                setTimeout(function () { return callback(null); }, 0);
	            },
	            removeAuthTokenListener: function (callback) {
	                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });
	            }
	        };
	    }
	    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
	        get: function () {
	            this.checkDestroyed_();
	            return this._automaticDataCollectionEnabled;
	        },
	        set: function (val) {
	            this.checkDestroyed_();
	            this._automaticDataCollectionEnabled = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
	        get: function () {
	            this.checkDestroyed_();
	            return this.name_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
	        get: function () {
	            this.checkDestroyed_();
	            return this.options_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FirebaseAppImpl.prototype.delete = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this.checkDestroyed_();
	            resolve();
	        })
	            .then(function () {
	            _this.firebase_.INTERNAL.removeApp(_this.name_);
	            var services = [];
	            Object.keys(_this.services_).forEach(function (serviceKey) {
	                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
	                    services.push(_this.services_[serviceKey][instanceKey]);
	                });
	            });
	            return Promise.all(services.map(function (service) {
	                return service.INTERNAL.delete();
	            }));
	        })
	            .then(function () {
	            _this.isDeleted_ = true;
	            _this.services_ = {};
	        });
	    };
	    /**
	     * Return a service instance associated with this app (creating it
	     * on demand), identified by the passed instanceIdentifier.
	     *
	     * NOTE: Currently storage is the only one that is leveraging this
	     * functionality. They invoke it by calling:
	     *
	     * ```javascript
	     * firebase.app().storage('STORAGE BUCKET ID')
	     * ```
	     *
	     * The service name is passed to this already
	     * @internal
	     */
	    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
	        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
	        this.checkDestroyed_();
	        if (!this.services_[name]) {
	            this.services_[name] = {};
	        }
	        if (!this.services_[name][instanceIdentifier]) {
	            /**
	             * If a custom instance has been defined (i.e. not '[DEFAULT]')
	             * then we will pass that instance on, otherwise we pass `null`
	             */
	            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
	                ? instanceIdentifier
	                : undefined;
	            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
	            this.services_[name][instanceIdentifier] = service;
	        }
	        return this.services_[name][instanceIdentifier];
	    };
	    /**
	     * Callback function used to extend an App instance at the time
	     * of service instance creation.
	     */
	    FirebaseAppImpl.prototype.extendApp = function (props) {
	        var _this = this;
	        // Copy the object onto the FirebaseAppImpl prototype
	        util.deepExtend(this, props);
	        /**
	         * If the app has overwritten the addAuthTokenListener stub, forward
	         * the active token listeners on to the true fxn.
	         *
	         * TODO: This function is required due to our current module
	         * structure. Once we are able to rely strictly upon a single module
	         * implementation, this code should be refactored and Auth should
	         * provide these stubs and the upgrade logic
	         */
	        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
	            tokenListeners.forEach(function (listener) {
	                _this.INTERNAL.addAuthTokenListener(listener);
	            });
	            tokenListeners = [];
	        }
	    };
	    /**
	     * This function will throw an Error if the App has already been deleted -
	     * use before performing API actions on the App.
	     */
	    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
	        if (this.isDeleted_) {
	            error('app-deleted', { name: this.name_ });
	        }
	    };
	    return FirebaseAppImpl;
	}());
	// Prevent dead-code elimination of these methods w/o invalid property
	// copying.
	(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
	    FirebaseAppImpl.prototype.delete ||
	    console.log('dc');
	/**
	 * Return a firebase namespace object.
	 *
	 * In production, this will be called exactly once and the result
	 * assigned to the 'firebase' global.  It may be called multiple times
	 * in unit tests.
	 */
	function createFirebaseNamespace() {
	    var apps_ = {};
	    var factories = {};
	    var appHooks = {};
	    // A namespace is a plain JavaScript Object.
	    var namespace = {
	        // Hack to prevent Babel from modifying the object returned
	        // as the firebase namespace.
	        __esModule: true,
	        initializeApp: initializeApp,
	        app: app,
	        apps: null,
	        Promise: Promise,
	        SDK_VERSION: '5.5.9',
	        INTERNAL: {
	            registerService: registerService,
	            createFirebaseNamespace: createFirebaseNamespace,
	            extendNamespace: extendNamespace,
	            createSubscribe: util.createSubscribe,
	            ErrorFactory: util.ErrorFactory,
	            removeApp: removeApp,
	            factories: factories,
	            useAsService: useAsService,
	            Promise: Promise,
	            deepExtend: util.deepExtend
	        }
	    };
	    // Inject a circular default export to allow Babel users who were previously
	    // using:
	    //
	    //   import firebase from 'firebase';
	    //   which becomes: var firebase = require('firebase').default;
	    //
	    // instead of
	    //
	    //   import * as firebase from 'firebase';
	    //   which becomes: var firebase = require('firebase');
	    util.patchProperty(namespace, 'default', namespace);
	    // firebase.apps is a read-only getter.
	    Object.defineProperty(namespace, 'apps', {
	        get: getApps
	    });
	    /**
	     * Called by App.delete() - but before any services associated with the App
	     * are deleted.
	     */
	    function removeApp(name) {
	        var app = apps_[name];
	        callAppHooks(app, 'delete');
	        delete apps_[name];
	    }
	    /**
	     * Get the App object for a given name (or DEFAULT).
	     */
	    function app(name) {
	        name = name || DEFAULT_ENTRY_NAME;
	        if (!contains(apps_, name)) {
	            error('no-app', { name: name });
	        }
	        return apps_[name];
	    }
	    util.patchProperty(app, 'App', FirebaseAppImpl);
	    function initializeApp(options, rawConfig) {
	        if (rawConfig === void 0) { rawConfig = {}; }
	        if (typeof rawConfig !== 'object' || rawConfig === null) {
	            var name_1 = rawConfig;
	            rawConfig = { name: name_1 };
	        }
	        var config = rawConfig;
	        if (config.name === undefined) {
	            config.name = DEFAULT_ENTRY_NAME;
	        }
	        var name = config.name;
	        if (typeof name !== 'string' || !name) {
	            error('bad-app-name', { name: name + '' });
	        }
	        if (contains(apps_, name)) {
	            error('duplicate-app', { name: name });
	        }
	        var app = new FirebaseAppImpl(options, config, namespace);
	        apps_[name] = app;
	        callAppHooks(app, 'create');
	        return app;
	    }
	    /*
	     * Return an array of all the non-deleted FirebaseApps.
	     */
	    function getApps() {
	        // Make a copy so caller cannot mutate the apps list.
	        return Object.keys(apps_).map(function (name) { return apps_[name]; });
	    }
	    /*
	     * Register a Firebase Service.
	     *
	     * firebase.INTERNAL.registerService()
	     *
	     * TODO: Implement serviceProperties.
	     */
	    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
	        // Cannot re-register a service that already exists
	        if (factories[name]) {
	            error('duplicate-service', { name: name });
	        }
	        // Capture the service factory for later service instantiation
	        factories[name] = createService;
	        // Capture the appHook, if passed
	        if (appHook) {
	            appHooks[name] = appHook;
	            // Run the **new** app hook on all existing apps
	            getApps().forEach(function (app) {
	                appHook('create', app);
	            });
	        }
	        // The Service namespace is an accessor function ...
	        var serviceNamespace = function (appArg) {
	            if (appArg === void 0) { appArg = app(); }
	            if (typeof appArg[name] !== 'function') {
	                // Invalid argument.
	                // This happens in the following case: firebase.storage('gs:/')
	                error('invalid-app-argument', { name: name });
	            }
	            // Forward service instance lookup to the FirebaseApp.
	            return appArg[name]();
	        };
	        // ... and a container for service-level properties.
	        if (serviceProperties !== undefined) {
	            util.deepExtend(serviceNamespace, serviceProperties);
	        }
	        // Monkey-patch the serviceNamespace onto the firebase namespace
	        namespace[name] = serviceNamespace;
	        // Patch the FirebaseAppImpl prototype
	        FirebaseAppImpl.prototype[name] = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var serviceFxn = this._getService.bind(this, name);
	            return serviceFxn.apply(this, allowMultipleInstances ? args : []);
	        };
	        return serviceNamespace;
	    }
	    /**
	     * Patch the top-level firebase namespace with additional properties.
	     *
	     * firebase.INTERNAL.extendNamespace()
	     */
	    function extendNamespace(props) {
	        util.deepExtend(namespace, props);
	    }
	    function callAppHooks(app, eventName) {
	        Object.keys(factories).forEach(function (serviceName) {
	            // Ignore virtual services
	            var factoryName = useAsService(app, serviceName);
	            if (factoryName === null) {
	                return;
	            }
	            if (appHooks[factoryName]) {
	                appHooks[factoryName](eventName, app);
	            }
	        });
	    }
	    // Map the requested service to a registered service name
	    // (used to map auth to serverAuth service when needed).
	    function useAsService(app, name) {
	        if (name === 'serverAuth') {
	            return null;
	        }
	        var useService = name;
	        var options = app.options;
	        return useService;
	    }
	    return namespace;
	}
	function error(code, args) {
	    throw appErrors.create(code, args);
	}
	// TypeScript does not support non-string indexes!
	// let errors: {[code: AppError: string} = {
	var errors = {
	    'no-app': "No Firebase App '{$name}' has been created - " +
	        'call Firebase App.initializeApp()',
	    'bad-app-name': "Illegal App name: '{$name}",
	    'duplicate-app': "Firebase App named '{$name}' already exists",
	    'app-deleted': "Firebase App named '{$name}' already deleted",
	    'duplicate-service': "Firebase service named '{$name}' already registered",
	    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +
	        'account is only allowed in a Node.js environment. On client ' +
	        'devices, you should instead initialize the SDK with an api key and ' +
	        'auth domain',
	    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +
	        'Firebase App instance.'
	};
	var appErrors = new util.ErrorFactory('app', 'Firebase', errors);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var firebase = createFirebaseNamespace();

	exports.firebase = firebase;
	exports.default = firebase;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var tslib_1 = __webpack_require__(24);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
	 */
	var CONSTANTS = {
	    /**
	     * @define {boolean} Whether this is the client Node.js SDK.
	     */
	    NODE_CLIENT: false,
	    /**
	     * @define {boolean} Whether this is the Admin Node.js SDK.
	     */
	    NODE_ADMIN: false,
	    /**
	     * Firebase SDK Version
	     */
	    SDK_VERSION: '${JSCORE_VERSION}'
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Throws an error if the provided assertion is falsy
	 * @param {*} assertion The assertion to be tested for falsiness
	 * @param {!string} message The message to display if the check fails
	 */
	var assert = function (assertion, message) {
	    if (!assertion) {
	        throw assertionError(message);
	    }
	};
	/**
	 * Returns an Error object suitable for throwing.
	 * @param {string} message
	 * @return {!Error}
	 */
	var assertionError = function (message) {
	    return new Error('Firebase Database (' +
	        CONSTANTS.SDK_VERSION +
	        ') INTERNAL ASSERT FAILED: ' +
	        message);
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var stringToByteArray = function (str) {
	    // TODO(user): Use native implementations if/when available
	    var out = [], p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if ((c & 0xfc00) == 0xd800 &&
	            i + 1 < str.length &&
	            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
	            // Surrogate Pair
	            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Turns an array of numbers into the string given by the concatenation of the
	 * characters to which the numbers correspond.
	 * @param {Array<number>} bytes Array of numbers representing characters.
	 * @return {string} Stringification of the array.
	 */
	var byteArrayToString = function (bytes) {
	    // TODO(user): Use native implementations if/when available
	    var out = [], pos = 0, c = 0;
	    while (pos < bytes.length) {
	        var c1 = bytes[pos++];
	        if (c1 < 128) {
	            out[c++] = String.fromCharCode(c1);
	        }
	        else if (c1 > 191 && c1 < 224) {
	            var c2 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
	        }
	        else if (c1 > 239 && c1 < 365) {
	            // Surrogate Pair
	            var c2 = bytes[pos++];
	            var c3 = bytes[pos++];
	            var c4 = bytes[pos++];
	            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
	                0x10000;
	            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
	            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
	        }
	        else {
	            var c2 = bytes[pos++];
	            var c3 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	        }
	    }
	    return out.join('');
	};
	// Static lookup maps, lazily populated by init_()
	var base64 = {
	    /**
	     * Maps bytes to characters.
	     * @type {Object}
	     * @private
	     */
	    byteToCharMap_: null,
	    /**
	     * Maps characters to bytes.
	     * @type {Object}
	     * @private
	     */
	    charToByteMap_: null,
	    /**
	     * Maps bytes to websafe characters.
	     * @type {Object}
	     * @private
	     */
	    byteToCharMapWebSafe_: null,
	    /**
	     * Maps websafe characters to bytes.
	     * @type {Object}
	     * @private
	     */
	    charToByteMapWebSafe_: null,
	    /**
	     * Our default alphabet, shared between
	     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
	     * @type {string}
	     */
	    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
	    /**
	     * Our default alphabet. Value 64 (=) is special; it means "nothing."
	     * @type {string}
	     */
	    get ENCODED_VALS() {
	        return this.ENCODED_VALS_BASE + '+/=';
	    },
	    /**
	     * Our websafe alphabet.
	     * @type {string}
	     */
	    get ENCODED_VALS_WEBSAFE() {
	        return this.ENCODED_VALS_BASE + '-_.';
	    },
	    /**
	     * Whether this browser supports the atob and btoa functions. This extension
	     * started at Mozilla but is now implemented by many browsers. We use the
	     * ASSUME_* variables to avoid pulling in the full useragent detection library
	     * but still allowing the standard per-browser compilations.
	     *
	     * @type {boolean}
	     */
	    HAS_NATIVE_SUPPORT: typeof atob === 'function',
	    /**
	     * Base64-encode an array of bytes.
	     *
	     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with
	     *     value in [0, 255]) to encode.
	     * @param {boolean=} opt_webSafe Boolean indicating we should use the
	     *     alternative alphabet.
	     * @return {string} The base64 encoded string.
	     */
	    encodeByteArray: function (input, opt_webSafe) {
	        if (!Array.isArray(input)) {
	            throw Error('encodeByteArray takes an array as a parameter');
	        }
	        this.init_();
	        var byteToCharMap = opt_webSafe
	            ? this.byteToCharMapWebSafe_
	            : this.byteToCharMap_;
	        var output = [];
	        for (var i = 0; i < input.length; i += 3) {
	            var byte1 = input[i];
	            var haveByte2 = i + 1 < input.length;
	            var byte2 = haveByte2 ? input[i + 1] : 0;
	            var haveByte3 = i + 2 < input.length;
	            var byte3 = haveByte3 ? input[i + 2] : 0;
	            var outByte1 = byte1 >> 2;
	            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
	            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
	            var outByte4 = byte3 & 0x3f;
	            if (!haveByte3) {
	                outByte4 = 64;
	                if (!haveByte2) {
	                    outByte3 = 64;
	                }
	            }
	            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
	        }
	        return output.join('');
	    },
	    /**
	     * Base64-encode a string.
	     *
	     * @param {string} input A string to encode.
	     * @param {boolean=} opt_webSafe If true, we should use the
	     *     alternative alphabet.
	     * @return {string} The base64 encoded string.
	     */
	    encodeString: function (input, opt_webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
	            return btoa(input);
	        }
	        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * @param {string} input to decode.
	     * @param {boolean=} opt_webSafe True if we should use the
	     *     alternative alphabet.
	     * @return {string} string representing the decoded value.
	     */
	    decodeString: function (input, opt_webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
	            return atob(input);
	        }
	        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * In base-64 decoding, groups of four characters are converted into three
	     * bytes.  If the encoder did not apply padding, the input length may not
	     * be a multiple of 4.
	     *
	     * In this case, the last group will have fewer than 4 characters, and
	     * padding will be inferred.  If the group has one or two characters, it decodes
	     * to one byte.  If the group has three characters, it decodes to two bytes.
	     *
	     * @param {string} input Input to decode.
	     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
	     * @return {!Array<number>} bytes representing the decoded value.
	     */
	    decodeStringToByteArray: function (input, opt_webSafe) {
	        this.init_();
	        var charToByteMap = opt_webSafe
	            ? this.charToByteMapWebSafe_
	            : this.charToByteMap_;
	        var output = [];
	        for (var i = 0; i < input.length;) {
	            var byte1 = charToByteMap[input.charAt(i++)];
	            var haveByte2 = i < input.length;
	            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
	            ++i;
	            var haveByte3 = i < input.length;
	            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            var haveByte4 = i < input.length;
	            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
	                throw Error();
	            }
	            var outByte1 = (byte1 << 2) | (byte2 >> 4);
	            output.push(outByte1);
	            if (byte3 != 64) {
	                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
	                output.push(outByte2);
	                if (byte4 != 64) {
	                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
	                    output.push(outByte3);
	                }
	            }
	        }
	        return output;
	    },
	    /**
	     * Lazy static initialization function. Called before
	     * accessing any of the static map variables.
	     * @private
	     */
	    init_: function () {
	        if (!this.byteToCharMap_) {
	            this.byteToCharMap_ = {};
	            this.charToByteMap_ = {};
	            this.byteToCharMapWebSafe_ = {};
	            this.charToByteMapWebSafe_ = {};
	            // We want quick mappings back and forth, so we precompute two maps.
	            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
	                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
	                this.charToByteMap_[this.byteToCharMap_[i]] = i;
	                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
	                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
	                // Be forgiving when decoding and correctly decode both encodings.
	                if (i >= this.ENCODED_VALS_BASE.length) {
	                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
	                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
	                }
	            }
	        }
	    }
	};
	/**
	 * URL-safe base64 encoding
	 * @param {!string} str
	 * @return {!string}
	 */
	var base64Encode = function (str) {
	    var utf8Bytes = stringToByteArray(str);
	    return base64.encodeByteArray(utf8Bytes, true);
	};
	/**
	 * URL-safe base64 decoding
	 *
	 * NOTE: DO NOT use the global atob() function - it does NOT support the
	 * base64Url variant encoding.
	 *
	 * @param {string} str To be decoded
	 * @return {?string} Decoded result, if possible
	 */
	var base64Decode = function (str) {
	    try {
	        return base64.decodeString(str, true);
	    }
	    catch (e) {
	        console.error('base64Decode failed: ', e);
	    }
	    return null;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Do a deep-copy of basic JavaScript Objects or Arrays.
	 */
	function deepCopy(value) {
	    return deepExtend(undefined, value);
	}
	/**
	 * Copy properties from source to target (recursively allows extension
	 * of Objects and Arrays).  Scalar values in the target are over-written.
	 * If target is undefined, an object of the appropriate type will be created
	 * (and returned).
	 *
	 * We recursively copy all child properties of plain Objects in the source- so
	 * that namespace- like dictionaries are merged.
	 *
	 * Note that the target can be a function, in which case the properties in
	 * the source Object are copied onto it as static properties of the Function.
	 */
	function deepExtend(target, source) {
	    if (!(source instanceof Object)) {
	        return source;
	    }
	    switch (source.constructor) {
	        case Date:
	            // Treat Dates like scalars; if the target date object had any child
	            // properties - they will be lost!
	            var dateValue = source;
	            return new Date(dateValue.getTime());
	        case Object:
	            if (target === undefined) {
	                target = {};
	            }
	            break;
	        case Array:
	            // Always copy the array source and overwrite the target.
	            target = [];
	            break;
	        default:
	            // Not a plain Object - treat it as a scalar.
	            return source;
	    }
	    for (var prop in source) {
	        if (!source.hasOwnProperty(prop)) {
	            continue;
	        }
	        target[prop] = deepExtend(target[prop], source[prop]);
	    }
	    return target;
	}
	// TODO: Really needed (for JSCompiler type checking)?
	function patchProperty(obj, prop, value) {
	    obj[prop] = value;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Deferred = /** @class */ (function () {
	    function Deferred() {
	        var _this = this;
	        this.promise = new Promise(function (resolve, reject) {
	            _this.resolve = resolve;
	            _this.reject = reject;
	        });
	    }
	    /**
	     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
	     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
	     * and returns a node-style callback which will resolve or reject the Deferred's promise.
	     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback
	     * @return {!function(?(Error), ?=)}
	     */
	    Deferred.prototype.wrapCallback = function (callback) {
	        var _this = this;
	        return function (error, value) {
	            if (error) {
	                _this.reject(error);
	            }
	            else {
	                _this.resolve(value);
	            }
	            if (typeof callback === 'function') {
	                // Attaching noop handler just in case developer wasn't expecting
	                // promises
	                _this.promise.catch(function () { });
	                // Some of our callbacks don't expect a value and our own tests
	                // assert that the parameter length is 1
	                if (callback.length === 1) {
	                    callback(error);
	                }
	                else {
	                    callback(error, value);
	                }
	            }
	        };
	    };
	    return Deferred;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns navigator.userAgent string or '' if it's not defined.
	 * @return {string} user agent string
	 */
	var getUA = function () {
	    if (typeof navigator !== 'undefined' &&
	        typeof navigator['userAgent'] === 'string') {
	        return navigator['userAgent'];
	    }
	    else {
	        return '';
	    }
	};
	/**
	 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
	 *
	 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor
	 * Cordova `onDeviceReady`, which would normally wait for a callback.
	 *
	 * @return {boolean} isMobileCordova
	 */
	var isMobileCordova = function () {
	    return (typeof window !== 'undefined' &&
	        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
	        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
	};
	/**
	 * Detect React Native.
	 *
	 * @return {boolean} True if ReactNative environment is detected.
	 */
	var isReactNative = function () {
	    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
	};
	/**
	 * Detect Node.js.
	 *
	 * @return {boolean} True if Node.js environment is detected.
	 */
	var isNodeSdk = function () {
	    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
	};

	var ERROR_NAME = 'FirebaseError';
	var captureStackTrace = Error
	    .captureStackTrace;
	// Export for faking in tests
	function patchCapture(captureFake) {
	    var result = captureStackTrace;
	    captureStackTrace = captureFake;
	    return result;
	}
	var FirebaseError = /** @class */ (function () {
	    function FirebaseError(code, message) {
	        this.code = code;
	        this.message = message;
	        // We want the stack value, if implemented by Error
	        if (captureStackTrace) {
	            // Patches this.stack, omitted calls above ErrorFactory#create
	            captureStackTrace(this, ErrorFactory.prototype.create);
	        }
	        else {
	            try {
	                // In case of IE11, stack will be set only after error is raised.
	                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript
	                throw Error.apply(this, arguments);
	            }
	            catch (err) {
	                this.name = ERROR_NAME;
	                // Make non-enumerable getter for the property.
	                Object.defineProperty(this, 'stack', {
	                    get: function () {
	                        return err.stack;
	                    }
	                });
	            }
	        }
	    }
	    return FirebaseError;
	}());
	// Back-door inheritance
	FirebaseError.prototype = Object.create(Error.prototype);
	FirebaseError.prototype.constructor = FirebaseError;
	FirebaseError.prototype.name = ERROR_NAME;
	var ErrorFactory = /** @class */ (function () {
	    function ErrorFactory(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	        // Matches {$name}, by default.
	        this.pattern = /\{\$([^}]+)}/g;
	        // empty
	    }
	    ErrorFactory.prototype.create = function (code, data) {
	        if (data === undefined) {
	            data = {};
	        }
	        var template = this.errors[code];
	        var fullCode = this.service + '/' + code;
	        var message;
	        if (template === undefined) {
	            message = 'Error';
	        }
	        else {
	            message = template.replace(this.pattern, function (match, key) {
	                var value = data[key];
	                return value !== undefined ? value.toString() : '<' + key + '?>';
	            });
	        }
	        // Service: Error message (service/code).
	        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
	        var err = new FirebaseError(fullCode, message);
	        // Populate the Error object with message parts for programmatic
	        // accesses (e.g., e.file).
	        for (var prop in data) {
	            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
	                continue;
	            }
	            err[prop] = data[prop];
	        }
	        return err;
	    };
	    return ErrorFactory;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Evaluates a JSON string into a javascript object.
	 *
	 * @param {string} str A string containing JSON.
	 * @return {*} The javascript object representing the specified JSON.
	 */
	function jsonEval(str) {
	    return JSON.parse(str);
	}
	/**
	 * Returns JSON representing a javascript object.
	 * @param {*} data Javascript object to be stringified.
	 * @return {string} The JSON contents of the object.
	 */
	function stringify(data) {
	    return JSON.stringify(data);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Decodes a Firebase auth. token into constituent parts.
	 *
	 * Notes:
	 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 *
	 * @param {?string} token
	 * @return {{header: *, claims: *, data: *, signature: string}}
	 */
	var decode = function (token) {
	    var header = {}, claims = {}, data = {}, signature = '';
	    try {
	        var parts = token.split('.');
	        header = jsonEval(base64Decode(parts[0]) || '');
	        claims = jsonEval(base64Decode(parts[1]) || '');
	        signature = parts[2];
	        data = claims['d'] || {};
	        delete claims['d'];
	    }
	    catch (e) { }
	    return {
	        header: header,
	        claims: claims,
	        data: data,
	        signature: signature
	    };
	};
	/**
	 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
	 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 *
	 * @param {?string} token
	 * @return {boolean}
	 */
	var isValidTimestamp = function (token) {
	    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;
	    if (typeof claims === 'object') {
	        if (claims.hasOwnProperty('nbf')) {
	            validSince = claims['nbf'];
	        }
	        else if (claims.hasOwnProperty('iat')) {
	            validSince = claims['iat'];
	        }
	        if (claims.hasOwnProperty('exp')) {
	            validUntil = claims['exp'];
	        }
	        else {
	            // token will expire after 24h by default
	            validUntil = validSince + 86400;
	        }
	    }
	    return (now && validSince && validUntil && now >= validSince && now <= validUntil);
	};
	/**
	 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
	 *
	 * Notes:
	 * - May return null if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 *
	 * @param {?string} token
	 * @return {?number}
	 */
	var issuedAtTime = function (token) {
	    var claims = decode(token).claims;
	    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
	        return claims['iat'];
	    }
	    return null;
	};
	/**
	 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 *
	 * @param {?string} token
	 * @return {boolean}
	 */
	var isValidFormat = function (token) {
	    var decoded = decode(token), claims = decoded.claims;
	    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
	};
	/**
	 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 *
	 * @param {?string} token
	 * @return {boolean}
	 */
	var isAdmin = function (token) {
	    var claims = decode(token).claims;
	    return typeof claims === 'object' && claims['admin'] === true;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/
	var contains = function (obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	};
	var safeGet = function (obj, key) {
	    if (Object.prototype.hasOwnProperty.call(obj, key))
	        return obj[key];
	    // else return undefined.
	};
	/**
	 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
	 *
	 * @param {?Object.<K,V>} obj Object to enumerate.
	 * @param {!function(K, V)} fn Function to call for each key and value.
	 * @template K,V
	 */
	var forEach = function (obj, fn) {
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            fn(key, obj[key]);
	        }
	    }
	};
	/**
	 * Copies all the (own) properties from one object to another.
	 * @param {!Object} objTo
	 * @param {!Object} objFrom
	 * @return {!Object} objTo
	 */
	var extend = function (objTo, objFrom) {
	    forEach(objFrom, function (key, value) {
	        objTo[key] = value;
	    });
	    return objTo;
	};
	/**
	 * Returns a clone of the specified object.
	 * @param {!Object} obj
	 * @return {!Object} cloned obj.
	 */
	var clone = function (obj) {
	    return extend({}, obj);
	};
	/**
	 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
	 * for functions.
	 *
	 * @param obj {*} A potential object.
	 * @returns {boolean} True if it's an object.
	 */
	var isNonNullObject = function (obj) {
	    return typeof obj === 'object' && obj !== null;
	};
	var isEmpty = function (obj) {
	    for (var key in obj) {
	        return false;
	    }
	    return true;
	};
	var getCount = function (obj) {
	    var rv = 0;
	    for (var key in obj) {
	        rv++;
	    }
	    return rv;
	};
	var map = function (obj, f, opt_obj) {
	    var res = {};
	    for (var key in obj) {
	        res[key] = f.call(opt_obj, obj[key], key, obj);
	    }
	    return res;
	};
	var findKey = function (obj, fn, opt_this) {
	    for (var key in obj) {
	        if (fn.call(opt_this, obj[key], key, obj)) {
	            return key;
	        }
	    }
	    return undefined;
	};
	var findValue = function (obj, fn, opt_this) {
	    var key = findKey(obj, fn, opt_this);
	    return key && obj[key];
	};
	var getAnyKey = function (obj) {
	    for (var key in obj) {
	        return key;
	    }
	};
	var getValues = function (obj) {
	    var res = [];
	    var i = 0;
	    for (var key in obj) {
	        res[i++] = obj[key];
	    }
	    return res;
	};
	/**
	 * Tests whether every key/value pair in an object pass the test implemented
	 * by the provided function
	 *
	 * @param {?Object.<K,V>} obj Object to test.
	 * @param {!function(K, V)} fn Function to call for each key and value.
	 * @template K,V
	 */
	var every = function (obj, fn) {
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            if (!fn(key, obj[key])) {
	                return false;
	            }
	        }
	    }
	    return true;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
	 * object (e.g. {arg: 'val', arg2: 'val2'})
	 * Note: You must prepend it with ? when adding it to a URL.
	 *
	 * @param {!Object} querystringParams
	 * @return {string}
	 */
	var querystring = function (querystringParams) {
	    var params = [];
	    forEach(querystringParams, function (key, value) {
	        if (Array.isArray(value)) {
	            value.forEach(function (arrayVal) {
	                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
	            });
	        }
	        else {
	            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	        }
	    });
	    return params.length ? '&' + params.join('&') : '';
	};
	/**
	 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
	 *
	 * @param {string} querystring
	 * @return {!Object}
	 */
	var querystringDecode = function (querystring) {
	    var obj = {};
	    var tokens = querystring.replace(/^\?/, '').split('&');
	    tokens.forEach(function (token) {
	        if (token) {
	            var key = token.split('=');
	            obj[key[0]] = key[1];
	        }
	    });
	    return obj;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Copyright 2011 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	/**
	 * @fileoverview Abstract cryptographic hash interface.
	 *
	 * See Sha1 and Md5 for sample implementations.
	 *
	 */
	/**
	 * Create a cryptographic hash instance.
	 *
	 * @constructor
	 * @struct
	 */
	var Hash = /** @class */ (function () {
	    function Hash() {
	        /**
	         * The block size for the hasher.
	         * @type {number}
	         */
	        this.blockSize = -1;
	    }
	    return Hash;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview SHA-1 cryptographic hash.
	 * Variable names follow the notation in FIPS PUB 180-3:
	 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
	 *
	 * Usage:
	 *   var sha1 = new sha1();
	 *   sha1.update(bytes);
	 *   var hash = sha1.digest();
	 *
	 * Performance:
	 *   Chrome 23:   ~400 Mbit/s
	 *   Firefox 16:  ~250 Mbit/s
	 *
	 */
	/**
	 * SHA-1 cryptographic hash constructor.
	 *
	 * The properties declared here are discussed in the above algorithm document.
	 * @constructor
	 * @extends {Hash}
	 * @final
	 * @struct
	 */
	var Sha1 = /** @class */ (function (_super) {
	    tslib_1.__extends(Sha1, _super);
	    function Sha1() {
	        var _this = _super.call(this) || this;
	        /**
	         * Holds the previous values of accumulated variables a-e in the compress_
	         * function.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.chain_ = [];
	        /**
	         * A buffer holding the partially computed hash result.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.buf_ = [];
	        /**
	         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
	         * as the message schedule in the docs.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.W_ = [];
	        /**
	         * Contains data needed to pad messages less than 64 bytes.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.pad_ = [];
	        /**
	         * @private {number}
	         */
	        _this.inbuf_ = 0;
	        /**
	         * @private {number}
	         */
	        _this.total_ = 0;
	        _this.blockSize = 512 / 8;
	        _this.pad_[0] = 128;
	        for (var i = 1; i < _this.blockSize; ++i) {
	            _this.pad_[i] = 0;
	        }
	        _this.reset();
	        return _this;
	    }
	    Sha1.prototype.reset = function () {
	        this.chain_[0] = 0x67452301;
	        this.chain_[1] = 0xefcdab89;
	        this.chain_[2] = 0x98badcfe;
	        this.chain_[3] = 0x10325476;
	        this.chain_[4] = 0xc3d2e1f0;
	        this.inbuf_ = 0;
	        this.total_ = 0;
	    };
	    /**
	     * Internal compress helper function.
	     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.
	     * @param {number=} opt_offset Offset of the block in the buffer.
	     * @private
	     */
	    Sha1.prototype.compress_ = function (buf, opt_offset) {
	        if (!opt_offset) {
	            opt_offset = 0;
	        }
	        var W = this.W_;
	        // get 16 big endian words
	        if (typeof buf === 'string') {
	            for (var i = 0; i < 16; i++) {
	                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
	                // have a bug that turns the post-increment ++ operator into pre-increment
	                // during JIT compilation.  We have code that depends heavily on SHA-1 for
	                // correctness and which is affected by this bug, so I've removed all uses
	                // of post-increment ++ in which the result value is used.  We can revert
	                // this change once the Safari bug
	                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
	                // most clients have been updated.
	                W[i] =
	                    (buf.charCodeAt(opt_offset) << 24) |
	                        (buf.charCodeAt(opt_offset + 1) << 16) |
	                        (buf.charCodeAt(opt_offset + 2) << 8) |
	                        buf.charCodeAt(opt_offset + 3);
	                opt_offset += 4;
	            }
	        }
	        else {
	            for (var i = 0; i < 16; i++) {
	                W[i] =
	                    (buf[opt_offset] << 24) |
	                        (buf[opt_offset + 1] << 16) |
	                        (buf[opt_offset + 2] << 8) |
	                        buf[opt_offset + 3];
	                opt_offset += 4;
	            }
	        }
	        // expand to 80 words
	        for (var i = 16; i < 80; i++) {
	            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
	        }
	        var a = this.chain_[0];
	        var b = this.chain_[1];
	        var c = this.chain_[2];
	        var d = this.chain_[3];
	        var e = this.chain_[4];
	        var f, k;
	        // TODO(user): Try to unroll this loop to speed up the computation.
	        for (var i = 0; i < 80; i++) {
	            if (i < 40) {
	                if (i < 20) {
	                    f = d ^ (b & (c ^ d));
	                    k = 0x5a827999;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0x6ed9eba1;
	                }
	            }
	            else {
	                if (i < 60) {
	                    f = (b & c) | (d & (b | c));
	                    k = 0x8f1bbcdc;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0xca62c1d6;
	                }
	            }
	            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
	            e = d;
	            d = c;
	            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
	            b = a;
	            a = t;
	        }
	        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
	        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
	        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
	        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
	        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
	    };
	    Sha1.prototype.update = function (bytes, opt_length) {
	        // TODO(johnlenz): tighten the function signature and remove this check
	        if (bytes == null) {
	            return;
	        }
	        if (opt_length === undefined) {
	            opt_length = bytes.length;
	        }
	        var lengthMinusBlock = opt_length - this.blockSize;
	        var n = 0;
	        // Using local instead of member variables gives ~5% speedup on Firefox 16.
	        var buf = this.buf_;
	        var inbuf = this.inbuf_;
	        // The outer while loop should execute at most twice.
	        while (n < opt_length) {
	            // When we have no data in the block to top up, we can directly process the
	            // input buffer (assuming it contains sufficient data). This gives ~25%
	            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
	            // the data is provided in large chunks (or in multiples of 64 bytes).
	            if (inbuf == 0) {
	                while (n <= lengthMinusBlock) {
	                    this.compress_(bytes, n);
	                    n += this.blockSize;
	                }
	            }
	            if (typeof bytes === 'string') {
	                while (n < opt_length) {
	                    buf[inbuf] = bytes.charCodeAt(n);
	                    ++inbuf;
	                    ++n;
	                    if (inbuf == this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	            else {
	                while (n < opt_length) {
	                    buf[inbuf] = bytes[n];
	                    ++inbuf;
	                    ++n;
	                    if (inbuf == this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	        }
	        this.inbuf_ = inbuf;
	        this.total_ += opt_length;
	    };
	    /** @override */
	    Sha1.prototype.digest = function () {
	        var digest = [];
	        var totalBits = this.total_ * 8;
	        // Add pad 0x80 0x00*.
	        if (this.inbuf_ < 56) {
	            this.update(this.pad_, 56 - this.inbuf_);
	        }
	        else {
	            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
	        }
	        // Add # bits.
	        for (var i = this.blockSize - 1; i >= 56; i--) {
	            this.buf_[i] = totalBits & 255;
	            totalBits /= 256; // Don't use bit-shifting here!
	        }
	        this.compress_(this.buf_);
	        var n = 0;
	        for (var i = 0; i < 5; i++) {
	            for (var j = 24; j >= 0; j -= 8) {
	                digest[n] = (this.chain_[i] >> j) & 255;
	                ++n;
	            }
	        }
	        return digest;
	    };
	    return Sha1;
	}(Hash));

	/**
	 * Helper to make a Subscribe function (just like Promise helps make a
	 * Thenable).
	 *
	 * @param executor Function which can make calls to a single Observer
	 *     as a proxy.
	 * @param onNoObservers Callback when count of Observers goes to zero.
	 */
	function createSubscribe(executor, onNoObservers) {
	    var proxy = new ObserverProxy(executor, onNoObservers);
	    return proxy.subscribe.bind(proxy);
	}
	/**
	 * Implement fan-out for any number of Observers attached via a subscribe
	 * function.
	 */
	var ObserverProxy = /** @class */ (function () {
	    /**
	     * @param executor Function which can make calls to a single Observer
	     *     as a proxy.
	     * @param onNoObservers Callback when count of Observers goes to zero.
	     */
	    function ObserverProxy(executor, onNoObservers) {
	        var _this = this;
	        this.observers = [];
	        this.unsubscribes = [];
	        this.observerCount = 0;
	        // Micro-task scheduling by calling task.then().
	        this.task = Promise.resolve();
	        this.finalized = false;
	        this.onNoObservers = onNoObservers;
	        // Call the executor asynchronously so subscribers that are called
	        // synchronously after the creation of the subscribe function
	        // can still receive the very first value generated in the executor.
	        this.task
	            .then(function () {
	            executor(_this);
	        })
	            .catch(function (e) {
	            _this.error(e);
	        });
	    }
	    ObserverProxy.prototype.next = function (value) {
	        this.forEachObserver(function (observer) {
	            observer.next(value);
	        });
	    };
	    ObserverProxy.prototype.error = function (error) {
	        this.forEachObserver(function (observer) {
	            observer.error(error);
	        });
	        this.close(error);
	    };
	    ObserverProxy.prototype.complete = function () {
	        this.forEachObserver(function (observer) {
	            observer.complete();
	        });
	        this.close();
	    };
	    /**
	     * Subscribe function that can be used to add an Observer to the fan-out list.
	     *
	     * - We require that no event is sent to a subscriber sychronously to their
	     *   call to subscribe().
	     */
	    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
	        var _this = this;
	        var observer;
	        if (nextOrObserver === undefined &&
	            error === undefined &&
	            complete === undefined) {
	            throw new Error('Missing Observer.');
	        }
	        // Assemble an Observer object when passed as callback functions.
	        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
	            observer = nextOrObserver;
	        }
	        else {
	            observer = {
	                next: nextOrObserver,
	                error: error,
	                complete: complete
	            };
	        }
	        if (observer.next === undefined) {
	            observer.next = noop;
	        }
	        if (observer.error === undefined) {
	            observer.error = noop;
	        }
	        if (observer.complete === undefined) {
	            observer.complete = noop;
	        }
	        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
	        // Attempt to subscribe to a terminated Observable - we
	        // just respond to the Observer with the final error or complete
	        // event.
	        if (this.finalized) {
	            this.task.then(function () {
	                try {
	                    if (_this.finalError) {
	                        observer.error(_this.finalError);
	                    }
	                    else {
	                        observer.complete();
	                    }
	                }
	                catch (e) {
	                    // nothing
	                }
	                return;
	            });
	        }
	        this.observers.push(observer);
	        return unsub;
	    };
	    // Unsubscribe is synchronous - we guarantee that no events are sent to
	    // any unsubscribed Observer.
	    ObserverProxy.prototype.unsubscribeOne = function (i) {
	        if (this.observers === undefined || this.observers[i] === undefined) {
	            return;
	        }
	        delete this.observers[i];
	        this.observerCount -= 1;
	        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
	            this.onNoObservers(this);
	        }
	    };
	    ObserverProxy.prototype.forEachObserver = function (fn) {
	        if (this.finalized) {
	            // Already closed by previous event....just eat the additional values.
	            return;
	        }
	        // Since sendOne calls asynchronously - there is no chance that
	        // this.observers will become undefined.
	        for (var i = 0; i < this.observers.length; i++) {
	            this.sendOne(i, fn);
	        }
	    };
	    // Call the Observer via one of it's callback function. We are careful to
	    // confirm that the observe has not been unsubscribed since this asynchronous
	    // function had been queued.
	    ObserverProxy.prototype.sendOne = function (i, fn) {
	        var _this = this;
	        // Execute the callback asynchronously
	        this.task.then(function () {
	            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
	                try {
	                    fn(_this.observers[i]);
	                }
	                catch (e) {
	                    // Ignore exceptions raised in Observers or missing methods of an
	                    // Observer.
	                    // Log error to console. b/31404806
	                    if (typeof console !== 'undefined' && console.error) {
	                        console.error(e);
	                    }
	                }
	            }
	        });
	    };
	    ObserverProxy.prototype.close = function (err) {
	        var _this = this;
	        if (this.finalized) {
	            return;
	        }
	        this.finalized = true;
	        if (err !== undefined) {
	            this.finalError = err;
	        }
	        // Proxy is no longer needed - garbage collect references
	        this.task.then(function () {
	            _this.observers = undefined;
	            _this.onNoObservers = undefined;
	        });
	    };
	    return ObserverProxy;
	}());
	/** Turn synchronous function into one called asynchronously. */
	function async(fn, onError) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        Promise.resolve(true)
	            .then(function () {
	            fn.apply(void 0, args);
	        })
	            .catch(function (error) {
	            if (onError) {
	                onError(error);
	            }
	        });
	    };
	}
	/**
	 * Return true if the object passed in implements any of the named methods.
	 */
	function implementsAnyMethods(obj, methods) {
	    if (typeof obj !== 'object' || obj === null) {
	        return false;
	    }
	    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	        var method = methods_1[_i];
	        if (method in obj && typeof obj[method] === 'function') {
	            return true;
	        }
	    }
	    return false;
	}
	function noop() {
	    // do nothing
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Check to make sure the appropriate number of arguments are provided for a public function.
	 * Throws an error if it fails.
	 *
	 * @param {!string} fnName The function name
	 * @param {!number} minCount The minimum number of arguments to allow for the function call
	 * @param {!number} maxCount The maximum number of argument to allow for the function call
	 * @param {!number} argCount The actual number of arguments provided.
	 */
	var validateArgCount = function (fnName, minCount, maxCount, argCount) {
	    var argError;
	    if (argCount < minCount) {
	        argError = 'at least ' + minCount;
	    }
	    else if (argCount > maxCount) {
	        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
	    }
	    if (argError) {
	        var error = fnName +
	            ' failed: Was called with ' +
	            argCount +
	            (argCount === 1 ? ' argument.' : ' arguments.') +
	            ' Expects ' +
	            argError +
	            '.';
	        throw new Error(error);
	    }
	};
	/**
	 * Generates a string to prefix an error message about failed argument validation
	 *
	 * @param {!string} fnName The function name
	 * @param {!number} argumentNumber The index of the argument
	 * @param {boolean} optional Whether or not the argument is optional
	 * @return {!string} The prefix to add to the error thrown for validation.
	 */
	function errorPrefix(fnName, argumentNumber, optional) {
	    var argName = '';
	    switch (argumentNumber) {
	        case 1:
	            argName = optional ? 'first' : 'First';
	            break;
	        case 2:
	            argName = optional ? 'second' : 'Second';
	            break;
	        case 3:
	            argName = optional ? 'third' : 'Third';
	            break;
	        case 4:
	            argName = optional ? 'fourth' : 'Fourth';
	            break;
	        default:
	            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
	    }
	    var error = fnName + ' failed: ';
	    error += argName + ' argument ';
	    return error;
	}
	/**
	 * @param {!string} fnName
	 * @param {!number} argumentNumber
	 * @param {!string} namespace
	 * @param {boolean} optional
	 */
	function validateNamespace(fnName, argumentNumber, namespace, optional) {
	    if (optional && !namespace)
	        return;
	    if (typeof namespace !== 'string') {
	        //TODO: I should do more validation here. We only allow certain chars in namespaces.
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid firebase namespace.');
	    }
	}
	function validateCallback(fnName, argumentNumber, callback, optional) {
	    if (optional && !callback)
	        return;
	    if (typeof callback !== 'function')
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid function.');
	}
	function validateContextObject(fnName, argumentNumber, context, optional) {
	    if (optional && !context)
	        return;
	    if (typeof context !== 'object' || context === null)
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid context object.');
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
	// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
	// so it's been modified.
	// Note that not all Unicode characters appear as single characters in JavaScript strings.
	// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
	// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
	// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
	// pair).
	// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
	/**
	 * @param {string} str
	 * @return {Array}
	 */
	var stringToByteArray$1 = function (str) {
	    var out = [], p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        // Is this the lead surrogate in a surrogate pair?
	        if (c >= 0xd800 && c <= 0xdbff) {
	            var high = c - 0xd800; // the high 10 bits.
	            i++;
	            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
	            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
	            c = 0x10000 + (high << 10) + low;
	        }
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if (c < 65536) {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Calculate length without actually converting; useful for doing cheaper validation.
	 * @param {string} str
	 * @return {number}
	 */
	var stringLength = function (str) {
	    var p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 128) {
	            p++;
	        }
	        else if (c < 2048) {
	            p += 2;
	        }
	        else if (c >= 0xd800 && c <= 0xdbff) {
	            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
	            p += 4;
	            i++; // skip trail surrogate.
	        }
	        else {
	            p += 3;
	        }
	    }
	    return p;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	exports.assert = assert;
	exports.assertionError = assertionError;
	exports.base64 = base64;
	exports.base64Decode = base64Decode;
	exports.base64Encode = base64Encode;
	exports.CONSTANTS = CONSTANTS;
	exports.deepCopy = deepCopy;
	exports.deepExtend = deepExtend;
	exports.patchProperty = patchProperty;
	exports.Deferred = Deferred;
	exports.getUA = getUA;
	exports.isMobileCordova = isMobileCordova;
	exports.isNodeSdk = isNodeSdk;
	exports.isReactNative = isReactNative;
	exports.ErrorFactory = ErrorFactory;
	exports.FirebaseError = FirebaseError;
	exports.patchCapture = patchCapture;
	exports.jsonEval = jsonEval;
	exports.stringify = stringify;
	exports.decode = decode;
	exports.isAdmin = isAdmin;
	exports.issuedAtTime = issuedAtTime;
	exports.isValidFormat = isValidFormat;
	exports.isValidTimestamp = isValidTimestamp;
	exports.clone = clone;
	exports.contains = contains;
	exports.every = every;
	exports.extend = extend;
	exports.findKey = findKey;
	exports.findValue = findValue;
	exports.forEach = forEach;
	exports.getAnyKey = getAnyKey;
	exports.getCount = getCount;
	exports.getValues = getValues;
	exports.isEmpty = isEmpty;
	exports.isNonNullObject = isNonNullObject;
	exports.map = map;
	exports.safeGet = safeGet;
	exports.querystring = querystring;
	exports.querystringDecode = querystringDecode;
	exports.Sha1 = Sha1;
	exports.async = async;
	exports.createSubscribe = createSubscribe;
	exports.errorPrefix = errorPrefix;
	exports.validateArgCount = validateArgCount;
	exports.validateCallback = validateCallback;
	exports.validateContextObject = validateContextObject;
	exports.validateNamespace = validateNamespace;
	exports.stringLength = stringLength;
	exports.stringToByteArray = stringToByteArray$1;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global global, define, System, Reflect, Promise */
	var __extends;
	var __assign;
	var __rest;
	var __decorate;
	var __param;
	var __metadata;
	var __awaiter;
	var __generator;
	var __exportStar;
	var __values;
	var __read;
	var __spread;
	var __await;
	var __asyncGenerator;
	var __asyncDelegator;
	var __asyncValues;
	var __makeTemplateObject;
	var __importStar;
	var __importDefault;
	(function (factory) {
	    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (exports) { factory(createExporter(root, createExporter(exports))); }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    else if (typeof module === "object" && typeof module.exports === "object") {
	        factory(createExporter(root, createExporter(module.exports)));
	    }
	    else {
	        factory(createExporter(root));
	    }
	    function createExporter(exports, previous) {
	        if (exports !== root) {
	            if (typeof Object.create === "function") {
	                Object.defineProperty(exports, "__esModule", { value: true });
	            }
	            else {
	                exports.__esModule = true;
	            }
	        }
	        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
	    }
	})
	(function (exporter) {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

	    __extends = function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };

	    __assign = Object.assign || function (t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };

	    __rest = function (s, e) {
	        var t = {};
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	            t[p] = s[p];
	        if (s != null && typeof Object.getOwnPropertySymbols === "function")
	            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	                t[p[i]] = s[p[i]];
	        return t;
	    };

	    __decorate = function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };

	    __param = function (paramIndex, decorator) {
	        return function (target, key) { decorator(target, key, paramIndex); }
	    };

	    __metadata = function (metadataKey, metadataValue) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	    };

	    __awaiter = function (thisArg, _arguments, P, generator) {
	        return new (P || (P = Promise))(function (resolve, reject) {
	            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	            step((generator = generator.apply(thisArg, _arguments || [])).next());
	        });
	    };

	    __generator = function (thisArg, body) {
	        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	        function verb(n) { return function (v) { return step([n, v]); }; }
	        function step(op) {
	            if (f) throw new TypeError("Generator is already executing.");
	            while (_) try {
	                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	                if (y = 0, t) op = [0, t.value];
	                switch (op[0]) {
	                    case 0: case 1: t = op; break;
	                    case 4: _.label++; return { value: op[1], done: false };
	                    case 5: _.label++; y = op[1]; op = [0]; continue;
	                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                    default:
	                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                        if (t[2]) _.ops.pop();
	                        _.trys.pop(); continue;
	                }
	                op = body.call(thisArg, _);
	            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	        }
	    };

	    __exportStar = function (m, exports) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    };

	    __values = function (o) {
	        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
	        if (m) return m.call(o);
	        return {
	            next: function () {
	                if (o && i >= o.length) o = void 0;
	                return { value: o && o[i++], done: !o };
	            }
	        };
	    };

	    __read = function (o, n) {
	        var m = typeof Symbol === "function" && o[Symbol.iterator];
	        if (!m) return o;
	        var i = m.call(o), r, ar = [], e;
	        try {
	            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	        }
	        catch (error) { e = { error: error }; }
	        finally {
	            try {
	                if (r && !r.done && (m = i["return"])) m.call(i);
	            }
	            finally { if (e) throw e.error; }
	        }
	        return ar;
	    };

	    __spread = function () {
	        for (var ar = [], i = 0; i < arguments.length; i++)
	            ar = ar.concat(__read(arguments[i]));
	        return ar;
	    };

	    __await = function (v) {
	        return this instanceof __await ? (this.v = v, this) : new __await(v);
	    };

	    __asyncGenerator = function (thisArg, _arguments, generator) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var g = generator.apply(thisArg, _arguments || []), i, q = [];
	        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
	        function fulfill(value) { resume("next", value); }
	        function reject(value) { resume("throw", value); }
	        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	    };

	    __asyncDelegator = function (o) {
	        var i, p;
	        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	        function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
	    };

	    __asyncValues = function (o) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var m = o[Symbol.asyncIterator];
	        return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
	    };

	    __makeTemplateObject = function (cooked, raw) {
	        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	        return cooked;
	    };

	    __importStar = function (mod) {
	        if (mod && mod.__esModule) return mod;
	        var result = {};
	        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	        result["default"] = mod;
	        return result;
	    };

	    __importDefault = function (mod) {
	        return (mod && mod.__esModule) ? mod : { "default": mod };
	    };

	    exporter("__extends", __extends);
	    exporter("__assign", __assign);
	    exporter("__rest", __rest);
	    exporter("__decorate", __decorate);
	    exporter("__param", __param);
	    exporter("__metadata", __metadata);
	    exporter("__awaiter", __awaiter);
	    exporter("__generator", __generator);
	    exporter("__exportStar", __exportStar);
	    exporter("__values", __values);
	    exporter("__read", __read);
	    exporter("__spread", __spread);
	    exporter("__await", __await);
	    exporter("__asyncGenerator", __asyncGenerator);
	    exporter("__asyncDelegator", __asyncDelegator);
	    exporter("__asyncValues", __asyncValues);
	    exporter("__makeTemplateObject", __makeTemplateObject);
	    exporter("__importStar", __importStar);
	    exporter("__importDefault", __importDefault);
	});

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function() {var firebase = __webpack_require__(22).default;var g,aa=aa||{},k=this;function l(a){return"string"==typeof a}function ba(a){return"boolean"==typeof a}function ca(){}
	function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return null===a}function fa(a){return"array"==da(a)}function ha(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function n(a){return"function"==da(a)}function q(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var ia="closure_uid_"+(1E9*Math.random()>>>0),ja=0;function ka(a,b,c){return a.call.apply(a.bind,arguments)}
	function ma(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?r=ka:r=ma;return r.apply(null,arguments)}
	function na(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var oa=Date.now||function(){return+new Date};function t(a,b){function c(){}c.prototype=b.prototype;a.nb=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.dd=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function pa(a){a.prototype.then=a.prototype.then;a.prototype.$goog_Thenable=!0}function qa(a){if(!a)return!1;try{return!!a.$goog_Thenable}catch(b){return!1}};function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}t(u,Error);u.prototype.name="CustomError";function ra(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d])}t(ra,u);ra.prototype.name="AssertionError";function sa(a,b){throw new ra("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};function ta(a,b){this.c=a;this.f=b;this.b=0;this.a=null}ta.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function ua(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b)};function va(){this.b=this.a=null}var xa=new ta(function(){return new wa},function(a){a.reset()});va.prototype.add=function(a,b){var c=xa.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function ya(){var a=za,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function wa(){this.next=this.b=this.a=null}wa.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};wa.prototype.reset=function(){this.next=this.b=this.a=null};var Aa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},v=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=l(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};
	function Ba(a,b){var c=a.length,d=l(a)?a.split(""):a;for(--c;0<=c;--c)c in d&&b.call(void 0,d[c],c,a)}
	var Ca=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e=l(a)?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Da=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=l(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return!0;return!1};
	function Ea(a){a:{var b=Fa;for(var c=a.length,d=l(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function Ga(a,b){return 0<=Aa(a,b)}function Ha(a,b){b=Aa(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function w(a,b){var c=0;Ba(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++})}function Ia(a){return Array.prototype.concat.apply([],arguments)}
	function Ja(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};function Ka(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}var La=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};
	function Ma(a){if(!Na.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(Oa,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(Pa,"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(Qa,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(Ra,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(Sa,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(Ta,"&#0;"));return a}var Oa=/&/g,Pa=/</g,Qa=/>/g,Ra=/"/g,Sa=/'/g,Ta=/\x00/g,Na=/[\x00&<>"']/;function y(a,b){return-1!=a.indexOf(b)}function Ua(a,b){return a<b?-1:a>b?1:0};var Va;a:{var Wa=k.navigator;if(Wa){var Xa=Wa.userAgent;if(Xa){Va=Xa;break a}}Va=""}function z(a){return y(Va,a)};function Ya(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function Za(a){for(var b in a)return!1;return!0}function $a(a){var b={},c;for(c in a)b[c]=a[c];return b}var ab="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function bb(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ab.length;f++)c=ab[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function cb(a){k.setTimeout(function(){throw a;},0)}var eb;
	function fb(){var a=k.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!z("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+"//"+b.location.host;a=r(function(a){if(("*"==d||a.origin==d)&&a.data==
	c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!z("Trident")&&!z("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.vb;c.vb=null;a()}};return function(a){d.next={vb:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");
	b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};function gb(a,b){hb||ib();jb||(hb(),jb=!0);za.add(a,b)}var hb;function ib(){if(k.Promise&&k.Promise.resolve){var a=k.Promise.resolve(void 0);hb=function(){a.then(kb)}}else hb=function(){var a=kb;!n(k.setImmediate)||k.Window&&k.Window.prototype&&!z("Edge")&&k.Window.prototype.setImmediate==k.setImmediate?(eb||(eb=fb()),eb(a)):k.setImmediate(a)}}var jb=!1,za=new va;function kb(){for(var a;a=ya();){try{a.a.call(a.b)}catch(b){cb(b)}ua(xa,a)}jb=!1};function A(a,b){this.a=lb;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=ca)try{var c=this;a.call(b,function(a){mb(c,nb,a)},function(a){if(!(a instanceof ob))try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}mb(c,pb,a)})}catch(d){mb(this,pb,d)}}var lb=0,nb=2,pb=3;function qb(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1}qb.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1};var rb=new ta(function(){return new qb},function(a){a.reset()});
	function sb(a,b,c){var d=rb.get();d.g=a;d.b=b;d.f=c;return d}function B(a){if(a instanceof A)return a;var b=new A(ca);mb(b,nb,a);return b}function C(a){return new A(function(b,c){c(a)})}function tb(a,b,c){ub(a,b,c,null)||gb(na(b,a))}function vb(a){return new A(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c){d--;e[a]=c;0==d&&b(e)},h=function(a){c(a)},m=0,p;m<a.length;m++)p=a[m],tb(p,na(f,m),h);else b(e)})}
	function wb(a){return new A(function(b){var c=a.length,d=[];if(c)for(var e=function(a,e,f){c--;d[a]=e?{Cb:!0,value:f}:{Cb:!1,reason:f};0==c&&b(d)},f=0,h;f<a.length;f++)h=a[f],tb(h,na(e,f,!0),na(e,f,!1));else b(d)})}A.prototype.then=function(a,b,c){return xb(this,n(a)?a:null,n(b)?b:null,c)};pa(A);g=A.prototype;g.ia=function(a,b){a=sb(a,a,b);a.c=!0;yb(this,a);return this};g.s=function(a,b){return xb(this,null,a,b)};g.cancel=function(a){this.a==lb&&gb(function(){var b=new ob(a);zb(this,b)},this)};
	function zb(a,b){if(a.a==lb)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,h=c.b;h&&(h.c||(d++,h.a==a&&(e=h),!(e&&1<d)));h=h.next)e||(f=h);e&&(c.a==lb&&1==d?zb(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Ab(c),Bb(c,e,pb,b)))}a.c=null}else mb(a,pb,b)}function yb(a,b){a.b||a.a!=nb&&a.a!=pb||Cb(a);a.f?a.f.next=b:a.b=b;a.f=b}
	function xb(a,b,c,d){var e=sb(null,null,null);e.a=new A(function(a,h){e.g=b?function(c){try{var e=b.call(d,c);a(e)}catch(x){h(x)}}:a;e.b=c?function(b){try{var e=c.call(d,b);void 0===e&&b instanceof ob?h(b):a(e)}catch(x){h(x)}}:h});e.a.c=a;yb(a,e);return e.a}g.Mc=function(a){this.a=lb;mb(this,nb,a)};g.Nc=function(a){this.a=lb;mb(this,pb,a)};
	function mb(a,b,c){a.a==lb&&(a===c&&(b=pb,c=new TypeError("Promise cannot resolve to itself")),a.a=1,ub(c,a.Mc,a.Nc,a)||(a.i=c,a.a=b,a.c=null,Cb(a),b!=pb||c instanceof ob||Db(a,c)))}function ub(a,b,c,d){if(a instanceof A)return yb(a,sb(b||ca,c||null,d)),!0;if(qa(a))return a.then(b,c,d),!0;if(q(a))try{var e=a.then;if(n(e))return Eb(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return!1}
	function Eb(a,b,c,d,e){function f(a){m||(m=!0,d.call(e,a))}function h(a){m||(m=!0,c.call(e,a))}var m=!1;try{b.call(a,h,f)}catch(p){f(p)}}function Cb(a){a.h||(a.h=!0,gb(a.Xb,a))}function Ab(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}g.Xb=function(){for(var a;a=Ab(this);)Bb(this,a,this.a,this.i);this.h=!1};
	function Bb(a,b,c,d){if(c==pb&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Fb(b,c,d);else try{b.c?b.g.call(b.f):Fb(b,c,d)}catch(e){Gb.call(null,e)}ua(rb,b)}function Fb(a,b,c){b==nb?a.g.call(a.f,c):a.b&&a.b.call(a.f,c)}function Db(a,b){a.g=!0;gb(function(){a.g&&Gb.call(null,b)})}var Gb=cb;function ob(a){u.call(this,a)}t(ob,u);ob.prototype.name="cancel";function Hb(){0!=Ib&&(Jb[this[ia]||(this[ia]=++ja)]=this);this.pa=this.pa;this.ja=this.ja}var Ib=0,Jb={};Hb.prototype.pa=!1;function Kb(a){if(!a.pa&&(a.pa=!0,a.ua(),0!=Ib)){var b=a[ia]||(a[ia]=++ja);if(0!=Ib&&a.ja&&0<a.ja.length)throw Error(a+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Jb[b]}}Hb.prototype.ua=function(){if(this.ja)for(;this.ja.length;)this.ja.shift()()};function Lb(a){Lb[" "](a);return a}Lb[" "]=ca;function Mb(a,b){var c=Nb;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ob=z("Opera"),Pb=z("Trident")||z("MSIE"),Qb=z("Edge"),Rb=Qb||Pb,Sb=z("Gecko")&&!(y(Va.toLowerCase(),"webkit")&&!z("Edge"))&&!(z("Trident")||z("MSIE"))&&!z("Edge"),Tb=y(Va.toLowerCase(),"webkit")&&!z("Edge");function Ub(){var a=k.document;return a?a.documentMode:void 0}var Vb;
	a:{var Wb="",Xb=function(){var a=Va;if(Sb)return/rv:([^\);]+)(\)|;)/.exec(a);if(Qb)return/Edge\/([\d\.]+)/.exec(a);if(Pb)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Tb)return/WebKit\/(\S+)/.exec(a);if(Ob)return/(?:Version)[ \/]?(\S+)/.exec(a)}();Xb&&(Wb=Xb?Xb[1]:"");if(Pb){var Yb=Ub();if(null!=Yb&&Yb>parseFloat(Wb)){Vb=String(Yb);break a}}Vb=Wb}var Nb={};
	function Zb(a){return Mb(a,function(){for(var b=0,c=La(String(Vb)).split("."),d=La(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||"",m=d[f]||"";do{h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];m=/(\d*)(\D*)(.*)/.exec(m)||["","","",""];if(0==h[0].length&&0==m[0].length)break;b=Ua(0==h[1].length?0:parseInt(h[1],10),0==m[1].length?0:parseInt(m[1],10))||Ua(0==h[2].length,0==m[2].length)||Ua(h[2],m[2]);h=h[3];m=m[3]}while(0==b)}return 0<=b})}var $b;var ac=k.document;
	$b=ac&&Pb?Ub()||("CSS1Compat"==ac.compatMode?parseInt(Vb,10):5):void 0;var bc=Object.freeze||function(a){return a};var cc=!Pb||9<=Number($b),dc=Pb&&!Zb("9"),ec=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});k.addEventListener("test",ca,b);k.removeEventListener("test",ca,b);return a}();function D(a,b){this.type=a;this.b=this.target=b;this.Jb=!0}D.prototype.preventDefault=function(){this.Jb=!1};function fc(a,b){D.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Sb){a:{try{Lb(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=
	a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
	a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=l(a.pointerType)?a.pointerType:gc[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault()}}t(fc,D);var gc=bc({2:"touch",3:"pen",4:"mouse"});fc.prototype.preventDefault=function(){fc.nb.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,dc)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};fc.prototype.f=function(){return this.a};var hc="closure_listenable_"+(1E6*Math.random()|0),ic=0;function jc(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.La=e;this.key=++ic;this.na=this.Ia=!1}function kc(a){a.na=!0;a.listener=null;a.proxy=null;a.src=null;a.La=null};function lc(a){this.src=a;this.a={};this.b=0}lc.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=mc(a,b,d,e);-1<h?(b=a[h],c||(b.Ia=!1)):(b=new jc(b,this.src,f,!!d,e),b.Ia=c,a.push(b));return b};function nc(a,b){var c=b.type;c in a.a&&Ha(a.a[c],b)&&(kc(b),0==a.a[c].length&&(delete a.a[c],a.b--))}function mc(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.na&&f.listener==b&&f.capture==!!c&&f.La==d)return e}return-1};var oc="closure_lm_"+(1E6*Math.random()|0),pc={},qc=0;function rc(a,b,c,d,e){if(d&&d.once)sc(a,b,c,d,e);else if(fa(b))for(var f=0;f<b.length;f++)rc(a,b[f],c,d,e);else c=tc(c),a&&a[hc]?uc(a,b,c,q(d)?!!d.capture:!!d,e):vc(a,b,c,!1,d,e)}
	function vc(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=q(e)?!!e.capture:!!e,m=wc(a);m||(a[oc]=m=new lc(a));c=m.add(b,c,d,h,f);if(!c.proxy){d=xc();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)ec||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(yc(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");qc++}}
	function xc(){var a=zc,b=cc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function sc(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)sc(a,b[f],c,d,e);else c=tc(c),a&&a[hc]?Ac(a,b,c,q(d)?!!d.capture:!!d,e):vc(a,b,c,!0,d,e)}
	function E(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)E(a,b[f],c,d,e);else(d=q(d)?!!d.capture:!!d,c=tc(c),a&&a[hc])?(a=a.l,b=String(b).toString(),b in a.a&&(f=a.a[b],c=mc(f,c,d,e),-1<c&&(kc(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=wc(a))&&(b=a.a[b.toString()],a=-1,b&&(a=mc(b,c,d,e)),(c=-1<a?b[a]:null)&&Bc(c))}
	function Bc(a){if("number"!=typeof a&&a&&!a.na){var b=a.src;if(b&&b[hc])nc(b.l,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(yc(c),d):b.addListener&&b.removeListener&&b.removeListener(d);qc--;(c=wc(b))?(nc(c,a),0==c.b&&(c.src=null,b[oc]=null)):kc(a)}}}function yc(a){return a in pc?pc[a]:pc[a]="on"+a}
	function Cc(a,b,c,d){var e=!0;if(a=wc(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.na&&(f=Dc(f,d),e=e&&!1!==f)}return e}function Dc(a,b){var c=a.listener,d=a.La||a.src;a.Ia&&Bc(a);return c.call(d,b)}
	function zc(a,b){if(a.na)return!0;if(!cc){if(!b)a:{b=["window","event"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new fc(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=Cc(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.b=d[e],f=Cc(d[e],a,!1,b),c=c&&f}return c}return Dc(a,
	new fc(b,this))}function wc(a){a=a[oc];return a instanceof lc?a:null}var Ec="__closure_events_fn_"+(1E9*Math.random()>>>0);function tc(a){if(n(a))return a;a[Ec]||(a[Ec]=function(b){return a.handleEvent(b)});return a[Ec]};function F(){Hb.call(this);this.l=new lc(this);this.Qb=this;this.Ua=null}t(F,Hb);F.prototype[hc]=!0;F.prototype.addEventListener=function(a,b,c,d){rc(this,a,b,c,d)};F.prototype.removeEventListener=function(a,b,c,d){E(this,a,b,c,d)};
	F.prototype.dispatchEvent=function(a){var b,c=this.Ua;if(c)for(b=[];c;c=c.Ua)b.push(c);c=this.Qb;var d=a.type||a;if(l(a))a=new D(a,c);else if(a instanceof D)a.target=a.target||c;else{var e=a;a=new D(d,c);bb(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.b=b[f];e=Fc(h,d,!0,a)&&e}h=a.b=c;e=Fc(h,d,!0,a)&&e;e=Fc(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.b=b[f],e=Fc(h,d,!1,a)&&e;return e};
	F.prototype.ua=function(){F.nb.ua.call(this);if(this.l){var a=this.l,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,kc(d[e]);delete a.a[c];a.b--}}this.Ua=null};function uc(a,b,c,d,e){a.l.add(String(b),c,!1,d,e)}function Ac(a,b,c,d,e){a.l.add(String(b),c,!0,d,e)}
	function Fc(a,b,c,d){b=a.l.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.na&&h.capture==c){var m=h.listener,p=h.La||h.src;h.Ia&&nc(a.l,h);e=!1!==m.call(p,d)&&e}}return e&&0!=d.Jb};function Gc(a,b,c){if(n(a))c&&(a=r(a,c));else if(a&&"function"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)}function Hc(a){var b=null;return(new A(function(c,d){b=Gc(function(){c(void 0)},a);-1==b&&d(Error("Failed to schedule timer."))})).s(function(a){k.clearTimeout(b);throw a;})};function Ic(a){if(a.S&&"function"==typeof a.S)return a.S();if(l(a))return a.split("");if(ha(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Jc(a){if(a.U&&"function"==typeof a.U)return a.U();if(!a.S||"function"!=typeof a.S){if(ha(a)||l(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
	function Kc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ha(a)||l(a))v(a,b,void 0);else for(var c=Jc(a),d=Ic(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)};function Lc(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a)if(a instanceof Lc)for(c=a.U(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d])}g=Lc.prototype;g.S=function(){Mc(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.U=function(){Mc(this);return this.a.concat()};
	g.clear=function(){this.b={};this.c=this.a.length=0};function Mc(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Nc(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Nc(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return Nc(this.b,a)?this.b[a]:b};g.set=function(a,b){Nc(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};
	g.forEach=function(a,b){for(var c=this.U(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function Nc(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var Oc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Pc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"")}}};function Qc(a,b){this.b=this.l=this.c="";this.i=null;this.h=this.g="";this.f=!1;if(a instanceof Qc){this.f=void 0!==b?b:a.f;Rc(this,a.c);this.l=a.l;this.b=a.b;Sc(this,a.i);this.g=a.g;b=a.a;var c=new Tc;c.c=b.c;b.a&&(c.a=new Lc(b.a),c.b=b.b);Uc(this,c);this.h=a.h}else a&&(c=String(a).match(Oc))?(this.f=!!b,Rc(this,c[1]||"",!0),this.l=Vc(c[2]||""),this.b=Vc(c[3]||"",!0),Sc(this,c[4]),this.g=Vc(c[5]||"",!0),Uc(this,c[6]||"",!0),this.h=Vc(c[7]||"")):(this.f=!!b,this.a=new Tc(null,this.f))}
	Qc.prototype.toString=function(){var a=[],b=this.c;b&&a.push(Wc(b,Xc,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Wc(b,Xc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.i,null!=c&&a.push(":",String(c));if(c=this.g)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Wc(c,"/"==c.charAt(0)?Yc:Zc,!0));(c=this.a.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Wc(c,$c));return a.join("")};
	function Rc(a,b,c){a.c=c?Vc(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""))}function Sc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.i=b}else a.i=null}function Uc(a,b,c){b instanceof Tc?(a.a=b,ad(a.a,a.f)):(c||(b=Wc(b,bd)),a.a=new Tc(b,a.f))}function G(a,b,c){a.a.set(b,c)}function cd(a,b){return a.a.get(b)}function dd(a){return a instanceof Qc?new Qc(a):new Qc(a,void 0)}function ed(a,b){var c=new Qc(null,void 0);Rc(c,"https");a&&(c.b=a);b&&(c.g=b);return c}
	function Vc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Wc(a,b,c){return l(a)?(a=encodeURI(a).replace(b,fd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function fd(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var Xc=/[#\/\?@]/g,Zc=/[#\?:]/g,Yc=/[#\?]/g,bd=/[#\?@]/g,$c=/#/g;function Tc(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}
	function gd(a){a.a||(a.a=new Lc,a.b=0,a.c&&Pc(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c)}))}function hd(a){var b=Jc(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Tc(null,void 0);a=Ic(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];fa(f)?id(c,e,f):c.add(e,f)}return c}g=Tc.prototype;g.add=function(a,b){gd(this);this.c=null;a=jd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};
	function kd(a,b){gd(a);b=jd(a,b);Nc(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Nc(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Mc(a)))}g.clear=function(){this.a=this.c=null;this.b=0};function ld(a,b){gd(a);b=jd(a,b);return Nc(a.a.b,b)}g.forEach=function(a,b){gd(this);this.a.forEach(function(c,d){v(c,function(c){a.call(b,c,d,this)},this)},this)};g.U=function(){gd(this);for(var a=this.a.S(),b=this.a.U(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
	g.S=function(a){gd(this);var b=[];if(l(a))ld(this,a)&&(b=Ia(b,this.a.get(jd(this,a))));else{a=this.a.S();for(var c=0;c<a.length;c++)b=Ia(b,a[c])}return b};g.set=function(a,b){gd(this);this.c=null;a=jd(this,a);ld(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.S(a):[];return 0<a.length?String(a[0]):b};function id(a,b,c){kd(a,b);0<c.length&&(a.c=null,a.a.set(jd(a,b),Ja(c)),a.b+=c.length)}
	g.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var a=[],b=this.a.U(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.S(d);for(var f=0;f<d.length;f++){var h=e;""!==d[f]&&(h+="="+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join("&")};function jd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function ad(a,b){b&&!a.f&&(gd(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(kd(this,b),id(this,c,a))},a));a.f=b};var md=!Pb||9<=Number($b);function nd(){this.a="";this.b=od}nd.prototype.ma=!0;nd.prototype.la=function(){return this.a};nd.prototype.toString=function(){return"Const{"+this.a+"}"};function pd(a){if(a instanceof nd&&a.constructor===nd&&a.b===od)return a.a;sa("expected object of type Const, got '"+a+"'");return"type_error:Const"}var od={};function qd(a){var b=new nd;b.a=a;return b}qd("");function rd(){this.a="";this.b=sd}rd.prototype.ma=!0;rd.prototype.la=function(){return this.a};rd.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};function td(a){if(a instanceof rd&&a.constructor===rd&&a.b===sd)return a.a;sa("expected object of type TrustedResourceUrl, got '"+a+"' of type "+da(a));return"type_error:TrustedResourceUrl"}
	function ud(a,b){var c=pd(a);if(!vd.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(wd,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof nd?pd(a):encodeURIComponent(String(a))});return xd(a)}var wd=/%{(\w+)}/g,vd=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,sd={};
	function xd(a){var b=new rd;b.a=a;return b};function yd(){this.a="";this.b=zd}yd.prototype.ma=!0;yd.prototype.la=function(){return this.a};yd.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};function Ad(a){if(a instanceof yd&&a.constructor===yd&&a.b===zd)return a.a;sa("expected object of type SafeUrl, got '"+a+"' of type "+da(a));return"type_error:SafeUrl"}var Bd=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
	function Cd(a){if(a instanceof yd)return a;a=a.ma?a.la():String(a);Bd.test(a)||(a="about:invalid#zClosurez");return Dd(a)}var zd={};function Dd(a){var b=new yd;b.a=a;return b}Dd("about:blank");function Ed(){this.a="";this.b=Fd}Ed.prototype.ma=!0;Ed.prototype.la=function(){return this.a};Ed.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};function Gd(a){if(a instanceof Ed&&a.constructor===Ed&&a.b===Fd)return a.a;sa("expected object of type SafeHtml, got '"+a+"' of type "+da(a));return"type_error:SafeHtml"}var Fd={};function Hd(a){var b=new Ed;b.a=a;return b}Hd("<!DOCTYPE html>");Hd("");Hd("<br>");function Id(a){var b=document;return l(a)?b.getElementById(a):a}function Jd(a,b){Ya(b,function(b,d){b&&b.ma&&(b=b.la());"style"==d?a.style.cssText=b:"class"==d?a.className=b:"for"==d?a.htmlFor=b:Kd.hasOwnProperty(d)?a.setAttribute(Kd[d],b):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,b):a[d]=b})}
	var Kd={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
	function Ld(a,b,c){var d=arguments,e=document,f=String(d[0]),h=d[1];if(!md&&h&&(h.name||h.type)){f=["<",f];h.name&&f.push(' name="',Ma(h.name),'"');if(h.type){f.push(' type="',Ma(h.type),'"');var m={};bb(m,h);delete m.type;h=m}f.push(">");f=f.join("")}f=e.createElement(f);h&&(l(h)?f.className=h:fa(h)?f.className=h.join(" "):Jd(f,h));2<d.length&&Md(e,f,d);return f}
	function Md(a,b,c){function d(c){c&&b.appendChild(l(c)?a.createTextNode(c):c)}for(var e=2;e<c.length;e++){var f=c[e];!ha(f)||q(f)&&0<f.nodeType?d(f):v(Nd(f)?Ja(f):f,d)}}function Nd(a){if(a&&"number"==typeof a.length){if(q(a))return"function"==typeof a.item||"string"==typeof a.item;if(n(a))return"function"==typeof a.item}return!1};function Od(a){var b=[];Pd(new Qd,a,b);return b.join("")}function Qd(){}
	function Pd(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(fa(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),Pd(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),Rd(d,c),c.push(":"),Pd(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":Rd(b,c);break;case "number":c.push(isFinite(b)&&
	!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var Sd={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Td=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
	function Rd(a,b){b.push('"',a.replace(Td,function(a){var b=Sd[a];b||(b="\\u"+(a.charCodeAt(0)|65536).toString(16).substr(1),Sd[a]=b);return b}),'"')};function Ud(){var a=H();return Pb&&!!$b&&11==$b||/Edge\/\d+/.test(a)}function Vd(){return k.window&&k.window.location.href||self&&self.location&&self.location.href||""}function Wd(a,b){b=b||k.window;var c="about:blank";a&&(c=Ad(Cd(a)));b.location.href=c}function Xd(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<Xd(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
	function Yd(){var a=H();a=Zd(a)!=$d?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Pb||!$b||9<$b}function ae(a){a=(a||H()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function be(a){a=a||k.window;try{a.close()}catch(b){}}
	function ce(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=H().toLowerCase();d&&(b.target=d,y(c,"crios/")&&(b.target="_blank"));Zd(H())==de&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof yd?c:Cd("undefined"!=typeof c.href?c.href:String(c));c=a.target||c.target;e=[];
	for(h in a)switch(h){case "width":case "height":case "top":case "left":e.push(h+"="+a[h]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(h+"="+(a[h]?1:0))}var h=e.join(",");(z("iPhone")&&!z("iPod")&&!z("iPad")||z("iPad")||z("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c?(h=d.document.createElement("A"),b instanceof yd||b instanceof yd||(b=b.ma?b.la():String(b),Bd.test(b)||(b="about:invalid#zClosurez"),b=Dd(b)),h.href=Ad(b),h.setAttribute("target",c),a.noreferrer&&
	h.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),a.initMouseEvent("click",!0,!0,d,1),h.dispatchEvent(a),h={}):a.noreferrer?(h=d.open("",c,h),a=Ad(b),h&&(Rb&&y(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),h.opener=null,qd("b/12014412, meta tag with sanitized URL"),a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ma(a)+'">',a=Hd(a),h.document.write(Gd(a)),h.document.close())):(h=d.open(Ad(b),c,h))&&a.noopener&&(h.opener=null);if(h)try{h.focus()}catch(m){}return h}
	function ee(a){return new A(function(b){function c(){Hc(2E3).then(function(){if(!a||a.closed)b();else return c()})}return c()})}var fe=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function ge(){var a=null;return(new A(function(b){"complete"==k.document.readyState?b():(a=function(){b()},sc(window,"load",a))})).s(function(b){E(window,"load",a);throw b;})}
	function he(){return ie(void 0)?ge().then(function(){return new A(function(a,b){var c=k.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."))},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a()},!1)})}):C(Error("Cordova must run in an Android or iOS file scheme."))}function ie(a){a=a||H();return!("file:"!==je()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function ke(){var a=k.window;try{return!(!a||a==a.top)}catch(b){return!1}}
	function le(){return"object"!==typeof k.window&&"function"===typeof k.importScripts}function me(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":le()?"Worker":"Browser"}function ne(){var a=me();return"ReactNative"===a||"Node"===a}function oe(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}var de="Firefox",$d="Chrome";
	function Zd(a){var b=a.toLowerCase();if(y(b,"opera/")||y(b,"opr/")||y(b,"opios/"))return"Opera";if(y(b,"iemobile"))return"IEMobile";if(y(b,"msie")||y(b,"trident/"))return"IE";if(y(b,"edge/"))return"Edge";if(y(b,"firefox/"))return de;if(y(b,"silk/"))return"Silk";if(y(b,"blackberry"))return"Blackberry";if(y(b,"webos"))return"Webos";if(!y(b,"safari/")||y(b,"chrome/")||y(b,"crios/")||y(b,"android"))if(!y(b,"chrome/")&&!y(b,"crios/")||y(b,"edge/")){if(y(b,"android"))return"Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
	2==a.length)return a[1]}else return $d;else return"Safari";return"Other"}var pe={Tc:"FirebaseCore-web",Vc:"FirebaseUI-web"};function qe(a,b){b=b||[];var c=[],d={},e;for(e in pe)d[pe[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=me();"Browser"===c?(d=H(),c=Zd(d)):"Worker"===c&&(d=H(),c=Zd(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function H(){return k.navigator&&k.navigator.userAgent||""}
	function I(a,b){a=a.split(".");b=b||k;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function re(){try{var a=k.localStorage,b=se();if(a)return a.setItem(b,"1"),a.removeItem(b),Ud()?!!k.indexedDB:!0}catch(c){return le()&&!!k.indexedDB}return!1}function te(){return(ue()||"chrome-extension:"===je()||ie())&&!ne()&&re()&&!le()}function ue(){return"http:"===je()||"https:"===je()}function je(){return k.location&&k.location.protocol||null}
	function ve(a){a=a||H();return ae(a)||Zd(a)==de?!1:!0}function we(a){return"undefined"===typeof a?null:Od(a)}function xe(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function ye(a){if(null!==a)return JSON.parse(a)}function se(a){return a?a:Math.floor(1E9*Math.random()).toString()}function ze(a){a=a||H();return"Safari"==Zd(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
	function Ae(){var a=k.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null}function Be(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=H();b=me();this.b=ae(a)||"ReactNative"===b}
	Be.prototype.get=function(){var a=k.navigator;return(a&&"boolean"===typeof a.onLine&&(ue()||"chrome-extension:"===je()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function Ce(){var a=k.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
	function De(){var a=k.document,b=null;return Ce()||!a?B():(new A(function(c){b=function(){Ce()&&(a.removeEventListener("visibilitychange",b,!1),c())};a.addEventListener("visibilitychange",b,!1)})).s(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function Ee(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function Fe(){return!(!I("fireauth.oauthhelper",k)&&!I("fireauth.iframe",k))}
	function Ge(){var a=k.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function He(){var a=k.navigator;return a&&a.serviceWorker?B().then(function(){return a.serviceWorker.ready}).then(function(a){return a.active||null}).s(function(){return null}):B(null)};var Ie={};function Je(a){Ie[a]||(Ie[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a))};var Ke;try{var Le={};Object.defineProperty(Le,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(Le,"abcd",{configurable:!0,enumerable:!0,value:2});Ke=2==Le.abcd}catch(a){Ke=!1}function J(a,b,c){Ke?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c}function K(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&J(a,c,b[c])}function Me(a){var b={};K(b,a);return b}function Ne(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
	function Oe(a,b){if(!b||!b.length)return!0;if(!a)return!1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return!1}return!0}function Pe(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)J(b,c,Pe(a[c]))}return b};function Qe(a){var b={},c=a[Re],d=a[Se];a=a[Te];if(!a||a!=Ue&&!c)throw Error("Invalid provider user info!");b[Ve]=d||null;b[We]=c||null;J(this,Xe,a);J(this,Ye,Pe(b))}var Ue="EMAIL_SIGNIN",Re="email",Se="newEmail",Te="requestType",We="email",Ve="fromEmail",Ye="data",Xe="operation";function L(a,b){this.code=Ze+a;this.message=b||$e[a]||""}t(L,Error);L.prototype.D=function(){return{code:this.code,message:this.message}};L.prototype.toJSON=function(){return this.D()};function af(a){var b=a&&a.code;return b?new L(b.substring(Ze.length),a.message):null}
	var Ze="auth/",$e={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
	"code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
	"dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
	"invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
	"invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.",
	"invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
	"invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
	"wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.",
	"invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
	"missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.",
	"missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.",
	"no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
	"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
	"rejected-credential":"The request contains malformed or mismatching credentials.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.",
	"user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function bf(a){var b=a[cf];if("undefined"===typeof b)throw new L("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new L("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[df];if(c&&"object"===typeof c){b=c[ef];var d=c[ff];c=c[gf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new L("argument-error",ff+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
	typeof c||"string"===typeof c&&!c.length))throw new L("argument-error",gf+" property must be a non empty string when specified.");this.b=c||null}else{if("undefined"!==typeof b)throw new L("argument-error",ef+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new L("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new L("argument-error",df+" property must be a non null object when specified.");this.f=null;if((b=a[hf])&&"object"===
	typeof b)if(b=b[jf],"string"===typeof b&&b.length)this.f=b;else{if("undefined"!==typeof b)throw new L("argument-error",jf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new L("argument-error",hf+" property must be a non null object when specified.");b=a[kf];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new L("argument-error",kf+" property must be a boolean when specified.");this.c=!!b;a=a[lf];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
	typeof a&&!a.length))throw new L("argument-error",lf+" property must be a non empty string when specified.");this.i=a||null}var df="android",lf="dynamicLinkDomain",kf="handleCodeInApp",hf="iOS",cf="url",ff="installApp",gf="minimumVersion",ef="packageName",jf="bundleId";
	function mf(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b};function nf(a){return Ca(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join("")};var of=null,pf=null;function qf(a){var b="";rf(a,function(a){b+=String.fromCharCode(a)});return b}function rf(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=pf[c];if(null!=e)return e;if(!/^[\s\xa0]*$/.test(c))throw Error("Unknown base64 encoding at char: "+c);}return b}sf();for(var d=0;;){var e=c(-1),f=c(0),h=c(64),m=c(64);if(64===m&&-1===e)break;b(e<<2|f>>4);64!=h&&(b(f<<4&240|h>>2),64!=m&&b(h<<6&192|m))}}
	function sf(){if(!of){of={};pf={};for(var a=0;65>a;a++)of[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),pf[of[a]]=a,62<=a&&(pf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)]=a)}};function tf(a){this.c=a.sub;oa();this.a=a.provider_id||a.firebase&&a.firebase.sign_in_provider||null;this.b=!!a.is_anonymous||"anonymous"==this.a}tf.prototype.f=function(){return this.b};function uf(a){return(a=vf(a))&&a.sub&&a.iss&&a.aud&&a.exp?new tf(a):null}function vf(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{return JSON.parse(qf(a))}catch(d){}return null};var wf="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),xf=["client_id","response_type","scope","redirect_uri","state"],yf={Uc:{Ma:"locale",Ba:500,Aa:600,Na:"facebook.com",gb:xf},Wc:{Ma:null,Ba:500,Aa:620,Na:"github.com",gb:xf},Xc:{Ma:"hl",Ba:515,Aa:680,Na:"google.com",gb:xf},cd:{Ma:"lang",Ba:485,Aa:705,Na:"twitter.com",gb:wf}};function zf(a){for(var b in yf)if(yf[b].Na==a)return yf[b];return null};function Af(a){var b={};b["facebook.com"]=Bf;b["google.com"]=Cf;b["github.com"]=Df;b["twitter.com"]=Ef;var c=a&&a[Ff];try{if(c)return b[c]?new b[c](a):new Gf(a);if("undefined"!==typeof a[Hf])return new If(a)}catch(d){}return null}var Hf="idToken",Ff="providerId";
	function If(a){var b=a[Ff];if(!b&&a[Hf]){var c=uf(a[Hf]);c&&c.a&&(b=c.a)}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);J(this,"providerId",b);J(this,"isNewUser",c)}function Gf(a){If.call(this,a);a=ye(a.rawUserInfo||"{}");J(this,"profile",Pe(a||{}))}t(Gf,If);
	function Bf(a){Gf.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}t(Bf,Gf);function Df(a){Gf.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");J(this,"username",this.profile&&this.profile.login||null)}t(Df,Gf);function Cf(a){Gf.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}t(Cf,Gf);
	function Ef(a){Gf.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");J(this,"username",a.screenName||null)}t(Ef,Gf);function Jf(a){this.a=dd(a)};function Kf(a){var b=dd(a),c=cd(b,"link"),d=cd(dd(c),"link");b=cd(b,"deep_link_id");return cd(dd(b),"link")||b||d||c||a};function Lf(a,b){return a.then(function(a){if(a[M]){var c=uf(a[M]);if(!c||b!=c.c)throw new L("user-mismatch");return a}throw new L("user-mismatch");}).s(function(a){throw a&&a.code&&a.code==Ze+"user-not-found"?new L("user-mismatch"):a;})}
	function Mf(a,b,c){if(b.idToken||b.accessToken)b.idToken&&J(this,"idToken",b.idToken),b.accessToken&&J(this,"accessToken",b.accessToken);else if(b.oauthToken&&b.oauthTokenSecret)J(this,"accessToken",b.oauthToken),J(this,"secret",b.oauthTokenSecret);else throw new L("internal-error","failed to construct a credential");J(this,"providerId",a);J(this,"signInMethod",c)}Mf.prototype.ya=function(a){return Nf(a,Of(this))};Mf.prototype.c=function(a,b){var c=Of(this);c.idToken=b;return Pf(a,c)};
	Mf.prototype.f=function(a,b){var c=Of(this);return Lf(Qf(a,c),b)};function Of(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;return{postBody:hd(b).toString(),requestUri:"http://localhost"}}
	Mf.prototype.D=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);return a};function Rf(a,b){this.Cc=b||[];K(this,{providerId:a,isOAuthProvider:!0});this.xb={};this.bb=(zf(a)||{}).Ma||null;this.Za=null}Rf.prototype.Da=function(a){this.xb=$a(a);return this};function N(a){Rf.call(this,a,xf);this.a=[]}t(N,Rf);
	N.prototype.ta=function(a){Ga(this.a,a)||this.a.push(a);return this};N.prototype.Db=function(){return Ja(this.a)};N.prototype.credential=function(a,b){if(!a&&!b)throw new L("argument-error","credential failed: must provide the ID token and/or the access token.");return new Mf(this.providerId,{idToken:a||null,accessToken:b||null},this.providerId)};function Sf(){N.call(this,"facebook.com")}t(Sf,N);J(Sf,"PROVIDER_ID","facebook.com");J(Sf,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
	function Tf(a){if(!a)throw new L("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new Sf).credential(null,b)}function Uf(){N.call(this,"github.com")}t(Uf,N);J(Uf,"PROVIDER_ID","github.com");J(Uf,"GITHUB_SIGN_IN_METHOD","github.com");function Vf(a){if(!a)throw new L("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new Uf).credential(null,b)}
	function Wf(){N.call(this,"google.com");this.ta("profile")}t(Wf,N);J(Wf,"PROVIDER_ID","google.com");J(Wf,"GOOGLE_SIGN_IN_METHOD","google.com");function Xf(a,b){var c=a;q(a)&&(c=a.idToken,b=a.accessToken);return(new Wf).credential(c,b)}function Yf(){Rf.call(this,"twitter.com",wf)}t(Yf,Rf);J(Yf,"PROVIDER_ID","twitter.com");J(Yf,"TWITTER_SIGN_IN_METHOD","twitter.com");
	function Zf(a,b){var c=a;q(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new L("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Mf("twitter.com",c,"twitter.com")}function $f(a,b,c){this.a=a;this.b=b;J(this,"providerId","password");J(this,"signInMethod",c===O.EMAIL_LINK_SIGN_IN_METHOD?O.EMAIL_LINK_SIGN_IN_METHOD:O.EMAIL_PASSWORD_SIGN_IN_METHOD)}
	$f.prototype.ya=function(a){return this.signInMethod==O.EMAIL_LINK_SIGN_IN_METHOD?P(a,ag,{email:this.a,oobCode:this.b}):P(a,bg,{email:this.a,password:this.b})};$f.prototype.c=function(a,b){return this.signInMethod==O.EMAIL_LINK_SIGN_IN_METHOD?P(a,cg,{idToken:b,email:this.a,oobCode:this.b}):P(a,dg,{idToken:b,email:this.a,password:this.b})};$f.prototype.f=function(a,b){return Lf(this.ya(a),b)};$f.prototype.D=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}};
	function O(){K(this,{providerId:"password",isOAuthProvider:!1})}function eg(a,b){b=fg(b);if(!b)throw new L("argument-error","Invalid email link!");return new $f(a,b,O.EMAIL_LINK_SIGN_IN_METHOD)}function fg(a){a=Kf(a);a=new Jf(a);var b=cd(a.a,"oobCode")||null;return"signIn"===(cd(a.a,"mode")||null)&&b?b:null}K(O,{PROVIDER_ID:"password"});K(O,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});K(O,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});
	function gg(a){if(!(a.Sa&&a.Ra||a.Fa&&a.$))throw new L("internal-error");this.a=a;J(this,"providerId","phone");J(this,"signInMethod","phone")}gg.prototype.ya=function(a){return a.Ta(hg(this))};gg.prototype.c=function(a,b){var c=hg(this);c.idToken=b;return P(a,ig,c)};gg.prototype.f=function(a,b){var c=hg(this);c.operation="REAUTH";a=P(a,jg,c);return Lf(a,b)};
	gg.prototype.D=function(){var a={providerId:"phone"};this.a.Sa&&(a.verificationId=this.a.Sa);this.a.Ra&&(a.verificationCode=this.a.Ra);this.a.Fa&&(a.temporaryProof=this.a.Fa);this.a.$&&(a.phoneNumber=this.a.$);return a};function hg(a){return a.a.Fa&&a.a.$?{temporaryProof:a.a.Fa,phoneNumber:a.a.$}:{sessionInfo:a.a.Sa,code:a.a.Ra}}
	function kg(a){try{this.a=a||firebase.auth()}catch(b){throw new L("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}K(this,{providerId:"phone",isOAuthProvider:!1})}
	kg.prototype.Ta=function(a,b){var c=this.a.b;return B(b.verify()).then(function(d){if(!l(d))throw new L("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":return lg(c,{phoneNumber:a,recaptchaToken:d}).then(function(a){"function"===typeof b.reset&&b.reset();return a},function(a){"function"===typeof b.reset&&b.reset();throw a;});default:throw new L("argument-error",
	'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};function mg(a,b){if(!a)throw new L("missing-verification-id");if(!b)throw new L("missing-verification-code");return new gg({Sa:a,Ra:b})}K(kg,{PROVIDER_ID:"phone"});K(kg,{PHONE_SIGN_IN_METHOD:"phone"});
	function ng(a){if(a.temporaryProof&&a.phoneNumber)return new gg({Fa:a.temporaryProof,$:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret;a=a&&a.oauthIdToken;try{switch(b){case "google.com":return Xf(a,c);case "facebook.com":return Tf(c);case "github.com":return Vf(c);case "twitter.com":return Zf(c,d);default:return(new N(b)).credential(a,c)}}catch(e){return null}}
	function og(a){if(!a.isOAuthProvider)throw new L("invalid-oauth-provider");};function pg(a,b,c,d,e){this.b=a;this.c=b||null;this.f=c||null;this.g=d||null;this.a=e||null;if(this.f||this.a){if(this.f&&this.a)throw new L("invalid-auth-event");if(this.f&&!this.g)throw new L("invalid-auth-event");}else throw new L("invalid-auth-event");}pg.prototype.D=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.D()}};function qg(a){a=a||{};return a.type?new pg(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&af(a.error)):null};function rg(){this.b=null;this.a=[]}var sg=null;rg.prototype.subscribe=function(a){var b=this;this.a.push(a);this.b||(this.b=function(a){for(var c=0;c<b.a.length;c++)b.a[c](a)},a=I("universalLinks.subscribe",k),"function"===typeof a&&a(null,this.b))};rg.prototype.unsubscribe=function(a){w(this.a,function(b){return b==a})};function tg(a){var b="unauthorized-domain",c=void 0,d=dd(a);a=d.b;d=d.c;"chrome-extension"==d?c=Ka("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Ka("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
	L.call(this,b,c)}t(tg,L);function ug(a,b,c){L.call(this,a,c);a=b||{};a.yb&&J(this,"email",a.yb);a.$&&J(this,"phoneNumber",a.$);a.credential&&J(this,"credential",a.credential)}t(ug,L);ug.prototype.D=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);var b=this.credential&&this.credential.D();b&&bb(a,b);return a};ug.prototype.toJSON=function(){return this.D()};
	function vg(a){if(a.code){var b=a.code||"";0==b.indexOf(Ze)&&(b=b.substring(Ze.length));var c={credential:ng(a)};if(a.email)c.yb=a.email;else if(a.phoneNumber)c.$=a.phoneNumber;else if(!c.credential)return new L(b,a.message||void 0);return new ug(b,c,a.message)}return null};var wg=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function xg(){}xg.prototype.c=null;function yg(a){return a.c||(a.c=a.b())};var zg;function Ag(){}t(Ag,xg);Ag.prototype.a=function(){var a=Bg(this);return a?new ActiveXObject(a):new XMLHttpRequest};Ag.prototype.b=function(){var a={};Bg(this)&&(a[0]=!0,a[1]=!0);return a};
	function Bg(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}zg=new Ag;function Cg(){}t(Cg,xg);Cg.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Dg;throw Error("Unsupported browser");};Cg.prototype.b=function(){return{}};
	function Dg(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseText="";this.status=-1;this.statusText="";this.a.onload=r(this.dc,this);this.a.onerror=r(this.Eb,this);this.a.onprogress=r(this.ec,this);this.a.ontimeout=r(this.hc,this)}g=Dg.prototype;g.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b)};
	g.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send()};g.abort=function(){this.a.abort()};g.setRequestHeader=function(){};g.getResponseHeader=function(a){return"content-type"==a.toLowerCase()?this.a.contentType:""};g.dc=function(){this.status=200;this.responseText=this.a.responseText;Eg(this,4)};g.Eb=function(){this.status=500;this.responseText="";Eg(this,4)};g.hc=function(){this.Eb()};
	g.ec=function(){this.status=200;Eg(this,1)};function Eg(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange()}g.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType};function Fg(a,b,c){this.reset(a,b,c,void 0,void 0)}Fg.prototype.a=null;var Gg=0;Fg.prototype.reset=function(a,b,c,d,e){"number"==typeof e||Gg++;d||oa();delete this.a};function Hg(a){this.f=a;this.b=this.c=this.a=null}function Ig(a,b){this.name=a;this.value=b}Ig.prototype.toString=function(){return this.name};var Jg=new Ig("SEVERE",1E3),Kg=new Ig("WARNING",900),Lg=new Ig("CONFIG",700),Mg=new Ig("FINE",500);function Ng(a){if(a.c)return a.c;if(a.a)return Ng(a.a);sa("Root logger has no level set.");return null}Hg.prototype.log=function(a,b,c){if(a.value>=Ng(this).value)for(n(b)&&(b=b()),a=new Fg(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};var Og={},Pg=null;
	function Qg(a){Pg||(Pg=new Hg(""),Og[""]=Pg,Pg.c=Lg);var b;if(!(b=Og[a])){b=new Hg(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Qg(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Og[a]=b}return b};function Rg(a,b){a&&a.log(Mg,b,void 0)};function Sg(a){this.f=a}t(Sg,xg);Sg.prototype.a=function(){return new Tg(this.f)};Sg.prototype.b=function(a){return function(){return a}}({});function Tg(a){F.call(this);this.i=a;this.readyState=Ug;this.status=0;this.responseText=this.statusText="";this.onreadystatechange=null;this.g=new Headers;this.b=null;this.h="GET";this.c="";this.a=!1;this.f=Qg("goog.net.FetchXmlHttp")}t(Tg,F);var Ug=0;g=Tg.prototype;
	g.open=function(a,b){if(this.readyState!=Ug)throw this.abort(),Error("Error reopening a connection");this.h=a;this.c=b;this.readyState=1;Vg(this)};g.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.g,method:this.h,credentials:void 0,cache:void 0};a&&(b.body=a);this.i.fetch(new Request(this.c,b)).then(this.gc.bind(this),this.Fb.bind(this))};
	g.abort=function(){this.responseText="";this.g=new Headers;this.status=0;1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,Vg(this));this.readyState=Ug};g.gc=function(a){this.a&&(this.b||(this.b=a.headers,this.readyState=2,Vg(this)),this.a&&(this.readyState=3,Vg(this),this.a&&a.text().then(this.fc.bind(this,a),this.Fb.bind(this))))};g.fc=function(a,b){this.a&&(this.status=a.status,this.statusText=a.statusText,this.responseText=b,this.readyState=4,Vg(this))};
	g.Fb=function(a){var b=this.f;b&&b.log(Kg,"Failed to fetch url "+this.c,a instanceof Error?a:Error(a));this.a&&(this.readyState=4,Vg(this))};g.setRequestHeader=function(a,b){this.g.append(a,b)};g.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.f)&&a.log(Kg,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")};
	g.getAllResponseHeaders=function(){if(!this.b){var a=this.f;a&&a.log(Kg,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0);return""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Vg(a){a.onreadystatechange&&a.onreadystatechange.call(a)};function Wg(a){F.call(this);this.headers=new Lc;this.C=a||null;this.c=!1;this.w=this.a=null;this.h=this.N=this.m="";this.f=this.I=this.i=this.G=!1;this.g=0;this.u=null;this.o=Xg;this.v=this.O=!1}t(Wg,F);var Xg="";Wg.prototype.b=Qg("goog.net.XhrIo");var Yg=/^https?$/i,Zg=["POST","PUT"];
	function $g(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.m+"; newUri="+b);c=c?c.toUpperCase():"GET";a.m=b;a.h="";a.N=c;a.G=!1;a.c=!0;a.a=a.C?a.C.a():zg.a();a.w=a.C?yg(a.C):yg(zg);a.a.onreadystatechange=r(a.Ib,a);try{Rg(a.b,ah(a,"Opening Xhr")),a.I=!0,a.a.open(c,String(b),!0),a.I=!1}catch(h){Rg(a.b,ah(a,"Error opening Xhr: "+h.message));bh(a,h);return}b=d||"";var f=new Lc(a.headers);e&&Kc(e,function(a,b){f.set(b,a)});e=Ea(f.U());d=k.FormData&&b instanceof
	k.FormData;!Ga(Zg,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(a,b){this.a.setRequestHeader(b,a)},a);a.o&&(a.a.responseType=a.o);"withCredentials"in a.a&&a.a.withCredentials!==a.O&&(a.a.withCredentials=a.O);try{ch(a),0<a.g&&(a.v=dh(a.a),Rg(a.b,ah(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.v)),a.v?(a.a.timeout=a.g,a.a.ontimeout=r(a.Ga,a)):a.u=Gc(a.Ga,a.g,a)),Rg(a.b,ah(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1}catch(h){Rg(a.b,
	ah(a,"Send error: "+h.message)),bh(a,h)}}function dh(a){return Pb&&Zb(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}function Fa(a){return"content-type"==a.toLowerCase()}g=Wg.prototype;g.Ga=function(){"undefined"!=typeof aa&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Rg(this.b,ah(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))};function bh(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;eh(a);fh(a)}
	function eh(a){a.G||(a.G=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"))}g.abort=function(){this.a&&this.c&&(Rg(this.b,ah(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),fh(this))};g.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),fh(this,!0));Wg.nb.ua.call(this)};g.Ib=function(){this.pa||(this.I||this.i||this.f?gh(this):this.vc())};g.vc=function(){gh(this)};
	function gh(a){if(a.c&&"undefined"!=typeof aa)if(a.w[1]&&4==hh(a)&&2==ih(a))Rg(a.b,ah(a,"Local request error detected and ignored"));else if(a.i&&4==hh(a))Gc(a.Ib,0,a);else if(a.dispatchEvent("readystatechange"),4==hh(a)){Rg(a.b,ah(a,"Request complete"));a.c=!1;try{var b=ih(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.m).match(Oc)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;
	f=h.substr(0,h.length-1)}e=!Yg.test(f?f.toLowerCase():"")}d=e}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else{try{var m=2<hh(a)?a.a.statusText:""}catch(p){Rg(a.b,"Can not get status: "+p.message),m=""}a.h=m+" ["+ih(a)+"]";eh(a)}}finally{fh(a)}}}function fh(a,b){if(a.a){ch(a);var c=a.a,d=a.w[0]?ca:null;a.a=null;a.w=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(Jg,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}
	function ch(a){a.a&&a.v&&(a.a.ontimeout=null);a.u&&(k.clearTimeout(a.u),a.u=null)}function hh(a){return a.a?a.a.readyState:0}function ih(a){try{return 2<hh(a)?a.a.status:-1}catch(b){return-1}}function jh(a){try{return a.a?a.a.responseText:""}catch(b){return Rg(a.b,"Can not get responseText: "+b.message),""}}
	g.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.o){case Xg:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Jg,"Response type "+this.o+" is not supported on this browser",void 0);return null}catch(b){return Rg(this.b,"Can not get response: "+b.message),null}};function ah(a,b){return b+" ["+a.N+" "+a.m+" "+ih(a)+"]"};/*
	 Portions of this code are from MochiKit, received by
	 The Closure Authors under the MIT license. All other code is Copyright
	 2005-2009 The Closure Authors. All Rights Reserved.
	*/
	function kh(a,b){this.g=[];this.v=a;this.u=b||null;this.f=this.a=!1;this.c=void 0;this.m=this.w=this.i=!1;this.h=0;this.b=null;this.l=0}kh.prototype.cancel=function(a){if(this.a)this.c instanceof kh&&this.c.cancel();else{if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel())}this.v?this.v.call(this.u,this):this.m=!0;this.a||(a=new lh(this),mh(this),nh(this,!1,a))}};kh.prototype.o=function(a,b){this.i=!1;nh(this,a,b)};function nh(a,b,c){a.a=!0;a.c=c;a.f=!b;oh(a)}
	function mh(a){if(a.a){if(!a.m)throw new ph(a);a.m=!1}}kh.prototype.C=function(){mh(this);nh(this,!0,null)};function qh(a,b){rh(a,null,b,void 0)}function rh(a,b,c,d){a.g.push([b,c,d]);a.a&&oh(a)}kh.prototype.then=function(a,b,c){var d,e,f=new A(function(a,b){d=a;e=b});rh(this,d,function(a){a instanceof lh?f.cancel():e(a)});return f.then(a,b,c)};pa(kh);function sh(a){return Da(a.g,function(a){return n(a[1])})}
	function oh(a){if(a.h&&a.a&&sh(a)){var b=a.h,c=th[b];c&&(k.clearTimeout(c.a),delete th[b]);a.h=0}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],h=e[1];e=e[2];if(f=a.f?h:f)try{var m=f.call(e||a.u,b);void 0!==m&&(a.f=a.f&&(m==b||m instanceof Error),a.c=b=m);if(qa(b)||"function"===typeof k.Promise&&b instanceof k.Promise)d=!0,a.i=!0}catch(p){b=p,a.f=!0,sh(a)||(c=!0)}}a.c=b;d&&(m=r(a.o,a,!0),d=r(a.o,a,!1),b instanceof kh?(rh(b,m,d),b.w=!0):b.then(m,d));c&&(b=
	new uh(b),th[b.a]=b,a.h=b.a)}function ph(){u.call(this)}t(ph,u);ph.prototype.message="Deferred has already fired";ph.prototype.name="AlreadyCalledError";function lh(){u.call(this)}t(lh,u);lh.prototype.message="Deferred was canceled";lh.prototype.name="CanceledError";function uh(a){this.a=k.setTimeout(r(this.c,this),0);this.b=a}uh.prototype.c=function(){delete th[this.a];throw this.b;};var th={};function vh(a){var b={},c=b.document||document,d=td(a),e=document.createElement("SCRIPT"),f={Kb:e,Ga:void 0},h=new kh(wh,f),m=null,p=null!=b.timeout?b.timeout:5E3;0<p&&(m=window.setTimeout(function(){xh(e,!0);var a=new yh(zh,"Timeout reached for loading script "+d);mh(h);nh(h,!1,a)},p),f.Ga=m);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(xh(e,b.ed||!1,m),h.C())};e.onerror=function(){xh(e,!0,m);var a=new yh(Ah,"Error while loading script "+
	d);mh(h);nh(h,!1,a)};f=b.attributes||{};bb(f,{type:"text/javascript",charset:"UTF-8"});Jd(e,f);e.src=td(a);Bh(c).appendChild(e);return h}function Bh(a){var b;return(b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function wh(){if(this&&this.Kb){var a=this.Kb;a&&"SCRIPT"==a.tagName&&xh(a,!0,this.Ga)}}
	function xh(a,b,c){null!=c&&k.clearTimeout(c);a.onload=ca;a.onerror=ca;a.onreadystatechange=ca;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a)},0)}var Ah=0,zh=1;function yh(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a}t(yh,u);function Ch(a){this.f=a}t(Ch,xg);Ch.prototype.a=function(){return new this.f};Ch.prototype.b=function(){return{}};
	function Dh(a,b,c){this.b=a;a=b||{};this.i=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.l=a.secureTokenTimeout||Eh;this.f=$a(a.secureTokenHeaders||Fh);this.g=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.h=a.firebaseTimeout||Gh;this.a=$a(a.firebaseHeaders||Hh);c&&(this.a["X-Client-Version"]=c,this.f["X-Client-Version"]=c);c="Node"==me();c=k.XMLHttpRequest||c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&
	!le())throw new L("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0;le()?this.c=new Sg(self):ne()?this.c=new Ch(c):this.c=new Cg}var Ih,M="idToken",Eh=new Be(3E4,6E4),Fh={"Content-Type":"application/x-www-form-urlencoded"},Gh=new Be(3E4,6E4),Hh={"Content-Type":"application/json"};function Jh(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"]}
	function Kh(a,b){b?(a.a["X-Client-Version"]=b,a.f["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.f["X-Client-Version"])}function Lh(a,b,c,d,e,f,h){Yd()||le()?a=r(a.o,a):(Ih||(Ih=new A(function(a,b){Mh(a,b)})),a=r(a.m,a));a(b,c,d,e,f,h)}
	Dh.prototype.o=function(a,b,c,d,e,f){if(le()&&("undefined"===typeof k.fetch||"undefined"===typeof k.Headers||"undefined"===typeof k.Request))throw new L("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var h=new Wg(this.c);if(f){h.g=Math.max(0,f);var m=setTimeout(function(){h.dispatchEvent("timeout")},f)}uc(h,"complete",function(){m&&clearTimeout(m);var a=null;try{a=
	JSON.parse(jh(this))||null}catch(x){a=null}b&&b(a)});Ac(h,"ready",function(){m&&clearTimeout(m);Kb(this)});Ac(h,"timeout",function(){m&&clearTimeout(m);Kb(this);b&&b(null)});$g(h,a,c,d,e)};var Nh=qd("https://apis.google.com/js/client.js?onload=%{onload}"),Oh="__fcb"+Math.floor(1E6*Math.random()).toString();
	function Mh(a,b){if(((window.gapi||{}).client||{}).request)a();else{k[Oh]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"))};var c=ud(Nh,{onload:Oh});qh(vh(c),function(){b(Error("CORS_UNSUPPORTED"))})}}
	Dh.prototype.m=function(a,b,c,d,e){var f=this;Ih.then(function(){window.gapi.client.setApiKey(f.b);var h=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(a){window.gapi.auth.setToken(h);b&&b(a)}})}).s(function(a){b&&b({error:{message:a&&a.message||"CORS_UNSUPPORTED"}})})};
	function Ph(a,b){return new A(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Lh(a,a.i+"?key="+encodeURIComponent(a.b),function(a){a?a.error?d(Qh(a)):a.access_token&&a.refresh_token?c(a):d(new L("internal-error")):d(new L("network-request-failed"))},"POST",hd(b).toString(),a.f,a.l.get()):d(new L("internal-error"))})}
	function Rh(a,b,c,d,e,f){var h=dd(a.g+b);G(h,"key",a.b);f&&G(h,"cb",oa().toString());var m="GET"==c;if(m)for(var p in d)d.hasOwnProperty(p)&&G(h,p,d[p]);return new A(function(b,f){Lh(a,h.toString(),function(a){a?a.error?f(Qh(a,e||{})):b(a):f(new L("network-request-failed"))},c,m?void 0:Od(xe(d)),a.a,a.h.get())})}function Sh(a){if(!wg.test(a.email))throw new L("invalid-email");}function Th(a){"email"in a&&Sh(a)}
	function Uh(a,b){return P(a,Vh,{identifier:b,continueUri:ue()?Vd():"http://localhost"}).then(function(a){return a.allProviders||[]})}function Wh(a,b){return P(a,Vh,{identifier:b,continueUri:ue()?Vd():"http://localhost"}).then(function(a){return a.signinMethods||[]})}function Xh(a){return P(a,Yh,{}).then(function(a){return a.authorizedDomains||[]})}function Zh(a){if(!a[M])throw new L("internal-error");}
	function $h(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new L("internal-error");}else{if(!a.sessionInfo)throw new L("missing-verification-id");if(!a.code)throw new L("missing-verification-code");}}Dh.prototype.Pa=function(){return P(this,ai,{})};Dh.prototype.ob=function(a,b){return P(this,bi,{idToken:a,email:b})};Dh.prototype.pb=function(a,b){return P(this,dg,{idToken:a,password:b})};var ci={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};g=Dh.prototype;
	g.qb=function(a,b){var c={idToken:a},d=[];Ya(ci,function(a,f){var e=b[f];null===e?d.push(a):f in b&&(c[f]=e)});d.length&&(c.deleteAttribute=d);return P(this,bi,c)};g.jb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};bb(a,b);return P(this,di,a)};g.kb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};bb(a,b);return P(this,ei,a)};g.ib=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};bb(a,b);return P(this,fi,a)};function lg(a,b){return P(a,gi,b)}g.Ta=function(a){return P(this,hi,a)};
	function ii(a,b,c){return P(a,ji,{idToken:b,deleteProvider:c})}function ki(a){if(!a.requestUri||!a.sessionId&&!a.postBody)throw new L("internal-error");}
	function li(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=vg(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=vg(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=vg(a)):a.errorMessage&&(b=mi(a.errorMessage));if(b)throw b;if(!a[M])throw new L("internal-error");}function Nf(a,b){b.returnIdpCredential=!0;return P(a,ni,b)}function Pf(a,b){b.returnIdpCredential=!0;return P(a,oi,b)}
	function Qf(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return P(a,pi,b)}function qi(a){if(!a.oobCode)throw new L("invalid-action-code");}g.Ya=function(a,b){return P(this,ri,{oobCode:a,newPassword:b})};g.Ja=function(a){return P(this,si,{oobCode:a})};g.Va=function(a){return P(this,ti,{oobCode:a})};
	var ti={endpoint:"setAccountInfo",B:qi,da:"email"},si={endpoint:"resetPassword",B:qi,J:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b)throw new L("internal-error");}},ui={endpoint:"signupNewUser",B:function(a){Sh(a);if(!a.password)throw new L("weak-password");},J:Zh,R:!0},Vh={endpoint:"createAuthUri"},vi={endpoint:"deleteAccount",T:["idToken"]},ji={endpoint:"setAccountInfo",T:["idToken","deleteProvider"],B:function(a){if(!fa(a.deleteProvider))throw new L("internal-error");}},ag=
	{endpoint:"emailLinkSignin",T:["email","oobCode"],B:Sh,J:Zh,R:!0},cg={endpoint:"emailLinkSignin",T:["idToken","email","oobCode"],B:Sh,J:Zh,R:!0},wi={endpoint:"getAccountInfo"},ei={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new L("internal-error");Sh(a)},da:"email"},fi={endpoint:"getOobConfirmationCode",T:["idToken","requestType"],B:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new L("internal-error");},da:"email"},di={endpoint:"getOobConfirmationCode",
	T:["requestType"],B:function(a){if("PASSWORD_RESET"!=a.requestType)throw new L("internal-error");Sh(a)},da:"email"},Yh={tb:!0,endpoint:"getProjectConfig",Hb:"GET"},xi={tb:!0,endpoint:"getRecaptchaParam",Hb:"GET",J:function(a){if(!a.recaptchaSiteKey)throw new L("internal-error");}},ri={endpoint:"resetPassword",B:qi,da:"email"},gi={endpoint:"sendVerificationCode",T:["phoneNumber","recaptchaToken"],da:"sessionInfo"},bi={endpoint:"setAccountInfo",T:["idToken"],B:Th,R:!0},dg={endpoint:"setAccountInfo",
	T:["idToken"],B:function(a){Th(a);if(!a.password)throw new L("weak-password");},J:Zh,R:!0},ai={endpoint:"signupNewUser",J:Zh,R:!0},ni={endpoint:"verifyAssertion",B:ki,J:li,R:!0},pi={endpoint:"verifyAssertion",B:ki,J:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new L("user-not-found");if(a.errorMessage)throw mi(a.errorMessage);if(!a[M])throw new L("internal-error");},R:!0},oi={endpoint:"verifyAssertion",B:function(a){ki(a);if(!a.idToken)throw new L("internal-error");},J:li,
	R:!0},yi={endpoint:"verifyCustomToken",B:function(a){if(!a.token)throw new L("invalid-custom-token");},J:Zh,R:!0},bg={endpoint:"verifyPassword",B:function(a){Sh(a);if(!a.password)throw new L("wrong-password");},J:Zh,R:!0},hi={endpoint:"verifyPhoneNumber",B:$h,J:Zh},ig={endpoint:"verifyPhoneNumber",B:function(a){if(!a.idToken)throw new L("internal-error");$h(a)},J:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",vg(a);Zh(a)}},jg={Wb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",
	B:$h,J:Zh};function P(a,b,c){if(!Oe(c,b.T))return C(new L("internal-error"));var d=b.Hb||"POST",e;return B(c).then(b.B).then(function(){b.R&&(c.returnSecureToken=!0);return Rh(a,b.endpoint,d,c,b.Wb,b.tb||!1)}).then(function(a){return e=a}).then(b.J).then(function(){if(!b.da)return e;if(!(b.da in e))throw new L("internal-error");return e[b.da]})}function mi(a){return Qh({error:{errors:[{message:a}],code:400,message:a}})}
	function Qh(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new L(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
	MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",
	MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",
	CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",
	REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"};bb(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*(.*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new L(d[e],
	b);!b&&a&&(b=we(a));return new L("internal-error",b)};var zi={Zc:{$a:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",hb:"https://securetoken.googleapis.com/v1/token",id:"p"},ad:{$a:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",hb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},bd:{$a:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",hb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};
	function Ai(a){for(var b in zi)if(zi[b].id===a)return a=zi[b],{firebaseEndpoint:a.$a,secureTokenEndpoint:a.hb};return null}var Bi;Bi=Ai("__EID__")?"__EID__":void 0;function Ci(a){this.b=a;this.a=null;this.eb=Di(this)}
	function Di(a){return Ei().then(function(){return new A(function(b,c){I("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b()}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"))},Fi.get());d.ping(e).then(e,function(){c(Error("Network Error"))})})})})}
	function Gi(a,b){return a.eb.then(function(){return new A(function(c){a.a.send(b.type,b,c,I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}function Hi(a,b){a.eb.then(function(){a.a.register("authEvent",b,I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}var Ii=qd("https://apis.google.com/js/api.js?onload=%{onload}"),Ji=new Be(3E4,6E4),Fi=new Be(5E3,15E3),Ki=null;
	function Ei(){return Ki?Ki:Ki=(new A(function(a,b){function c(){Ae();I("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ae();b(Error("Network Error"))},timeout:Ji.get()})}if(I("gapi.iframes.Iframe"))a();else if(I("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();k[d]=function(){I("gapi.load")?c():b(Error("Network Error"))};d=ud(Ii,{onload:d});B(vh(d)).s(function(){b(Error("Network Error"))})}})).s(function(a){Ki=null;throw a;})};function Li(a,b,c){this.i=a;this.g=b;this.h=c;this.f=null;this.a=ed(this.i,"/__/auth/iframe");G(this.a,"apiKey",this.g);G(this.a,"appName",this.h);this.b=null;this.c=[]}Li.prototype.toString=function(){this.f?G(this.a,"v",this.f):kd(this.a.a,"v");this.b?G(this.a,"eid",this.b):kd(this.a.a,"eid");this.c.length?G(this.a,"fw",this.c.join(",")):kd(this.a.a,"fw");return this.a.toString()};function Mi(a,b,c,d,e){this.o=a;this.m=b;this.c=c;this.l=d;this.h=this.g=this.i=null;this.a=e;this.f=null}
	Mi.prototype.toString=function(){var a=ed(this.o,"/__/auth/handler");G(a,"apiKey",this.m);G(a,"appName",this.c);G(a,"authType",this.l);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().ea()}catch(m){c=null}b.Za=c;G(a,"providerId",this.a.providerId);b=this.a;c=xe(b.xb);for(var d in c)c[d]=c[d].toString();d=b.Cc;c=$a(c);for(var e=0;e<d.length;e++){var f=d[e];f in c&&delete c[f]}b.bb&&b.Za&&!c[b.bb]&&(c[b.bb]=b.Za);Za(c)||G(a,"customParameters",we(c))}"function"===typeof this.a.Db&&
	(b=this.a.Db(),b.length&&G(a,"scopes",b.join(",")));this.i?G(a,"redirectUrl",this.i):kd(a.a,"redirectUrl");this.g?G(a,"eventId",this.g):kd(a.a,"eventId");this.h?G(a,"v",this.h):kd(a.a,"v");if(this.b)for(var h in this.b)this.b.hasOwnProperty(h)&&!cd(a,h)&&G(a,h,this.b[h]);this.f?G(a,"eid",this.f):kd(a.a,"eid");h=Ni(this.c);h.length&&G(a,"fw",h.join(","));return a.toString()};function Ni(a){try{return firebase.app(a).auth().xa()}catch(b){return[]}}
	function Oi(a,b,c,d,e){this.m=a;this.f=b;this.b=c;this.c=d||null;this.h=e||null;this.o=this.u=this.v=null;this.g=[];this.l=this.a=null}
	function Pi(a){var b=Vd();return Xh(a).then(function(a){a:{var c=dd(b),e=c.c;c=c.b;for(var f=0;f<a.length;f++){var h=a[f];var m=c;var p=e;0==h.indexOf("chrome-extension://")?m=dd(h).b==m&&"chrome-extension"==p:"http"!=p&&"https"!=p?m=!1:fe.test(h)?m=m==h:(h=h.split(".").join("\\."),m=(new RegExp("^(.+\\."+h+"|"+h+")$","i")).test(m));if(m){a=!0;break a}}a=!1}if(!a)throw new tg(Vd());})}
	function Qi(a){if(a.l)return a.l;a.l=ge().then(function(){if(!a.u){var b=a.c,c=a.h,d=Ni(a.b),e=new Li(a.m,a.f,a.b);e.f=b;e.b=c;e.c=Ja(d||[]);a.u=e.toString()}a.i=new Ci(a.u);Ri(a)});return a.l}g=Oi.prototype;g.Ea=function(a,b,c){var d=new L("popup-closed-by-user"),e=new L("web-storage-unsupported"),f=this,h=!1;return this.ga().then(function(){Si(f).then(function(c){c||(a&&be(a),b(e),h=!0)})}).s(function(){}).then(function(){if(!h)return ee(a)}).then(function(){if(!h)return Hc(c).then(function(){b(d)})})};
	g.Lb=function(){var a=H();return!ve(a)&&!ze(a)};g.Gb=function(){return!1};
	g.Bb=function(a,b,c,d,e,f,h){if(!a)return C(new L("popup-blocked"));if(h&&!ve())return this.ga().s(function(b){be(a);e(b)}),d(),B();this.a||(this.a=Pi(Ti(this)));var m=this;return this.a.then(function(){var b=m.ga().s(function(b){be(a);e(b);throw b;});d();return b}).then(function(){og(c);if(!h){var d=Ui(m.m,m.f,m.b,b,c,null,f,m.c,void 0,m.h);Wd(d,a)}}).s(function(a){"auth/network-request-failed"==a.code&&(m.a=null);throw a;})};
	function Ti(a){a.o||(a.v=a.c?qe(a.c,Ni(a.b)):null,a.o=new Dh(a.f,Ai(a.h),a.v));return a.o}g.Ca=function(a,b,c){this.a||(this.a=Pi(Ti(this)));var d=this;return this.a.then(function(){og(b);var e=Ui(d.m,d.f,d.b,a,b,Vd(),c,d.c,void 0,d.h);Wd(e)}).s(function(a){"auth/network-request-failed"==a.code&&(d.a=null);throw a;})};g.ga=function(){var a=this;return Qi(this).then(function(){return a.i.eb}).s(function(){a.a=null;throw new L("network-request-failed");})};g.Pb=function(){return!0};
	function Ui(a,b,c,d,e,f,h,m,p,x){a=new Mi(a,b,c,d,e);a.i=f;a.g=h;a.h=m;a.b=$a(p||null);a.f=x;return a.toString()}function Ri(a){if(!a.i)throw Error("IfcHandler must be initialized!");Hi(a.i,function(b){var c={};if(b&&b.authEvent){var d=!1;b=qg(b.authEvent);for(c=0;c<a.g.length;c++)d=a.g[c](b)||d;c={};c.status=d?"ACK":"ERROR";return B(c)}c.status="ERROR";return B(c)})}
	function Si(a){var b={type:"webStorageSupport"};return Qi(a).then(function(){return Gi(a.i,b)}).then(function(a){if(a&&a.length&&"undefined"!==typeof a[0].webStorageSupport)return a[0].webStorageSupport;throw Error();})}g.va=function(a){this.g.push(a)};g.Ka=function(a){w(this.g,function(b){return b==a})};function Vi(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new L("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}g=Vi.prototype;g.get=function(a){return B(this.a.getItem(a)).then(function(a){return a&&ye(a)})};g.set=function(a,b){return B(this.a.setItem(a,we(b)))};g.P=function(a){return B(this.a.removeItem(a))};g.Y=function(){};g.ca=function(){};function Wi(a){this.b=a;this.a={};this.c=r(this.f,this)}var Xi=[];function Yi(){var a=le()?self:null;v(Xi,function(c){c.b==a&&(b=c)});if(!b){var b=new Wi(a);Xi.push(b)}return b}
	Wi.prototype.f=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];v(d,function(b){e.push(B().then(function(){return b(a.origin,a.data.data)}))});wb(e).then(function(d){var e=[];v(d,function(a){e.push({fulfilled:a.Cb,value:a.value,reason:a.reason?a.reason.message:void 0})});v(e,function(a){for(var b in a)"undefined"===typeof a[b]&&delete a[b]});a.ports[0].postMessage({status:"done",eventId:c,
	eventType:b,response:e})})}};Wi.prototype.subscribe=function(a,b){Za(this.a)&&this.b.addEventListener("message",this.c);"undefined"===typeof this.a[a]&&(this.a[a]=[]);this.a[a].push(b)};Wi.prototype.unsubscribe=function(a,b){"undefined"!==typeof this.a[a]&&b?(w(this.a[a],function(a){return a==b}),0==this.a[a].length&&delete this.a[a]):b||delete this.a[a];Za(this.a)&&this.b.removeEventListener("message",this.c)};function Zi(a){this.a=a}Zi.prototype.postMessage=function(a,b){this.a.postMessage(a,b)};function $i(a){this.c=a;this.b=!1;this.a=[]}
	function aj(a,b,c,d){var e,f=c||{},h,m,p,x=null;if(a.b)return C(Error("connection_unavailable"));var db=d?800:50,la="undefined"!==typeof MessageChannel?new MessageChannel:null;return(new A(function(c,d){la?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),la.port1.start(),m=setTimeout(function(){d(Error("unsupported_event"))},db),h=function(a){a.data.eventId===e&&("ack"===a.data.status?(clearTimeout(m),p=setTimeout(function(){d(Error("timeout"))},3E3)):"done"===a.data.status?(clearTimeout(p),
	"undefined"!==typeof a.data.response?c(a.data.response):d(Error("unknown_error"))):(clearTimeout(m),clearTimeout(p),d(Error("invalid_response"))))},x={messageChannel:la,onMessage:h},a.a.push(x),la.port1.addEventListener("message",h),a.c.postMessage({eventType:b,eventId:e,data:f},[la.port2])):d(Error("connection_unavailable"))})).then(function(b){bj(a,x);return b}).s(function(b){bj(a,x);throw b;})}
	function bj(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());w(a.a,function(a){return a==b})}}$i.prototype.close=function(){for(;0<this.a.length;)bj(this,this.a[0]);this.b=!0};function cj(){if(!dj())throw new L("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.m=k.indexedDB;this.type="indexedDB";this.g=this.l=this.f=this.i=null;this.u=!1;this.h=null;var a=this;le()&&self?(this.l=Yi(),this.l.subscribe("keyChanged",function(b,c){return ej(a).then(function(b){0<b.length&&v(a.a,function(a){a(b)});return{keyProcessed:Ga(b,c.key)}})}),this.l.subscribe("ping",function(){return B(["keyChanged"])})):He().then(function(b){if(a.h=b)a.g=new $i(new Zi(b)),aj(a.g,"ping",null,
	!0).then(function(b){b[0].fulfilled&&Ga(b[0].value,"keyChanged")&&(a.u=!0)}).s(function(){})})}var fj;function gj(a){return new A(function(b,c){var d=a.m.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b()};d.onerror=function(a){c(Error(a.target.error))}})}
	function hj(a){return new A(function(b,c){var d=a.m.open("firebaseLocalStorageDb",1);d.onerror=function(a){try{a.preventDefault()}catch(f){}c(Error(a.target.error))};d.onupgradeneeded=function(a){a=a.target.result;try{a.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(f){c(f)}};d.onsuccess=function(d){d=d.target.result;d.objectStoreNames.contains("firebaseLocalStorage")?b(d):gj(a).then(function(){return hj(a)}).then(function(a){b(a)}).s(function(a){c(a)})}})}
	function ij(a){a.o||(a.o=hj(a));return a.o}function dj(){try{return!!k.indexedDB}catch(a){return!1}}function jj(a){return a.objectStore("firebaseLocalStorage")}function kj(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}function lj(a){return new A(function(b,c){a.onsuccess=function(a){a&&a.target?b(a.target.result):b()};a.onerror=function(a){c(a.target.error)}})}g=cj.prototype;
	g.set=function(a,b){var c=!1,d,e=this;return ij(this).then(function(b){d=b;b=jj(kj(d,!0));return lj(b.get(a))}).then(function(f){var h=jj(kj(d,!0));if(f)return f.value=b,lj(h.put(f));e.b++;c=!0;f={};f.fbase_key=a;f.value=b;return lj(h.add(f))}).then(function(){e.c[a]=b;return mj(e,a)}).ia(function(){c&&e.b--})};function mj(a,b){return a.g&&a.h&&Ge()===a.h?aj(a.g,"keyChanged",{key:b},a.u).then(function(){}).s(function(){}):B()}
	g.get=function(a){return ij(this).then(function(b){return lj(jj(kj(b,!1)).get(a))}).then(function(a){return a&&a.value})};g.P=function(a){var b=!1,c=this;return ij(this).then(function(d){b=!0;c.b++;return lj(jj(kj(d,!0))["delete"](a))}).then(function(){delete c.c[a];return mj(c,a)}).ia(function(){b&&c.b--})};
	function ej(a){return ij(a).then(function(a){var b=jj(kj(a,!1));return b.getAll?lj(b.getAll()):new A(function(a,c){var d=[],e=b.openCursor();e.onsuccess=function(b){(b=b.target.result)?(d.push(b.value),b["continue"]()):a(d)};e.onerror=function(a){c(a.target.error)}})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=Xd(a.c,c);a.c=c}return d})}g.Y=function(a){0==this.a.length&&nj(this);this.a.push(a)};
	g.ca=function(a){w(this.a,function(b){return b==a});0==this.a.length&&oj(this)};function nj(a){function b(){a.f=setTimeout(function(){a.i=ej(a).then(function(b){0<b.length&&v(a.a,function(a){a(b)})}).then(function(){b()}).s(function(a){"STOP_EVENT"!=a.message&&b()})},800)}oj(a);b()}function oj(a){a.i&&a.i.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null)};function pj(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=B().then(function(){if(dj()){var a=se(),e="__sak"+a;fj||(fj=new cj);c=fj;return c.set(e,a).then(function(){return c.get(e)}).then(function(b){if(b!==a)throw Error("indexedDB not supported!");return c.P(e)}).then(function(){return c}).s(function(){return b.c})}return b.c}).then(function(a){b.type=a.type;a.Y(function(a){v(b.a,function(b){b(a)})});return a})}g=pj.prototype;g.get=function(a){return this.b.then(function(b){return b.get(a)})};
	g.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};g.P=function(a){return this.b.then(function(b){return b.P(a)})};g.Y=function(a){this.a.push(a)};g.ca=function(a){w(this.a,function(b){return b==a})};function qj(){this.a={};this.type="inMemory"}g=qj.prototype;g.get=function(a){return B(this.a[a])};g.set=function(a,b){this.a[a]=b;return B()};g.P=function(a){delete this.a[a];return B()};g.Y=function(){};g.ca=function(){};function rj(){if(!sj()){if("Node"==me())throw new L("internal-error","The LocalStorage compatibility library was not found.");throw new L("web-storage-unsupported");}this.a=tj()||firebase.INTERNAL.node.localStorage;this.type="localStorage"}function tj(){try{var a=k.localStorage,b=se();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
	function sj(){var a="Node"==me();a=tj()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}g=rj.prototype;g.get=function(a){var b=this;return B().then(function(){var c=b.a.getItem(a);return ye(c)})};g.set=function(a,b){var c=this;return B().then(function(){var d=we(b);null===d?c.P(a):c.a.setItem(a,d)})};g.P=function(a){var b=this;return B().then(function(){b.a.removeItem(a)})};
	g.Y=function(a){k.window&&rc(k.window,"storage",a)};g.ca=function(a){k.window&&E(k.window,"storage",a)};function uj(){this.type="nullStorage"}g=uj.prototype;g.get=function(){return B(null)};g.set=function(){return B()};g.P=function(){return B()};g.Y=function(){};g.ca=function(){};function vj(){if(!wj()){if("Node"==me())throw new L("internal-error","The SessionStorage compatibility library was not found.");throw new L("web-storage-unsupported");}this.a=xj()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage"}function xj(){try{var a=k.sessionStorage,b=se();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
	function wj(){var a="Node"==me();a=xj()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}g=vj.prototype;g.get=function(a){var b=this;return B().then(function(){var c=b.a.getItem(a);return ye(c)})};g.set=function(a,b){var c=this;return B().then(function(){var d=we(b);null===d?c.P(a):c.a.setItem(a,d)})};g.P=function(a){var b=this;return B().then(function(){b.a.removeItem(a)})};g.Y=function(){};
	g.ca=function(){};function yj(){var a={};a.Browser=zj;a.Node=Aj;a.ReactNative=Bj;a.Worker=Cj;this.a=a[me()]}var Dj,zj={A:rj,Qa:vj},Aj={A:rj,Qa:vj},Bj={A:Vi,Qa:uj},Cj={A:rj,Qa:uj};var Ej={Yc:"local",NONE:"none",$c:"session"};function Fj(a){var b=new L("invalid-persistence-type"),c=new L("unsupported-persistence-type");a:{for(d in Ej)if(Ej[d]==a){var d=!0;break a}d=!1}if(!d||"string"!==typeof a)throw b;switch(me()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;default:if(!re()&&"none"!==a)throw c;}}
	function Gj(){var a=!ze(H())&&ke()?!0:!1,b=ve(),c=re();this.o=a;this.h=b;this.l=c;this.a={};Dj||(Dj=new yj);a=Dj;try{this.g=!Ud()&&Fe()||!k.indexedDB?new a.a.A:new pj(le()?new qj:new a.a.A)}catch(d){this.g=new qj,this.h=!0}try{this.i=new a.a.Qa}catch(d){this.i=new qj}this.m=new qj;this.f=r(this.Ob,this);this.b={}}var Hj;function Ij(){Hj||(Hj=new Gj);return Hj}function Jj(a,b){switch(b){case "session":return a.i;case "none":return a.m;default:return a.g}}
	function Kj(a,b){return"firebase:"+a.name+(b?":"+b:"")}function Lj(a,b,c){var d=Kj(b,c),e=Jj(a,b.A);return a.get(b,c).then(function(f){var h=null;try{h=ye(k.localStorage.getItem(d))}catch(m){}if(h&&!f)return k.localStorage.removeItem(d),a.set(b,h,c);h&&f&&"localStorage"!=e.type&&k.localStorage.removeItem(d)})}g=Gj.prototype;g.get=function(a,b){return Jj(this,a.A).get(Kj(a,b))};function Mj(a,b,c){c=Kj(b,c);"local"==b.A&&(a.b[c]=null);return Jj(a,b.A).P(c)}
	g.set=function(a,b,c){var d=Kj(a,c),e=this,f=Jj(this,a.A);return f.set(d,b).then(function(){return f.get(d)}).then(function(b){"local"==a.A&&(e.b[d]=b)})};g.addListener=function(a,b,c){a=Kj(a,b);this.l&&(this.b[a]=k.localStorage.getItem(a));Za(this.a)&&(Jj(this,"local").Y(this.f),this.h||(Ud()||!Fe())&&k.indexedDB||!this.l||Nj(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c)};
	g.removeListener=function(a,b,c){a=Kj(a,b);this.a[a]&&(w(this.a[a],function(a){return a==c}),0==this.a[a].length&&delete this.a[a]);Za(this.a)&&(Jj(this,"local").ca(this.f),Oj(this))};function Nj(a){Oj(a);a.c=setInterval(function(){for(var b in a.a){var c=k.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new fc({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Ob(c))}},1E3)}function Oj(a){a.c&&(clearInterval(a.c),a.c=null)}
	g.Ob=function(a){if(a&&a.f){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=k.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.Wa(c))}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Jj(this,"local").ca(this.f):Oj(this);if(this.o)if(c=k.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?k.localStorage.setItem(b,d):k.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
	typeof a.a.a||f.b[b]!==k.localStorage.getItem(b))f.b[b]=k.localStorage.getItem(b),f.Wa(b)};Pb&&$b&&10==$b&&k.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c()}}else v(a,r(this.Wa,this))};g.Wa=function(a){this.a[a]&&v(this.a[a],function(a){a()})};function Pj(a){this.a=a;this.b=Ij()}var Qj={name:"authEvent",A:"local"};function Rj(a){return a.b.get(Qj,a.a).then(function(a){return qg(a)})};function Sj(){this.a=Ij()};function Tj(){this.b=-1};function Uj(a,b){this.b=Vj;this.f=k.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=k.Int32Array?new Int32Array(64):Array(64);void 0!==Wj||(k.Int32Array?Wj=new Int32Array(Xj):Wj=Xj);this.reset()}var Wj;t(Uj,Tj);for(var Vj=64,Yj=Vj-1,Zj=[],ak=0;ak<Yj;ak++)Zj[ak]=0;var bk=Ia(128,Zj);Uj.prototype.reset=function(){this.g=this.c=0;this.a=k.Int32Array?new Int32Array(this.h):Ja(this.h)};
	function ck(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,h=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+h|0}d=a.a[0]|0;e=a.a[1]|0;var m=a.a[2]|0,p=a.a[3]|0,x=a.a[4]|0,db=a.a[5]|0,la=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var Nl=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&m^e&m)|0;h=x&db^~x&la;f=f+((x>>>6|x<<26)^(x>>>11|x<<21)^(x>>>
	25|x<<7))|0;h=h+(Wj[b]|0)|0;h=f+(h+(c[b]|0)|0)|0;f=la;la=db;db=x;x=p+h|0;p=m;m=e;e=d;d=h+Nl|0}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+m|0;a.a[3]=a.a[3]+p|0;a.a[4]=a.a[4]+x|0;a.a[5]=a.a[5]+db|0;a.a[6]=a.a[6]+la|0;a.a[7]=a.a[7]+f|0}
	function dk(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if(l(b))for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(ck(a),e=0);else if(ha(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(ck(a),e=0)}else throw Error("message must be string or array");a.c=e;a.g+=c}
	var Xj=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
	4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function ek(){Uj.call(this,8,fk)}t(ek,Uj);var fk=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function gk(a,b,c,d,e){this.m=a;this.i=b;this.l=c;this.o=d||null;this.u=e||null;this.h=b+":"+c;this.v=new Sj;this.g=new Pj(this.h);this.f=null;this.b=[];this.a=this.c=null}function hk(a){return new L("invalid-cordova-configuration",a)}g=gk.prototype;
	g.ga=function(){return this.za?this.za:this.za=he().then(function(){if("function"!==typeof I("universalLinks.subscribe",k))throw hk("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof I("BuildInfo.packageName",k))throw hk("cordova-plugin-buildinfo is not installed");if("function"!==typeof I("cordova.plugins.browsertab.openUrl",k))throw hk("cordova-plugin-browsertab is not installed");if("function"!==typeof I("cordova.InAppBrowser.open",k))throw hk("cordova-plugin-inappbrowser is not installed");
	},function(){throw new L("cordova-not-ready");})};function ik(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function jk(a){var b=new ek;dk(b,a);a=[];var c=8*b.g;56>b.c?dk(b,bk,56-b.c):dk(b,bk,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;ck(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return nf(a)}
	g.Ea=function(a,b){b(new L("operation-not-supported-in-this-environment"));return B()};g.Bb=function(){return C(new L("operation-not-supported-in-this-environment"))};g.Pb=function(){return!1};g.Lb=function(){return!0};g.Gb=function(){return!0};
	g.Ca=function(a,b,c){if(this.c)return C(new L("redirect-operation-pending"));var d=this,e=k.document,f=null,h=null,m=null,p=null;return this.c=B().then(function(){og(b);return kk(d)}).then(function(){return lk(d,a,b,c)}).then(function(){return(new A(function(a,b){h=function(){var b=I("cordova.plugins.browsertab.close",k);a();"function"===typeof b&&b();d.a&&"function"===typeof d.a.close&&(d.a.close(),d.a=null);return!1};d.va(h);m=function(){f||(f=Hc(2E3).then(function(){b(new L("redirect-cancelled-by-user"))}))};
	p=function(){Ce()&&m()};e.addEventListener("resume",m,!1);H().toLowerCase().match(/android/)||e.addEventListener("visibilitychange",p,!1)})).s(function(a){return mk(d).then(function(){throw a;})})}).ia(function(){m&&e.removeEventListener("resume",m,!1);p&&e.removeEventListener("visibilitychange",p,!1);f&&f.cancel();h&&d.Ka(h);d.c=null})};
	function lk(a,b,c,d){var e=ik(),f=new pg(b,d,null,e,new L("no-auth-event")),h=I("BuildInfo.packageName",k);if("string"!==typeof h)throw new L("invalid-cordova-configuration");var m=I("BuildInfo.displayName",k),p={};if(H().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(H().toLowerCase().match(/android/))p.apn=h;else return C(new L("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);e=jk(e);p.sessionId=e;var x=Ui(a.m,a.i,a.l,b,c,null,d,a.o,p,a.u);return a.ga().then(function(){var b=
	a.h;return a.v.a.set(Qj,f.D(),b)}).then(function(){var b=I("cordova.plugins.browsertab.isAvailable",k);if("function"!==typeof b)throw new L("invalid-cordova-configuration");var c=null;b(function(b){if(b){c=I("cordova.plugins.browsertab.openUrl",k);if("function"!==typeof c)throw new L("invalid-cordova-configuration");c(x)}else{c=I("cordova.InAppBrowser.open",k);if("function"!==typeof c)throw new L("invalid-cordova-configuration");b=H();b=!(!b.match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!b.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
	a.a=c(x,b?"_blank":"_system","location=yes")}})})}function nk(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b)}catch(d){}}function kk(a){a.f||(a.f=a.ga().then(function(){return new A(function(b){function c(d){b(d);a.Ka(c);return!1}a.va(c);ok(a)})}));return a.f}function mk(a){var b=null;return Rj(a.g).then(function(c){b=c;c=a.g;return Mj(c.b,Qj,c.a)}).then(function(){return b})}
	function ok(a){function b(b){d=!0;e&&e.cancel();mk(a).then(function(d){var e=c;if(d&&b&&b.url){var f=null;e=Kf(b.url);-1!=e.indexOf("/__/auth/callback")&&(f=dd(e),f=ye(cd(f,"firebaseError")||null),f=(f="object"===typeof f?af(f):null)?new pg(d.b,d.c,null,null,f):new pg(d.b,d.c,e,d.g));e=f||c}nk(a,e)})}var c=new pg("unknown",null,null,null,new L("no-auth-event")),d=!1,e=Hc(500).then(function(){return mk(a).then(function(){d||nk(a,c)})}),f=k.handleOpenURL;k.handleOpenURL=function(a){0==a.toLowerCase().indexOf(I("BuildInfo.packageName",
	k).toLowerCase()+"://")&&b({url:a});if("function"===typeof f)try{f(a)}catch(m){console.error(m)}};sg||(sg=new rg);sg.subscribe(b)}g.va=function(a){this.b.push(a);kk(this).s(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new pg("unknown",null,null,null,new L("no-auth-event")),a(b))})};g.Ka=function(a){w(this.b,function(b){return b==a})};function pk(a){this.a=a;this.b=Ij()}var qk={name:"pendingRedirect",A:"session"};function rk(a){return a.b.set(qk,"pending",a.a)}function sk(a){return Mj(a.b,qk,a.a)}function tk(a){return a.b.get(qk,a.a).then(function(a){return"pending"==a})};function uk(a,b,c){this.u=a;this.l=b;this.m=c;this.h=[];this.f=!1;this.i=r(this.ab,this);this.b=new vk;this.o=new wk;this.g=new pk(this.l+":"+this.m);this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.o;this.c.linkViaPopup=this.o;this.c.reauthViaPopup=this.o;this.a=xk(this.u,this.l,this.m,Bi)}function xk(a,b,c,d){var e=firebase.SDK_VERSION||null;return ie()?new gk(a,b,c,e,d):new Oi(a,b,c,e,d)}g=uk.prototype;
	g.reset=function(){this.f=!1;this.a.Ka(this.i);this.a=xk(this.u,this.l,this.m)};g.Xa=function(){this.b.Xa()};function yk(a){a.f||(a.f=!0,a.a.va(a.i));var b=a.a;return a.a.ga().s(function(c){a.a==b&&a.reset();throw c;})}function zk(a){a.a.Lb()&&yk(a).s(function(b){var c=new pg("unknown",null,null,null,new L("operation-not-supported-in-this-environment"));Ak(b)&&a.ab(c)});a.a.Gb()||Bk(a.b)}
	g.subscribe=function(a){Ga(this.h,a)||this.h.push(a);if(!this.f){var b=this;tk(this.g).then(function(a){a?sk(b.g).then(function(){yk(b).s(function(a){var c=new pg("unknown",null,null,null,new L("operation-not-supported-in-this-environment"));Ak(a)&&b.ab(c)})}):zk(b)}).s(function(){zk(b)})}};g.unsubscribe=function(a){w(this.h,function(b){return b==a})};
	g.ab=function(a){if(!a)throw new L("invalid-auth-event");for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.ub(a.b,a.c)){(b=this.c[a.b])&&b.h(a,d);b=!0;break}}Bk(this.b);return b};var Ck=new Be(2E3,1E4),Dk=new Be(3E4,6E4);uk.prototype.fa=function(){return this.b.fa()};function Ek(a,b,c,d,e,f){return a.a.Bb(b,c,d,function(){a.f||(a.f=!0,a.a.va(a.i))},function(){a.reset()},e,f)}function Ak(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
	uk.prototype.Ca=function(a,b,c){var d=this,e;return rk(this.g).then(function(){return d.a.Ca(a,b,c).s(function(a){if(Ak(a))throw new L("operation-not-supported-in-this-environment");e=a;return sk(d.g).then(function(){throw e;})}).then(function(){return d.a.Pb()?new A(function(){}):sk(d.g).then(function(){return d.fa()}).then(function(){}).s(function(){})})})};uk.prototype.Ea=function(a,b,c,d){return this.a.Ea(c,function(c){a.ha(b,null,c,d)},Ck.get())};var Fk={};
	function Gk(a,b,c){var d=b+":"+c;Fk[d]||(Fk[d]=new uk(a,b,c));return Fk[d]}function vk(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1}vk.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null)};
	vk.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.b,d=a.c,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Hk(this,!0,null,a.a),B()):b.wa(c,d)?Ik(this,a,b):C(new L("invalid-auth-event")):(Hk(this,!1,null,null),B())}else C(new L("invalid-auth-event"))};function Bk(a){a.g||(a.g=!0,Hk(a,!1,null,null))}vk.prototype.Xa=function(){this.g&&!this.i&&Hk(this,!1,null,null)};
	function Ik(a,b,c){c=c.wa(b.b,b.c);var d=b.f,e=b.g,f=!!b.b.match(/Redirect$/);c(d,e).then(function(b){Hk(a,f,b,null)}).s(function(b){Hk(a,f,null,b)})}function Jk(a,b){a.b=function(){return C(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b)}function Kk(a,b){a.b=function(){return B(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b)}function Hk(a,b,c,d){b?d?Jk(a,d):Kk(a,c):Kk(a,{user:null});a.f=[];a.c=[]}
	vk.prototype.fa=function(){var a=this;return new A(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),Lk(a))})};function Lk(a){var b=new L("timeout");a.a&&a.a.cancel();a.a=Hc(Dk.get()).then(function(){a.b||(a.g=!0,Hk(a,!0,null,b))})}function wk(){}wk.prototype.h=function(a,b){if(a){var c=a.b,d=a.c;a.a?(b.ha(a.b,null,a.a,a.c),B()):b.wa(c,d)?Mk(a,b):C(new L("invalid-auth-event"))}else C(new L("invalid-auth-event"))};
	function Mk(a,b){var c=a.c,d=a.b;b.wa(d,c)(a.f,a.g).then(function(a){b.ha(d,a,null,c)}).s(function(a){b.ha(d,null,a,c)})};function Nk(){this.rb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.rb},set:function(a){this.rb=a},enumerable:!1})};function Ok(a,b){this.a=b;J(this,"verificationId",a)}Ok.prototype.confirm=function(a){a=mg(this.verificationId,a);return this.a(a)};function Pk(a,b,c,d){return(new kg(a)).Ta(b,c).then(function(a){return new Ok(a,d)})};function Qk(a){var b=vf(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new L("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");K(this,{token:a,expirationTime:Ee(1E3*b.exp),authTime:Ee(1E3*b.auth_time),issuedAtTime:Ee(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,claims:b})};function Rk(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}Rk.prototype.start=function(){this.a=this.c;Sk(this,!0)};function Tk(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function Sk(a,b){a.stop();a.b=Hc(Tk(a,b)).then(function(){return De()}).then(function(){return a.h()}).then(function(){Sk(a,!0)}).s(function(b){a.i(b)&&Sk(a,!1)})}
	Rk.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)};function Uk(a){this.f=a;this.b=this.a=null;this.c=0}Uk.prototype.D=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}};function Vk(a,b){var c=b[M],d=b.refreshToken;b=Wk(b.expiresIn);a.b=c;a.c=b;a.a=d}function Xk(a,b){a.b=b.b;a.a=b.a;a.c=b.c}function Wk(a){return oa()+1E3*parseInt(a,10)}
	function Yk(a,b){return Ph(a.f,b).then(function(b){a.b=b.access_token;a.c=Wk(b.expires_in);a.a=b.refresh_token;return{accessToken:a.b,expirationTime:a.c,refreshToken:a.a}}).s(function(b){"auth/user-token-expired"==b.code&&(a.a=null);throw b;})}Uk.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?C(new L("user-token-expired")):a||!this.b||oa()>this.c-3E4?this.a?Yk(this,{grant_type:"refresh_token",refresh_token:this.a}):B(null):B({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})};function Zk(a,b){this.a=a||null;this.b=b||null;K(this,{lastSignInTime:Ee(b||null),creationTime:Ee(a||null)})}function $k(a){return new Zk(a.a,a.b)}Zk.prototype.D=function(){return{lastLoginAt:this.b,createdAt:this.a}};function al(a,b,c,d,e,f){K(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b})}function bl(a,b){D.call(this,a);for(var c in b)this[c]=b[c]}t(bl,D);
	function Q(a,b,c){this.G=[];this.m=a.apiKey;this.o=a.appName;this.u=a.authDomain||null;a=firebase.SDK_VERSION?qe(firebase.SDK_VERSION):null;this.b=new Dh(this.m,Ai(Bi),a);this.h=new Uk(this.b);cl(this,b[M]);Vk(this.h,b);J(this,"refreshToken",this.h.a);dl(this,c||{});F.call(this);this.I=!1;this.u&&te()&&(this.a=Gk(this.u,this.m,this.o));this.N=[];this.i=null;this.w=el(this);this.V=r(this.Ha,this);var d=this;this.ka=null;this.sa=function(a){d.oa(a.g)};this.X=null;this.O=[];this.ra=function(a){fl(d,
	a.c)};this.W=null}t(Q,F);Q.prototype.oa=function(a){this.ka=a;Jh(this.b,a)};Q.prototype.ea=function(){return this.ka};function gl(a,b){a.X&&E(a.X,"languageCodeChanged",a.sa);(a.X=b)&&rc(b,"languageCodeChanged",a.sa)}function fl(a,b){a.O=b;Kh(a.b,firebase.SDK_VERSION?qe(firebase.SDK_VERSION,a.O):null)}Q.prototype.xa=function(){return Ja(this.O)};function hl(a,b){a.W&&E(a.W,"frameworkChanged",a.ra);(a.W=b)&&rc(b,"frameworkChanged",a.ra)}Q.prototype.Ha=function(){this.w.b&&(this.w.stop(),this.w.start())};
	function il(a){try{return firebase.app(a.o).auth()}catch(b){throw new L("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.o+"'!");}}function el(a){return new Rk(function(){return a.F(!0)},function(a){return a&&"auth/network-request-failed"==a.code?!0:!1},function(){var b=a.h.c-oa()-3E5;return 0<b?b:0})}function jl(a){a.C||a.w.b||(a.w.start(),E(a,"tokenChanged",a.V),rc(a,"tokenChanged",a.V))}function kl(a){E(a,"tokenChanged",a.V);a.w.stop()}
	function cl(a,b){a.qa=b;J(a,"_lat",b)}function ll(a,b){w(a.N,function(a){return a==b})}function ml(a){for(var b=[],c=0;c<a.N.length;c++)b.push(a.N[c](a));return wb(b).then(function(){return a})}function nl(a){a.a&&!a.I&&(a.I=!0,a.a.subscribe(a))}
	function dl(a,b){K(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,metadata:new Zk(b.createdAt,b.lastLoginAt),providerData:[]})}J(Q.prototype,"providerId","firebase");function ol(){}function pl(a){return B().then(function(){if(a.C)throw new L("app-deleted");})}function ql(a){return Ca(a.providerData,function(a){return a.providerId})}
	function rl(a,b){b&&(sl(a,b.providerId),a.providerData.push(b))}function sl(a,b){w(a.providerData,function(a){return a.providerId==b})}function tl(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&J(a,b,c)}
	function ul(a,b){a!=b&&(K(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,providerData:[]}),b.metadata?J(a,"metadata",$k(b.metadata)):J(a,"metadata",new Zk),v(b.providerData,function(b){rl(a,b)}),Xk(a.h,b.h),J(a,"refreshToken",a.h.a))}g=Q.prototype;g.reload=function(){var a=this;return R(this,pl(this).then(function(){return vl(a).then(function(){return ml(a)}).then(ol)}))};
	function vl(a){return a.F().then(function(b){var c=a.isAnonymous;return wl(a,b).then(function(){c||tl(a,"isAnonymous",!1);return b})})}g.cc=function(a){return this.F(a).then(function(a){return new Qk(a)})};g.F=function(a){var b=this;return R(this,pl(this).then(function(){return b.h.getToken(a)}).then(function(a){if(!a)throw new L("internal-error");a.accessToken!=b.qa&&(cl(b,a.accessToken),b.dispatchEvent(new bl("tokenChanged")));tl(b,"refreshToken",a.refreshToken);return a.accessToken}))};
	function xl(a,b){b[M]&&a.qa!=b[M]&&(Vk(a.h,b),a.dispatchEvent(new bl("tokenChanged")),cl(a,b[M]),tl(a,"refreshToken",a.h.a))}function wl(a,b){return P(a.b,wi,{idToken:b}).then(r(a.wc,a))}
	g.wc=function(a){a=a.users;if(!a||!a.length)throw new L("internal-error");a=a[0];dl(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt});for(var b=yl(a),c=0;c<b.length;c++)rl(this,b[c]);tl(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length))};
	function yl(a){return(a=a.providerUserInfo)&&a.length?Ca(a,function(a){return new al(a.rawId,a.providerId,a.email,a.displayName,a.photoUrl,a.phoneNumber)}):[]}g.fb=function(a){var b=this,c=null;return R(this,a.f(this.b,this.uid).then(function(a){xl(b,a);c=zl(b,a,"reauthenticate");b.i=null;return b.reload()}).then(function(){return c}),!0)};
	g.xc=function(a){Je("firebase.User.prototype.reauthenticateWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential instead.");return this.fb(a).then(function(){})};function Al(a,b){return vl(a).then(function(){if(Ga(ql(a),b))return ml(a).then(function(){throw new L("provider-already-linked");})})}
	g.cb=function(a){var b=this,c=null;return R(this,Al(this,a.providerId).then(function(){return b.F()}).then(function(c){return a.c(b.b,c)}).then(function(a){c=zl(b,a,"link");return Bl(b,a)}).then(function(){return c}))};g.oc=function(a){Je("firebase.User.prototype.linkWithCredential is deprecated. Please use firebase.User.prototype.linkAndRetrieveDataWithCredential instead.");return this.cb(a).then(function(a){return a.user})};
	g.pc=function(a,b){var c=this;return R(this,Al(this,"phone").then(function(){return Pk(il(c),a,b,r(c.cb,c))}))};g.yc=function(a,b){var c=this;return R(this,B().then(function(){return Pk(il(c),a,b,r(c.fb,c))}),!0)};function zl(a,b,c){var d=ng(b);b=Af(b);return Me({user:a,credential:d,additionalUserInfo:b,operationType:c})}function Bl(a,b){xl(a,b);return a.reload().then(function(){return a})}
	g.ob=function(a){var b=this;return R(this,this.F().then(function(c){return b.b.ob(c,a)}).then(function(a){xl(b,a);return b.reload()}))};g.Qc=function(a){var b=this;return R(this,this.F().then(function(c){return a.c(b.b,c)}).then(function(a){xl(b,a);return b.reload()}))};g.pb=function(a){var b=this;return R(this,this.F().then(function(c){return b.b.pb(c,a)}).then(function(a){xl(b,a);return b.reload()}))};
	g.qb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return pl(this);var b=this;return R(this,this.F().then(function(c){return b.b.qb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(a){xl(b,a);tl(b,"displayName",a.displayName||null);tl(b,"photoURL",a.photoUrl||null);v(b.providerData,function(a){"password"===a.providerId&&(J(a,"displayName",b.displayName),J(a,"photoURL",b.photoURL))});return ml(b)}).then(ol))};
	g.Oc=function(a){var b=this;return R(this,vl(this).then(function(c){return Ga(ql(b),a)?ii(b.b,c,[a]).then(function(a){var c={};v(a.providerUserInfo||[],function(a){c[a.providerId]=!0});v(ql(b),function(a){c[a]||sl(b,a)});c[kg.PROVIDER_ID]||J(b,"phoneNumber",null);return ml(b)}):ml(b).then(function(){throw new L("no-such-provider");})}))};
	g.delete=function(){var a=this;return R(this,this.F().then(function(b){return P(a.b,vi,{idToken:b})}).then(function(){a.dispatchEvent(new bl("userDeleted"))})).then(function(){for(var b=0;b<a.G.length;b++)a.G[b].cancel("app-deleted");gl(a,null);hl(a,null);a.G=[];a.C=!0;kl(a);J(a,"refreshToken",null);a.a&&a.a.unsubscribe(a)})};
	g.ub=function(a,b){return"linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.aa||null)==b||"reauthViaRedirect"==a&&(this.aa||null)==b?!0:!1};g.ha=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)};
	g.wa=function(a,b){return"linkViaPopup"==a&&b==(this.g||null)?r(this.zb,this):"reauthViaPopup"==a&&b==(this.g||null)?r(this.Ab,this):"linkViaRedirect"==a&&(this.aa||null)==b?r(this.zb,this):"reauthViaRedirect"==a&&(this.aa||null)==b?r(this.Ab,this):null};g.qc=function(a){var b=this;return Cl(this,"linkViaPopup",a,function(){return Al(b,a.providerId).then(function(){return ml(b)})},!1)};g.zc=function(a){return Cl(this,"reauthViaPopup",a,function(){return B()},!0)};
	function Cl(a,b,c,d,e){if(!te())return C(new L("operation-not-supported-in-this-environment"));if(a.i&&!e)return C(a.i);var f=zf(c.providerId),h=se(a.uid+":::"),m=null;(!ve()||ke())&&a.u&&c.isOAuthProvider&&(m=Ui(a.u,a.m,a.o,b,c,null,h,firebase.SDK_VERSION||null));var p=ce(m,f&&f.Ba,f&&f.Aa);d=d().then(function(){Dl(a);if(!e)return a.F().then(function(){})}).then(function(){return Ek(a.a,p,b,c,h,!!m)}).then(function(){return new A(function(c,d){a.ha(b,null,new L("cancelled-popup-request"),a.g||null);
	a.f=c;a.v=d;a.g=h;a.c=a.a.Ea(a,b,p,h)})}).then(function(a){p&&be(p);return a?Me(a):null}).s(function(a){p&&be(p);throw a;});return R(a,d,e)}g.rc=function(a){var b=this;return El(this,"linkViaRedirect",a,function(){return Al(b,a.providerId)},!1)};g.Ac=function(a){return El(this,"reauthViaRedirect",a,function(){return B()},!0)};
	function El(a,b,c,d,e){if(!te())return C(new L("operation-not-supported-in-this-environment"));if(a.i&&!e)return C(a.i);var f=null,h=se(a.uid+":::");d=d().then(function(){Dl(a);if(!e)return a.F().then(function(){})}).then(function(){a.aa=h;return ml(a)}).then(function(b){a.ba&&(b=a.ba,b=b.b.set(Fl,a.D(),b.a));return b}).then(function(){return a.a.Ca(b,c,h)}).s(function(b){f=b;if(a.ba)return Gl(a.ba);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
	function Dl(a){if(!a.a||!a.I){if(a.a&&!a.I)throw new L("internal-error");throw new L("auth-domain-config-required");}}g.zb=function(a,b){var c=this;this.c&&(this.c.cancel(),this.c=null);var d=null,e=this.F().then(function(d){return Pf(c.b,{requestUri:a,sessionId:b,idToken:d})}).then(function(a){d=zl(c,a,"link");return Bl(c,a)}).then(function(){return d});return R(this,e)};
	g.Ab=function(a,b){var c=this;this.c&&(this.c.cancel(),this.c=null);var d=null,e=B().then(function(){return Lf(Qf(c.b,{requestUri:a,sessionId:b}),c.uid)}).then(function(a){d=zl(c,a,"reauthenticate");xl(c,a);c.i=null;return c.reload()}).then(function(){return d});return R(this,e,!0)};g.ib=function(a){var b=this,c=null;return R(this,this.F().then(function(b){c=b;return"undefined"===typeof a||Za(a)?{}:mf(new bf(a))}).then(function(a){return b.b.ib(c,a)}).then(function(a){if(b.email!=a)return b.reload()}).then(function(){}))};
	function R(a,b,c){var d=Hl(a,b,c);a.G.push(d);d.ia(function(){Ha(a.G,d)});return d}function Hl(a,b,c){return a.i&&!c?(b.cancel(),C(a.i)):b.s(function(b){!b||"auth/user-disabled"!=b.code&&"auth/user-token-expired"!=b.code||(a.i||a.dispatchEvent(new bl("userInvalidated")),a.i=b);throw b;})}g.toJSON=function(){return this.D()};
	g.D=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.m,appName:this.o,authDomain:this.u,stsTokenManager:this.h.D(),redirectEventId:this.aa||null};this.metadata&&bb(a,this.metadata.D());v(this.providerData,function(b){a.providerData.push(Ne(b))});return a};
	function Il(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken&&a.stsTokenManager.expirationTime)c[M]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null,c.expiresIn=(a.stsTokenManager.expirationTime-oa())/1E3;else return null;var d=new Q(b,c,a);a.providerData&&v(a.providerData,function(a){a&&rl(d,Me(a))});a.redirectEventId&&(d.aa=a.redirectEventId);return d}
	function Jl(a,b,c,d){var e=new Q(a,b);c&&(e.ba=c);d&&fl(e,d);return e.reload().then(function(){return e})}function Kl(a,b,c,d){b=b||{apiKey:a.m,authDomain:a.u,appName:a.o};var e=a.h,f={};f[M]=e.b;f.refreshToken=e.a;f.expiresIn=(e.c-oa())/1E3;b=new Q(b,f);c&&(b.ba=c);d&&fl(b,d);ul(b,a);return b};function Ll(a){this.a=a;this.b=Ij()}var Fl={name:"redirectUser",A:"session"};function Gl(a){return Mj(a.b,Fl,a.a)}function Ml(a,b){return a.b.get(Fl,a.a).then(function(a){a&&b&&(a.authDomain=b);return Il(a||{})})};function Ol(a){this.a=a;this.b=Ij();this.c=null;this.f=Pl(this);this.b.addListener(Ql("local"),this.a,r(this.g,this))}Ol.prototype.g=function(){var a=this,b=Ql("local");Rl(this,function(){return B().then(function(){return a.c&&"local"!=a.c.A?a.b.get(b,a.a):null}).then(function(c){if(c)return Sl(a,"local").then(function(){a.c=b})})})};function Sl(a,b){var c=[],d;for(d in Ej)Ej[d]!==b&&c.push(Mj(a.b,Ql(Ej[d]),a.a));c.push(Mj(a.b,Tl,a.a));return vb(c)}
	function Pl(a){var b=Ql("local"),c=Ql("session"),d=Ql("none");return Lj(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(c){return c?d:a.b.get(b,a.a).then(function(c){return c?b:a.b.get(Tl,a.a).then(function(a){return a?Ql(a):b})})})}).then(function(b){a.c=b;return Sl(a,b.A)}).s(function(){a.c||(a.c=b)})}var Tl={name:"persistence",A:"session"};function Ql(a){return{name:"authUser",A:a}}
	Ol.prototype.lb=function(a){var b=null,c=this;Fj(a);return Rl(this,function(){return a!=c.c.A?c.b.get(c.c,c.a).then(function(d){b=d;return Sl(c,a)}).then(function(){c.c=Ql(a);if(b)return c.b.set(c.c,b,c.a)}):B()})};function Ul(a){return Rl(a,function(){return a.b.set(Tl,a.c.A,a.a)})}function Vl(a,b){return Rl(a,function(){return a.b.set(a.c,b.D(),a.a)})}function Wl(a){return Rl(a,function(){return Mj(a.b,a.c,a.a)})}
	function Xl(a,b){return Rl(a,function(){return a.b.get(a.c,a.a).then(function(a){a&&b&&(a.authDomain=b);return Il(a||{})})})}function Rl(a,b){a.f=a.f.then(b,b);return a.f};function Yl(a){this.m=!1;J(this,"settings",new Nk);J(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?qe(firebase.SDK_VERSION):null,this.b=new Dh(S(this).options&&S(this).options.apiKey,Ai(Bi),a);else throw new L("invalid-api-key");this.N=[];this.o=[];this.I=[];this.Sb=firebase.INTERNAL.createSubscribe(r(this.kc,this));this.O=void 0;this.Tb=firebase.INTERNAL.createSubscribe(r(this.mc,this));Zl(this,null);this.h=new Ol(S(this).options.apiKey+":"+S(this).name);this.w=
	new Ll(S(this).options.apiKey+":"+S(this).name);this.V=T(this,$l(this));this.i=T(this,am(this));this.X=!1;this.ka=r(this.Lc,this);this.Ha=r(this.Z,this);this.qa=r(this.ac,this);this.ra=r(this.ic,this);this.sa=r(this.jc,this);bm(this);this.INTERNAL={};this.INTERNAL["delete"]=r(this.delete,this);this.INTERNAL.logFramework=r(this.sc,this);this.u=0;F.call(this);cm(this);this.G=[]}t(Yl,F);function dm(a){D.call(this,"languageCodeChanged");this.g=a}t(dm,D);
	function em(a){D.call(this,"frameworkChanged");this.c=a}t(em,D);g=Yl.prototype;g.lb=function(a){a=this.h.lb(a);return T(this,a)};g.oa=function(a){this.W===a||this.m||(this.W=a,Jh(this.b,this.W),this.dispatchEvent(new dm(this.ea())))};g.ea=function(){return this.W};g.Rc=function(){var a=k.navigator;this.oa(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null)};g.sc=function(a){this.G.push(a);Kh(this.b,firebase.SDK_VERSION?qe(firebase.SDK_VERSION,this.G):null);this.dispatchEvent(new em(this.G))};
	g.xa=function(){return Ja(this.G)};function cm(a){Object.defineProperty(a,"lc",{get:function(){return this.ea()},set:function(a){this.oa(a)},enumerable:!1});a.W=null}g.toJSON=function(){return{apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).D()}};function fm(a){return a.Rb||C(new L("auth-domain-config-required"))}
	function bm(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&te()&&(a.Rb=a.V.then(function(){if(!a.m){a.a=Gk(b,c,S(a).name);a.a.subscribe(a);U(a)&&nl(U(a));if(a.C){nl(a.C);var d=a.C;d.oa(a.ea());gl(d,a);d=a.C;fl(d,a.G);hl(d,a);a.C=null}return a.a}}))}g.ub=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return!0;case "signInViaPopup":return this.g==b&&!!this.f;default:return!1}};
	g.ha=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)};g.wa=function(a,b){return"signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?r(this.$b,this):null};
	g.$b=function(a,b){var c=this;a={requestUri:a,sessionId:b};this.c&&(this.c.cancel(),this.c=null);var d=null,e=null,f=Nf(c.b,a).then(function(a){d=ng(a);e=Af(a);return a});a=c.V.then(function(){return f}).then(function(a){return gm(c,a)}).then(function(){return Me({user:U(c),credential:d,additionalUserInfo:e,operationType:"signIn"})});return T(this,a)};
	g.Jc=function(a){if(!te())return C(new L("operation-not-supported-in-this-environment"));var b=this,c=zf(a.providerId),d=se(),e=null;(!ve()||ke())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=Ui(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null));var f=ce(e,c&&c.Ba,c&&c.Aa);c=fm(this).then(function(b){return Ek(b,f,"signInViaPopup",a,d,!!e)}).then(function(){return new A(function(a,c){b.ha("signInViaPopup",null,new L("cancelled-popup-request"),
	b.g);b.f=a;b.v=c;b.g=d;b.c=b.a.Ea(b,"signInViaPopup",f,d)})}).then(function(a){f&&be(f);return a?Me(a):null}).s(function(a){f&&be(f);throw a;});return T(this,c)};g.Kc=function(a){if(!te())return C(new L("operation-not-supported-in-this-environment"));var b=this,c=fm(this).then(function(){return Ul(b.h)}).then(function(){return b.a.Ca("signInViaRedirect",a)});return T(this,c)};
	g.fa=function(){if(!te())return C(new L("operation-not-supported-in-this-environment"));var a=this,b=fm(this).then(function(){return a.a.fa()}).then(function(a){return a?Me(a):null});return T(this,b)};
	g.Pc=function(a){if(!a)return C(new L("null-user"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=Kl(a,c,b.w,b.xa());return T(this,this.i.then(function(){if(S(b).options.apiKey!=a.m)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return ul(U(b),a),b.Z(a);Zl(b,d);nl(d);return b.Z(d)}).then(function(){hm(b)}))};
	function gm(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;return a.V.then(function(){return Jl(c,b,a.w,a.xa())}).then(function(b){if(U(a)&&b.uid==U(a).uid)return ul(U(a),b),a.Z(b);Zl(a,b);nl(b);return a.Z(b)}).then(function(){hm(a)})}
	function Zl(a,b){U(a)&&(ll(U(a),a.Ha),E(U(a),"tokenChanged",a.qa),E(U(a),"userDeleted",a.ra),E(U(a),"userInvalidated",a.sa),kl(U(a)));b&&(b.N.push(a.Ha),rc(b,"tokenChanged",a.qa),rc(b,"userDeleted",a.ra),rc(b,"userInvalidated",a.sa),0<a.u&&jl(b));J(a,"currentUser",b);b&&(b.oa(a.ea()),gl(b,a),fl(b,a.G),hl(b,a))}g.mb=function(){var a=this,b=this.i.then(function(){if(!U(a))return B();Zl(a,null);return Wl(a.h).then(function(){hm(a)})});return T(this,b)};
	function im(a){var b=Ml(a.w,S(a).options.authDomain).then(function(b){if(a.C=b)b.ba=a.w;return Gl(a.w)});return T(a,b)}function $l(a){var b=S(a).options.authDomain,c=im(a).then(function(){return Xl(a.h,b)}).then(function(b){return b?(b.ba=a.w,a.C&&(a.C.aa||null)==(b.aa||null)?b:b.reload().then(function(){return Vl(a.h,b).then(function(){return b})}).s(function(c){return"auth/network-request-failed"==c.code?b:Wl(a.h)})):null}).then(function(b){Zl(a,b||null)});return T(a,c)}
	function am(a){return a.V.then(function(){return a.fa()}).s(function(){}).then(function(){if(!a.m)return a.ka()}).s(function(){}).then(function(){if(!a.m){a.X=!0;var b=a.h;b.b.addListener(Ql("local"),b.a,a.ka)}})}
	g.Lc=function(){var a=this;return Xl(this.h,S(this).options.authDomain).then(function(b){if(!a.m){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d}if(c)return ul(U(a),b),U(a).F();if(U(a)||b)Zl(a,b),b&&(nl(b),b.ba=a.w),a.a&&a.a.subscribe(a),hm(a)}})};g.Z=function(a){return Vl(this.h,a)};g.ac=function(){hm(this);this.Z(U(this))};g.ic=function(){this.mb()};g.jc=function(){this.mb()};
	function jm(a,b){var c=null,d=null;return T(a,b.then(function(b){c=ng(b);d=Af(b);return gm(a,b)}).then(function(){return Me({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}g.kc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b))})};g.mc=function(a){var b=this;km(this,function(){a.next(U(b))})};g.uc=function(a,b,c){var d=this;this.X&&firebase.Promise.resolve().then(function(){n(a)?a(U(d)):n(a.next)&&a.next(U(d))});return this.Sb(a,b,c)};
	g.tc=function(a,b,c){var d=this;this.X&&firebase.Promise.resolve().then(function(){d.O=d.getUid();n(a)?a(U(d)):n(a.next)&&a.next(U(d))});return this.Tb(a,b,c)};g.bc=function(a){var b=this,c=this.i.then(function(){return U(b)?U(b).F(a).then(function(a){return{accessToken:a}}):null});return T(this,c)};g.Mb=function(a){var b=this;return this.i.then(function(){return jm(b,P(b.b,yi,{token:a}))}).then(function(a){var c=a.user;tl(c,"isAnonymous",!1);b.Z(c);return a})};
	g.Dc=function(a){Je("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCustomToken is deprecated. Please use firebase.auth.Auth.prototype.signInWithCustomToken instead.");return this.Mb(a)};g.Ec=function(a,b){Je("firebase.auth.Auth.prototype.signInAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.signInWithEmailAndPassword instead.");return this.Nb(a,b)};g.Nb=function(a,b){var c=this;return this.i.then(function(){return jm(c,P(c.b,bg,{email:a,password:b}))})};
	g.wb=function(a,b){var c=this;return this.i.then(function(){return jm(c,P(c.b,ui,{email:a,password:b}))})};g.Vb=function(a,b){Je("firebase.auth.Auth.prototype.createUserAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.createUserWithEmailAndPassword instead.");return this.wb(a,b)};g.Gc=function(a){Je("firebase.auth.Auth.prototype.signInWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential instead.");return this.Oa(a).then(function(a){return a.user})};
	g.Oa=function(a){var b=this;return this.i.then(function(){return jm(b,a.ya(b.b))})};g.Pa=function(){var a=this;return this.i.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=Me({providerId:null,isNewUser:!1});return Me({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return jm(a,a.b.Pa()).then(function(b){var c=b.user;tl(c,"isAnonymous",!0);a.Z(c);return b})})};
	g.Fc=function(){Je("firebase.auth.Auth.prototype.signInAnonymouslyAndRetrieveData is deprecated. Please use firebase.auth.Auth.prototype.signInAnonymously instead.");return this.Pa()};function S(a){return a.app}function U(a){return a.currentUser}g.getUid=function(){return U(this)&&U(this).uid||null};function lm(a){return U(a)&&U(a)._lat||null}
	function hm(a){if(a.X){for(var b=0;b<a.o.length;b++)if(a.o[b])a.o[b](lm(a));if(a.O!==a.getUid()&&a.I.length)for(a.O=a.getUid(),b=0;b<a.I.length;b++)if(a.I[b])a.I[b](lm(a))}}g.Ub=function(a){this.addAuthTokenListener(a);this.u++;0<this.u&&U(this)&&jl(U(this))};g.Bc=function(a){var b=this;v(this.o,function(c){c==a&&b.u--});0>this.u&&(this.u=0);0==this.u&&U(this)&&kl(U(this));this.removeAuthTokenListener(a)};
	g.addAuthTokenListener=function(a){var b=this;this.o.push(a);T(this,this.i.then(function(){b.m||Ga(b.o,a)&&a(lm(b))}))};g.removeAuthTokenListener=function(a){w(this.o,function(b){return b==a})};function km(a,b){a.I.push(b);T(a,a.i.then(function(){!a.m&&Ga(a.I,b)&&a.O!==a.getUid()&&(a.O=a.getUid(),b(lm(a)))}))}
	g.delete=function(){this.m=!0;for(var a=0;a<this.N.length;a++)this.N[a].cancel("app-deleted");this.N=[];this.h&&(a=this.h,a.b.removeListener(Ql("local"),a.a,this.ka));this.a&&(this.a.unsubscribe(this),this.a.Xa());return firebase.Promise.resolve()};function T(a,b){a.N.push(b);b.ia(function(){Ha(a.N,b)});return b}
	g.Yb=function(a){Je("firebase.auth.Auth.prototype.fetchProvidersForEmail is deprecated. Please use firebase.auth.Auth.prototype.fetchSignInMethodsForEmail instead.");return T(this,Uh(this.b,a))};g.Zb=function(a){return T(this,Wh(this.b,a))};g.nc=function(a){return!!fg(a)};g.kb=function(a,b){var c=this;return T(this,B().then(function(){var a=new bf(b);if(!a.c)throw new L("argument-error",kf+" must be true when sending sign in link to email");return mf(a)}).then(function(b){return c.b.kb(a,b)}).then(function(){}))};
	g.Sc=function(a){return this.Ja(a).then(function(a){return a.data.email})};g.Ya=function(a,b){return T(this,this.b.Ya(a,b).then(function(){}))};g.Ja=function(a){return T(this,this.b.Ja(a).then(function(a){return new Qe(a)}))};g.Va=function(a){return T(this,this.b.Va(a).then(function(){}))};g.jb=function(a,b){var c=this;return T(this,B().then(function(){return"undefined"===typeof b||Za(b)?{}:mf(new bf(b))}).then(function(b){return c.b.jb(a,b)}).then(function(){}))};
	g.Ic=function(a,b){return T(this,Pk(this,a,b,r(this.Oa,this)))};g.Hc=function(a,b){var c=this;return T(this,B().then(function(){var d=eg(a,b||Vd());return c.Oa(d)}))};function mm(){}mm.prototype.render=function(){};mm.prototype.reset=function(){};mm.prototype.getResponse=function(){};mm.prototype.execute=function(){};function nm(){this.a={};this.b=1E12}var om=null;nm.prototype.render=function(a,b){this.a[this.b.toString()]=new pm(a,b);return this.b++};nm.prototype.reset=function(a){var b=qm(this,a);a=rm(a);b&&a&&(b.delete(),delete this.a[a])};nm.prototype.getResponse=function(a){return(a=qm(this,a))?a.getResponse():null};nm.prototype.execute=function(a){(a=qm(this,a))&&a.execute()};function qm(a,b){return(b=rm(b))?a.a[b]||null:null}function rm(a){return(a="undefined"===typeof a?1E12:a)?a.toString():null}
	function pm(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=Id(a);var c=this;this.i=function(){c.execute()};this.h?this.execute():rc(this.f,"click",this.i)}pm.prototype.getResponse=function(){sm(this);return this.b};
	pm.prototype.execute=function(){sm(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=oe();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b)}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c()}catch(d){}a.h&&a.execute()},6E4)},500))};pm.prototype.delete=function(){sm(this);this.g=!0;clearTimeout(this.a);this.a=null;E(this.f,"click",this.i)};function sm(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");};function tm(){}tm.prototype.g=function(){om||(om=new nm);return B(om)};tm.prototype.c=function(){};var um=null;function vm(){this.b=k.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString()}var wm=qd("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),xm=new Be(3E4,6E4);
	vm.prototype.g=function(a){var b=this;return new A(function(c,d){var e=setTimeout(function(){d(new L("network-request-failed"))},xm.get());if(!k.grecaptcha||a!==b.f&&!b.b){k[b.a]=function(){if(k.grecaptcha){b.f=a;var f=k.grecaptcha.render;k.grecaptcha.render=function(a,c){a=f(a,c);b.b++;return a};clearTimeout(e);c(k.grecaptcha)}else clearTimeout(e),d(new L("internal-error"));delete k[b.a]};var f=ud(wm,{onload:b.a,hl:a||""});B(vh(f)).s(function(){clearTimeout(e);d(new L("internal-error","Unable to load external reCAPTCHA dependencies!"))})}else clearTimeout(e),
	c(k.grecaptcha)})};vm.prototype.c=function(){this.b--};var ym=null;function zm(a,b,c,d,e,f,h){J(this,"type","recaptcha");this.c=this.f=null;this.C=!1;this.m=b;this.g=null;h?(um||(um=new tm),h=um):(ym||(ym=new vm),h=ym);this.o=h;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[Am])throw new L("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[Bm];if(!k.document)throw new L("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
	if(!Id(b)||!this.i&&Id(b).hasChildNodes())throw new L("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new Dh(a,f||null,e||null);this.v=d||function(){return null};var m=this;this.l=[];var p=this.a[Cm];this.a[Cm]=function(a){Dm(m,a);if("function"===typeof p)p(a);else if("string"===typeof p){var b=I(p,k);"function"===typeof b&&b(a)}};var x=this.a[Em];this.a[Em]=function(){Dm(m,null);if("function"===typeof x)x();else if("string"===typeof x){var a=
	I(x,k);"function"===typeof a&&a()}}}var Cm="callback",Em="expired-callback",Am="sitekey",Bm="size";function Dm(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b)}catch(d){}}function Fm(a,b){w(a.l,function(a){return a==b})}function Gm(a,b){a.h.push(b);b.ia(function(){Ha(a.h,b)});return b}g=zm.prototype;
	g.za=function(){var a=this;return this.f?this.f:this.f=Gm(this,B().then(function(){if(ue()&&!le())return ge();throw new L("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.o.g(a.v())}).then(function(b){a.g=b;return P(a.u,xi,{})}).then(function(b){a.a[Am]=b.recaptchaSiteKey}).s(function(b){a.f=null;throw b;}))};
	g.render=function(){Hm(this);var a=this;return Gm(this,this.za().then(function(){if(null===a.c){var b=a.m;if(!a.i){var c=Id(b);b=Ld("DIV");c.appendChild(b)}a.c=a.g.render(b,a.a)}return a.c}))};g.verify=function(){Hm(this);var a=this;return Gm(this,this.render().then(function(b){return new A(function(c){var d=a.g.getResponse(b);if(d)c(d);else{var e=function(b){b&&(Fm(a,e),c(b))};a.l.push(e);a.i&&a.g.execute(a.c)}})}))};g.reset=function(){Hm(this);null!==this.c&&this.g.reset(this.c)};
	function Hm(a){if(a.C)throw new L("internal-error","RecaptchaVerifier instance has been destroyed.");}g.clear=function(){Hm(this);this.C=!0;this.o.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=Id(this.m);for(var b;b=a.firstChild;)a.removeChild(b)}};
	function Im(a,b,c){var d=!1;try{this.b=c||firebase.app()}catch(h){throw new L("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new L("invalid-api-key");var e=this,f=null;try{f=this.b.auth().xa()}catch(h){}try{d=this.b.auth().settings.appVerificationDisabledForTesting}catch(h){}f=firebase.SDK_VERSION?qe(firebase.SDK_VERSION,f):null;zm.call(this,c,a,b,function(){try{var a=e.b.auth().ea()}catch(m){a=
	null}return a},f,Ai(Bi),d)}t(Im,zm);function Jm(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,h=0;h<b.length;h++)if(b[h].optional)f=!0;else{if(f)throw new L("internal-error","Argument validator encountered a required argument after an optional argument.");e++}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else{for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=Km.length)throw new L("internal-error",
	"Argument validator received an unsupported number of arguments.");c=Km[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null}}if(d)throw new L("argument-error",a+" failed: "+d);}var Km="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return{name:a||"",K:"a valid string",optional:!!b,M:l}}function Lm(a,b){return{name:a||"",K:"a boolean",optional:!!b,M:ba}}
	function W(a,b){return{name:a||"",K:"a valid object",optional:!!b,M:q}}function Mm(a,b){return{name:a||"",K:"a function",optional:!!b,M:n}}function Nm(a,b){return{name:a||"",K:"null",optional:!!b,M:ea}}function Om(){return{name:"",K:"an HTML element",optional:!1,M:function(a){return!!(a&&a instanceof Element)}}}function Pm(){return{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return!!(a&&a instanceof Yl)}}}
	function Qm(){return{name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return!!(a&&a instanceof firebase.app.App)}}}function Rm(a){return{name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return!1;var c=!a||b.providerId===a;return!(!b.ya||!c)}}}
	function Sm(){return{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return!!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function Tm(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return!!(a&&l(a.type)&&n(a.verify))}}}function X(a,b,c,d){return{name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(c){return a.M(c)||b.M(c)}}};function Y(a,b){for(var c in b){var d=b[c].name;a[d]=Um(d,a[c],b[c].j)}}function Vm(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:na(function(a){return this[a]},c),set:na(function(a,b,c,d){Jm(a,[c],[d],!0);this[b]=d},d,c,b[c].sb),enumerable:!0})}}function Z(a,b,c,d){a[b]=Um(b,c,d)}
	function Um(a,b,c){function d(){var a=Array.prototype.slice.call(arguments);Jm(e,c,a);return b.apply(this,a)}if(!c)return b;var e=Wm(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function Wm(a){a=a.split(".");return a[a.length-1]};Y(Yl.prototype,{Va:{name:"applyActionCode",j:[V("code")]},Ja:{name:"checkActionCode",j:[V("code")]},Ya:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},wb:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},Vb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},Yb:{name:"fetchProvidersForEmail",j:[V("email")]},Zb:{name:"fetchSignInMethodsForEmail",j:[V("email")]},fa:{name:"getRedirectResult",j:[]},nc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},
	tc:{name:"onAuthStateChanged",j:[X(W(),Mm(),"nextOrObserver"),Mm("opt_error",!0),Mm("opt_completed",!0)]},uc:{name:"onIdTokenChanged",j:[X(W(),Mm(),"nextOrObserver"),Mm("opt_error",!0),Mm("opt_completed",!0)]},jb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),Nm(null,!0),"opt_actionCodeSettings",!0)]},kb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},lb:{name:"setPersistence",j:[V("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",
	j:[Rm()]},Pa:{name:"signInAnonymously",j:[]},Fc:{name:"signInAnonymouslyAndRetrieveData",j:[]},Gc:{name:"signInWithCredential",j:[Rm()]},Mb:{name:"signInWithCustomToken",j:[V("token")]},Dc:{name:"signInAndRetrieveDataWithCustomToken",j:[V("token")]},Nb:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Hc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Ec:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},Ic:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),
	Tm()]},Jc:{name:"signInWithPopup",j:[Sm()]},Kc:{name:"signInWithRedirect",j:[Sm()]},Pc:{name:"updateCurrentUser",j:[X(function(a){return{name:"user",K:"an instance of Firebase User",optional:!!a,M:function(a){return!!(a&&a instanceof Q)}}}(),Nm(),"user")]},mb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,!0)]},Rc:{name:"useDeviceLanguage",j:[]},Sc:{name:"verifyPasswordResetCode",j:[V("code")]}});Vm(Yl.prototype,{lc:{name:"languageCode",sb:X(V(),Nm(),"languageCode")}});Yl.Persistence=Ej;
	Yl.Persistence.LOCAL="local";Yl.Persistence.SESSION="session";Yl.Persistence.NONE="none";
	Y(Q.prototype,{"delete":{name:"delete",j:[]},cc:{name:"getIdTokenResult",j:[Lm("opt_forceRefresh",!0)]},F:{name:"getIdToken",j:[Lm("opt_forceRefresh",!0)]},cb:{name:"linkAndRetrieveDataWithCredential",j:[Rm()]},oc:{name:"linkWithCredential",j:[Rm()]},pc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),Tm()]},qc:{name:"linkWithPopup",j:[Sm()]},rc:{name:"linkWithRedirect",j:[Sm()]},fb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Rm()]},xc:{name:"reauthenticateWithCredential",j:[Rm()]},yc:{name:"reauthenticateWithPhoneNumber",
	j:[V("phoneNumber"),Tm()]},zc:{name:"reauthenticateWithPopup",j:[Sm()]},Ac:{name:"reauthenticateWithRedirect",j:[Sm()]},reload:{name:"reload",j:[]},ib:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),Nm(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},Oc:{name:"unlink",j:[V("provider")]},ob:{name:"updateEmail",j:[V("email")]},pb:{name:"updatePassword",j:[V("password")]},Qc:{name:"updatePhoneNumber",j:[Rm("phone")]},qb:{name:"updateProfile",j:[W("profile")]}});
	Y(nm.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(mm.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(A.prototype,{ia:{name:"finally"},s:{name:"catch"},then:{name:"then"}});Vm(Nk.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",sb:Lm("appVerificationDisabledForTesting")}});Y(Ok.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});
	Z(O,"credential",function(a,b){return new $f(a,b)},[V("email"),V("password")]);Y(Sf.prototype,{ta:{name:"addScope",j:[V("scope")]},Da:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Sf,"credential",Tf,[X(V(),W(),"token")]);Z(O,"credentialWithLink",eg,[V("email"),V("emailLink")]);Y(Uf.prototype,{ta:{name:"addScope",j:[V("scope")]},Da:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Uf,"credential",Vf,[X(V(),W(),"token")]);
	Y(Wf.prototype,{ta:{name:"addScope",j:[V("scope")]},Da:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Wf,"credential",Xf,[X(V(),X(W(),Nm()),"idToken"),X(V(),Nm(),"accessToken",!0)]);Y(Yf.prototype,{Da:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Yf,"credential",Zf,[X(V(),W(),"token"),V("secret",!0)]);
	Y(N.prototype,{ta:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),Nm(),"idToken",!0),X(V(),Nm(),"accessToken",!0)]},Da:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(kg,"credential",mg,[V("verificationId"),V("verificationCode")]);Y(kg.prototype,{Ta:{name:"verifyPhoneNumber",j:[V("phoneNumber"),Tm()]}});Y(L.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(ug.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});
	Y(tg.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(Im.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});
	(function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService){var a={Auth:Yl,Error:L};Z(a,"EmailAuthProvider",O,[]);Z(a,"FacebookAuthProvider",Sf,[]);Z(a,"GithubAuthProvider",Uf,[]);Z(a,"GoogleAuthProvider",Wf,[]);Z(a,"TwitterAuthProvider",Yf,[]);Z(a,"OAuthProvider",N,[V("providerId")]);Z(a,"PhoneAuthProvider",kg,[Pm()]);Z(a,"RecaptchaVerifier",Im,[X(V(),Om(),"recaptchaContainer"),W("recaptchaParameters",!0),Qm()]);firebase.INTERNAL.registerService("auth",function(a,
	c){a=new Yl(a);c({INTERNAL:{getUid:r(a.getUid,a),getToken:r(a.bc,a),addAuthTokenListener:r(a.Ub,a),removeAuthTokenListener:r(a.Bc,a)}});return a},a,function(a,c){if("create"===a)try{c.auth()}catch(d){}});firebase.INTERNAL.extendNamespace({User:Q})}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

	//# sourceMappingURL=auth.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var util = __webpack_require__(23);
	var logger = __webpack_require__(27);
	var tslib_1 = __webpack_require__(24);
	var firebase = _interopDefault(__webpack_require__(22));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Wraps a DOM Storage object and:
	 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
	 * - prefixes names with "firebase:" to avoid collisions with app data.
	 *
	 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
	 * and one for localStorage.
	 *
	 * @constructor
	 */
	var DOMStorageWrapper = /** @class */ (function () {
	    /**
	     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
	     */
	    function DOMStorageWrapper(domStorage_) {
	        this.domStorage_ = domStorage_;
	        // Use a prefix to avoid collisions with other stuff saved by the app.
	        this.prefix_ = 'firebase:';
	    }
	    /**
	     * @param {string} key The key to save the value under
	     * @param {?Object} value The value being stored, or null to remove the key.
	     */
	    DOMStorageWrapper.prototype.set = function (key, value) {
	        if (value == null) {
	            this.domStorage_.removeItem(this.prefixedName_(key));
	        }
	        else {
	            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));
	        }
	    };
	    /**
	     * @param {string} key
	     * @return {*} The value that was stored under this key, or null
	     */
	    DOMStorageWrapper.prototype.get = function (key) {
	        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
	        if (storedVal == null) {
	            return null;
	        }
	        else {
	            return util.jsonEval(storedVal);
	        }
	    };
	    /**
	     * @param {string} key
	     */
	    DOMStorageWrapper.prototype.remove = function (key) {
	        this.domStorage_.removeItem(this.prefixedName_(key));
	    };
	    /**
	     * @param {string} name
	     * @return {string}
	     */
	    DOMStorageWrapper.prototype.prefixedName_ = function (name) {
	        return this.prefix_ + name;
	    };
	    DOMStorageWrapper.prototype.toString = function () {
	        return this.domStorage_.toString();
	    };
	    return DOMStorageWrapper;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory storage implementation that matches the API of DOMStorageWrapper
	 * (TODO: create interface for both to implement).
	 *
	 * @constructor
	 */
	var MemoryStorage = /** @class */ (function () {
	    function MemoryStorage() {
	        this.cache_ = {};
	        this.isInMemoryStorage = true;
	    }
	    MemoryStorage.prototype.set = function (key, value) {
	        if (value == null) {
	            delete this.cache_[key];
	        }
	        else {
	            this.cache_[key] = value;
	        }
	    };
	    MemoryStorage.prototype.get = function (key) {
	        if (util.contains(this.cache_, key)) {
	            return this.cache_[key];
	        }
	        return null;
	    };
	    MemoryStorage.prototype.remove = function (key) {
	        delete this.cache_[key];
	    };
	    return MemoryStorage;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
	 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
	 * to reflect this type
	 *
	 * @param {string} domStorageName Name of the underlying storage object
	 *   (e.g. 'localStorage' or 'sessionStorage').
	 * @return {?} Turning off type information until a common interface is defined.
	 */
	var createStoragefor = function (domStorageName) {
	    try {
	        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
	        // so it must be inside the try/catch.
	        if (typeof window !== 'undefined' &&
	            typeof window[domStorageName] !== 'undefined') {
	            // Need to test cache. Just because it's here doesn't mean it works
	            var domStorage = window[domStorageName];
	            domStorage.setItem('firebase:sentinel', 'cache');
	            domStorage.removeItem('firebase:sentinel');
	            return new DOMStorageWrapper(domStorage);
	        }
	    }
	    catch (e) { }
	    // Failed to create wrapper.  Just return in-memory storage.
	    // TODO: log?
	    return new MemoryStorage();
	};
	/** A storage object that lasts across sessions */
	var PersistentStorage = createStoragefor('localStorage');
	/** A storage object that only lasts one session */
	var SessionStorage = createStoragefor('sessionStorage');

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var logClient = new logger.Logger('@firebase/database');
	/**
	 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
	 * @type {function(): number} Generated ID.
	 */
	var LUIDGenerator = (function () {
	    var id = 1;
	    return function () {
	        return id++;
	    };
	})();
	/**
	 * Sha1 hash of the input string
	 * @param {!string} str The string to hash
	 * @return {!string} The resulting hash
	 */
	var sha1 = function (str) {
	    var utf8Bytes = util.stringToByteArray(str);
	    var sha1 = new util.Sha1();
	    sha1.update(utf8Bytes);
	    var sha1Bytes = sha1.digest();
	    return util.base64.encodeByteArray(sha1Bytes);
	};
	/**
	 * @param {...*} var_args
	 * @return {string}
	 * @private
	 */
	var buildLogMessage_ = function () {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    var message = '';
	    for (var i = 0; i < var_args.length; i++) {
	        if (Array.isArray(var_args[i]) ||
	            (var_args[i] &&
	                typeof var_args[i] === 'object' &&
	                typeof var_args[i].length === 'number')) {
	            message += buildLogMessage_.apply(null, var_args[i]);
	        }
	        else if (typeof var_args[i] === 'object') {
	            message += util.stringify(var_args[i]);
	        }
	        else {
	            message += var_args[i];
	        }
	        message += ' ';
	    }
	    return message;
	};
	/**
	 * Use this for all debug messages in Firebase.
	 * @type {?function(string)}
	 */
	var logger$1 = null;
	/**
	 * Flag to check for log availability on first log message
	 * @type {boolean}
	 * @private
	 */
	var firstLog_ = true;
	/**
	 * The implementation of Firebase.enableLogging (defined here to break dependencies)
	 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
	 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
	 */
	var enableLogging = function (logger_, persistent) {
	    util.assert(!persistent || (logger_ === true || logger_ === false), "Can't turn on custom loggers persistently.");
	    if (logger_ === true) {
	        logClient.logLevel = logger.LogLevel.VERBOSE;
	        logger$1 = logClient.log.bind(logClient);
	        if (persistent)
	            SessionStorage.set('logging_enabled', true);
	    }
	    else if (typeof logger_ === 'function') {
	        logger$1 = logger_;
	    }
	    else {
	        logger$1 = null;
	        SessionStorage.remove('logging_enabled');
	    }
	};
	/**
	 *
	 * @param {...(string|Arguments)} var_args
	 */
	var log = function () {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    if (firstLog_ === true) {
	        firstLog_ = false;
	        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)
	            enableLogging(true);
	    }
	    if (logger$1) {
	        var message = buildLogMessage_.apply(null, var_args);
	        logger$1(message);
	    }
	};
	/**
	 * @param {!string} prefix
	 * @return {function(...[*])}
	 */
	var logWrapper = function (prefix) {
	    return function () {
	        var var_args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            var_args[_i] = arguments[_i];
	        }
	        log.apply(void 0, [prefix].concat(var_args));
	    };
	};
	/**
	 * @param {...string} var_args
	 */
	var error = function () {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);
	    logClient.error(message);
	};
	/**
	 * @param {...string} var_args
	 */
	var fatal = function () {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, var_args);
	    logClient.error(message);
	    throw new Error(message);
	};
	/**
	 * @param {...*} var_args
	 */
	var warn = function () {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);
	    logClient.warn(message);
	};
	/**
	 * Logs a warning if the containing page uses https. Called when a call to new Firebase
	 * does not use https.
	 */
	var warnIfPageIsSecure = function () {
	    // Be very careful accessing browser globals. Who knows what may or may not exist.
	    if (typeof window !== 'undefined' &&
	        window.location &&
	        window.location.protocol &&
	        window.location.protocol.indexOf('https:') !== -1) {
	        warn('Insecure Firebase access from a secure page. ' +
	            'Please use https in calls to new Firebase().');
	    }
	};
	/**
	 * Returns true if data is NaN, or +/- Infinity.
	 * @param {*} data
	 * @return {boolean}
	 */
	var isInvalidJSONNumber = function (data) {
	    return (typeof data === 'number' &&
	        (data != data || // NaN
	            data == Number.POSITIVE_INFINITY ||
	            data == Number.NEGATIVE_INFINITY));
	};
	/**
	 * @param {function()} fn
	 */
	var executeWhenDOMReady = function (fn) {
	    if (util.isNodeSdk() || document.readyState === 'complete') {
	        fn();
	    }
	    else {
	        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
	        // fire before onload), but fall back to onload.
	        var called_1 = false;
	        var wrappedFn_1 = function () {
	            if (!document.body) {
	                setTimeout(wrappedFn_1, Math.floor(10));
	                return;
	            }
	            if (!called_1) {
	                called_1 = true;
	                fn();
	            }
	        };
	        if (document.addEventListener) {
	            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
	            // fallback to onload.
	            window.addEventListener('load', wrappedFn_1, false);
	        }
	        else if (document.attachEvent) {
	            // IE.
	            document.attachEvent('onreadystatechange', function () {
	                if (document.readyState === 'complete')
	                    wrappedFn_1();
	            });
	            // fallback to onload.
	            window.attachEvent('onload', wrappedFn_1);
	            // jQuery has an extra hack for IE that we could employ (based on
	            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
	            // I'm hoping we don't need it.
	        }
	    }
	};
	/**
	 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
	 * @type {!string}
	 */
	var MIN_NAME = '[MIN_NAME]';
	/**
	 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
	 * @type {!string}
	 */
	var MAX_NAME = '[MAX_NAME]';
	/**
	 * Compares valid Firebase key names, plus min and max name
	 * @param {!string} a
	 * @param {!string} b
	 * @return {!number}
	 */
	var nameCompare = function (a, b) {
	    if (a === b) {
	        return 0;
	    }
	    else if (a === MIN_NAME || b === MAX_NAME) {
	        return -1;
	    }
	    else if (b === MIN_NAME || a === MAX_NAME) {
	        return 1;
	    }
	    else {
	        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
	        if (aAsInt !== null) {
	            if (bAsInt !== null) {
	                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (bAsInt !== null) {
	            return 1;
	        }
	        else {
	            return a < b ? -1 : 1;
	        }
	    }
	};
	/**
	 * @param {!string} a
	 * @param {!string} b
	 * @return {!number} comparison result.
	 */
	var stringCompare = function (a, b) {
	    if (a === b) {
	        return 0;
	    }
	    else if (a < b) {
	        return -1;
	    }
	    else {
	        return 1;
	    }
	};
	/**
	 * @param {string} key
	 * @param {Object} obj
	 * @return {*}
	 */
	var requireKey = function (key, obj) {
	    if (obj && key in obj) {
	        return obj[key];
	    }
	    else {
	        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));
	    }
	};
	/**
	 * @param {*} obj
	 * @return {string}
	 */
	var ObjectToUniqueKey = function (obj) {
	    if (typeof obj !== 'object' || obj === null)
	        return util.stringify(obj);
	    var keys = [];
	    for (var k in obj) {
	        keys.push(k);
	    }
	    // Export as json, but with the keys sorted.
	    keys.sort();
	    var key = '{';
	    for (var i = 0; i < keys.length; i++) {
	        if (i !== 0)
	            key += ',';
	        key += util.stringify(keys[i]);
	        key += ':';
	        key += ObjectToUniqueKey(obj[keys[i]]);
	    }
	    key += '}';
	    return key;
	};
	/**
	 * Splits a string into a number of smaller segments of maximum size
	 * @param {!string} str The string
	 * @param {!number} segsize The maximum number of chars in the string.
	 * @return {Array.<string>} The string, split into appropriately-sized chunks
	 */
	var splitStringBySize = function (str, segsize) {
	    var len = str.length;
	    if (len <= segsize) {
	        return [str];
	    }
	    var dataSegs = [];
	    for (var c = 0; c < len; c += segsize) {
	        if (c + segsize > len) {
	            dataSegs.push(str.substring(c, len));
	        }
	        else {
	            dataSegs.push(str.substring(c, c + segsize));
	        }
	    }
	    return dataSegs;
	};
	/**
	 * Apply a function to each (key, value) pair in an object or
	 * apply a function to each (index, value) pair in an array
	 * @param {!(Object|Array)} obj The object or array to iterate over
	 * @param {function(?, ?)} fn The function to apply
	 */
	var each = function (obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var i = 0; i < obj.length; ++i) {
	            fn(i, obj[i]);
	        }
	    }
	    else {
	        /**
	         * in the conversion of code we removed the goog.object.forEach
	         * function which did a value,key callback. We standardized on
	         * a single impl that does a key, value callback. So we invert
	         * to not have to touch the `each` code points
	         */
	        util.forEach(obj, function (key, val) { return fn(val, key); });
	    }
	};
	/**
	 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
	 * I made one modification at the end and removed the NaN / Infinity
	 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
	 * @param {!number} v A double
	 * @return {string}
	 */
	var doubleToIEEE754String = function (v) {
	    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
	    var ebits = 11, fbits = 52;
	    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;
	    // Compute sign, exponent, fraction
	    // Skip NaN / Infinity handling --MJL.
	    if (v === 0) {
	        e = 0;
	        f = 0;
	        s = 1 / v === -Infinity ? 1 : 0;
	    }
	    else {
	        s = v < 0;
	        v = Math.abs(v);
	        if (v >= Math.pow(2, 1 - bias)) {
	            // Normalized
	            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
	            e = ln + bias;
	            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
	        }
	        else {
	            // Denormalized
	            e = 0;
	            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
	        }
	    }
	    // Pack sign, exponent, fraction
	    bits = [];
	    for (i = fbits; i; i -= 1) {
	        bits.push(f % 2 ? 1 : 0);
	        f = Math.floor(f / 2);
	    }
	    for (i = ebits; i; i -= 1) {
	        bits.push(e % 2 ? 1 : 0);
	        e = Math.floor(e / 2);
	    }
	    bits.push(s ? 1 : 0);
	    bits.reverse();
	    str = bits.join('');
	    // Return the data as a hex string. --MJL
	    var hexByteString = '';
	    for (i = 0; i < 64; i += 8) {
	        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
	        if (hexByte.length === 1)
	            hexByte = '0' + hexByte;
	        hexByteString = hexByteString + hexByte;
	    }
	    return hexByteString.toLowerCase();
	};
	/**
	 * Used to detect if we're in a Chrome content script (which executes in an
	 * isolated environment where long-polling doesn't work).
	 * @return {boolean}
	 */
	var isChromeExtensionContentScript = function () {
	    return !!(typeof window === 'object' &&
	        window['chrome'] &&
	        window['chrome']['extension'] &&
	        !/^chrome/.test(window.location.href));
	};
	/**
	 * Used to detect if we're in a Windows 8 Store app.
	 * @return {boolean}
	 */
	var isWindowsStoreApp = function () {
	    // Check for the presence of a couple WinRT globals
	    return typeof Windows === 'object' && typeof Windows.UI === 'object';
	};
	/**
	 * Converts a server error code to a Javascript Error
	 * @param {!string} code
	 * @param {!Query} query
	 * @return {Error}
	 */
	var errorForServerCode = function (code, query) {
	    var reason = 'Unknown Error';
	    if (code === 'too_big') {
	        reason =
	            'The data requested exceeds the maximum size ' +
	                'that can be accessed with a single request.';
	    }
	    else if (code == 'permission_denied') {
	        reason = "Client doesn't have permission to access the desired data.";
	    }
	    else if (code == 'unavailable') {
	        reason = 'The service is unavailable';
	    }
	    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
	    error.code = code.toUpperCase();
	    return error;
	};
	/**
	 * Used to test for integer-looking strings
	 * @type {RegExp}
	 * @private
	 */
	var INTEGER_REGEXP_ = new RegExp('^-?\\d{1,10}$');
	/**
	 * If the string contains a 32-bit integer, return it.  Else return null.
	 * @param {!string} str
	 * @return {?number}
	 */
	var tryParseInt = function (str) {
	    if (INTEGER_REGEXP_.test(str)) {
	        var intVal = Number(str);
	        if (intVal >= -2147483648 && intVal <= 2147483647) {
	            return intVal;
	        }
	    }
	    return null;
	};
	/**
	 * Helper to run some code but catch any exceptions and re-throw them later.
	 * Useful for preventing user callbacks from breaking internal code.
	 *
	 * Re-throwing the exception from a setTimeout is a little evil, but it's very
	 * convenient (we don't have to try to figure out when is a safe point to
	 * re-throw it), and the behavior seems reasonable:
	 *
	 * * If you aren't pausing on exceptions, you get an error in the console with
	 *   the correct stack trace.
	 * * If you're pausing on all exceptions, the debugger will pause on your
	 *   exception and then again when we rethrow it.
	 * * If you're only pausing on uncaught exceptions, the debugger will only pause
	 *   on us re-throwing it.
	 *
	 * @param {!function()} fn The code to guard.
	 */
	var exceptionGuard = function (fn) {
	    try {
	        fn();
	    }
	    catch (e) {
	        // Re-throw exception when it's safe.
	        setTimeout(function () {
	            // It used to be that "throw e" would result in a good console error with
	            // relevant context, but as of Chrome 39, you just get the firebase.js
	            // file/line number where we re-throw it, which is useless. So we log
	            // e.stack explicitly.
	            var stack = e.stack || '';
	            warn('Exception was thrown by user callback.', stack);
	            throw e;
	        }, Math.floor(0));
	    }
	};
	/**
	 * @return {boolean} true if we think we're currently being crawled.
	 */
	var beingCrawled = function () {
	    var userAgent = (typeof window === 'object' &&
	        window['navigator'] &&
	        window['navigator']['userAgent']) ||
	        '';
	    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
	    // believe to support JavaScript/AJAX rendering.
	    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
	    // would have seen the page" is flaky if we don't treat it as a crawler.
	    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
	};
	/**
	 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
	 *
	 * It is removed with clearTimeout() as normal.
	 *
	 * @param {Function} fn Function to run.
	 * @param {number} time Milliseconds to wait before running.
	 * @return {number|Object} The setTimeout() return value.
	 */
	var setTimeoutNonBlocking = function (fn, time) {
	    var timeout = setTimeout(fn, time);
	    if (typeof timeout === 'object' && timeout['unref']) {
	        timeout['unref']();
	    }
	    return timeout;
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing a parsed path.  It's immutable so that you
	 * can pass them around to other functions without worrying about them changing
	 * it.
	 */
	var Path = /** @class */ (function () {
	    /**
	     * @param {string|Array.<string>} pathOrString Path string to parse,
	     *      or another path, or the raw tokens array
	     * @param {number=} pieceNum
	     */
	    function Path(pathOrString, pieceNum) {
	        if (pieceNum === void 0) {
	            this.pieces_ = pathOrString.split('/');
	            // Remove empty pieces.
	            var copyTo = 0;
	            for (var i = 0; i < this.pieces_.length; i++) {
	                if (this.pieces_[i].length > 0) {
	                    this.pieces_[copyTo] = this.pieces_[i];
	                    copyTo++;
	                }
	            }
	            this.pieces_.length = copyTo;
	            this.pieceNum_ = 0;
	        }
	        else {
	            this.pieces_ = pathOrString;
	            this.pieceNum_ = pieceNum;
	        }
	    }
	    Object.defineProperty(Path, "Empty", {
	        /**
	         * Singleton to represent an empty path
	         *
	         * @const
	         */
	        get: function () {
	            return new Path('');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Path.prototype.getFront = function () {
	        if (this.pieceNum_ >= this.pieces_.length)
	            return null;
	        return this.pieces_[this.pieceNum_];
	    };
	    /**
	     * @return {number} The number of segments in this path
	     */
	    Path.prototype.getLength = function () {
	        return this.pieces_.length - this.pieceNum_;
	    };
	    /**
	     * @return {!Path}
	     */
	    Path.prototype.popFront = function () {
	        var pieceNum = this.pieceNum_;
	        if (pieceNum < this.pieces_.length) {
	            pieceNum++;
	        }
	        return new Path(this.pieces_, pieceNum);
	    };
	    /**
	     * @return {?string}
	     */
	    Path.prototype.getBack = function () {
	        if (this.pieceNum_ < this.pieces_.length)
	            return this.pieces_[this.pieces_.length - 1];
	        return null;
	    };
	    Path.prototype.toString = function () {
	        var pathString = '';
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
	            if (this.pieces_[i] !== '')
	                pathString += '/' + this.pieces_[i];
	        }
	        return pathString || '/';
	    };
	    Path.prototype.toUrlEncodedString = function () {
	        var pathString = '';
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
	            if (this.pieces_[i] !== '')
	                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
	        }
	        return pathString || '/';
	    };
	    /**
	     * Shallow copy of the parts of the path.
	     *
	     * @param {number=} begin
	     * @return {!Array<string>}
	     */
	    Path.prototype.slice = function (begin) {
	        if (begin === void 0) { begin = 0; }
	        return this.pieces_.slice(this.pieceNum_ + begin);
	    };
	    /**
	     * @return {?Path}
	     */
	    Path.prototype.parent = function () {
	        if (this.pieceNum_ >= this.pieces_.length)
	            return null;
	        var pieces = [];
	        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)
	            pieces.push(this.pieces_[i]);
	        return new Path(pieces, 0);
	    };
	    /**
	     * @param {string|!Path} childPathObj
	     * @return {!Path}
	     */
	    Path.prototype.child = function (childPathObj) {
	        var pieces = [];
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++)
	            pieces.push(this.pieces_[i]);
	        if (childPathObj instanceof Path) {
	            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
	                pieces.push(childPathObj.pieces_[i]);
	            }
	        }
	        else {
	            var childPieces = childPathObj.split('/');
	            for (var i = 0; i < childPieces.length; i++) {
	                if (childPieces[i].length > 0)
	                    pieces.push(childPieces[i]);
	            }
	        }
	        return new Path(pieces, 0);
	    };
	    /**
	     * @return {boolean} True if there are no segments in this path
	     */
	    Path.prototype.isEmpty = function () {
	        return this.pieceNum_ >= this.pieces_.length;
	    };
	    /**
	     * @param {!Path} outerPath
	     * @param {!Path} innerPath
	     * @return {!Path} The path from outerPath to innerPath
	     */
	    Path.relativePath = function (outerPath, innerPath) {
	        var outer = outerPath.getFront(), inner = innerPath.getFront();
	        if (outer === null) {
	            return innerPath;
	        }
	        else if (outer === inner) {
	            return Path.relativePath(outerPath.popFront(), innerPath.popFront());
	        }
	        else {
	            throw new Error('INTERNAL ERROR: innerPath (' +
	                innerPath +
	                ') is not within ' +
	                'outerPath (' +
	                outerPath +
	                ')');
	        }
	    };
	    /**
	     * @param {!Path} left
	     * @param {!Path} right
	     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
	     */
	    Path.comparePaths = function (left, right) {
	        var leftKeys = left.slice();
	        var rightKeys = right.slice();
	        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
	            var cmp = nameCompare(leftKeys[i], rightKeys[i]);
	            if (cmp !== 0)
	                return cmp;
	        }
	        if (leftKeys.length === rightKeys.length)
	            return 0;
	        return leftKeys.length < rightKeys.length ? -1 : 1;
	    };
	    /**
	     *
	     * @param {Path} other
	     * @return {boolean} true if paths are the same.
	     */
	    Path.prototype.equals = function (other) {
	        if (this.getLength() !== other.getLength()) {
	            return false;
	        }
	        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
	            if (this.pieces_[i] !== other.pieces_[j]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     *
	     * @param {!Path} other
	     * @return {boolean} True if this path is a parent (or the same as) other
	     */
	    Path.prototype.contains = function (other) {
	        var i = this.pieceNum_;
	        var j = other.pieceNum_;
	        if (this.getLength() > other.getLength()) {
	            return false;
	        }
	        while (i < this.pieces_.length) {
	            if (this.pieces_[i] !== other.pieces_[j]) {
	                return false;
	            }
	            ++i;
	            ++j;
	        }
	        return true;
	    };
	    return Path;
	}()); // end Path
	/**
	 * Dynamic (mutable) path used to count path lengths.
	 *
	 * This class is used to efficiently check paths for valid
	 * length (in UTF8 bytes) and depth (used in path validation).
	 *
	 * Throws Error exception if path is ever invalid.
	 *
	 * The definition of a path always begins with '/'.
	 */
	var ValidationPath = /** @class */ (function () {
	    /**
	     * @param {!Path} path Initial Path.
	     * @param {string} errorPrefix_ Prefix for any error messages.
	     */
	    function ValidationPath(path, errorPrefix_) {
	        this.errorPrefix_ = errorPrefix_;
	        /** @type {!Array<string>} */
	        this.parts_ = path.slice();
	        /** @type {number} Initialize to number of '/' chars needed in path. */
	        this.byteLength_ = Math.max(1, this.parts_.length);
	        for (var i = 0; i < this.parts_.length; i++) {
	            this.byteLength_ += util.stringLength(this.parts_[i]);
	        }
	        this.checkValid_();
	    }
	    Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
	        /** @const {number} Maximum key depth. */
	        get: function () {
	            return 32;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
	        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
	        get: function () {
	            return 768;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @param {string} child */
	    ValidationPath.prototype.push = function (child) {
	        // Count the needed '/'
	        if (this.parts_.length > 0) {
	            this.byteLength_ += 1;
	        }
	        this.parts_.push(child);
	        this.byteLength_ += util.stringLength(child);
	        this.checkValid_();
	    };
	    ValidationPath.prototype.pop = function () {
	        var last = this.parts_.pop();
	        this.byteLength_ -= util.stringLength(last);
	        // Un-count the previous '/'
	        if (this.parts_.length > 0) {
	            this.byteLength_ -= 1;
	        }
	    };
	    ValidationPath.prototype.checkValid_ = function () {
	        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
	            throw new Error(this.errorPrefix_ +
	                'has a key path longer than ' +
	                ValidationPath.MAX_PATH_LENGTH_BYTES +
	                ' bytes (' +
	                this.byteLength_ +
	                ').');
	        }
	        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
	            throw new Error(this.errorPrefix_ +
	                'path specified exceeds the maximum depth that can be written (' +
	                ValidationPath.MAX_PATH_DEPTH +
	                ') or object contains a cycle ' +
	                this.toErrorString());
	        }
	    };
	    /**
	     * String for use in error messages - uses '.' notation for path.
	     *
	     * @return {string}
	     */
	    ValidationPath.prototype.toErrorString = function () {
	        if (this.parts_.length == 0) {
	            return '';
	        }
	        return "in property '" + this.parts_.join('.') + "'";
	    };
	    return ValidationPath;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var PROTOCOL_VERSION = '5';
	var VERSION_PARAM = 'v';
	var TRANSPORT_SESSION_PARAM = 's';
	var REFERER_PARAM = 'r';
	var FORGE_REF = 'f';
	var FORGE_DOMAIN = 'firebaseio.com';
	var LAST_SESSION_PARAM = 'ls';
	var WEBSOCKET = 'websocket';
	var LONG_POLLING = 'long_polling';

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A class that holds metadata about a Repo object
	 *
	 * @constructor
	 */
	var RepoInfo = /** @class */ (function () {
	    /**
	     * @param {string} host Hostname portion of the url for the repo
	     * @param {boolean} secure Whether or not this repo is accessed over ssl
	     * @param {string} namespace The namespace represented by the repo
	     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
	     * @param {string=} persistenceKey Override the default session persistence storage key
	     */
	    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {
	        if (persistenceKey === void 0) { persistenceKey = ''; }
	        this.secure = secure;
	        this.namespace = namespace;
	        this.webSocketOnly = webSocketOnly;
	        this.persistenceKey = persistenceKey;
	        this.host = host.toLowerCase();
	        this.domain = this.host.substr(this.host.indexOf('.') + 1);
	        this.internalHost = PersistentStorage.get('host:' + host) || this.host;
	    }
	    RepoInfo.prototype.needsQueryParam = function () {
	        return this.host !== this.internalHost || this.isCustomHost();
	    };
	    RepoInfo.prototype.isCacheableHost = function () {
	        return this.internalHost.substr(0, 2) === 's-';
	    };
	    RepoInfo.prototype.isDemoHost = function () {
	        return this.domain === 'firebaseio-demo.com';
	    };
	    RepoInfo.prototype.isCustomHost = function () {
	        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
	    };
	    RepoInfo.prototype.updateHost = function (newHost) {
	        if (newHost !== this.internalHost) {
	            this.internalHost = newHost;
	            if (this.isCacheableHost()) {
	                PersistentStorage.set('host:' + this.host, this.internalHost);
	            }
	        }
	    };
	    /**
	     * Returns the websocket URL for this repo
	     * @param {string} type of connection
	     * @param {Object} params list
	     * @return {string} The URL for this repo
	     */
	    RepoInfo.prototype.connectionURL = function (type, params) {
	        util.assert(typeof type === 'string', 'typeof type must == string');
	        util.assert(typeof params === 'object', 'typeof params must == object');
	        var connURL;
	        if (type === WEBSOCKET) {
	            connURL =
	                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
	        }
	        else if (type === LONG_POLLING) {
	            connURL =
	                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
	        }
	        else {
	            throw new Error('Unknown connection type: ' + type);
	        }
	        if (this.needsQueryParam()) {
	            params['ns'] = this.namespace;
	        }
	        var pairs = [];
	        util.forEach(params, function (key, value) {
	            pairs.push(key + '=' + value);
	        });
	        return connURL + pairs.join('&');
	    };
	    /** @return {string} */
	    RepoInfo.prototype.toString = function () {
	        var str = this.toURLString();
	        if (this.persistenceKey) {
	            str += '<' + this.persistenceKey + '>';
	        }
	        return str;
	    };
	    /** @return {string} */
	    RepoInfo.prototype.toURLString = function () {
	        return (this.secure ? 'https://' : 'http://') + this.host;
	    };
	    return RepoInfo;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!string} pathString
	 * @return {string}
	 */
	function decodePath(pathString) {
	    var pathStringDecoded = '';
	    var pieces = pathString.split('/');
	    for (var i = 0; i < pieces.length; i++) {
	        if (pieces[i].length > 0) {
	            var piece = pieces[i];
	            try {
	                piece = decodeURIComponent(piece.replace(/\+/g, ' '));
	            }
	            catch (e) { }
	            pathStringDecoded += '/' + piece;
	        }
	    }
	    return pathStringDecoded;
	}
	/**
	 * @param {!string} queryString
	 * @return {!{[key:string]:string}} key value hash
	 */
	function decodeQuery(queryString) {
	    var results = {};
	    if (queryString.charAt(0) === '?') {
	        queryString = queryString.substring(1);
	    }
	    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {
	        var segment = _a[_i];
	        if (segment.length === 0) {
	            continue;
	        }
	        var kv = segment.split('=');
	        if (kv.length === 2) {
	            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
	        }
	        else {
	            warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
	        }
	    }
	    return results;
	}
	/**
	 *
	 * @param {!string} dataURL
	 * @return {{repoInfo: !RepoInfo, path: !Path}}
	 */
	var parseRepoInfo = function (dataURL) {
	    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;
	    if (parsedUrl.domain === 'firebase') {
	        fatal(parsedUrl.host +
	            ' is no longer supported. ' +
	            'Please use <YOUR FIREBASE>.firebaseio.com instead');
	    }
	    // Catch common error of uninitialized namespace value.
	    if ((!namespace || namespace == 'undefined') &&
	        parsedUrl.domain !== 'localhost') {
	        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
	    }
	    if (!parsedUrl.secure) {
	        warnIfPageIsSecure();
	    }
	    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
	    return {
	        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),
	        path: new Path(parsedUrl.pathString)
	    };
	};
	/**
	 *
	 * @param {!string} dataURL
	 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}
	 */
	var parseURL = function (dataURL) {
	    // Default to empty strings in the event of a malformed string.
	    var host = '', domain = '', subdomain = '', pathString = '';
	    // Always default to SSL, unless otherwise specified.
	    var secure = true, scheme = 'https', port = 443;
	    // Don't do any validation here. The caller is responsible for validating the result of parsing.
	    if (typeof dataURL === 'string') {
	        // Parse scheme.
	        var colonInd = dataURL.indexOf('//');
	        if (colonInd >= 0) {
	            scheme = dataURL.substring(0, colonInd - 1);
	            dataURL = dataURL.substring(colonInd + 2);
	        }
	        // Parse host, path, and query string.
	        var slashInd = dataURL.indexOf('/');
	        if (slashInd === -1) {
	            slashInd = dataURL.length;
	        }
	        var questionMarkInd = dataURL.indexOf('?');
	        if (questionMarkInd === -1) {
	            questionMarkInd = dataURL.length;
	        }
	        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
	        if (slashInd < questionMarkInd) {
	            // For pathString, questionMarkInd will always come after slashInd
	            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
	        }
	        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
	        // If we have a port, use scheme for determining if it's secure.
	        colonInd = host.indexOf(':');
	        if (colonInd >= 0) {
	            secure = scheme === 'https' || scheme === 'wss';
	            port = parseInt(host.substring(colonInd + 1), 10);
	        }
	        else {
	            colonInd = dataURL.length;
	        }
	        var parts = host.split('.');
	        if (parts.length === 3) {
	            // Normalize namespaces to lowercase to share storage / connection.
	            domain = parts[1];
	            subdomain = parts[0].toLowerCase();
	        }
	        else if (parts.length === 2) {
	            domain = parts[0];
	        }
	        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {
	            domain = 'localhost';
	        }
	        // Support `ns` query param if subdomain not already set
	        if (subdomain === '' && 'ns' in queryParams) {
	            subdomain = queryParams['ns'];
	        }
	    }
	    return {
	        host: host,
	        port: port,
	        domain: domain,
	        subdomain: subdomain,
	        secure: secure,
	        scheme: scheme,
	        pathString: pathString
	    };
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * True for invalid Firebase keys
	 * @type {RegExp}
	 * @private
	 */
	var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
	/**
	 * True for invalid Firebase paths.
	 * Allows '/' in paths.
	 * @type {RegExp}
	 * @private
	 */
	var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
	/**
	 * Maximum number of characters to allow in leaf value
	 * @type {number}
	 * @private
	 */
	var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
	/**
	 * @param {*} key
	 * @return {boolean}
	 */
	var isValidKey = function (key) {
	    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
	};
	/**
	 * @param {string} pathString
	 * @return {boolean}
	 */
	var isValidPathString = function (pathString) {
	    return (typeof pathString === 'string' &&
	        pathString.length !== 0 &&
	        !INVALID_PATH_REGEX_.test(pathString));
	};
	/**
	 * @param {string} pathString
	 * @return {boolean}
	 */
	var isValidRootPathString = function (pathString) {
	    if (pathString) {
	        // Allow '/.info/' at the beginning.
	        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
	    }
	    return isValidPathString(pathString);
	};
	/**
	 * @param {*} priority
	 * @return {boolean}
	 */
	var isValidPriority = function (priority) {
	    return (priority === null ||
	        typeof priority === 'string' ||
	        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
	        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));
	};
	/**
	 * Pre-validate a datum passed as an argument to Firebase function.
	 *
	 * @param {string} fnName
	 * @param {number} argumentNumber
	 * @param {*} data
	 * @param {!Path} path
	 * @param {boolean} optional
	 */
	var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
	    if (optional && data === undefined)
	        return;
	    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);
	};
	/**
	 * Validate a data object client-side before sending to server.
	 *
	 * @param {string} errorPrefix
	 * @param {*} data
	 * @param {!Path|!ValidationPath} path_
	 */
	var validateFirebaseData = function (errorPrefix, data, path_) {
	    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
	    if (data === undefined) {
	        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
	    }
	    if (typeof data === 'function') {
	        throw new Error(errorPrefix +
	            'contains a function ' +
	            path.toErrorString() +
	            ' with contents = ' +
	            data.toString());
	    }
	    if (isInvalidJSONNumber(data)) {
	        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
	    }
	    // Check max leaf size, but try to avoid the utf8 conversion if we can.
	    if (typeof data === 'string' &&
	        data.length > MAX_LEAF_SIZE_ / 3 &&
	        util.stringLength(data) > MAX_LEAF_SIZE_) {
	        throw new Error(errorPrefix +
	            'contains a string greater than ' +
	            MAX_LEAF_SIZE_ +
	            ' utf8 bytes ' +
	            path.toErrorString() +
	            " ('" +
	            data.substring(0, 50) +
	            "...')");
	    }
	    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
	    // to save extra walking of large objects.
	    if (data && typeof data === 'object') {
	        var hasDotValue_1 = false, hasActualChild_1 = false;
	        util.forEach(data, function (key, value) {
	            if (key === '.value') {
	                hasDotValue_1 = true;
	            }
	            else if (key !== '.priority' && key !== '.sv') {
	                hasActualChild_1 = true;
	                if (!isValidKey(key)) {
	                    throw new Error(errorPrefix +
	                        ' contains an invalid key (' +
	                        key +
	                        ') ' +
	                        path.toErrorString() +
	                        '.  Keys must be non-empty strings ' +
	                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
	                }
	            }
	            path.push(key);
	            validateFirebaseData(errorPrefix, value, path);
	            path.pop();
	        });
	        if (hasDotValue_1 && hasActualChild_1) {
	            throw new Error(errorPrefix +
	                ' contains ".value" child ' +
	                path.toErrorString() +
	                ' in addition to actual children.');
	        }
	    }
	};
	/**
	 * Pre-validate paths passed in the firebase function.
	 *
	 * @param {string} errorPrefix
	 * @param {Array<!Path>} mergePaths
	 */
	var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
	    var i, curPath;
	    for (i = 0; i < mergePaths.length; i++) {
	        curPath = mergePaths[i];
	        var keys = curPath.slice();
	        for (var j = 0; j < keys.length; j++) {
	            if (keys[j] === '.priority' && j === keys.length - 1) {
	                // .priority is OK
	            }
	            else if (!isValidKey(keys[j])) {
	                throw new Error(errorPrefix +
	                    'contains an invalid key (' +
	                    keys[j] +
	                    ') in path ' +
	                    curPath.toString() +
	                    '. Keys must be non-empty strings ' +
	                    'and can\'t contain ".", "#", "$", "/", "[", or "]"');
	            }
	        }
	    }
	    // Check that update keys are not descendants of each other.
	    // We rely on the property that sorting guarantees that ancestors come
	    // right before descendants.
	    mergePaths.sort(Path.comparePaths);
	    var prevPath = null;
	    for (i = 0; i < mergePaths.length; i++) {
	        curPath = mergePaths[i];
	        if (prevPath !== null && prevPath.contains(curPath)) {
	            throw new Error(errorPrefix +
	                'contains a path ' +
	                prevPath.toString() +
	                ' that is ancestor of another path ' +
	                curPath.toString());
	        }
	        prevPath = curPath;
	    }
	};
	/**
	 * pre-validate an object passed as an argument to firebase function (
	 * must be an object - e.g. for firebase.update()).
	 *
	 * @param {string} fnName
	 * @param {number} argumentNumber
	 * @param {*} data
	 * @param {!Path} path
	 * @param {boolean} optional
	 */
	var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
	    if (optional && data === undefined)
	        return;
	    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);
	    if (!(data && typeof data === 'object') || Array.isArray(data)) {
	        throw new Error(errorPrefix + ' must be an object containing the children to replace.');
	    }
	    var mergePaths = [];
	    util.forEach(data, function (key, value) {
	        var curPath = new Path(key);
	        validateFirebaseData(errorPrefix, value, path.child(curPath));
	        if (curPath.getBack() === '.priority') {
	            if (!isValidPriority(value)) {
	                throw new Error(errorPrefix +
	                    "contains an invalid value for '" +
	                    curPath.toString() +
	                    "', which must be a valid " +
	                    'Firebase priority (a string, finite number, server value, or null).');
	            }
	        }
	        mergePaths.push(curPath);
	    });
	    validateFirebaseMergePaths(errorPrefix, mergePaths);
	};
	var validatePriority = function (fnName, argumentNumber, priority, optional) {
	    if (optional && priority === undefined)
	        return;
	    if (isInvalidJSONNumber(priority))
	        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +
	            'is ' +
	            priority.toString() +
	            ', but must be a valid Firebase priority (a string, finite number, ' +
	            'server value, or null).');
	    // Special case to allow importing data with a .sv.
	    if (!isValidPriority(priority))
	        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid Firebase priority ' +
	            '(a string, finite number, server value, or null).');
	};
	var validateEventType = function (fnName, argumentNumber, eventType, optional) {
	    if (optional && eventType === undefined)
	        return;
	    switch (eventType) {
	        case 'value':
	        case 'child_added':
	        case 'child_removed':
	        case 'child_changed':
	        case 'child_moved':
	            break;
	        default:
	            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +
	                'must be a valid event type = "value", "child_added", "child_removed", ' +
	                '"child_changed", or "child_moved".');
	    }
	};
	var validateKey = function (fnName, argumentNumber, key, optional) {
	    if (optional && key === undefined)
	        return;
	    if (!isValidKey(key))
	        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +
	            'was an invalid key = "' +
	            key +
	            '".  Firebase keys must be non-empty strings and ' +
	            'can\'t contain ".", "#", "$", "/", "[", or "]").');
	};
	var validatePathString = function (fnName, argumentNumber, pathString, optional) {
	    if (optional && pathString === undefined)
	        return;
	    if (!isValidPathString(pathString))
	        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +
	            'was an invalid path = "' +
	            pathString +
	            '". Paths must be non-empty strings and ' +
	            'can\'t contain ".", "#", "$", "[", or "]"');
	};
	var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
	    if (pathString) {
	        // Allow '/.info/' at the beginning.
	        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
	    }
	    validatePathString(fnName, argumentNumber, pathString, optional);
	};
	var validateWritablePath = function (fnName, path) {
	    if (path.getFront() === '.info') {
	        throw new Error(fnName + " failed = Can't modify data under /.info/");
	    }
	};
	var validateUrl = function (fnName, argumentNumber, parsedUrl) {
	    // TODO = Validate server better.
	    var pathString = parsedUrl.path.toString();
	    if (!(typeof parsedUrl.repoInfo.host === 'string') ||
	        parsedUrl.repoInfo.host.length === 0 ||
	        (!isValidKey(parsedUrl.repoInfo.namespace) &&
	            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
	        (pathString.length !== 0 && !isValidRootPathString(pathString))) {
	        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +
	            'must be a valid firebase URL and ' +
	            'the path can\'t contain ".", "#", "$", "[", or "]".');
	    }
	};
	var validateBoolean = function (fnName, argumentNumber, bool, optional) {
	    if (optional && bool === undefined)
	        return;
	    if (typeof bool !== 'boolean')
	        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 */
	var OnDisconnect = /** @class */ (function () {
	    /**
	     * @param {!Repo} repo_
	     * @param {!Path} path_
	     */
	    function OnDisconnect(repo_, path_) {
	        this.repo_ = repo_;
	        this.path_ = path_;
	    }
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.cancel = function (onComplete) {
	        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
	        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.remove = function (onComplete) {
	        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
	        validateWritablePath('OnDisconnect.remove', this.path_);
	        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} value
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.set = function (value, onComplete) {
	        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
	        validateWritablePath('OnDisconnect.set', this.path_);
	        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
	        util.validateCallback('OnDisconnect.set', 2, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} value
	     * @param {number|string|null} priority
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
	        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
	        validateWritablePath('OnDisconnect.setWithPriority', this.path_);
	        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
	        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
	        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {!Object} objectToMerge
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
	        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
	        validateWritablePath('OnDisconnect.update', this.path_);
	        if (Array.isArray(objectToMerge)) {
	            var newObjectToMerge = {};
	            for (var i = 0; i < objectToMerge.length; ++i) {
	                newObjectToMerge['' + i] = objectToMerge[i];
	            }
	            objectToMerge = newObjectToMerge;
	            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
	                'existing data, or an Object with integer keys if you really do want to only update some of the children.');
	        }
	        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
	        util.validateCallback('OnDisconnect.update', 2, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    return OnDisconnect;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var TransactionResult = /** @class */ (function () {
	    /**
	     * A type for the resolve value of Firebase.transaction.
	     * @constructor
	     * @dict
	     * @param {boolean} committed
	     * @param {DataSnapshot} snapshot
	     */
	    function TransactionResult(committed, snapshot) {
	        this.committed = committed;
	        this.snapshot = snapshot;
	    }
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users
	    TransactionResult.prototype.toJSON = function () {
	        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
	        return { committed: this.committed, snapshot: this.snapshot.toJSON() };
	    };
	    return TransactionResult;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Fancy ID generator that creates 20-character string identifiers with the
	 * following properties:
	 *
	 * 1. They're based on timestamp so that they sort *after* any existing ids.
	 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
	 *    collide with other clients' IDs.
	 * 3. They sort *lexicographically* (so the timestamp is converted to characters
	 *    that will sort properly).
	 * 4. They're monotonically increasing. Even if you generate more than one in
	 *    the same timestamp, the latter ones will sort after the former ones. We do
	 *    this by using the previous random bits but "incrementing" them by 1 (only
	 *    in the case of a timestamp collision).
	 */
	var nextPushId = (function () {
	    // Modeled after base64 web-safe chars, but ordered by ASCII.
	    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
	    // Timestamp of last push, used to prevent local collisions if you push twice
	    // in one ms.
	    var lastPushTime = 0;
	    // We generate 72-bits of randomness which get turned into 12 characters and
	    // appended to the timestamp to prevent collisions with other clients. We
	    // store the last characters we generated because in the event of a collision,
	    // we'll use those same characters except "incremented" by one.
	    var lastRandChars = [];
	    return function (now) {
	        var duplicateTime = now === lastPushTime;
	        lastPushTime = now;
	        var i;
	        var timeStampChars = new Array(8);
	        for (i = 7; i >= 0; i--) {
	            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
	            // NOTE: Can't use << here because javascript will convert to int and lose
	            // the upper bits.
	            now = Math.floor(now / 64);
	        }
	        util.assert(now === 0, 'Cannot push at time == 0');
	        var id = timeStampChars.join('');
	        if (!duplicateTime) {
	            for (i = 0; i < 12; i++) {
	                lastRandChars[i] = Math.floor(Math.random() * 64);
	            }
	        }
	        else {
	            // If the timestamp hasn't changed since last push, use the same random
	            // number, except incremented by 1.
	            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
	                lastRandChars[i] = 0;
	            }
	            lastRandChars[i]++;
	        }
	        for (i = 0; i < 12; i++) {
	            id += PUSH_CHARS.charAt(lastRandChars[i]);
	        }
	        util.assert(id.length === 20, 'nextPushId: Length should be 20.');
	        return id;
	    };
	})();

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @param {!string} name
	 * @param {!Node} node
	 * @constructor
	 * @struct
	 */
	var NamedNode = /** @class */ (function () {
	    function NamedNode(name, node) {
	        this.name = name;
	        this.node = node;
	    }
	    /**
	     *
	     * @param {!string} name
	     * @param {!Node} node
	     * @return {NamedNode}
	     */
	    NamedNode.Wrap = function (name, node) {
	        return new NamedNode(name, node);
	    };
	    return NamedNode;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @constructor
	 */
	var Index = /** @class */ (function () {
	    function Index() {
	    }
	    /**
	     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
	     * this index
	     */
	    Index.prototype.getCompare = function () {
	        return this.compare.bind(this);
	    };
	    /**
	     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
	     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
	     *
	     * @param {!Node} oldNode
	     * @param {!Node} newNode
	     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
	     */
	    Index.prototype.indexedValueChanged = function (oldNode, newNode) {
	        var oldWrapped = new NamedNode(MIN_NAME, oldNode);
	        var newWrapped = new NamedNode(MIN_NAME, newNode);
	        return this.compare(oldWrapped, newWrapped) !== 0;
	    };
	    /**
	     * @return {!NamedNode} a node wrapper that will sort equal to or less than
	     * any other node wrapper, using this index
	     */
	    Index.prototype.minPost = function () {
	        return NamedNode.MIN;
	    };
	    return Index;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __EMPTY_NODE;
	var KeyIndex = /** @class */ (function (_super) {
	    tslib_1.__extends(KeyIndex, _super);
	    function KeyIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
	        get: function () {
	            return __EMPTY_NODE;
	        },
	        set: function (val) {
	            __EMPTY_NODE = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.compare = function (a, b) {
	        return nameCompare(a.name, b.name);
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.isDefinedOn = function (node) {
	        // We could probably return true here (since every node has a key), but it's never called
	        // so just leaving unimplemented for now.
	        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return false; // The key for a node never changes.
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.minPost = function () {
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.maxPost = function () {
	        // TODO: This should really be created once and cached in a static property, but
	        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
	        return new NamedNode(MAX_NAME, __EMPTY_NODE);
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    KeyIndex.prototype.makePost = function (indexValue, name) {
	        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
	        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
	        return new NamedNode(indexValue, __EMPTY_NODE);
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    KeyIndex.prototype.toString = function () {
	        return '.key';
	    };
	    return KeyIndex;
	}(Index));
	var KEY_INDEX = new KeyIndex();

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var MAX_NODE;
	function setMaxNode(val) {
	    MAX_NODE = val;
	}
	/**
	 * @param {(!string|!number)} priority
	 * @return {!string}
	 */
	var priorityHashText = function (priority) {
	    if (typeof priority === 'number')
	        return 'number:' + doubleToIEEE754String(priority);
	    else
	        return 'string:' + priority;
	};
	/**
	 * Validates that a priority snapshot Node is valid.
	 *
	 * @param {!Node} priorityNode
	 */
	var validatePriorityNode = function (priorityNode) {
	    if (priorityNode.isLeafNode()) {
	        var val = priorityNode.val();
	        util.assert(typeof val === 'string' ||
	            typeof val === 'number' ||
	            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');
	    }
	    else {
	        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
	    }
	    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
	    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __childrenNodeConstructor;
	/**
	 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
	 * implements Node and stores the value of the node (a string,
	 * number, or boolean) accessible via getValue().
	 */
	var LeafNode = /** @class */ (function () {
	    /**
	     * @implements {Node}
	     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
	     *                                         The object type is possible in the event of a deferred value
	     * @param {!Node=} priorityNode_ The priority of this node.
	     */
	    function LeafNode(value_, priorityNode_) {
	        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
	        this.value_ = value_;
	        this.priorityNode_ = priorityNode_;
	        this.lazyHash_ = null;
	        util.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
	        validatePriorityNode(this.priorityNode_);
	    }
	    Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
	        get: function () {
	            return __childrenNodeConstructor;
	        },
	        set: function (val) {
	            __childrenNodeConstructor = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @inheritDoc */
	    LeafNode.prototype.isLeafNode = function () {
	        return true;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getPriority = function () {
	        return this.priorityNode_;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updatePriority = function (newPriorityNode) {
	        return new LeafNode(this.value_, newPriorityNode);
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getImmediateChild = function (childName) {
	        // Hack to treat priority as a regular child
	        if (childName === '.priority') {
	            return this.priorityNode_;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getChild = function (path) {
	        if (path.isEmpty()) {
	            return this;
	        }
	        else if (path.getFront() === '.priority') {
	            return this.priorityNode_;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.hasChild = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
	        return null;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
	        if (childName === '.priority') {
	            return this.updatePriority(newChildNode);
	        }
	        else if (newChildNode.isEmpty() && childName !== '.priority') {
	            return this;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updateChild = function (path, newChildNode) {
	        var front = path.getFront();
	        if (front === null) {
	            return newChildNode;
	        }
	        else if (newChildNode.isEmpty() && front !== '.priority') {
	            return this;
	        }
	        else {
	            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
	            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.isEmpty = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.numChildren = function () {
	        return 0;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.forEachChild = function (index, action) {
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.val = function (exportFormat) {
	        if (exportFormat && !this.getPriority().isEmpty())
	            return {
	                '.value': this.getValue(),
	                '.priority': this.getPriority().val()
	            };
	        else
	            return this.getValue();
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.hash = function () {
	        if (this.lazyHash_ === null) {
	            var toHash = '';
	            if (!this.priorityNode_.isEmpty())
	                toHash +=
	                    'priority:' +
	                        priorityHashText(this.priorityNode_.val()) +
	                        ':';
	            var type = typeof this.value_;
	            toHash += type + ':';
	            if (type === 'number') {
	                toHash += doubleToIEEE754String(this.value_);
	            }
	            else {
	                toHash += this.value_;
	            }
	            this.lazyHash_ = sha1(toHash);
	        }
	        return this.lazyHash_;
	    };
	    /**
	     * Returns the value of the leaf node.
	     * @return {Object|string|number|boolean} The value of the node.
	     */
	    LeafNode.prototype.getValue = function () {
	        return this.value_;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.compareTo = function (other) {
	        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
	            return 1;
	        }
	        else if (other instanceof LeafNode.__childrenNodeConstructor) {
	            return -1;
	        }
	        else {
	            util.assert(other.isLeafNode(), 'Unknown node type');
	            return this.compareToLeafNode_(other);
	        }
	    };
	    /**
	     * Comparison specifically for two leaf nodes
	     * @param {!LeafNode} otherLeaf
	     * @return {!number}
	     * @private
	     */
	    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
	        var otherLeafType = typeof otherLeaf.value_;
	        var thisLeafType = typeof this.value_;
	        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
	        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
	        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
	        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
	        if (otherIndex === thisIndex) {
	            // Same type, compare values
	            if (thisLeafType === 'object') {
	                // Deferred value nodes are all equal, but we should also never get to this point...
	                return 0;
	            }
	            else {
	                // Note that this works because true > false, all others are number or string comparisons
	                if (this.value_ < otherLeaf.value_) {
	                    return -1;
	                }
	                else if (this.value_ === otherLeaf.value_) {
	                    return 0;
	                }
	                else {
	                    return 1;
	                }
	            }
	        }
	        else {
	            return thisIndex - otherIndex;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.withIndex = function () {
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.isIndexed = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.equals = function (other) {
	        /**
	         * @inheritDoc
	         */
	        if (other === this) {
	            return true;
	        }
	        else if (other.isLeafNode()) {
	            var otherLeaf = other;
	            return (this.value_ === otherLeaf.value_ &&
	                this.priorityNode_.equals(otherLeaf.priorityNode_));
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
	     * the same type, the comparison falls back to their value
	     * @type {Array.<!string>}
	     * @const
	     */
	    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
	    return LeafNode;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var nodeFromJSON;
	var MAX_NODE$1;
	function setNodeFromJSON(val) {
	    nodeFromJSON = val;
	}
	function setMaxNode$1(val) {
	    MAX_NODE$1 = val;
	}
	/**
	 * @constructor
	 * @extends {Index}
	 * @private
	 */
	var PriorityIndex = /** @class */ (function (_super) {
	    tslib_1.__extends(PriorityIndex, _super);
	    function PriorityIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.compare = function (a, b) {
	        var aPriority = a.node.getPriority();
	        var bPriority = b.node.getPriority();
	        var indexCmp = aPriority.compareTo(bPriority);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.isDefinedOn = function (node) {
	        return !node.getPriority().isEmpty();
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return !oldNode.getPriority().equals(newNode.getPriority());
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.minPost = function () {
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.maxPost = function () {
	        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    PriorityIndex.prototype.makePost = function (indexValue, name) {
	        var priorityNode = nodeFromJSON(indexValue);
	        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    PriorityIndex.prototype.toString = function () {
	        return '.priority';
	    };
	    return PriorityIndex;
	}(Index));
	var PRIORITY_INDEX = new PriorityIndex();

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An iterator over an LLRBNode.
	 */
	var SortedMapIterator = /** @class */ (function () {
	    /**
	     * @template K, V, T
	     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
	     * @param {?K} startKey
	     * @param {function(K, K): number} comparator
	     * @param {boolean} isReverse_ Whether or not to iterate in reverse
	     * @param {(function(K, V):T)=} resultGenerator_
	     */
	    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
	        if (resultGenerator_ === void 0) { resultGenerator_ = null; }
	        this.isReverse_ = isReverse_;
	        this.resultGenerator_ = resultGenerator_;
	        /** @private
	         * @type {Array.<!LLRBNode>}
	         */
	        this.nodeStack_ = [];
	        var cmp = 1;
	        while (!node.isEmpty()) {
	            node = node;
	            cmp = startKey ? comparator(node.key, startKey) : 1;
	            // flip the comparison if we're going in reverse
	            if (isReverse_)
	                cmp *= -1;
	            if (cmp < 0) {
	                // This node is less than our start key. ignore it
	                if (this.isReverse_) {
	                    node = node.left;
	                }
	                else {
	                    node = node.right;
	                }
	            }
	            else if (cmp === 0) {
	                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
	                this.nodeStack_.push(node);
	                break;
	            }
	            else {
	                // This node is greater than our start key, add it to the stack and move to the next one
	                this.nodeStack_.push(node);
	                if (this.isReverse_) {
	                    node = node.right;
	                }
	                else {
	                    node = node.left;
	                }
	            }
	        }
	    }
	    SortedMapIterator.prototype.getNext = function () {
	        if (this.nodeStack_.length === 0)
	            return null;
	        var node = this.nodeStack_.pop();
	        var result;
	        if (this.resultGenerator_)
	            result = this.resultGenerator_(node.key, node.value);
	        else
	            result = { key: node.key, value: node.value };
	        if (this.isReverse_) {
	            node = node.left;
	            while (!node.isEmpty()) {
	                this.nodeStack_.push(node);
	                node = node.right;
	            }
	        }
	        else {
	            node = node.right;
	            while (!node.isEmpty()) {
	                this.nodeStack_.push(node);
	                node = node.left;
	            }
	        }
	        return result;
	    };
	    SortedMapIterator.prototype.hasNext = function () {
	        return this.nodeStack_.length > 0;
	    };
	    SortedMapIterator.prototype.peek = function () {
	        if (this.nodeStack_.length === 0)
	            return null;
	        var node = this.nodeStack_[this.nodeStack_.length - 1];
	        if (this.resultGenerator_) {
	            return this.resultGenerator_(node.key, node.value);
	        }
	        else {
	            return { key: node.key, value: node.value };
	        }
	    };
	    return SortedMapIterator;
	}());
	/**
	 * Represents a node in a Left-leaning Red-Black tree.
	 */
	var LLRBNode = /** @class */ (function () {
	    /**
	     * @template K, V
	     * @param {!K} key Key associated with this node.
	     * @param {!V} value Value associated with this node.
	     * @param {?boolean} color Whether this node is red.
	     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
	     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
	     */
	    function LLRBNode(key, value, color, left, right) {
	        this.key = key;
	        this.value = value;
	        this.color = color != null ? color : LLRBNode.RED;
	        this.left =
	            left != null ? left : SortedMap.EMPTY_NODE;
	        this.right =
	            right != null ? right : SortedMap.EMPTY_NODE;
	    }
	    /**
	     * Returns a copy of the current node, optionally replacing pieces of it.
	     *
	     * @param {?K} key New key for the node, or null.
	     * @param {?V} value New value for the node, or null.
	     * @param {?boolean} color New color for the node, or null.
	     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
	     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
	     * @return {!LLRBNode} The node copy.
	     */
	    LLRBNode.prototype.copy = function (key, value, color, left, right) {
	        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
	    };
	    /**
	     * @return {number} The total number of nodes in the tree.
	     */
	    LLRBNode.prototype.count = function () {
	        return this.left.count() + 1 + this.right.count();
	    };
	    /**
	     * @return {boolean} True if the tree is empty.
	     */
	    LLRBNode.prototype.isEmpty = function () {
	        return false;
	    };
	    /**
	     * Traverses the tree in key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called for each
	     *   node.  If it returns true, traversal is aborted.
	     * @return {*} The first truthy value returned by action, or the last falsey
	     *   value returned by action
	     */
	    LLRBNode.prototype.inorderTraversal = function (action) {
	        return (this.left.inorderTraversal(action) ||
	            action(this.key, this.value) ||
	            this.right.inorderTraversal(action));
	    };
	    /**
	     * Traverses the tree in reverse key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!Object, !Object)} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {*} True if traversal was aborted.
	     */
	    LLRBNode.prototype.reverseTraversal = function (action) {
	        return (this.right.reverseTraversal(action) ||
	            action(this.key, this.value) ||
	            this.left.reverseTraversal(action));
	    };
	    /**
	     * @return {!Object} The minimum node in the tree.
	     * @private
	     */
	    LLRBNode.prototype.min_ = function () {
	        if (this.left.isEmpty()) {
	            return this;
	        }
	        else {
	            return this.left.min_();
	        }
	    };
	    /**
	     * @return {!K} The maximum key in the tree.
	     */
	    LLRBNode.prototype.minKey = function () {
	        return this.min_().key;
	    };
	    /**
	     * @return {!K} The maximum key in the tree.
	     */
	    LLRBNode.prototype.maxKey = function () {
	        if (this.right.isEmpty()) {
	            return this.key;
	        }
	        else {
	            return this.right.maxKey();
	        }
	    };
	    /**
	     *
	     * @param {!Object} key Key to insert.
	     * @param {!Object} value Value to insert.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode} New tree, with the key/value added.
	     */
	    LLRBNode.prototype.insert = function (key, value, comparator) {
	        var cmp, n;
	        n = this;
	        cmp = comparator(key, n.key);
	        if (cmp < 0) {
	            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
	        }
	        else if (cmp === 0) {
	            n = n.copy(null, value, null, null, null);
	        }
	        else {
	            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
	        }
	        return n.fixUp_();
	    };
	    /**
	     * @private
	     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
	     */
	    LLRBNode.prototype.removeMin_ = function () {
	        if (this.left.isEmpty()) {
	            return SortedMap.EMPTY_NODE;
	        }
	        var n = this;
	        if (!n.left.isRed_() && !n.left.left.isRed_())
	            n = n.moveRedLeft_();
	        n = n.copy(null, null, null, n.left.removeMin_(), null);
	        return n.fixUp_();
	    };
	    /**
	     * @param {!Object} key The key of the item to remove.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
	     */
	    LLRBNode.prototype.remove = function (key, comparator) {
	        var n, smallest;
	        n = this;
	        if (comparator(key, n.key) < 0) {
	            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
	                n = n.moveRedLeft_();
	            }
	            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
	        }
	        else {
	            if (n.left.isRed_())
	                n = n.rotateRight_();
	            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
	                n = n.moveRedRight_();
	            }
	            if (comparator(key, n.key) === 0) {
	                if (n.right.isEmpty()) {
	                    return SortedMap.EMPTY_NODE;
	                }
	                else {
	                    smallest = n.right.min_();
	                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
	                }
	            }
	            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
	        }
	        return n.fixUp_();
	    };
	    /**
	     * @private
	     * @return {boolean} Whether this is a RED node.
	     */
	    LLRBNode.prototype.isRed_ = function () {
	        return this.color;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree after performing any needed rotations.
	     */
	    LLRBNode.prototype.fixUp_ = function () {
	        var n = this;
	        if (n.right.isRed_() && !n.left.isRed_())
	            n = n.rotateLeft_();
	        if (n.left.isRed_() && n.left.left.isRed_())
	            n = n.rotateRight_();
	        if (n.left.isRed_() && n.right.isRed_())
	            n = n.colorFlip_();
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after moveRedLeft.
	     */
	    LLRBNode.prototype.moveRedLeft_ = function () {
	        var n = this.colorFlip_();
	        if (n.right.left.isRed_()) {
	            n = n.copy(null, null, null, null, n.right.rotateRight_());
	            n = n.rotateLeft_();
	            n = n.colorFlip_();
	        }
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after moveRedRight.
	     */
	    LLRBNode.prototype.moveRedRight_ = function () {
	        var n = this.colorFlip_();
	        if (n.left.left.isRed_()) {
	            n = n.rotateRight_();
	            n = n.colorFlip_();
	        }
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after rotateLeft.
	     */
	    LLRBNode.prototype.rotateLeft_ = function () {
	        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, nl, null);
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after rotateRight.
	     */
	    LLRBNode.prototype.rotateRight_ = function () {
	        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, nr);
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after colorFlip.
	     */
	    LLRBNode.prototype.colorFlip_ = function () {
	        var left = this.left.copy(null, null, !this.left.color, null, null);
	        var right = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, left, right);
	    };
	    /**
	     * For testing.
	     *
	     * @private
	     * @return {boolean} True if all is well.
	     */
	    LLRBNode.prototype.checkMaxDepth_ = function () {
	        var blackDepth = this.check_();
	        return Math.pow(2.0, blackDepth) <= this.count() + 1;
	    };
	    /**
	     * @private
	     * @return {number} Not sure what this returns exactly. :-).
	     */
	    LLRBNode.prototype.check_ = function () {
	        var blackDepth;
	        if (this.isRed_() && this.left.isRed_()) {
	            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
	        }
	        if (this.right.isRed_()) {
	            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
	        }
	        blackDepth = this.left.check_();
	        if (blackDepth !== this.right.check_()) {
	            throw new Error('Black depths differ');
	        }
	        else {
	            return blackDepth + (this.isRed_() ? 0 : 1);
	        }
	    };
	    LLRBNode.RED = true;
	    LLRBNode.BLACK = false;
	    return LLRBNode;
	}());
	/**
	 * Represents an empty node (a leaf node in the Red-Black Tree).
	 */
	var LLRBEmptyNode = /** @class */ (function () {
	    function LLRBEmptyNode() {
	    }
	    /**
	     * Returns a copy of the current node.
	     *
	     * @return {!LLRBEmptyNode} The node copy.
	     */
	    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
	        return this;
	    };
	    /**
	     * Returns a copy of the tree, with the specified key/value added.
	     *
	     * @param {!K} key Key to be added.
	     * @param {!V} value Value to be added.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode} New tree, with item added.
	     */
	    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
	        return new LLRBNode(key, value, null);
	    };
	    /**
	     * Returns a copy of the tree, with the specified key removed.
	     *
	     * @param {!K} key The key to remove.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBEmptyNode} New tree, with item removed.
	     */
	    LLRBEmptyNode.prototype.remove = function (key, comparator) {
	        return this;
	    };
	    /**
	     * @return {number} The total number of nodes in the tree.
	     */
	    LLRBEmptyNode.prototype.count = function () {
	        return 0;
	    };
	    /**
	     * @return {boolean} True if the tree is empty.
	     */
	    LLRBEmptyNode.prototype.isEmpty = function () {
	        return true;
	    };
	    /**
	     * Traverses the tree in key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {boolean} True if traversal was aborted.
	     */
	    LLRBEmptyNode.prototype.inorderTraversal = function (action) {
	        return false;
	    };
	    /**
	     * Traverses the tree in reverse key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V)} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {boolean} True if traversal was aborted.
	     */
	    LLRBEmptyNode.prototype.reverseTraversal = function (action) {
	        return false;
	    };
	    /**
	     * @return {null}
	     */
	    LLRBEmptyNode.prototype.minKey = function () {
	        return null;
	    };
	    /**
	     * @return {null}
	     */
	    LLRBEmptyNode.prototype.maxKey = function () {
	        return null;
	    };
	    /**
	     * @private
	     * @return {number} Not sure what this returns exactly. :-).
	     */
	    LLRBEmptyNode.prototype.check_ = function () {
	        return 0;
	    };
	    /**
	     * @private
	     * @return {boolean} Whether this node is red.
	     */
	    LLRBEmptyNode.prototype.isRed_ = function () {
	        return false;
	    };
	    return LLRBEmptyNode;
	}());
	/**
	 * An immutable sorted map implementation, based on a Left-leaning Red-Black
	 * tree.
	 */
	var SortedMap = /** @class */ (function () {
	    /**
	     * @template K, V
	     * @param {function(K, K):number} comparator_ Key comparator.
	     * @param {LLRBNode=} root_ (Optional) Root node for the map.
	     */
	    function SortedMap(comparator_, root_) {
	        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
	        this.comparator_ = comparator_;
	        this.root_ = root_;
	    }
	    /**
	     * Returns a copy of the map, with the specified key/value added or replaced.
	     * (TODO: We should perhaps rename this method to 'put')
	     *
	     * @param {!K} key Key to be added.
	     * @param {!V} value Value to be added.
	     * @return {!SortedMap.<K, V>} New map, with item added.
	     */
	    SortedMap.prototype.insert = function (key, value) {
	        return new SortedMap(this.comparator_, this.root_
	            .insert(key, value, this.comparator_)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    /**
	     * Returns a copy of the map, with the specified key removed.
	     *
	     * @param {!K} key The key to remove.
	     * @return {!SortedMap.<K, V>} New map, with item removed.
	     */
	    SortedMap.prototype.remove = function (key) {
	        return new SortedMap(this.comparator_, this.root_
	            .remove(key, this.comparator_)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    /**
	     * Returns the value of the node with the given key, or null.
	     *
	     * @param {!K} key The key to look up.
	     * @return {?V} The value of the node with the given key, or null if the
	     * key doesn't exist.
	     */
	    SortedMap.prototype.get = function (key) {
	        var cmp;
	        var node = this.root_;
	        while (!node.isEmpty()) {
	            cmp = this.comparator_(key, node.key);
	            if (cmp === 0) {
	                return node.value;
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else if (cmp > 0) {
	                node = node.right;
	            }
	        }
	        return null;
	    };
	    /**
	     * Returns the key of the item *before* the specified key, or null if key is the first item.
	     * @param {K} key The key to find the predecessor of
	     * @return {?K} The predecessor key.
	     */
	    SortedMap.prototype.getPredecessorKey = function (key) {
	        var cmp, node = this.root_, rightParent = null;
	        while (!node.isEmpty()) {
	            cmp = this.comparator_(key, node.key);
	            if (cmp === 0) {
	                if (!node.left.isEmpty()) {
	                    node = node.left;
	                    while (!node.right.isEmpty())
	                        node = node.right;
	                    return node.key;
	                }
	                else if (rightParent) {
	                    return rightParent.key;
	                }
	                else {
	                    return null; // first item.
	                }
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else if (cmp > 0) {
	                rightParent = node;
	                node = node.right;
	            }
	        }
	        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
	    };
	    /**
	     * @return {boolean} True if the map is empty.
	     */
	    SortedMap.prototype.isEmpty = function () {
	        return this.root_.isEmpty();
	    };
	    /**
	     * @return {number} The total number of nodes in the map.
	     */
	    SortedMap.prototype.count = function () {
	        return this.root_.count();
	    };
	    /**
	     * @return {?K} The minimum key in the map.
	     */
	    SortedMap.prototype.minKey = function () {
	        return this.root_.minKey();
	    };
	    /**
	     * @return {?K} The maximum key in the map.
	     */
	    SortedMap.prototype.maxKey = function () {
	        return this.root_.maxKey();
	    };
	    /**
	     * Traverses the map in key order and calls the specified action function
	     * for each key/value pair.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called
	     * for each key/value pair.  If action returns true, traversal is aborted.
	     * @return {*} The first truthy value returned by action, or the last falsey
	     *   value returned by action
	     */
	    SortedMap.prototype.inorderTraversal = function (action) {
	        return this.root_.inorderTraversal(action);
	    };
	    /**
	     * Traverses the map in reverse key order and calls the specified action function
	     * for each key/value pair.
	     *
	     * @param {function(!Object, !Object)} action Callback function to be called
	     * for each key/value pair.  If action returns true, traversal is aborted.
	     * @return {*} True if the traversal was aborted.
	     */
	    SortedMap.prototype.reverseTraversal = function (action) {
	        return this.root_.reverseTraversal(action);
	    };
	    /**
	     * Returns an iterator over the SortedMap.
	     * @template T
	     * @param {(function(K, V):T)=} resultGenerator
	     * @return {SortedMapIterator.<K, V, T>} The iterator.
	     */
	    SortedMap.prototype.getIterator = function (resultGenerator) {
	        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
	    };
	    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
	        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
	    };
	    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
	        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
	    };
	    SortedMap.prototype.getReverseIterator = function (resultGenerator) {
	        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
	    };
	    /**
	     * Always use the same empty node, to reduce memory.
	     * @const
	     */
	    SortedMap.EMPTY_NODE = new LLRBEmptyNode();
	    return SortedMap;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_2 = Math.log(2);
	/**
	 * @constructor
	 */
	var Base12Num = /** @class */ (function () {
	    /**
	     * @param {number} length
	     */
	    function Base12Num(length) {
	        var logBase2 = function (num) {
	            return parseInt((Math.log(num) / LOG_2), 10);
	        };
	        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
	        this.count = logBase2(length + 1);
	        this.current_ = this.count - 1;
	        var mask = bitMask(this.count);
	        this.bits_ = (length + 1) & mask;
	    }
	    /**
	     * @return {boolean}
	     */
	    Base12Num.prototype.nextBitIsOne = function () {
	        //noinspection JSBitwiseOperatorUsage
	        var result = !(this.bits_ & (0x1 << this.current_));
	        this.current_--;
	        return result;
	    };
	    return Base12Num;
	}());
	/**
	 * Takes a list of child nodes and constructs a SortedSet using the given comparison
	 * function
	 *
	 * Uses the algorithm described in the paper linked here:
	 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
	 *
	 * @template K, V
	 * @param {Array.<!NamedNode>} childList Unsorted list of children
	 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
	 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
	 *                                                        type is not NamedNode
	 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
	 * @return {SortedMap.<K, V>}
	 */
	var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
	    childList.sort(cmp);
	    var buildBalancedTree = function (low, high) {
	        var length = high - low;
	        var namedNode;
	        var key;
	        if (length == 0) {
	            return null;
	        }
	        else if (length == 1) {
	            namedNode = childList[low];
	            key = keyFn ? keyFn(namedNode) : namedNode;
	            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
	        }
	        else {
	            var middle = parseInt((length / 2), 10) + low;
	            var left = buildBalancedTree(low, middle);
	            var right = buildBalancedTree(middle + 1, high);
	            namedNode = childList[middle];
	            key = keyFn ? keyFn(namedNode) : namedNode;
	            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
	        }
	    };
	    var buildFrom12Array = function (base12) {
	        var node = null;
	        var root = null;
	        var index = childList.length;
	        var buildPennant = function (chunkSize, color) {
	            var low = index - chunkSize;
	            var high = index;
	            index -= chunkSize;
	            var childTree = buildBalancedTree(low + 1, high);
	            var namedNode = childList[low];
	            var key = keyFn ? keyFn(namedNode) : namedNode;
	            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
	        };
	        var attachPennant = function (pennant) {
	            if (node) {
	                node.left = pennant;
	                node = pennant;
	            }
	            else {
	                root = pennant;
	                node = pennant;
	            }
	        };
	        for (var i = 0; i < base12.count; ++i) {
	            var isOne = base12.nextBitIsOne();
	            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
	            var chunkSize = Math.pow(2, base12.count - (i + 1));
	            if (isOne) {
	                buildPennant(chunkSize, LLRBNode.BLACK);
	            }
	            else {
	                // current == 2
	                buildPennant(chunkSize, LLRBNode.BLACK);
	                buildPennant(chunkSize, LLRBNode.RED);
	            }
	        }
	        return root;
	    };
	    var base12 = new Base12Num(childList.length);
	    var root = buildFrom12Array(base12);
	    return new SortedMap(mapSortFn || cmp, root);
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _defaultIndexMap;
	var fallbackObject = {};
	/**
	 *
	 * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes
	 * @param {Object.<string, Index>} indexSet
	 * @constructor
	 */
	var IndexMap = /** @class */ (function () {
	    function IndexMap(indexes_, indexSet_) {
	        this.indexes_ = indexes_;
	        this.indexSet_ = indexSet_;
	    }
	    Object.defineProperty(IndexMap, "Default", {
	        /**
	         * The default IndexMap for nodes without a priority
	         * @type {!IndexMap}
	         * @const
	         */
	        get: function () {
	            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
	            _defaultIndexMap =
	                _defaultIndexMap ||
	                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
	            return _defaultIndexMap;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     *
	     * @param {!string} indexKey
	     * @return {?SortedMap.<NamedNode, Node>}
	     */
	    IndexMap.prototype.get = function (indexKey) {
	        var sortedMap = util.safeGet(this.indexes_, indexKey);
	        if (!sortedMap)
	            throw new Error('No index defined for ' + indexKey);
	        if (sortedMap === fallbackObject) {
	            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
	            // regular child map
	            return null;
	        }
	        else {
	            return sortedMap;
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {boolean}
	     */
	    IndexMap.prototype.hasIndex = function (indexDefinition) {
	        return util.contains(this.indexSet_, indexDefinition.toString());
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @param {!SortedMap.<string, !Node>} existingChildren
	     * @return {!IndexMap}
	     */
	    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
	        util.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
	        var childList = [];
	        var sawIndexedValue = false;
	        var iter = existingChildren.getIterator(NamedNode.Wrap);
	        var next = iter.getNext();
	        while (next) {
	            sawIndexedValue =
	                sawIndexedValue || indexDefinition.isDefinedOn(next.node);
	            childList.push(next);
	            next = iter.getNext();
	        }
	        var newIndex;
	        if (sawIndexedValue) {
	            newIndex = buildChildSet(childList, indexDefinition.getCompare());
	        }
	        else {
	            newIndex = fallbackObject;
	        }
	        var indexName = indexDefinition.toString();
	        var newIndexSet = util.clone(this.indexSet_);
	        newIndexSet[indexName] = indexDefinition;
	        var newIndexes = util.clone(this.indexes_);
	        newIndexes[indexName] = newIndex;
	        return new IndexMap(newIndexes, newIndexSet);
	    };
	    /**
	     * Ensure that this node is properly tracked in any indexes that we're maintaining
	     * @param {!NamedNode} namedNode
	     * @param {!SortedMap.<string, !Node>} existingChildren
	     * @return {!IndexMap}
	     */
	    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
	        var _this = this;
	        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {
	            var index = util.safeGet(_this.indexSet_, indexName);
	            util.assert(index, 'Missing index implementation for ' + indexName);
	            if (indexedChildren === fallbackObject) {
	                // Check to see if we need to index everything
	                if (index.isDefinedOn(namedNode.node)) {
	                    // We need to build this index
	                    var childList = [];
	                    var iter = existingChildren.getIterator(NamedNode.Wrap);
	                    var next = iter.getNext();
	                    while (next) {
	                        if (next.name != namedNode.name) {
	                            childList.push(next);
	                        }
	                        next = iter.getNext();
	                    }
	                    childList.push(namedNode);
	                    return buildChildSet(childList, index.getCompare());
	                }
	                else {
	                    // No change, this remains a fallback
	                    return fallbackObject;
	                }
	            }
	            else {
	                var existingSnap = existingChildren.get(namedNode.name);
	                var newChildren = indexedChildren;
	                if (existingSnap) {
	                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
	                }
	                return newChildren.insert(namedNode, namedNode.node);
	            }
	        });
	        return new IndexMap(newIndexes, this.indexSet_);
	    };
	    /**
	     * Create a new IndexMap instance with the given value removed
	     * @param {!NamedNode} namedNode
	     * @param {!SortedMap.<string, !Node>} existingChildren
	     * @return {!IndexMap}
	     */
	    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
	        var newIndexes = util.map(this.indexes_, function (indexedChildren) {
	            if (indexedChildren === fallbackObject) {
	                // This is the fallback. Just return it, nothing to do in this case
	                return indexedChildren;
	            }
	            else {
	                var existingSnap = existingChildren.get(namedNode.name);
	                if (existingSnap) {
	                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
	                }
	                else {
	                    // No record of this child
	                    return indexedChildren;
	                }
	            }
	        });
	        return new IndexMap(newIndexes, this.indexSet_);
	    };
	    return IndexMap;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function NAME_ONLY_COMPARATOR(left, right) {
	    return nameCompare(left.name, right.name);
	}
	function NAME_COMPARATOR(left, right) {
	    return nameCompare(left, right);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// TODO: For memory savings, don't store priorityNode_ if it's empty.
	var EMPTY_NODE;
	/**
	 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
	 * (i.e. nodes with children).  It implements Node and stores the
	 * list of children in the children property, sorted by child name.
	 *
	 * @constructor
	 * @implements {Node}
	 */
	var ChildrenNode = /** @class */ (function () {
	    /**
	     *
	     * @param {!SortedMap.<string, !Node>} children_ List of children
	     * of this node..
	     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
	     * @param {!IndexMap} indexMap_
	     */
	    function ChildrenNode(children_, priorityNode_, indexMap_) {
	        this.children_ = children_;
	        this.priorityNode_ = priorityNode_;
	        this.indexMap_ = indexMap_;
	        this.lazyHash_ = null;
	        /**
	         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
	         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
	         * class instead of an empty ChildrenNode.
	         */
	        if (this.priorityNode_) {
	            validatePriorityNode(this.priorityNode_);
	        }
	        if (this.children_.isEmpty()) {
	            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
	        }
	    }
	    Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
	        get: function () {
	            return (EMPTY_NODE ||
	                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @inheritDoc */
	    ChildrenNode.prototype.isLeafNode = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getPriority = function () {
	        return this.priorityNode_ || EMPTY_NODE;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
	        if (this.children_.isEmpty()) {
	            // Don't allow priorities on empty nodes
	            return this;
	        }
	        else {
	            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getImmediateChild = function (childName) {
	        // Hack to treat priority as a regular child
	        if (childName === '.priority') {
	            return this.getPriority();
	        }
	        else {
	            var child = this.children_.get(childName);
	            return child === null ? EMPTY_NODE : child;
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getChild = function (path) {
	        var front = path.getFront();
	        if (front === null)
	            return this;
	        return this.getImmediateChild(front).getChild(path.popFront());
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.hasChild = function (childName) {
	        return this.children_.get(childName) !== null;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
	        util.assert(newChildNode, 'We should always be passing snapshot nodes');
	        if (childName === '.priority') {
	            return this.updatePriority(newChildNode);
	        }
	        else {
	            var namedNode = new NamedNode(childName, newChildNode);
	            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;
	            if (newChildNode.isEmpty()) {
	                newChildren = this.children_.remove(childName);
	                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
	            }
	            else {
	                newChildren = this.children_.insert(childName, newChildNode);
	                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
	            }
	            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
	            return new ChildrenNode(newChildren, newPriority, newIndexMap);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updateChild = function (path, newChildNode) {
	        var front = path.getFront();
	        if (front === null) {
	            return newChildNode;
	        }
	        else {
	            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
	            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
	            return this.updateImmediateChild(front, newImmediateChild);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.isEmpty = function () {
	        return this.children_.isEmpty();
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.numChildren = function () {
	        return this.children_.count();
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.val = function (exportFormat) {
	        if (this.isEmpty())
	            return null;
	        var obj = {};
	        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
	        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	            obj[key] = childNode.val(exportFormat);
	            numKeys++;
	            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
	                maxKey = Math.max(maxKey, Number(key));
	            }
	            else {
	                allIntegerKeys = false;
	            }
	        });
	        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
	            // convert to array.
	            var array = [];
	            for (var key in obj)
	                array[key] = obj[key];
	            return array;
	        }
	        else {
	            if (exportFormat && !this.getPriority().isEmpty()) {
	                obj['.priority'] = this.getPriority().val();
	            }
	            return obj;
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.hash = function () {
	        if (this.lazyHash_ === null) {
	            var toHash_1 = '';
	            if (!this.getPriority().isEmpty())
	                toHash_1 +=
	                    'priority:' +
	                        priorityHashText(this.getPriority().val()) +
	                        ':';
	            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                var childHash = childNode.hash();
	                if (childHash !== '')
	                    toHash_1 += ':' + key + ':' + childHash;
	            });
	            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
	        }
	        return this.lazyHash_;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
	        var idx = this.resolveIndex_(index);
	        if (idx) {
	            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
	            return predecessor ? predecessor.name : null;
	        }
	        else {
	            return this.children_.getPredecessorKey(childName);
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?string}
	     */
	    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            var minKey = idx.minKey();
	            return minKey && minKey.name;
	        }
	        else {
	            return this.children_.minKey();
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?NamedNode}
	     */
	    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
	        var minKey = this.getFirstChildName(indexDefinition);
	        if (minKey) {
	            return new NamedNode(minKey, this.children_.get(minKey));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Given an index, return the key name of the largest value we have, according to that index
	     * @param {!Index} indexDefinition
	     * @return {?string}
	     */
	    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            var maxKey = idx.maxKey();
	            return maxKey && maxKey.name;
	        }
	        else {
	            return this.children_.maxKey();
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?NamedNode}
	     */
	    ChildrenNode.prototype.getLastChild = function (indexDefinition) {
	        var maxKey = this.getLastChildName(indexDefinition);
	        if (maxKey) {
	            return new NamedNode(maxKey, this.children_.get(maxKey));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.forEachChild = function (index, action) {
	        var idx = this.resolveIndex_(index);
	        if (idx) {
	            return idx.inorderTraversal(function (wrappedNode) {
	                return action(wrappedNode.name, wrappedNode.node);
	            });
	        }
	        else {
	            return this.children_.inorderTraversal(action);
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {SortedMapIterator}
	     */
	    ChildrenNode.prototype.getIterator = function (indexDefinition) {
	        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
	    };
	    /**
	     *
	     * @param {!NamedNode} startPost
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            return idx.getIteratorFrom(startPost, function (key) { return key; });
	        }
	        else {
	            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
	            var next = iterator.peek();
	            while (next != null && indexDefinition.compare(next, startPost) < 0) {
	                iterator.getNext();
	                next = iterator.peek();
	            }
	            return iterator;
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
	        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
	    };
	    /**
	     * @param {!NamedNode} endPost
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            return idx.getReverseIteratorFrom(endPost, function (key) {
	                return key;
	            });
	        }
	        else {
	            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
	            var next = iterator.peek();
	            while (next != null && indexDefinition.compare(next, endPost) > 0) {
	                iterator.getNext();
	                next = iterator.peek();
	            }
	            return iterator;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.compareTo = function (other) {
	        if (this.isEmpty()) {
	            if (other.isEmpty()) {
	                return 0;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (other.isLeafNode() || other.isEmpty()) {
	            return 1;
	        }
	        else if (other === MAX_NODE$2) {
	            return -1;
	        }
	        else {
	            // Must be another node with children.
	            return 0;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.withIndex = function (indexDefinition) {
	        if (indexDefinition === KEY_INDEX ||
	            this.indexMap_.hasIndex(indexDefinition)) {
	            return this;
	        }
	        else {
	            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
	            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.isIndexed = function (index) {
	        return index === KEY_INDEX || this.indexMap_.hasIndex(index);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.equals = function (other) {
	        if (other === this) {
	            return true;
	        }
	        else if (other.isLeafNode()) {
	            return false;
	        }
	        else {
	            var otherChildrenNode = other;
	            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
	                return false;
	            }
	            else if (this.children_.count() === otherChildrenNode.children_.count()) {
	                var thisIter = this.getIterator(PRIORITY_INDEX);
	                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
	                var thisCurrent = thisIter.getNext();
	                var otherCurrent = otherIter.getNext();
	                while (thisCurrent && otherCurrent) {
	                    if (thisCurrent.name !== otherCurrent.name ||
	                        !thisCurrent.node.equals(otherCurrent.node)) {
	                        return false;
	                    }
	                    thisCurrent = thisIter.getNext();
	                    otherCurrent = otherIter.getNext();
	                }
	                return thisCurrent === null && otherCurrent === null;
	            }
	            else {
	                return false;
	            }
	        }
	    };
	    /**
	     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
	     * instead.
	     *
	     * @private
	     * @param {!Index} indexDefinition
	     * @return {?SortedMap.<NamedNode, Node>}
	     */
	    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
	        if (indexDefinition === KEY_INDEX) {
	            return null;
	        }
	        else {
	            return this.indexMap_.get(indexDefinition.toString());
	        }
	    };
	    /**
	     * @private
	     * @type {RegExp}
	     */
	    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
	    return ChildrenNode;
	}());
	/**
	 * @constructor
	 * @extends {ChildrenNode}
	 * @private
	 */
	var MaxNode = /** @class */ (function (_super) {
	    tslib_1.__extends(MaxNode, _super);
	    function MaxNode() {
	        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
	    }
	    MaxNode.prototype.compareTo = function (other) {
	        if (other === this) {
	            return 0;
	        }
	        else {
	            return 1;
	        }
	    };
	    MaxNode.prototype.equals = function (other) {
	        // Not that we every compare it, but MAX_NODE is only ever equal to itself
	        return other === this;
	    };
	    MaxNode.prototype.getPriority = function () {
	        return this;
	    };
	    MaxNode.prototype.getImmediateChild = function (childName) {
	        return ChildrenNode.EMPTY_NODE;
	    };
	    MaxNode.prototype.isEmpty = function () {
	        return false;
	    };
	    return MaxNode;
	}(ChildrenNode));
	/**
	 * Marker that will sort higher than any other snapshot.
	 * @type {!MAX_NODE}
	 * @const
	 */
	var MAX_NODE$2 = new MaxNode();
	Object.defineProperties(NamedNode, {
	    MIN: {
	        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
	    },
	    MAX: {
	        value: new NamedNode(MAX_NAME, MAX_NODE$2)
	    }
	});
	/**
	 * Reference Extensions
	 */
	KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
	LeafNode.__childrenNodeConstructor = ChildrenNode;
	setMaxNode(MAX_NODE$2);
	setMaxNode$1(MAX_NODE$2);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var USE_HINZE = true;
	/**
	 * Constructs a snapshot node representing the passed JSON and returns it.
	 * @param {*} json JSON to create a node for.
	 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
	 * passed JSON contains a .priority property.
	 * @return {!Node}
	 */
	function nodeFromJSON$1(json, priority) {
	    if (priority === void 0) { priority = null; }
	    if (json === null) {
	        return ChildrenNode.EMPTY_NODE;
	    }
	    if (typeof json === 'object' && '.priority' in json) {
	        priority = json['.priority'];
	    }
	    util.assert(priority === null ||
	        typeof priority === 'string' ||
	        typeof priority === 'number' ||
	        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
	    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
	        json = json['.value'];
	    }
	    // Valid leaf nodes include non-objects or server-value wrapper objects
	    if (typeof json !== 'object' || '.sv' in json) {
	        var jsonLeaf = json;
	        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
	    }
	    if (!(json instanceof Array) && USE_HINZE) {
	        var children_1 = [];
	        var childrenHavePriority_1 = false;
	        var hinzeJsonObj_1 = json;
	        util.forEach(hinzeJsonObj_1, function (key, child) {
	            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {
	                // Ignore metadata nodes
	                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);
	                if (!childNode.isEmpty()) {
	                    childrenHavePriority_1 =
	                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();
	                    children_1.push(new NamedNode(key, childNode));
	                }
	            }
	        });
	        if (children_1.length == 0) {
	            return ChildrenNode.EMPTY_NODE;
	        }
	        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
	        if (childrenHavePriority_1) {
	            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
	            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
	        }
	        else {
	            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
	        }
	    }
	    else {
	        var node_1 = ChildrenNode.EMPTY_NODE;
	        var jsonObj_1 = json;
	        util.forEach(jsonObj_1, function (key, childData) {
	            if (util.contains(jsonObj_1, key)) {
	                if (key.substring(0, 1) !== '.') {
	                    // ignore metadata nodes.
	                    var childNode = nodeFromJSON$1(childData);
	                    if (childNode.isLeafNode() || !childNode.isEmpty())
	                        node_1 = node_1.updateImmediateChild(key, childNode);
	                }
	            }
	        });
	        return node_1.updatePriority(nodeFromJSON$1(priority));
	    }
	}
	setNodeFromJSON(nodeFromJSON$1);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @extends {Index}
	 * @private
	 */
	var ValueIndex = /** @class */ (function (_super) {
	    tslib_1.__extends(ValueIndex, _super);
	    function ValueIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.compare = function (a, b) {
	        var indexCmp = a.node.compareTo(b.node);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.isDefinedOn = function (node) {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return !oldNode.equals(newNode);
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.minPost = function () {
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.maxPost = function () {
	        return NamedNode.MAX;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    ValueIndex.prototype.makePost = function (indexValue, name) {
	        var valueNode = nodeFromJSON$1(indexValue);
	        return new NamedNode(name, valueNode);
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    ValueIndex.prototype.toString = function () {
	        return '.value';
	    };
	    return ValueIndex;
	}(Index));
	var VALUE_INDEX = new ValueIndex();

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!Path} indexPath
	 * @constructor
	 * @extends {Index}
	 */
	var PathIndex = /** @class */ (function (_super) {
	    tslib_1.__extends(PathIndex, _super);
	    function PathIndex(indexPath_) {
	        var _this = _super.call(this) || this;
	        _this.indexPath_ = indexPath_;
	        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
	        return _this;
	    }
	    /**
	     * @param {!Node} snap
	     * @return {!Node}
	     * @protected
	     */
	    PathIndex.prototype.extractChild = function (snap) {
	        return snap.getChild(this.indexPath_);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.isDefinedOn = function (node) {
	        return !node.getChild(this.indexPath_).isEmpty();
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.compare = function (a, b) {
	        var aChild = this.extractChild(a.node);
	        var bChild = this.extractChild(b.node);
	        var indexCmp = aChild.compareTo(bChild);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.makePost = function (indexValue, name) {
	        var valueNode = nodeFromJSON$1(indexValue);
	        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
	        return new NamedNode(name, node);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.maxPost = function () {
	        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
	        return new NamedNode(MAX_NAME, node);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.toString = function () {
	        return this.indexPath_.slice().join('/');
	    };
	    return PathIndex;
	}(Index));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
	 * surfaces the public methods (val, forEach, etc.) we want to expose.
	 */
	var DataSnapshot = /** @class */ (function () {
	    /**
	     * @param {!Node} node_ A SnapshotNode to wrap.
	     * @param {!Reference} ref_ The ref of the location this snapshot came from.
	     * @param {!Index} index_ The iteration order for this snapshot
	     */
	    function DataSnapshot(node_, ref_, index_) {
	        this.node_ = node_;
	        this.ref_ = ref_;
	        this.index_ = index_;
	    }
	    /**
	     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
	     * empty.
	     *
	     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
	     */
	    DataSnapshot.prototype.val = function () {
	        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
	        return this.node_.val();
	    };
	    /**
	     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
	     * the entire node contents.
	     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
	     */
	    DataSnapshot.prototype.exportVal = function () {
	        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
	        return this.node_.val(true);
	    };
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users
	    DataSnapshot.prototype.toJSON = function () {
	        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
	        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
	        return this.exportVal();
	    };
	    /**
	     * Returns whether the snapshot contains a non-null value.
	     *
	     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
	     */
	    DataSnapshot.prototype.exists = function () {
	        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
	        return !this.node_.isEmpty();
	    };
	    /**
	     * Returns a DataSnapshot of the specified child node's contents.
	     *
	     * @param {!string} childPathString Path to a child.
	     * @return {!DataSnapshot} DataSnapshot for child node.
	     */
	    DataSnapshot.prototype.child = function (childPathString) {
	        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
	        // Ensure the childPath is a string (can be a number)
	        childPathString = String(childPathString);
	        validatePathString('DataSnapshot.child', 1, childPathString, false);
	        var childPath = new Path(childPathString);
	        var childRef = this.ref_.child(childPath);
	        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
	    };
	    /**
	     * Returns whether the snapshot contains a child at the specified path.
	     *
	     * @param {!string} childPathString Path to a child.
	     * @return {boolean} Whether the child exists.
	     */
	    DataSnapshot.prototype.hasChild = function (childPathString) {
	        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
	        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
	        var childPath = new Path(childPathString);
	        return !this.node_.getChild(childPath).isEmpty();
	    };
	    /**
	     * Returns the priority of the object, or null if no priority was set.
	     *
	     * @return {string|number|null} The priority.
	     */
	    DataSnapshot.prototype.getPriority = function () {
	        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
	        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
	        return this.node_.getPriority().val();
	    };
	    /**
	     * Iterates through child nodes and calls the specified action for each one.
	     *
	     * @param {function(!DataSnapshot)} action Callback function to be called
	     * for each child.
	     * @return {boolean} True if forEach was canceled by action returning true for
	     * one of the child nodes.
	     */
	    DataSnapshot.prototype.forEach = function (action) {
	        var _this = this;
	        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
	        util.validateCallback('DataSnapshot.forEach', 1, action, false);
	        if (this.node_.isLeafNode())
	            return false;
	        var childrenNode = this.node_;
	        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
	        return !!childrenNode.forEachChild(this.index_, function (key, node) {
	            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
	        });
	    };
	    /**
	     * Returns whether this DataSnapshot has children.
	     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
	     */
	    DataSnapshot.prototype.hasChildren = function () {
	        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
	        if (this.node_.isLeafNode())
	            return false;
	        else
	            return !this.node_.isEmpty();
	    };
	    Object.defineProperty(DataSnapshot.prototype, "key", {
	        get: function () {
	            return this.ref_.getKey();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns the number of children for this DataSnapshot.
	     * @return {number} The number of children that this DataSnapshot contains.
	     */
	    DataSnapshot.prototype.numChildren = function () {
	        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
	        return this.node_.numChildren();
	    };
	    /**
	     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
	     */
	    DataSnapshot.prototype.getRef = function () {
	        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
	        return this.ref_;
	    };
	    Object.defineProperty(DataSnapshot.prototype, "ref", {
	        get: function () {
	            return this.getRef();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DataSnapshot;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Encapsulates the data needed to raise an event
	 * @implements {Event}
	 */
	var DataEvent = /** @class */ (function () {
	    /**
	     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
	     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
	     * @param {!DataSnapshot} snapshot The data backing the event
	     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
	     */
	    function DataEvent(eventType, eventRegistration, snapshot, prevName) {
	        this.eventType = eventType;
	        this.eventRegistration = eventRegistration;
	        this.snapshot = snapshot;
	        this.prevName = prevName;
	    }
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getPath = function () {
	        var ref = this.snapshot.getRef();
	        if (this.eventType === 'value') {
	            return ref.path;
	        }
	        else {
	            return ref.getParent().path;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getEventType = function () {
	        return this.eventType;
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getEventRunner = function () {
	        return this.eventRegistration.getEventRunner(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.toString = function () {
	        return (this.getPath().toString() +
	            ':' +
	            this.eventType +
	            ':' +
	            util.stringify(this.snapshot.exportVal()));
	    };
	    return DataEvent;
	}());
	var CancelEvent = /** @class */ (function () {
	    /**
	     * @param {EventRegistration} eventRegistration
	     * @param {Error} error
	     * @param {!Path} path
	     */
	    function CancelEvent(eventRegistration, error, path) {
	        this.eventRegistration = eventRegistration;
	        this.error = error;
	        this.path = path;
	    }
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getPath = function () {
	        return this.path;
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getEventType = function () {
	        return 'cancel';
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getEventRunner = function () {
	        return this.eventRegistration.getEventRunner(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.toString = function () {
	        return this.path.toString() + ':cancel';
	    };
	    return CancelEvent;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents registration for 'value' events.
	 */
	var ValueEventRegistration = /** @class */ (function () {
	    /**
	     * @param {?function(!DataSnapshot)} callback_
	     * @param {?function(Error)} cancelCallback_
	     * @param {?Object} context_
	     */
	    function ValueEventRegistration(callback_, cancelCallback_, context_) {
	        this.callback_ = callback_;
	        this.cancelCallback_ = cancelCallback_;
	        this.context_ = context_;
	    }
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.respondsTo = function (eventType) {
	        return eventType === 'value';
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.createEvent = function (change, query) {
	        var index = query.getQueryParams().getIndex();
	        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.getEventRunner = function (eventData) {
	        var ctx = this.context_;
	        if (eventData.getEventType() === 'cancel') {
	            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
	            var cancelCB_1 = this.cancelCallback_;
	            return function () {
	                // We know that error exists, we checked above that this is a cancel event
	                cancelCB_1.call(ctx, eventData.error);
	            };
	        }
	        else {
	            var cb_1 = this.callback_;
	            return function () {
	                cb_1.call(ctx, eventData.snapshot);
	            };
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
	        if (this.cancelCallback_) {
	            return new CancelEvent(this, error, path);
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.matches = function (other) {
	        if (!(other instanceof ValueEventRegistration)) {
	            return false;
	        }
	        else if (!other.callback_ || !this.callback_) {
	            // If no callback specified, we consider it to match any callback.
	            return true;
	        }
	        else {
	            return (other.callback_ === this.callback_ && other.context_ === this.context_);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.hasAnyCallback = function () {
	        return this.callback_ !== null;
	    };
	    return ValueEventRegistration;
	}());
	/**
	 * Represents the registration of 1 or more child_xxx events.
	 *
	 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
	 * register a group of callbacks together in the future.
	 *
	 * @constructor
	 * @implements {EventRegistration}
	 */
	var ChildEventRegistration = /** @class */ (function () {
	    /**
	     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
	     * @param {?function(Error)} cancelCallback_
	     * @param {Object=} context_
	     */
	    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
	        this.callbacks_ = callbacks_;
	        this.cancelCallback_ = cancelCallback_;
	        this.context_ = context_;
	    }
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.respondsTo = function (eventType) {
	        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
	        eventToCheck =
	            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
	        return util.contains(this.callbacks_, eventToCheck);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
	        if (this.cancelCallback_) {
	            return new CancelEvent(this, error, path);
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.createEvent = function (change, query) {
	        util.assert(change.childName != null, 'Child events should have a childName.');
	        var ref = query.getRef().child(/** @type {!string} */ (change.childName));
	        var index = query.getQueryParams().getIndex();
	        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.getEventRunner = function (eventData) {
	        var ctx = this.context_;
	        if (eventData.getEventType() === 'cancel') {
	            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
	            var cancelCB_2 = this.cancelCallback_;
	            return function () {
	                // We know that error exists, we checked above that this is a cancel event
	                cancelCB_2.call(ctx, eventData.error);
	            };
	        }
	        else {
	            var cb_2 = this.callbacks_[eventData.eventType];
	            return function () {
	                cb_2.call(ctx, eventData.snapshot, eventData.prevName);
	            };
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.matches = function (other) {
	        if (other instanceof ChildEventRegistration) {
	            if (!this.callbacks_ || !other.callbacks_) {
	                return true;
	            }
	            else if (this.context_ === other.context_) {
	                var otherCount = util.getCount(other.callbacks_);
	                var thisCount = util.getCount(this.callbacks_);
	                if (otherCount === thisCount) {
	                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
	                    //  If event types don't match, not a match
	                    // If count is not 1, exact match across all
	                    if (otherCount === 1) {
	                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);
	                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);
	                        return (thisKey === otherKey &&
	                            (!other.callbacks_[otherKey] ||
	                                !this.callbacks_[thisKey] ||
	                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));
	                    }
	                    else {
	                        // Exact match on each key.
	                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });
	                    }
	                }
	            }
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.hasAnyCallback = function () {
	        return this.callbacks_ !== null;
	    };
	    return ChildEventRegistration;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __referenceConstructor;
	/**
	 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
	 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
	 *
	 * Since every Firebase reference is a query, Firebase inherits from this object.
	 */
	var Query = /** @class */ (function () {
	    function Query(repo, path, queryParams_, orderByCalled_) {
	        this.repo = repo;
	        this.path = path;
	        this.queryParams_ = queryParams_;
	        this.orderByCalled_ = orderByCalled_;
	    }
	    Object.defineProperty(Query, "__referenceConstructor", {
	        get: function () {
	            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');
	            return __referenceConstructor;
	        },
	        set: function (val) {
	            __referenceConstructor = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Validates start/end values for queries.
	     * @param {!QueryParams} params
	     * @private
	     */
	    Query.validateQueryEndpoints_ = function (params) {
	        var startNode = null;
	        var endNode = null;
	        if (params.hasStart()) {
	            startNode = params.getIndexStartValue();
	        }
	        if (params.hasEnd()) {
	            endNode = params.getIndexEndValue();
	        }
	        if (params.getIndex() === KEY_INDEX) {
	            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
	                'startAt(), endAt(), or equalTo().';
	            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
	                'or equalTo() must be a string.';
	            if (params.hasStart()) {
	                var startName = params.getIndexStartName();
	                if (startName != MIN_NAME) {
	                    throw new Error(tooManyArgsError);
	                }
	                else if (typeof startNode !== 'string') {
	                    throw new Error(wrongArgTypeError);
	                }
	            }
	            if (params.hasEnd()) {
	                var endName = params.getIndexEndName();
	                if (endName != MAX_NAME) {
	                    throw new Error(tooManyArgsError);
	                }
	                else if (typeof endNode !== 'string') {
	                    throw new Error(wrongArgTypeError);
	                }
	            }
	        }
	        else if (params.getIndex() === PRIORITY_INDEX) {
	            if ((startNode != null && !isValidPriority(startNode)) ||
	                (endNode != null && !isValidPriority(endNode))) {
	                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
	                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
	            }
	        }
	        else {
	            util.assert(params.getIndex() instanceof PathIndex ||
	                params.getIndex() === VALUE_INDEX, 'unknown index type.');
	            if ((startNode != null && typeof startNode === 'object') ||
	                (endNode != null && typeof endNode === 'object')) {
	                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
	                    'an object.');
	            }
	        }
	    };
	    /**
	     * Validates that limit* has been called with the correct combination of parameters
	     * @param {!QueryParams} params
	     * @private
	     */
	    Query.validateLimit_ = function (params) {
	        if (params.hasStart() &&
	            params.hasEnd() &&
	            params.hasLimit() &&
	            !params.hasAnchoredLimit()) {
	            throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
	        }
	    };
	    /**
	     * Validates that no other order by call has been made
	     * @param {!string} fnName
	     * @private
	     */
	    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
	        if (this.orderByCalled_ === true) {
	            throw new Error(fnName + ": You can't combine multiple orderBy calls.");
	        }
	    };
	    /**
	     * @return {!QueryParams}
	     */
	    Query.prototype.getQueryParams = function () {
	        return this.queryParams_;
	    };
	    /**
	     * @return {!Reference}
	     */
	    Query.prototype.getRef = function () {
	        util.validateArgCount('Query.ref', 0, 0, arguments.length);
	        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
	        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
	        // method gets called.
	        return new Query.__referenceConstructor(this.repo, this.path);
	    };
	    /**
	     * @param {!string} eventType
	     * @param {!function(DataSnapshot, string=)} callback
	     * @param {(function(Error)|Object)=} cancelCallbackOrContext
	     * @param {Object=} context
	     * @return {!function(DataSnapshot, string=)}
	     */
	    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
	        util.validateArgCount('Query.on', 2, 4, arguments.length);
	        validateEventType('Query.on', 1, eventType, false);
	        util.validateCallback('Query.on', 2, callback, false);
	        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
	        if (eventType === 'value') {
	            this.onValueEvent(callback, ret.cancel, ret.context);
	        }
	        else {
	            var callbacks = {};
	            callbacks[eventType] = callback;
	            this.onChildEvent(callbacks, ret.cancel, ret.context);
	        }
	        return callback;
	    };
	    /**
	     * @param {!function(!DataSnapshot)} callback
	     * @param {?function(Error)} cancelCallback
	     * @param {?Object} context
	     * @protected
	     */
	    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
	        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
	        this.repo.addEventCallbackForQuery(this, container);
	    };
	    /**
	     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
	     * @param {?function(Error)} cancelCallback
	     * @param {?Object} context
	     * @protected
	     */
	    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
	        var container = new ChildEventRegistration(callbacks, cancelCallback, context);
	        this.repo.addEventCallbackForQuery(this, container);
	    };
	    /**
	     * @param {string=} eventType
	     * @param {(function(!DataSnapshot, ?string=))=} callback
	     * @param {Object=} context
	     */
	    Query.prototype.off = function (eventType, callback, context) {
	        util.validateArgCount('Query.off', 0, 3, arguments.length);
	        validateEventType('Query.off', 1, eventType, true);
	        util.validateCallback('Query.off', 2, callback, true);
	        util.validateContextObject('Query.off', 3, context, true);
	        var container = null;
	        var callbacks = null;
	        if (eventType === 'value') {
	            var valueCallback = callback || null;
	            container = new ValueEventRegistration(valueCallback, null, context || null);
	        }
	        else if (eventType) {
	            if (callback) {
	                callbacks = {};
	                callbacks[eventType] = callback;
	            }
	            container = new ChildEventRegistration(callbacks, null, context || null);
	        }
	        this.repo.removeEventCallbackForQuery(this, container);
	    };
	    /**
	     * Attaches a listener, waits for the first event, and then removes the listener
	     * @param {!string} eventType
	     * @param {!function(!DataSnapshot, string=)} userCallback
	     * @param cancelOrContext
	     * @param context
	     * @return {!firebase.Promise}
	     */
	    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {
	        var _this = this;
	        util.validateArgCount('Query.once', 1, 4, arguments.length);
	        validateEventType('Query.once', 1, eventType, false);
	        util.validateCallback('Query.once', 2, userCallback, true);
	        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);
	        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
	        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
	        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
	        // against the Promise specification.
	        var firstCall = true;
	        var deferred = new util.Deferred();
	        // A dummy error handler in case a user wasn't expecting promises
	        deferred.promise.catch(function () { });
	        var onceCallback = function (snapshot) {
	            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
	            // triggers multiple events (e.g. child_added or child_changed).
	            if (firstCall) {
	                firstCall = false;
	                _this.off(eventType, onceCallback);
	                if (userCallback) {
	                    userCallback.bind(ret.context)(snapshot);
	                }
	                deferred.resolve(snapshot);
	            }
	        };
	        this.on(eventType, onceCallback, 
	        /*cancel=*/ function (err) {
	            _this.off(eventType, onceCallback);
	            if (ret.cancel)
	                ret.cancel.bind(ret.context)(err);
	            deferred.reject(err);
	        });
	        return deferred.promise;
	    };
	    /**
	     * Set a limit and anchor it to the start of the window.
	     * @param {!number} limit
	     * @return {!Query}
	     */
	    Query.prototype.limitToFirst = function (limit) {
	        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
	        if (typeof limit !== 'number' ||
	            Math.floor(limit) !== limit ||
	            limit <= 0) {
	            throw new Error('Query.limitToFirst: First argument must be a positive integer.');
	        }
	        if (this.queryParams_.hasLimit()) {
	            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
	                'limitToFirst, or limitToLast).');
	        }
	        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
	    };
	    /**
	     * Set a limit and anchor it to the end of the window.
	     * @param {!number} limit
	     * @return {!Query}
	     */
	    Query.prototype.limitToLast = function (limit) {
	        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
	        if (typeof limit !== 'number' ||
	            Math.floor(limit) !== limit ||
	            limit <= 0) {
	            throw new Error('Query.limitToLast: First argument must be a positive integer.');
	        }
	        if (this.queryParams_.hasLimit()) {
	            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
	                'limitToFirst, or limitToLast).');
	        }
	        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
	    };
	    /**
	     * Given a child path, return a new query ordered by the specified grandchild path.
	     * @param {!string} path
	     * @return {!Query}
	     */
	    Query.prototype.orderByChild = function (path) {
	        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
	        if (path === '$key') {
	            throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
	        }
	        else if (path === '$priority') {
	            throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
	        }
	        else if (path === '$value') {
	            throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
	        }
	        validatePathString('Query.orderByChild', 1, path, false);
	        this.validateNoPreviousOrderByCall_('Query.orderByChild');
	        var parsedPath = new Path(path);
	        if (parsedPath.isEmpty()) {
	            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
	        }
	        var index = new PathIndex(parsedPath);
	        var newParams = this.queryParams_.orderBy(index);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the KeyIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByKey = function () {
	        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByKey');
	        var newParams = this.queryParams_.orderBy(KEY_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the PriorityIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByPriority = function () {
	        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByPriority');
	        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the ValueIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByValue = function () {
	        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByValue');
	        var newParams = this.queryParams_.orderBy(VALUE_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * @param {number|string|boolean|null} value
	     * @param {?string=} name
	     * @return {!Query}
	     */
	    Query.prototype.startAt = function (value, name) {
	        if (value === void 0) { value = null; }
	        util.validateArgCount('Query.startAt', 0, 2, arguments.length);
	        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
	        validateKey('Query.startAt', 2, name, true);
	        var newParams = this.queryParams_.startAt(value, name);
	        Query.validateLimit_(newParams);
	        Query.validateQueryEndpoints_(newParams);
	        if (this.queryParams_.hasStart()) {
	            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
	                'or equalTo).');
	        }
	        // Calling with no params tells us to start at the beginning.
	        if (value === undefined) {
	            value = null;
	            name = null;
	        }
	        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
	    };
	    /**
	     * @param {number|string|boolean|null} value
	     * @param {?string=} name
	     * @return {!Query}
	     */
	    Query.prototype.endAt = function (value, name) {
	        if (value === void 0) { value = null; }
	        util.validateArgCount('Query.endAt', 0, 2, arguments.length);
	        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
	        validateKey('Query.endAt', 2, name, true);
	        var newParams = this.queryParams_.endAt(value, name);
	        Query.validateLimit_(newParams);
	        Query.validateQueryEndpoints_(newParams);
	        if (this.queryParams_.hasEnd()) {
	            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
	                'equalTo).');
	        }
	        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
	    };
	    /**
	     * Load the selection of children with exactly the specified value, and, optionally,
	     * the specified name.
	     * @param {number|string|boolean|null} value
	     * @param {string=} name
	     * @return {!Query}
	     */
	    Query.prototype.equalTo = function (value, name) {
	        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);
	        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
	        validateKey('Query.equalTo', 2, name, true);
	        if (this.queryParams_.hasStart()) {
	            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
	                'equalTo).');
	        }
	        if (this.queryParams_.hasEnd()) {
	            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
	                'equalTo).');
	        }
	        return this.startAt(value, name).endAt(value, name);
	    };
	    /**
	     * @return {!string} URL for this location.
	     */
	    Query.prototype.toString = function () {
	        util.validateArgCount('Query.toString', 0, 0, arguments.length);
	        return this.repo.toString() + this.path.toUrlEncodedString();
	    };
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users.
	    Query.prototype.toJSON = function () {
	        // An optional spacer argument is unnecessary for a string.
	        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);
	        return this.toString();
	    };
	    /**
	     * An object representation of the query parameters used by this Query.
	     * @return {!Object}
	     */
	    Query.prototype.queryObject = function () {
	        return this.queryParams_.getQueryObject();
	    };
	    /**
	     * @return {!string}
	     */
	    Query.prototype.queryIdentifier = function () {
	        var obj = this.queryObject();
	        var id = ObjectToUniqueKey(obj);
	        return id === '{}' ? 'default' : id;
	    };
	    /**
	     * Return true if this query and the provided query are equivalent; otherwise, return false.
	     * @param {Query} other
	     * @return {boolean}
	     */
	    Query.prototype.isEqual = function (other) {
	        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);
	        if (!(other instanceof Query)) {
	            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
	            throw new Error(error$$1);
	        }
	        var sameRepo = this.repo === other.repo;
	        var samePath = this.path.equals(other.path);
	        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
	        return sameRepo && samePath && sameQueryIdentifier;
	    };
	    /**
	     * Helper used by .on and .once to extract the context and or cancel arguments.
	     * @param {!string} fnName The function name (on or once)
	     * @param {(function(Error)|Object)=} cancelOrContext
	     * @param {Object=} context
	     * @return {{cancel: ?function(Error), context: ?Object}}
	     * @private
	     */
	    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
	        var ret = { cancel: null, context: null };
	        if (cancelOrContext && context) {
	            ret.cancel = cancelOrContext;
	            util.validateCallback(fnName, 3, ret.cancel, true);
	            ret.context = context;
	            util.validateContextObject(fnName, 4, ret.context, true);
	        }
	        else if (cancelOrContext) {
	            // we have either a cancel callback or a context.
	            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
	                // it's a context!
	                ret.context = cancelOrContext;
	            }
	            else if (typeof cancelOrContext === 'function') {
	                ret.cancel = cancelOrContext;
	            }
	            else {
	                throw new Error(util.errorPrefix(fnName, 3, true) +
	                    ' must either be a cancel callback or a context object.');
	            }
	        }
	        return ret;
	    };
	    Object.defineProperty(Query.prototype, "ref", {
	        get: function () {
	            return this.getRef();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Query;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Implements a set with a count of elements.
	 *
	 * @template K, V
	 */
	var CountedSet = /** @class */ (function () {
	    function CountedSet() {
	        this.set = {};
	    }
	    /**
	     * @param {!K} item
	     * @param {V} val
	     */
	    CountedSet.prototype.add = function (item, val) {
	        this.set[item] = val !== null ? val : true;
	    };
	    /**
	     * @param {!K} key
	     * @return {boolean}
	     */
	    CountedSet.prototype.contains = function (key) {
	        return util.contains(this.set, key);
	    };
	    /**
	     * @param {!K} item
	     * @return {V}
	     */
	    CountedSet.prototype.get = function (item) {
	        return this.contains(item) ? this.set[item] : undefined;
	    };
	    /**
	     * @param {!K} item
	     */
	    CountedSet.prototype.remove = function (item) {
	        delete this.set[item];
	    };
	    /**
	     * Deletes everything in the set
	     */
	    CountedSet.prototype.clear = function () {
	        this.set = {};
	    };
	    /**
	     * True if there's nothing in the set
	     * @return {boolean}
	     */
	    CountedSet.prototype.isEmpty = function () {
	        return util.isEmpty(this.set);
	    };
	    /**
	     * @return {number} The number of items in the set
	     */
	    CountedSet.prototype.count = function () {
	        return util.getCount(this.set);
	    };
	    /**
	     * Run a function on each k,v pair in the set
	     * @param {function(K, V)} fn
	     */
	    CountedSet.prototype.each = function (fn) {
	        util.forEach(this.set, function (k, v) { return fn(k, v); });
	    };
	    /**
	     * Mostly for debugging
	     * @return {Array.<K>} The keys present in this CountedSet
	     */
	    CountedSet.prototype.keys = function () {
	        var keys = [];
	        util.forEach(this.set, function (k) {
	            keys.push(k);
	        });
	        return keys;
	    };
	    return CountedSet;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Helper class to store a sparse set of snapshots.
	 *
	 * @constructor
	 */
	var SparseSnapshotTree = /** @class */ (function () {
	    function SparseSnapshotTree() {
	        /**
	         * @private
	         * @type {Node}
	         */
	        this.value_ = null;
	        /**
	         * @private
	         * @type {CountedSet}
	         */
	        this.children_ = null;
	    }
	    /**
	     * Gets the node stored at the given path if one exists.
	     *
	     * @param {!Path} path Path to look up snapshot for.
	     * @return {?Node} The retrieved node, or null.
	     */
	    SparseSnapshotTree.prototype.find = function (path) {
	        if (this.value_ != null) {
	            return this.value_.getChild(path);
	        }
	        else if (!path.isEmpty() && this.children_ != null) {
	            var childKey = path.getFront();
	            path = path.popFront();
	            if (this.children_.contains(childKey)) {
	                var childTree = this.children_.get(childKey);
	                return childTree.find(path);
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Stores the given node at the specified path. If there is already a node
	     * at a shallower path, it merges the new data into that snapshot node.
	     *
	     * @param {!Path} path Path to look up snapshot for.
	     * @param {!Node} data The new data, or null.
	     */
	    SparseSnapshotTree.prototype.remember = function (path, data) {
	        if (path.isEmpty()) {
	            this.value_ = data;
	            this.children_ = null;
	        }
	        else if (this.value_ !== null) {
	            this.value_ = this.value_.updateChild(path, data);
	        }
	        else {
	            if (this.children_ == null) {
	                this.children_ = new CountedSet();
	            }
	            var childKey = path.getFront();
	            if (!this.children_.contains(childKey)) {
	                this.children_.add(childKey, new SparseSnapshotTree());
	            }
	            var child = this.children_.get(childKey);
	            path = path.popFront();
	            child.remember(path, data);
	        }
	    };
	    /**
	     * Purge the data at path from the cache.
	     *
	     * @param {!Path} path Path to look up snapshot for.
	     * @return {boolean} True if this node should now be removed.
	     */
	    SparseSnapshotTree.prototype.forget = function (path) {
	        if (path.isEmpty()) {
	            this.value_ = null;
	            this.children_ = null;
	            return true;
	        }
	        else {
	            if (this.value_ !== null) {
	                if (this.value_.isLeafNode()) {
	                    // We're trying to forget a node that doesn't exist
	                    return false;
	                }
	                else {
	                    var value = this.value_;
	                    this.value_ = null;
	                    var self_1 = this;
	                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {
	                        self_1.remember(new Path(key), tree);
	                    });
	                    return this.forget(path);
	                }
	            }
	            else if (this.children_ !== null) {
	                var childKey = path.getFront();
	                path = path.popFront();
	                if (this.children_.contains(childKey)) {
	                    var safeToRemove = this.children_.get(childKey).forget(path);
	                    if (safeToRemove) {
	                        this.children_.remove(childKey);
	                    }
	                }
	                if (this.children_.isEmpty()) {
	                    this.children_ = null;
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            }
	            else {
	                return true;
	            }
	        }
	    };
	    /**
	     * Recursively iterates through all of the stored tree and calls the
	     * callback on each one.
	     *
	     * @param {!Path} prefixPath Path to look up node for.
	     * @param {!Function} func The function to invoke for each tree.
	     */
	    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
	        if (this.value_ !== null) {
	            func(prefixPath, this.value_);
	        }
	        else {
	            this.forEachChild(function (key, tree) {
	                var path = new Path(prefixPath.toString() + '/' + key);
	                tree.forEachTree(path, func);
	            });
	        }
	    };
	    /**
	     * Iterates through each immediate child and triggers the callback.
	     *
	     * @param {!Function} func The function to invoke for each child.
	     */
	    SparseSnapshotTree.prototype.forEachChild = function (func) {
	        if (this.children_ !== null) {
	            this.children_.each(function (key, tree) {
	                func(key, tree);
	            });
	        }
	    };
	    return SparseSnapshotTree;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Generate placeholders for deferred values.
	 * @param {?Object} values
	 * @return {!Object}
	 */
	var generateWithValues = function (values) {
	    values = values || {};
	    values['timestamp'] = values['timestamp'] || new Date().getTime();
	    return values;
	};
	/**
	 * Value to use when firing local events. When writing server values, fire
	 * local events with an approximate value, otherwise return value as-is.
	 * @param {(Object|string|number|boolean)} value
	 * @param {!Object} serverValues
	 * @return {!(string|number|boolean)}
	 */
	var resolveDeferredValue = function (value, serverValues) {
	    if (!value || typeof value !== 'object') {
	        return value;
	    }
	    else {
	        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');
	        return serverValues[value['.sv']];
	    }
	};
	/**
	 * Recursively replace all deferred values and priorities in the tree with the
	 * specified generated replacement values.
	 * @param {!SparseSnapshotTree} tree
	 * @param {!Object} serverValues
	 * @return {!SparseSnapshotTree}
	 */
	var resolveDeferredValueTree = function (tree, serverValues) {
	    var resolvedTree = new SparseSnapshotTree();
	    tree.forEachTree(new Path(''), function (path, node) {
	        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));
	    });
	    return resolvedTree;
	};
	/**
	 * Recursively replace all deferred values and priorities in the node with the
	 * specified generated replacement values.  If there are no server values in the node,
	 * it'll be returned as-is.
	 * @param {!Node} node
	 * @param {!Object} serverValues
	 * @return {!Node}
	 */
	var resolveDeferredValueSnapshot = function (node, serverValues) {
	    var rawPri = node.getPriority().val();
	    var priority = resolveDeferredValue(rawPri, serverValues);
	    var newNode;
	    if (node.isLeafNode()) {
	        var leafNode = node;
	        var value = resolveDeferredValue(leafNode.getValue(), serverValues);
	        if (value !== leafNode.getValue() ||
	            priority !== leafNode.getPriority().val()) {
	            return new LeafNode(value, nodeFromJSON$1(priority));
	        }
	        else {
	            return node;
	        }
	    }
	    else {
	        var childrenNode = node;
	        newNode = childrenNode;
	        if (priority !== childrenNode.getPriority().val()) {
	            newNode = newNode.updatePriority(new LeafNode(priority));
	        }
	        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);
	            if (newChildNode !== childNode) {
	                newNode = newNode.updateImmediateChild(childName, newChildNode);
	            }
	        });
	        return newNode;
	    }
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @enum
	 */
	var OperationType;
	(function (OperationType) {
	    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
	    OperationType[OperationType["MERGE"] = 1] = "MERGE";
	    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
	    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
	})(OperationType || (OperationType = {}));
	/**
	 * @param {boolean} fromUser
	 * @param {boolean} fromServer
	 * @param {?string} queryId
	 * @param {boolean} tagged
	 * @constructor
	 */
	var OperationSource = /** @class */ (function () {
	    function OperationSource(fromUser, fromServer, queryId, tagged) {
	        this.fromUser = fromUser;
	        this.fromServer = fromServer;
	        this.queryId = queryId;
	        this.tagged = tagged;
	        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');
	    }
	    /**
	     * @const
	     * @type {!OperationSource}
	     */
	    OperationSource.User = new OperationSource(
	    /*fromUser=*/ true, false, null, 
	    /*tagged=*/ false);
	    /**
	     * @const
	     * @type {!OperationSource}
	     */
	    OperationSource.Server = new OperationSource(false, 
	    /*fromServer=*/ true, null, 
	    /*tagged=*/ false);
	    /**
	     * @param {string} queryId
	     * @return {!OperationSource}
	     */
	    OperationSource.forServerTaggedQuery = function (queryId) {
	        return new OperationSource(false, 
	        /*fromServer=*/ true, queryId, 
	        /*tagged=*/ true);
	    };
	    return OperationSource;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var AckUserWrite = /** @class */ (function () {
	    /**
	     *
	     * @param {!Path} path
	     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
	     * @param {!boolean} revert
	     */
	    function AckUserWrite(
	    /**@inheritDoc */ path, 
	    /**@inheritDoc */ affectedTree, 
	    /**@inheritDoc */ revert) {
	        this.path = path;
	        this.affectedTree = affectedTree;
	        this.revert = revert;
	        /** @inheritDoc */
	        this.type = OperationType.ACK_USER_WRITE;
	        /** @inheritDoc */
	        this.source = OperationSource.User;
	    }
	    /**
	     * @inheritDoc
	     */
	    AckUserWrite.prototype.operationForChild = function (childName) {
	        if (!this.path.isEmpty()) {
	            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
	            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
	        }
	        else if (this.affectedTree.value != null) {
	            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
	            // All child locations are affected as well; just return same operation.
	            return this;
	        }
	        else {
	            var childTree = this.affectedTree.subtree(new Path(childName));
	            return new AckUserWrite(Path.Empty, childTree, this.revert);
	        }
	    };
	    return AckUserWrite;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var emptyChildrenSingleton;
	/**
	 * Singleton empty children collection.
	 *
	 * @const
	 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
	 */
	var EmptyChildren = function () {
	    if (!emptyChildrenSingleton) {
	        emptyChildrenSingleton = new SortedMap(stringCompare);
	    }
	    return emptyChildrenSingleton;
	};
	/**
	 * A tree with immutable elements.
	 */
	var ImmutableTree = /** @class */ (function () {
	    /**
	     * @template T
	     * @param {?T} value
	     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
	     */
	    function ImmutableTree(value, children) {
	        if (children === void 0) { children = EmptyChildren(); }
	        this.value = value;
	        this.children = children;
	    }
	    /**
	     * @template T
	     * @param {!Object.<string, !T>} obj
	     * @return {!ImmutableTree.<!T>}
	     */
	    ImmutableTree.fromObject = function (obj) {
	        var tree = ImmutableTree.Empty;
	        util.forEach(obj, function (childPath, childSnap) {
	            tree = tree.set(new Path(childPath), childSnap);
	        });
	        return tree;
	    };
	    /**
	     * True if the value is empty and there are no children
	     * @return {boolean}
	     */
	    ImmutableTree.prototype.isEmpty = function () {
	        return this.value === null && this.children.isEmpty();
	    };
	    /**
	     * Given a path and predicate, return the first node and the path to that node
	     * where the predicate returns true.
	     *
	     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
	     * on the way back out, it may be better to pass down a pathSoFar obj.
	     *
	     * @param {!Path} relativePath The remainder of the path
	     * @param {function(T):boolean} predicate The predicate to satisfy to return a
	     *   node
	     * @return {?{path:!Path, value:!T}}
	     */
	    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
	        if (this.value != null && predicate(this.value)) {
	            return { path: Path.Empty, value: this.value };
	        }
	        else {
	            if (relativePath.isEmpty()) {
	                return null;
	            }
	            else {
	                var front = relativePath.getFront();
	                var child = this.children.get(front);
	                if (child !== null) {
	                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
	                    if (childExistingPathAndValue != null) {
	                        var fullPath = new Path(front).child(childExistingPathAndValue.path);
	                        return { path: fullPath, value: childExistingPathAndValue.value };
	                    }
	                    else {
	                        return null;
	                    }
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	    };
	    /**
	     * Find, if it exists, the shortest subpath of the given path that points a defined
	     * value in the tree
	     * @param {!Path} relativePath
	     * @return {?{path: !Path, value: !T}}
	     */
	    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
	        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
	    };
	    /**
	     * @param {!Path} relativePath
	     * @return {!ImmutableTree.<T>} The subtree at the given path
	     */
	    ImmutableTree.prototype.subtree = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            return this;
	        }
	        else {
	            var front = relativePath.getFront();
	            var childTree = this.children.get(front);
	            if (childTree !== null) {
	                return childTree.subtree(relativePath.popFront());
	            }
	            else {
	                return ImmutableTree.Empty;
	            }
	        }
	    };
	    /**
	     * Sets a value at the specified path.
	     *
	     * @param {!Path} relativePath Path to set value at.
	     * @param {?T} toSet Value to set.
	     * @return {!ImmutableTree.<T>} Resulting tree.
	     */
	    ImmutableTree.prototype.set = function (relativePath, toSet) {
	        if (relativePath.isEmpty()) {
	            return new ImmutableTree(toSet, this.children);
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front) || ImmutableTree.Empty;
	            var newChild = child.set(relativePath.popFront(), toSet);
	            var newChildren = this.children.insert(front, newChild);
	            return new ImmutableTree(this.value, newChildren);
	        }
	    };
	    /**
	     * Removes the value at the specified path.
	     *
	     * @param {!Path} relativePath Path to value to remove.
	     * @return {!ImmutableTree.<T>} Resulting tree.
	     */
	    ImmutableTree.prototype.remove = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            if (this.children.isEmpty()) {
	                return ImmutableTree.Empty;
	            }
	            else {
	                return new ImmutableTree(null, this.children);
	            }
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front);
	            if (child) {
	                var newChild = child.remove(relativePath.popFront());
	                var newChildren = void 0;
	                if (newChild.isEmpty()) {
	                    newChildren = this.children.remove(front);
	                }
	                else {
	                    newChildren = this.children.insert(front, newChild);
	                }
	                if (this.value === null && newChildren.isEmpty()) {
	                    return ImmutableTree.Empty;
	                }
	                else {
	                    return new ImmutableTree(this.value, newChildren);
	                }
	            }
	            else {
	                return this;
	            }
	        }
	    };
	    /**
	     * Gets a value from the tree.
	     *
	     * @param {!Path} relativePath Path to get value for.
	     * @return {?T} Value at path, or null.
	     */
	    ImmutableTree.prototype.get = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            return this.value;
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front);
	            if (child) {
	                return child.get(relativePath.popFront());
	            }
	            else {
	                return null;
	            }
	        }
	    };
	    /**
	     * Replace the subtree at the specified path with the given new tree.
	     *
	     * @param {!Path} relativePath Path to replace subtree for.
	     * @param {!ImmutableTree} newTree New tree.
	     * @return {!ImmutableTree} Resulting tree.
	     */
	    ImmutableTree.prototype.setTree = function (relativePath, newTree) {
	        if (relativePath.isEmpty()) {
	            return newTree;
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front) || ImmutableTree.Empty;
	            var newChild = child.setTree(relativePath.popFront(), newTree);
	            var newChildren = void 0;
	            if (newChild.isEmpty()) {
	                newChildren = this.children.remove(front);
	            }
	            else {
	                newChildren = this.children.insert(front, newChild);
	            }
	            return new ImmutableTree(this.value, newChildren);
	        }
	    };
	    /**
	     * Performs a depth first fold on this tree. Transforms a tree into a single
	     * value, given a function that operates on the path to a node, an optional
	     * current value, and a map of child names to folded subtrees
	     * @template V
	     * @param {function(Path, ?T, Object.<string, V>):V} fn
	     * @return {V}
	     */
	    ImmutableTree.prototype.fold = function (fn) {
	        return this.fold_(Path.Empty, fn);
	    };
	    /**
	     * Recursive helper for public-facing fold() method
	     * @template V
	     * @param {!Path} pathSoFar
	     * @param {function(Path, ?T, Object.<string, V>):V} fn
	     * @return {V}
	     * @private
	     */
	    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
	        var accum = {};
	        this.children.inorderTraversal(function (childKey, childTree) {
	            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
	        });
	        return fn(pathSoFar, this.value, accum);
	    };
	    /**
	     * Find the first matching value on the given path. Return the result of applying f to it.
	     * @template V
	     * @param {!Path} path
	     * @param {!function(!Path, !T):?V} f
	     * @return {?V}
	     */
	    ImmutableTree.prototype.findOnPath = function (path, f) {
	        return this.findOnPath_(path, Path.Empty, f);
	    };
	    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
	        var result = this.value ? f(pathSoFar, this.value) : false;
	        if (result) {
	            return result;
	        }
	        else {
	            if (pathToFollow.isEmpty()) {
	                return null;
	            }
	            else {
	                var front = pathToFollow.getFront();
	                var nextChild = this.children.get(front);
	                if (nextChild) {
	                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	    };
	    /**
	     *
	     * @param {!Path} path
	     * @param {!function(!Path, !T)} f
	     * @returns {!ImmutableTree.<T>}
	     */
	    ImmutableTree.prototype.foreachOnPath = function (path, f) {
	        return this.foreachOnPath_(path, Path.Empty, f);
	    };
	    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
	        if (pathToFollow.isEmpty()) {
	            return this;
	        }
	        else {
	            if (this.value) {
	                f(currentRelativePath, this.value);
	            }
	            var front = pathToFollow.getFront();
	            var nextChild = this.children.get(front);
	            if (nextChild) {
	                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
	            }
	            else {
	                return ImmutableTree.Empty;
	            }
	        }
	    };
	    /**
	     * Calls the given function for each node in the tree that has a value.
	     *
	     * @param {function(!Path, !T)} f A function to be called with
	     *   the path from the root of the tree to a node, and the value at that node.
	     *   Called in depth-first order.
	     */
	    ImmutableTree.prototype.foreach = function (f) {
	        this.foreach_(Path.Empty, f);
	    };
	    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
	        this.children.inorderTraversal(function (childName, childTree) {
	            childTree.foreach_(currentRelativePath.child(childName), f);
	        });
	        if (this.value) {
	            f(currentRelativePath, this.value);
	        }
	    };
	    /**
	     *
	     * @param {function(string, !T)} f
	     */
	    ImmutableTree.prototype.foreachChild = function (f) {
	        this.children.inorderTraversal(function (childName, childTree) {
	            if (childTree.value) {
	                f(childName, childTree.value);
	            }
	        });
	    };
	    ImmutableTree.Empty = new ImmutableTree(null);
	    return ImmutableTree;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @constructor
	 * @implements {Operation}
	 */
	var ListenComplete = /** @class */ (function () {
	    function ListenComplete(source, path) {
	        this.source = source;
	        this.path = path;
	        /** @inheritDoc */
	        this.type = OperationType.LISTEN_COMPLETE;
	    }
	    ListenComplete.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            return new ListenComplete(this.source, Path.Empty);
	        }
	        else {
	            return new ListenComplete(this.source, this.path.popFront());
	        }
	    };
	    return ListenComplete;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @param {!Node} snap
	 * @constructor
	 * @implements {Operation}
	 */
	var Overwrite = /** @class */ (function () {
	    function Overwrite(source, path, snap) {
	        this.source = source;
	        this.path = path;
	        this.snap = snap;
	        /** @inheritDoc */
	        this.type = OperationType.OVERWRITE;
	    }
	    Overwrite.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
	        }
	        else {
	            return new Overwrite(this.source, this.path.popFront(), this.snap);
	        }
	    };
	    return Overwrite;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @param {!ImmutableTree.<!Node>} children
	 * @constructor
	 * @implements {Operation}
	 */
	var Merge = /** @class */ (function () {
	    function Merge(
	    /**@inheritDoc */ source, 
	    /**@inheritDoc */ path, 
	    /**@inheritDoc */ children) {
	        this.source = source;
	        this.path = path;
	        this.children = children;
	        /** @inheritDoc */
	        this.type = OperationType.MERGE;
	    }
	    /**
	     * @inheritDoc
	     */
	    Merge.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            var childTree = this.children.subtree(new Path(childName));
	            if (childTree.isEmpty()) {
	                // This child is unaffected
	                return null;
	            }
	            else if (childTree.value) {
	                // We have a snapshot for the child in question.  This becomes an overwrite of the child.
	                return new Overwrite(this.source, Path.Empty, childTree.value);
	            }
	            else {
	                // This is a merge at a deeper level
	                return new Merge(this.source, Path.Empty, childTree);
	            }
	        }
	        else {
	            util.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
	            return new Merge(this.source, this.path.popFront(), this.children);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Merge.prototype.toString = function () {
	        return ('Operation(' +
	            this.path +
	            ': ' +
	            this.source.toString() +
	            ' merge: ' +
	            this.children.toString() +
	            ')');
	    };
	    return Merge;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
	 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
	 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
	 * whether a node potentially had children removed due to a filter.
	 */
	var CacheNode = /** @class */ (function () {
	    /**
	     * @param {!Node} node_
	     * @param {boolean} fullyInitialized_
	     * @param {boolean} filtered_
	     */
	    function CacheNode(node_, fullyInitialized_, filtered_) {
	        this.node_ = node_;
	        this.fullyInitialized_ = fullyInitialized_;
	        this.filtered_ = filtered_;
	    }
	    /**
	     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
	     * @return {boolean}
	     */
	    CacheNode.prototype.isFullyInitialized = function () {
	        return this.fullyInitialized_;
	    };
	    /**
	     * Returns whether this node is potentially missing children due to a filter applied to the node
	     * @return {boolean}
	     */
	    CacheNode.prototype.isFiltered = function () {
	        return this.filtered_;
	    };
	    /**
	     * @param {!Path} path
	     * @return {boolean}
	     */
	    CacheNode.prototype.isCompleteForPath = function (path) {
	        if (path.isEmpty()) {
	            return this.isFullyInitialized() && !this.filtered_;
	        }
	        var childKey = path.getFront();
	        return this.isCompleteForChild(childKey);
	    };
	    /**
	     * @param {!string} key
	     * @return {boolean}
	     */
	    CacheNode.prototype.isCompleteForChild = function (key) {
	        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
	    };
	    /**
	     * @return {!Node}
	     */
	    CacheNode.prototype.getNode = function () {
	        return this.node_;
	    };
	    return CacheNode;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Stores the data we have cached for a view.
	 *
	 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
	 *
	 * @constructor
	 */
	var ViewCache = /** @class */ (function () {
	    /**
	     *
	     * @param {!CacheNode} eventCache_
	     * @param {!CacheNode} serverCache_
	     */
	    function ViewCache(eventCache_, serverCache_) {
	        this.eventCache_ = eventCache_;
	        this.serverCache_ = serverCache_;
	    }
	    /**
	     * @param {!Node} eventSnap
	     * @param {boolean} complete
	     * @param {boolean} filtered
	     * @return {!ViewCache}
	     */
	    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
	        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
	    };
	    /**
	     * @param {!Node} serverSnap
	     * @param {boolean} complete
	     * @param {boolean} filtered
	     * @return {!ViewCache}
	     */
	    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
	        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
	    };
	    /**
	     * @return {!CacheNode}
	     */
	    ViewCache.prototype.getEventCache = function () {
	        return this.eventCache_;
	    };
	    /**
	     * @return {?Node}
	     */
	    ViewCache.prototype.getCompleteEventSnap = function () {
	        return this.eventCache_.isFullyInitialized()
	            ? this.eventCache_.getNode()
	            : null;
	    };
	    /**
	     * @return {!CacheNode}
	     */
	    ViewCache.prototype.getServerCache = function () {
	        return this.serverCache_;
	    };
	    /**
	     * @return {?Node}
	     */
	    ViewCache.prototype.getCompleteServerSnap = function () {
	        return this.serverCache_.isFullyInitialized()
	            ? this.serverCache_.getNode()
	            : null;
	    };
	    /**
	     * @const
	     * @type {ViewCache}
	     */
	    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, 
	    /*fullyInitialized=*/ false, 
	    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, 
	    /*fullyInitialized=*/ false, 
	    /*filtered=*/ false));
	    return ViewCache;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @struct
	 * @param {!string} type The event type
	 * @param {!Node} snapshotNode The data
	 * @param {string=} childName The name for this child, if it's a child event
	 * @param {Node=} oldSnap Used for intermediate processing of child changed events
	 * @param {string=} prevName The name for the previous child, if applicable
	 */
	var Change = /** @class */ (function () {
	    function Change(type, snapshotNode, childName, oldSnap, prevName) {
	        this.type = type;
	        this.snapshotNode = snapshotNode;
	        this.childName = childName;
	        this.oldSnap = oldSnap;
	        this.prevName = prevName;
	    }
	    /**
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.valueChange = function (snapshot) {
	        return new Change(Change.VALUE, snapshot);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childAddedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_ADDED, snapshot, childKey);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childRemovedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_REMOVED, snapshot, childKey);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} newSnapshot
	     * @param {!Node} oldSnapshot
	     * @return {!Change}
	     */
	    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
	        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childMovedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_MOVED, snapshot, childKey);
	    };
	    //event types
	    /** Event type for a child added */
	    Change.CHILD_ADDED = 'child_added';
	    /** Event type for a child removed */
	    Change.CHILD_REMOVED = 'child_removed';
	    /** Event type for a child changed */
	    Change.CHILD_CHANGED = 'child_changed';
	    /** Event type for a child moved */
	    Change.CHILD_MOVED = 'child_moved';
	    /** Event type for a value change */
	    Change.VALUE = 'value';
	    return Change;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 * @param {!Index} index
	 */
	var IndexedFilter = /** @class */ (function () {
	    function IndexedFilter(index_) {
	        this.index_ = index_;
	    }
	    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
	        var oldChild = snap.getImmediateChild(key);
	        // Check if anything actually changed.
	        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
	            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
	            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
	            // to avoid treating these cases as "nothing changed."
	            if (oldChild.isEmpty() == newChild.isEmpty()) {
	                // Nothing changed.
	                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
	                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
	                return snap;
	            }
	        }
	        if (optChangeAccumulator != null) {
	            if (newChild.isEmpty()) {
	                if (snap.hasChild(key)) {
	                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
	                }
	                else {
	                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
	                }
	            }
	            else if (oldChild.isEmpty()) {
	                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
	            }
	            else {
	                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
	            }
	        }
	        if (snap.isLeafNode() && newChild.isEmpty()) {
	            return snap;
	        }
	        else {
	            // Make sure the node is indexed
	            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        if (optChangeAccumulator != null) {
	            if (!oldSnap.isLeafNode()) {
	                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                    if (!newSnap.hasChild(key)) {
	                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
	                    }
	                });
	            }
	            if (!newSnap.isLeafNode()) {
	                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                    if (oldSnap.hasChild(key)) {
	                        var oldChild = oldSnap.getImmediateChild(key);
	                        if (!oldChild.equals(childNode)) {
	                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
	                        }
	                    }
	                    else {
	                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
	                    }
	                });
	            }
	        }
	        return newSnap.withIndex(this.index_);
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        if (oldSnap.isEmpty()) {
	            return ChildrenNode.EMPTY_NODE;
	        }
	        else {
	            return oldSnap.updatePriority(newPriority);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.filtersNodes = function () {
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.getIndexedFilter = function () {
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    return IndexedFilter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 */
	var ChildChangeAccumulator = /** @class */ (function () {
	    function ChildChangeAccumulator() {
	        this.changeMap_ = {};
	    }
	    /**
	     * @param {!Change} change
	     */
	    ChildChangeAccumulator.prototype.trackChildChange = function (change) {
	        var type = change.type;
	        var childKey /** @type {!string} */ = change.childName;
	        util.assert(type == Change.CHILD_ADDED ||
	            type == Change.CHILD_CHANGED ||
	            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');
	        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
	        var oldChange = util.safeGet(this.changeMap_, childKey);
	        if (oldChange) {
	            var oldType = oldChange.type;
	            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {
	                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);
	            }
	            else if (type == Change.CHILD_REMOVED &&
	                oldType == Change.CHILD_ADDED) {
	                delete this.changeMap_[childKey];
	            }
	            else if (type == Change.CHILD_REMOVED &&
	                oldType == Change.CHILD_CHANGED) {
	                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);
	            }
	            else if (type == Change.CHILD_CHANGED &&
	                oldType == Change.CHILD_ADDED) {
	                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);
	            }
	            else if (type == Change.CHILD_CHANGED &&
	                oldType == Change.CHILD_CHANGED) {
	                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);
	            }
	            else {
	                throw util.assertionError('Illegal combination of changes: ' +
	                    change +
	                    ' occurred after ' +
	                    oldChange);
	            }
	        }
	        else {
	            this.changeMap_[childKey] = change;
	        }
	    };
	    /**
	     * @return {!Array.<!Change>}
	     */
	    ChildChangeAccumulator.prototype.getChanges = function () {
	        return util.getValues(this.changeMap_);
	    };
	    return ChildChangeAccumulator;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An implementation of CompleteChildSource that never returns any additional children
	 *
	 * @private
	 * @constructor
	 * @implements CompleteChildSource
	 */
	var NoCompleteChildSource_ = /** @class */ (function () {
	    function NoCompleteChildSource_() {
	    }
	    /**
	     * @inheritDoc
	     */
	    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
	        return null;
	    };
	    /**
	     * @inheritDoc
	     */
	    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
	        return null;
	    };
	    return NoCompleteChildSource_;
	}());
	/**
	 * Singleton instance.
	 * @const
	 * @type {!CompleteChildSource}
	 */
	var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
	/**
	 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
	 * old event caches available to calculate complete children.
	 *
	 *
	 * @implements CompleteChildSource
	 */
	var WriteTreeCompleteChildSource = /** @class */ (function () {
	    /**
	     * @param {!WriteTreeRef} writes_
	     * @param {!ViewCache} viewCache_
	     * @param {?Node} optCompleteServerCache_
	     */
	    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
	        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
	        this.writes_ = writes_;
	        this.viewCache_ = viewCache_;
	        this.optCompleteServerCache_ = optCompleteServerCache_;
	    }
	    /**
	     * @inheritDoc
	     */
	    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
	        var node = this.viewCache_.getEventCache();
	        if (node.isCompleteForChild(childKey)) {
	            return node.getNode().getImmediateChild(childKey);
	        }
	        else {
	            var serverNode = this.optCompleteServerCache_ != null
	                ? new CacheNode(this.optCompleteServerCache_, true, false)
	                : this.viewCache_.getServerCache();
	            return this.writes_.calcCompleteChild(childKey, serverNode);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
	        var completeServerData = this.optCompleteServerCache_ != null
	            ? this.optCompleteServerCache_
	            : this.viewCache_.getCompleteServerSnap();
	        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
	        if (nodes.length === 0) {
	            return null;
	        }
	        else {
	            return nodes[0];
	        }
	    };
	    return WriteTreeCompleteChildSource;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @struct
	 */
	var ProcessorResult = /** @class */ (function () {
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Array.<!Change>} changes
	     */
	    function ProcessorResult(viewCache, changes) {
	        this.viewCache = viewCache;
	        this.changes = changes;
	    }
	    return ProcessorResult;
	}());
	/**
	 * @constructor
	 */
	var ViewProcessor = /** @class */ (function () {
	    /**
	     * @param {!NodeFilter} filter_
	     */
	    function ViewProcessor(filter_) {
	        this.filter_ = filter_;
	    }
	    /**
	     * @param {!ViewCache} viewCache
	     */
	    ViewProcessor.prototype.assertIndexed = function (viewCache) {
	        util.assert(viewCache
	            .getEventCache()
	            .getNode()
	            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
	        util.assert(viewCache
	            .getServerCache()
	            .getNode()
	            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Operation} operation
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @return {!ProcessorResult}
	     */
	    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
	        var accumulator = new ChildChangeAccumulator();
	        var newViewCache, filterServerNode;
	        if (operation.type === OperationType.OVERWRITE) {
	            var overwrite = operation;
	            if (overwrite.source.fromUser) {
	                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
	            }
	            else {
	                util.assert(overwrite.source.fromServer, 'Unknown source.');
	                // We filter the node if it's a tagged update or the node has been previously filtered  and the
	                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
	                // again
	                filterServerNode =
	                    overwrite.source.tagged ||
	                        (oldViewCache.getServerCache().isFiltered() &&
	                            !overwrite.path.isEmpty());
	                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.MERGE) {
	            var merge = operation;
	            if (merge.source.fromUser) {
	                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
	            }
	            else {
	                util.assert(merge.source.fromServer, 'Unknown source.');
	                // We filter the node if it's a tagged update or the node has been previously filtered
	                filterServerNode =
	                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();
	                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.ACK_USER_WRITE) {
	            var ackUserWrite = operation;
	            if (!ackUserWrite.revert) {
	                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
	            }
	            else {
	                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.LISTEN_COMPLETE) {
	            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
	        }
	        else {
	            throw util.assertionError('Unknown operation type: ' + operation.type);
	        }
	        var changes = accumulator.getChanges();
	        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
	        return new ProcessorResult(newViewCache, changes);
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!ViewCache} newViewCache
	     * @param {!Array.<!Change>} accumulator
	     * @private
	     */
	    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
	        var eventSnap = newViewCache.getEventCache();
	        if (eventSnap.isFullyInitialized()) {
	            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
	            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
	            if (accumulator.length > 0 ||
	                !oldViewCache.getEventCache().isFullyInitialized() ||
	                (isLeafOrEmpty &&
	                    !eventSnap
	                        .getNode()
	                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||
	                !eventSnap
	                    .getNode()
	                    .getPriority()
	                    .equals(oldCompleteSnap.getPriority())) {
	                accumulator.push(Change.valueChange(
	                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
	            }
	        }
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} changePath
	     * @param {!WriteTreeRef} writesCache
	     * @param {!CompleteChildSource} source
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
	        var oldEventSnap = viewCache.getEventCache();
	        if (writesCache.shadowingWrite(changePath) != null) {
	            // we have a shadowing write, ignore changes
	            return viewCache;
	        }
	        else {
	            var newEventCache = void 0, serverNode = void 0;
	            if (changePath.isEmpty()) {
	                // TODO: figure out how this plays with "sliding ack windows"
	                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
	                if (viewCache.getServerCache().isFiltered()) {
	                    // We need to special case this, because we need to only apply writes to complete children, or
	                    // we might end up raising events for incomplete children. If the server data is filtered deep
	                    // writes cannot be guaranteed to be complete
	                    var serverCache = viewCache.getCompleteServerSnap();
	                    var completeChildren = serverCache instanceof ChildrenNode
	                        ? serverCache
	                        : ChildrenNode.EMPTY_NODE;
	                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
	                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
	                }
	                else {
	                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
	                }
	            }
	            else {
	                var childKey = changePath.getFront();
	                if (childKey == '.priority') {
	                    util.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
	                    var oldEventNode = oldEventSnap.getNode();
	                    serverNode = viewCache.getServerCache().getNode();
	                    // we might have overwrites for this priority
	                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
	                    if (updatedPriority != null) {
	                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
	                    }
	                    else {
	                        // priority didn't change, keep old node
	                        newEventCache = oldEventSnap.getNode();
	                    }
	                }
	                else {
	                    var childChangePath = changePath.popFront();
	                    // update child
	                    var newEventChild = void 0;
	                    if (oldEventSnap.isCompleteForChild(childKey)) {
	                        serverNode = viewCache.getServerCache().getNode();
	                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
	                        if (eventChildUpdate != null) {
	                            newEventChild = oldEventSnap
	                                .getNode()
	                                .getImmediateChild(childKey)
	                                .updateChild(childChangePath, eventChildUpdate);
	                        }
	                        else {
	                            // Nothing changed, just keep the old child
	                            newEventChild = oldEventSnap
	                                .getNode()
	                                .getImmediateChild(childKey);
	                        }
	                    }
	                    else {
	                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
	                    }
	                    if (newEventChild != null) {
	                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
	                    }
	                    else {
	                        // no complete child available or no change
	                        newEventCache = oldEventSnap.getNode();
	                    }
	                }
	            }
	            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
	        }
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Path} changePath
	     * @param {!Node} changedSnap
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {boolean} filterServerNode
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
	        var oldServerSnap = oldViewCache.getServerCache();
	        var newServerCache;
	        var serverFilter = filterServerNode
	            ? this.filter_
	            : this.filter_.getIndexedFilter();
	        if (changePath.isEmpty()) {
	            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
	        }
	        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
	            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
	            var newServerNode = oldServerSnap
	                .getNode()
	                .updateChild(changePath, changedSnap);
	            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
	        }
	        else {
	            var childKey = changePath.getFront();
	            if (!oldServerSnap.isCompleteForPath(changePath) &&
	                changePath.getLength() > 1) {
	                // We don't update incomplete nodes with updates intended for other listeners
	                return oldViewCache;
	            }
	            var childChangePath = changePath.popFront();
	            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
	            var newChildNode = childNode.updateChild(childChangePath, changedSnap);
	            if (childKey == '.priority') {
	                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
	            }
	            else {
	                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
	            }
	        }
	        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
	        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
	        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Path} changePath
	     * @param {!Node} changedSnap
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
	        var oldEventSnap = oldViewCache.getEventCache();
	        var newViewCache, newEventCache;
	        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
	        if (changePath.isEmpty()) {
	            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
	            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
	        }
	        else {
	            var childKey = changePath.getFront();
	            if (childKey === '.priority') {
	                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
	                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
	            }
	            else {
	                var childChangePath = changePath.popFront();
	                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
	                var newChild = void 0;
	                if (childChangePath.isEmpty()) {
	                    // Child overwrite, we can replace the child
	                    newChild = changedSnap;
	                }
	                else {
	                    var childNode = source.getCompleteChild(childKey);
	                    if (childNode != null) {
	                        if (childChangePath.getBack() === '.priority' &&
	                            childNode.getChild(childChangePath.parent()).isEmpty()) {
	                            // This is a priority update on an empty node. If this node exists on the server, the
	                            // server will send down the priority in the update, so ignore for now
	                            newChild = childNode;
	                        }
	                        else {
	                            newChild = childNode.updateChild(childChangePath, changedSnap);
	                        }
	                    }
	                    else {
	                        // There is no complete child node available
	                        newChild = ChildrenNode.EMPTY_NODE;
	                    }
	                }
	                if (!oldChild.equals(newChild)) {
	                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
	                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
	                }
	                else {
	                    newViewCache = oldViewCache;
	                }
	            }
	        }
	        return newViewCache;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {string} childKey
	     * @return {boolean}
	     * @private
	     */
	    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
	        return viewCache.getEventCache().isCompleteForChild(childKey);
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {ImmutableTree.<!Node>} changedChildren
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
	        var _this = this;
	        // HACK: In the case of a limit query, there may be some changes that bump things out of the
	        // window leaving room for new items.  It's important we process these changes first, so we
	        // iterate the changes twice, first processing any that affect items currently in view.
	        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
	        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
	        // not the other.
	        var curViewCache = viewCache;
	        changedChildren.foreach(function (relativePath, childNode) {
	            var writePath = path.child(relativePath);
	            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
	                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
	            }
	        });
	        changedChildren.foreach(function (relativePath, childNode) {
	            var writePath = path.child(relativePath);
	            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
	                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
	            }
	        });
	        return curViewCache;
	    };
	    /**
	     * @param {!Node} node
	     * @param {ImmutableTree.<!Node>} merge
	     * @return {!Node}
	     * @private
	     */
	    ViewProcessor.prototype.applyMerge_ = function (node, merge) {
	        merge.foreach(function (relativePath, childNode) {
	            node = node.updateChild(relativePath, childNode);
	        });
	        return node;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!ImmutableTree.<!Node>} changedChildren
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache
	     * @param {boolean} filterServerNode
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
	        var _this = this;
	        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
	        // wait for the complete data update coming soon.
	        if (viewCache
	            .getServerCache()
	            .getNode()
	            .isEmpty() &&
	            !viewCache.getServerCache().isFullyInitialized()) {
	            return viewCache;
	        }
	        // HACK: In the case of a limit query, there may be some changes that bump things out of the
	        // window leaving room for new items.  It's important we process these changes first, so we
	        // iterate the changes twice, first processing any that affect items currently in view.
	        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
	        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
	        // not the other.
	        var curViewCache = viewCache;
	        var viewMergeTree;
	        if (path.isEmpty()) {
	            viewMergeTree = changedChildren;
	        }
	        else {
	            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
	        }
	        var serverNode = viewCache.getServerCache().getNode();
	        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
	            if (serverNode.hasChild(childKey)) {
	                var serverChild = viewCache
	                    .getServerCache()
	                    .getNode()
	                    .getImmediateChild(childKey);
	                var newChild = _this.applyMerge_(serverChild, childTree);
	                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
	            }
	        });
	        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
	            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
	                childMergeTree.value == null;
	            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
	                var serverChild = viewCache
	                    .getServerCache()
	                    .getNode()
	                    .getImmediateChild(childKey);
	                var newChild = _this.applyMerge_(serverChild, childMergeTree);
	                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
	            }
	        });
	        return curViewCache;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} ackPath
	     * @param {!ImmutableTree<!boolean>} affectedTree
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
	        if (writesCache.shadowingWrite(ackPath) != null) {
	            return viewCache;
	        }
	        // Only filter server node if it is currently filtered
	        var filterServerNode = viewCache.getServerCache().isFiltered();
	        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
	        // now that it won't be shadowed.
	        var serverCache = viewCache.getServerCache();
	        if (affectedTree.value != null) {
	            // This is an overwrite.
	            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
	                serverCache.isCompleteForPath(ackPath)) {
	                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
	            }
	            else if (ackPath.isEmpty()) {
	                // This is a goofy edge case where we are acking data at this location but don't have full data.  We
	                // should just re-apply whatever we have in our cache as a merge.
	                var changedChildren_1 = ImmutableTree.Empty;
	                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
	                    changedChildren_1 = changedChildren_1.set(new Path(name), node);
	                });
	                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
	            }
	            else {
	                return viewCache;
	            }
	        }
	        else {
	            // This is a merge.
	            var changedChildren_2 = ImmutableTree.Empty;
	            affectedTree.foreach(function (mergePath, value) {
	                var serverCachePath = ackPath.child(mergePath);
	                if (serverCache.isCompleteForPath(serverCachePath)) {
	                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
	                }
	            });
	            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
	        }
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!WriteTreeRef} writesCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
	        var oldServerNode = viewCache.getServerCache();
	        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
	        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeServerCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
	        var complete;
	        if (writesCache.shadowingWrite(path) != null) {
	            return viewCache;
	        }
	        else {
	            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
	            var oldEventCache = viewCache.getEventCache().getNode();
	            var newEventCache = void 0;
	            if (path.isEmpty() || path.getFront() === '.priority') {
	                var newNode = void 0;
	                if (viewCache.getServerCache().isFullyInitialized()) {
	                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                }
	                else {
	                    var serverChildren = viewCache.getServerCache().getNode();
	                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
	                    newNode = writesCache.calcCompleteEventChildren(serverChildren);
	                }
	                newNode = newNode;
	                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
	            }
	            else {
	                var childKey = path.getFront();
	                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
	                if (newChild == null &&
	                    viewCache.getServerCache().isCompleteForChild(childKey)) {
	                    newChild = oldEventCache.getImmediateChild(childKey);
	                }
	                if (newChild != null) {
	                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
	                }
	                else if (viewCache
	                    .getEventCache()
	                    .getNode()
	                    .hasChild(childKey)) {
	                    // No complete child available, delete the existing one, if any
	                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
	                }
	                else {
	                    newEventCache = oldEventCache;
	                }
	                if (newEventCache.isEmpty() &&
	                    viewCache.getServerCache().isFullyInitialized()) {
	                    // We might have reverted all child writes. Maybe the old event was a leaf node
	                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                    if (complete.isLeafNode()) {
	                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
	                    }
	                }
	            }
	            complete =
	                viewCache.getServerCache().isFullyInitialized() ||
	                    writesCache.shadowingWrite(Path.Empty) != null;
	            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
	        }
	    };
	    return ViewProcessor;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
	 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
	 * for details.
	 *
	 * @constructor
	 */
	var EventGenerator = /** @class */ (function () {
	    /**
	     *
	     * @param {!Query} query_
	     */
	    function EventGenerator(query_) {
	        this.query_ = query_;
	        /**
	         * @private
	         * @type {!Index}
	         */
	        this.index_ = this.query_.getQueryParams().getIndex();
	    }
	    /**
	     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
	     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
	     *
	     * Notes:
	     *  - child_moved events will be synthesized at this time for any child_changed events that affect
	     *    our index.
	     *  - prevName will be calculated based on the index ordering.
	     *
	     * @param {!Array.<!Change>} changes
	     * @param {!Node} eventCache
	     * @param {!Array.<!EventRegistration>} eventRegistrations
	     * @return {!Array.<!Event>}
	     */
	    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
	        var _this = this;
	        var events = [];
	        var moves = [];
	        changes.forEach(function (change) {
	            if (change.type === Change.CHILD_CHANGED &&
	                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
	                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
	            }
	        });
	        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
	        return events;
	    };
	    /**
	     * Given changes of a single change type, generate the corresponding events.
	     *
	     * @param {!Array.<!Event>} events
	     * @param {!string} eventType
	     * @param {!Array.<!Change>} changes
	     * @param {!Array.<!EventRegistration>} registrations
	     * @param {!Node} eventCache
	     * @private
	     */
	    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
	        var _this = this;
	        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
	        filteredChanges.sort(this.compareChanges_.bind(this));
	        filteredChanges.forEach(function (change) {
	            var materializedChange = _this.materializeSingleChange_(change, eventCache);
	            registrations.forEach(function (registration) {
	                if (registration.respondsTo(change.type)) {
	                    events.push(registration.createEvent(materializedChange, _this.query_));
	                }
	            });
	        });
	    };
	    /**
	     * @param {!Change} change
	     * @param {!Node} eventCache
	     * @return {!Change}
	     * @private
	     */
	    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
	        if (change.type === 'value' || change.type === 'child_removed') {
	            return change;
	        }
	        else {
	            change.prevName = eventCache.getPredecessorChildName(
	            /** @type {!string} */
	            change.childName, change.snapshotNode, this.index_);
	            return change;
	        }
	    };
	    /**
	     * @param {!Change} a
	     * @param {!Change} b
	     * @return {number}
	     * @private
	     */
	    EventGenerator.prototype.compareChanges_ = function (a, b) {
	        if (a.childName == null || b.childName == null) {
	            throw util.assertionError('Should only compare child_ events.');
	        }
	        var aWrapped = new NamedNode(a.childName, a.snapshotNode);
	        var bWrapped = new NamedNode(b.childName, b.snapshotNode);
	        return this.index_.compare(aWrapped, bWrapped);
	    };
	    return EventGenerator;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A view represents a specific location and query that has 1 or more event registrations.
	 *
	 * It does several things:
	 *  - Maintains the list of event registrations for this location/query.
	 *  - Maintains a cache of the data visible for this location/query.
	 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
	 *    registrations returns the set of events to be raised.
	 * @constructor
	 */
	var View = /** @class */ (function () {
	    /**
	     *
	     * @param {!Query} query_
	     * @param {!ViewCache} initialViewCache
	     */
	    function View(query_, initialViewCache) {
	        this.query_ = query_;
	        this.eventRegistrations_ = [];
	        var params = this.query_.getQueryParams();
	        var indexFilter = new IndexedFilter(params.getIndex());
	        var filter = params.getNodeFilter();
	        /**
	         * @type {ViewProcessor}
	         * @private
	         */
	        this.processor_ = new ViewProcessor(filter);
	        var initialServerCache = initialViewCache.getServerCache();
	        var initialEventCache = initialViewCache.getEventCache();
	        // Don't filter server node with other filter than index, wait for tagged listen
	        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
	        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
	        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
	        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
	        /**
	         * @type {!ViewCache}
	         * @private
	         */
	        this.viewCache_ = new ViewCache(newEventCache, newServerCache);
	        /**
	         * @type {!EventGenerator}
	         * @private
	         */
	        this.eventGenerator_ = new EventGenerator(this.query_);
	    }
	    /**
	     * @return {!Query}
	     */
	    View.prototype.getQuery = function () {
	        return this.query_;
	    };
	    /**
	     * @return {?Node}
	     */
	    View.prototype.getServerCache = function () {
	        return this.viewCache_.getServerCache().getNode();
	    };
	    /**
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    View.prototype.getCompleteServerCache = function (path) {
	        var cache = this.viewCache_.getCompleteServerSnap();
	        if (cache) {
	            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
	            // we need to see if it contains the child we're interested in.
	            if (this.query_.getQueryParams().loadsAllData() ||
	                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
	                return cache.getChild(path);
	            }
	        }
	        return null;
	    };
	    /**
	     * @return {boolean}
	     */
	    View.prototype.isEmpty = function () {
	        return this.eventRegistrations_.length === 0;
	    };
	    /**
	     * @param {!EventRegistration} eventRegistration
	     */
	    View.prototype.addEventRegistration = function (eventRegistration) {
	        this.eventRegistrations_.push(eventRegistration);
	    };
	    /**
	     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
	     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
	     */
	    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
	        var cancelEvents = [];
	        if (cancelError) {
	            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
	            var path_1 = this.query_.path;
	            this.eventRegistrations_.forEach(function (registration) {
	                cancelError /** @type {!Error} */ = cancelError;
	                var maybeEvent = registration.createCancelEvent(cancelError, path_1);
	                if (maybeEvent) {
	                    cancelEvents.push(maybeEvent);
	                }
	            });
	        }
	        if (eventRegistration) {
	            var remaining = [];
	            for (var i = 0; i < this.eventRegistrations_.length; ++i) {
	                var existing = this.eventRegistrations_[i];
	                if (!existing.matches(eventRegistration)) {
	                    remaining.push(existing);
	                }
	                else if (eventRegistration.hasAnyCallback()) {
	                    // We're removing just this one
	                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
	                    break;
	                }
	            }
	            this.eventRegistrations_ = remaining;
	        }
	        else {
	            this.eventRegistrations_ = [];
	        }
	        return cancelEvents;
	    };
	    /**
	     * Applies the given Operation, updates our cache, and returns the appropriate events.
	     *
	     * @param {!Operation} operation
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeServerCache
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
	        if (operation.type === OperationType.MERGE &&
	            operation.source.queryId !== null) {
	            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
	            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
	        }
	        var oldViewCache = this.viewCache_;
	        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
	        this.processor_.assertIndexed(result.viewCache);
	        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||
	            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
	        this.viewCache_ = result.viewCache;
	        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
	    };
	    /**
	     * @param {!EventRegistration} registration
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.getInitialEvents = function (registration) {
	        var eventSnap = this.viewCache_.getEventCache();
	        var initialChanges = [];
	        if (!eventSnap.getNode().isLeafNode()) {
	            var eventNode = eventSnap.getNode();
	            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                initialChanges.push(Change.childAddedChange(key, childNode));
	            });
	        }
	        if (eventSnap.isFullyInitialized()) {
	            initialChanges.push(Change.valueChange(eventSnap.getNode()));
	        }
	        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
	    };
	    /**
	     * @private
	     * @param {!Array.<!Change>} changes
	     * @param {!Node} eventCache
	     * @param {EventRegistration=} eventRegistration
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
	        var registrations = eventRegistration
	            ? [eventRegistration]
	            : this.eventRegistrations_;
	        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
	    };
	    return View;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __referenceConstructor$1;
	/**
	 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
	 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
	 * and user writes (set, transaction, update).
	 *
	 * It's responsible for:
	 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
	 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
	 *    applyUserOverwrite, etc.)
	 */
	var SyncPoint = /** @class */ (function () {
	    function SyncPoint() {
	        /**
	         * The Views being tracked at this location in the tree, stored as a map where the key is a
	         * queryId and the value is the View for that query.
	         *
	         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
	         *
	         * @type {!Object.<!string, !View>}
	         * @private
	         */
	        this.views_ = {};
	    }
	    Object.defineProperty(SyncPoint, "__referenceConstructor", {
	        get: function () {
	            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
	            return __referenceConstructor$1;
	        },
	        set: function (val) {
	            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');
	            __referenceConstructor$1 = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @return {boolean}
	     */
	    SyncPoint.prototype.isEmpty = function () {
	        return util.isEmpty(this.views_);
	    };
	    /**
	     *
	     * @param {!Operation} operation
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} optCompleteServerCache
	     * @return {!Array.<!Event>}
	     */
	    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
	        var queryId = operation.source.queryId;
	        if (queryId !== null) {
	            var view = util.safeGet(this.views_, queryId);
	            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');
	            return view.applyOperation(operation, writesCache, optCompleteServerCache);
	        }
	        else {
	            var events_1 = [];
	            util.forEach(this.views_, function (key, view) {
	                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
	            });
	            return events_1;
	        }
	    };
	    /**
	     * Add an event callback for the specified query.
	     *
	     * @param {!Query} query
	     * @param {!EventRegistration} eventRegistration
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache Complete server cache, if we have it.
	     * @param {boolean} serverCacheComplete
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
	        var queryId = query.queryIdentifier();
	        var view = util.safeGet(this.views_, queryId);
	        if (!view) {
	            // TODO: make writesCache take flag for complete server node
	            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
	            var eventCacheComplete = false;
	            if (eventCache) {
	                eventCacheComplete = true;
	            }
	            else if (serverCache instanceof ChildrenNode) {
	                eventCache = writesCache.calcCompleteEventChildren(serverCache);
	                eventCacheComplete = false;
	            }
	            else {
	                eventCache = ChildrenNode.EMPTY_NODE;
	                eventCacheComplete = false;
	            }
	            var viewCache = new ViewCache(new CacheNode(
	            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(
	            /** @type {!Node} */ (serverCache), serverCacheComplete, false));
	            view = new View(query, viewCache);
	            this.views_[queryId] = view;
	        }
	        // This is guaranteed to exist now, we just created anything that was missing
	        view.addEventRegistration(eventRegistration);
	        return view.getInitialEvents(eventRegistration);
	    };
	    /**
	     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
	     *
	     * If query is the default query, we'll check all views for the specified eventRegistration.
	     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
	     *
	     * @param {!Query} query
	     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
	     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
	     */
	    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
	        var queryId = query.queryIdentifier();
	        var removed = [];
	        var cancelEvents = [];
	        var hadCompleteView = this.hasCompleteView();
	        if (queryId === 'default') {
	            // When you do ref.off(...), we search all views for the registration to remove.
	            var self_1 = this;
	            util.forEach(this.views_, function (viewQueryId, view) {
	                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
	                if (view.isEmpty()) {
	                    delete self_1.views_[viewQueryId];
	                    // We'll deal with complete views later.
	                    if (!view
	                        .getQuery()
	                        .getQueryParams()
	                        .loadsAllData()) {
	                        removed.push(view.getQuery());
	                    }
	                }
	            });
	        }
	        else {
	            // remove the callback from the specific view.
	            var view = util.safeGet(this.views_, queryId);
	            if (view) {
	                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
	                if (view.isEmpty()) {
	                    delete this.views_[queryId];
	                    // We'll deal with complete views later.
	                    if (!view
	                        .getQuery()
	                        .getQueryParams()
	                        .loadsAllData()) {
	                        removed.push(view.getQuery());
	                    }
	                }
	            }
	        }
	        if (hadCompleteView && !this.hasCompleteView()) {
	            // We removed our last complete view.
	            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
	        }
	        return { removed: removed, events: cancelEvents };
	    };
	    /**
	     * @return {!Array.<!View>}
	     */
	    SyncPoint.prototype.getQueryViews = function () {
	        var _this = this;
	        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });
	        return values.filter(function (view) {
	            return !view
	                .getQuery()
	                .getQueryParams()
	                .loadsAllData();
	        });
	    };
	    /**
	     *
	     * @param {!Path} path The path to the desired complete snapshot
	     * @return {?Node} A complete cache, if it exists
	     */
	    SyncPoint.prototype.getCompleteServerCache = function (path) {
	        var serverCache = null;
	        util.forEach(this.views_, function (key, view) {
	            serverCache = serverCache || view.getCompleteServerCache(path);
	        });
	        return serverCache;
	    };
	    /**
	     * @param {!Query} query
	     * @return {?View}
	     */
	    SyncPoint.prototype.viewForQuery = function (query) {
	        var params = query.getQueryParams();
	        if (params.loadsAllData()) {
	            return this.getCompleteView();
	        }
	        else {
	            var queryId = query.queryIdentifier();
	            return util.safeGet(this.views_, queryId);
	        }
	    };
	    /**
	     * @param {!Query} query
	     * @return {boolean}
	     */
	    SyncPoint.prototype.viewExistsForQuery = function (query) {
	        return this.viewForQuery(query) != null;
	    };
	    /**
	     * @return {boolean}
	     */
	    SyncPoint.prototype.hasCompleteView = function () {
	        return this.getCompleteView() != null;
	    };
	    /**
	     * @return {?View}
	     */
	    SyncPoint.prototype.getCompleteView = function () {
	        var completeView = util.findValue(this.views_, function (view) {
	            return view
	                .getQuery()
	                .getQueryParams()
	                .loadsAllData();
	        });
	        return completeView || null;
	    };
	    return SyncPoint;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
	 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
	 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
	 * to reflect the write added.
	 *
	 * @constructor
	 * @param {!ImmutableTree.<!Node>} writeTree
	 */
	var CompoundWrite = /** @class */ (function () {
	    function CompoundWrite(writeTree_) {
	        this.writeTree_ = writeTree_;
	    }
	    /**
	     * @param {!Path} path
	     * @param {!Node} node
	     * @return {!CompoundWrite}
	     */
	    CompoundWrite.prototype.addWrite = function (path, node) {
	        if (path.isEmpty()) {
	            return new CompoundWrite(new ImmutableTree(node));
	        }
	        else {
	            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
	            if (rootmost != null) {
	                var rootMostPath = rootmost.path;
	                var value = rootmost.value;
	                var relativePath = Path.relativePath(rootMostPath, path);
	                value = value.updateChild(relativePath, node);
	                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
	            }
	            else {
	                var subtree = new ImmutableTree(node);
	                var newWriteTree = this.writeTree_.setTree(path, subtree);
	                return new CompoundWrite(newWriteTree);
	            }
	        }
	    };
	    /**
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} updates
	     * @return {!CompoundWrite}
	     */
	    CompoundWrite.prototype.addWrites = function (path, updates) {
	        var newWrite = this;
	        util.forEach(updates, function (childKey, node) {
	            newWrite = newWrite.addWrite(path.child(childKey), node);
	        });
	        return newWrite;
	    };
	    /**
	     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
	     * location, which must be removed by calling this method with that path.
	     *
	     * @param {!Path} path The path at which a write and all deeper writes should be removed
	     * @return {!CompoundWrite} The new CompoundWrite with the removed path
	     */
	    CompoundWrite.prototype.removeWrite = function (path) {
	        if (path.isEmpty()) {
	            return CompoundWrite.Empty;
	        }
	        else {
	            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
	            return new CompoundWrite(newWriteTree);
	        }
	    };
	    /**
	     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
	     * considered "complete".
	     *
	     * @param {!Path} path The path to check for
	     * @return {boolean} Whether there is a complete write at that path
	     */
	    CompoundWrite.prototype.hasCompleteWrite = function (path) {
	        return this.getCompleteNode(path) != null;
	    };
	    /**
	     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
	     * writes from deeper paths, but will return child nodes from a more shallow path.
	     *
	     * @param {!Path} path The path to get a complete write
	     * @return {?Node} The node if complete at that path, or null otherwise.
	     */
	    CompoundWrite.prototype.getCompleteNode = function (path) {
	        var rootmost = this.writeTree_.findRootMostValueAndPath(path);
	        if (rootmost != null) {
	            return this.writeTree_
	                .get(rootmost.path)
	                .getChild(Path.relativePath(rootmost.path, path));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Returns all children that are guaranteed to be a complete overwrite.
	     *
	     * @return {!Array.<NamedNode>} A list of all complete children.
	     */
	    CompoundWrite.prototype.getCompleteChildren = function () {
	        var children = [];
	        var node = this.writeTree_.value;
	        if (node != null) {
	            // If it's a leaf node, it has no children; so nothing to do.
	            if (!node.isLeafNode()) {
	                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	                    children.push(new NamedNode(childName, childNode));
	                });
	            }
	        }
	        else {
	            this.writeTree_.children.inorderTraversal(function (childName, childTree) {
	                if (childTree.value != null) {
	                    children.push(new NamedNode(childName, childTree.value));
	                }
	            });
	        }
	        return children;
	    };
	    /**
	     * @param {!Path} path
	     * @return {!CompoundWrite}
	     */
	    CompoundWrite.prototype.childCompoundWrite = function (path) {
	        if (path.isEmpty()) {
	            return this;
	        }
	        else {
	            var shadowingNode = this.getCompleteNode(path);
	            if (shadowingNode != null) {
	                return new CompoundWrite(new ImmutableTree(shadowingNode));
	            }
	            else {
	                return new CompoundWrite(this.writeTree_.subtree(path));
	            }
	        }
	    };
	    /**
	     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
	     * @return {boolean} Whether this CompoundWrite is empty
	     */
	    CompoundWrite.prototype.isEmpty = function () {
	        return this.writeTree_.isEmpty();
	    };
	    /**
	     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
	     * node
	     * @param {!Node} node The node to apply this CompoundWrite to
	     * @return {!Node} The node with all writes applied
	     */
	    CompoundWrite.prototype.apply = function (node) {
	        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);
	    };
	    /**
	     * @type {!CompoundWrite}
	     */
	    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
	    /**
	     * @param {!Path} relativePath
	     * @param {!ImmutableTree.<!Node>} writeTree
	     * @param {!Node} node
	     * @return {!Node}
	     * @private
	     */
	    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {
	        if (writeTree.value != null) {
	            // Since there a write is always a leaf, we're done here
	            return node.updateChild(relativePath, writeTree.value);
	        }
	        else {
	            var priorityWrite_1 = null;
	            writeTree.children.inorderTraversal(function (childKey, childTree) {
	                if (childKey === '.priority') {
	                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
	                    // to apply priorities to empty nodes that are later filled
	                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
	                    priorityWrite_1 = childTree.value;
	                }
	                else {
	                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);
	                }
	            });
	            // If there was a priority write, we only apply it if the node is not empty
	            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
	                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
	            }
	            return node;
	        }
	    };
	    return CompoundWrite;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
	 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
	 * and addMerge(), and removed with removeWrite().
	 *
	 * @constructor
	 */
	var WriteTree = /** @class */ (function () {
	    function WriteTree() {
	        /**
	         * A tree tracking the result of applying all visible writes.  This does not include transactions with
	         * applyLocally=false or writes that are completely shadowed by other writes.
	         *
	         * @type {!CompoundWrite}
	         * @private
	         */
	        this.visibleWrites_ = CompoundWrite.Empty;
	        /**
	         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
	         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
	         * used by transactions).
	         *
	         * @type {!Array.<!WriteRecord>}
	         * @private
	         */
	        this.allWrites_ = [];
	        this.lastWriteId_ = -1;
	    }
	    /**
	     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
	     *
	     * @param {!Path} path
	     * @return {!WriteTreeRef}
	     */
	    WriteTree.prototype.childWrites = function (path) {
	        return new WriteTreeRef(path, this);
	    };
	    /**
	     * Record a new overwrite from user code.
	     *
	     * @param {!Path} path
	     * @param {!Node} snap
	     * @param {!number} writeId
	     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
	     */
	    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
	        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
	        if (visible === undefined) {
	            visible = true;
	        }
	        this.allWrites_.push({
	            path: path,
	            snap: snap,
	            writeId: writeId,
	            visible: visible
	        });
	        if (visible) {
	            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
	        }
	        this.lastWriteId_ = writeId;
	    };
	    /**
	     * Record a new merge from user code.
	     *
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} changedChildren
	     * @param {!number} writeId
	     */
	    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
	        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
	        this.allWrites_.push({
	            path: path,
	            children: changedChildren,
	            writeId: writeId,
	            visible: true
	        });
	        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
	        this.lastWriteId_ = writeId;
	    };
	    /**
	     * @param {!number} writeId
	     * @return {?WriteRecord}
	     */
	    WriteTree.prototype.getWrite = function (writeId) {
	        for (var i = 0; i < this.allWrites_.length; i++) {
	            var record = this.allWrites_[i];
	            if (record.writeId === writeId) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
	     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
	     *
	     * @param {!number} writeId
	     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
	     * events as a result).
	     */
	    WriteTree.prototype.removeWrite = function (writeId) {
	        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
	        // out of order.
	        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
	        //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
	        var _this = this;
	        var idx = this.allWrites_.findIndex(function (s) {
	            return s.writeId === writeId;
	        });
	        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
	        var writeToRemove = this.allWrites_[idx];
	        this.allWrites_.splice(idx, 1);
	        var removedWriteWasVisible = writeToRemove.visible;
	        var removedWriteOverlapsWithOtherWrites = false;
	        var i = this.allWrites_.length - 1;
	        while (removedWriteWasVisible && i >= 0) {
	            var currentWrite = this.allWrites_[i];
	            if (currentWrite.visible) {
	                if (i >= idx &&
	                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {
	                    // The removed write was completely shadowed by a subsequent write.
	                    removedWriteWasVisible = false;
	                }
	                else if (writeToRemove.path.contains(currentWrite.path)) {
	                    // Either we're covering some writes or they're covering part of us (depending on which came first).
	                    removedWriteOverlapsWithOtherWrites = true;
	                }
	            }
	            i--;
	        }
	        if (!removedWriteWasVisible) {
	            return false;
	        }
	        else if (removedWriteOverlapsWithOtherWrites) {
	            // There's some shadowing going on. Just rebuild the visible writes from scratch.
	            this.resetTree_();
	            return true;
	        }
	        else {
	            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
	            if (writeToRemove.snap) {
	                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
	            }
	            else {
	                var children = writeToRemove.children;
	                util.forEach(children, function (childName) {
	                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
	                });
	            }
	            return true;
	        }
	    };
	    /**
	     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
	     * No server data is considered.
	     *
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    WriteTree.prototype.getCompleteWriteData = function (path) {
	        return this.visibleWrites_.getCompleteNode(path);
	    };
	    /**
	     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
	     * writes), attempt to calculate a complete snapshot for the given path
	     *
	     * @param {!Path} treePath
	     * @param {?Node} completeServerCache
	     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
	     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
	        if (!writeIdsToExclude && !includeHiddenWrites) {
	            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
	            if (shadowingNode != null) {
	                return shadowingNode;
	            }
	            else {
	                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
	                if (subMerge.isEmpty()) {
	                    return completeServerCache;
	                }
	                else if (completeServerCache == null &&
	                    !subMerge.hasCompleteWrite(Path.Empty)) {
	                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
	                    return null;
	                }
	                else {
	                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
	                    return subMerge.apply(layeredCache);
	                }
	            }
	        }
	        else {
	            var merge = this.visibleWrites_.childCompoundWrite(treePath);
	            if (!includeHiddenWrites && merge.isEmpty()) {
	                return completeServerCache;
	            }
	            else {
	                // If the server cache is null, and we don't have a complete cache, we need to return null
	                if (!includeHiddenWrites &&
	                    completeServerCache == null &&
	                    !merge.hasCompleteWrite(Path.Empty)) {
	                    return null;
	                }
	                else {
	                    var filter = function (write) {
	                        return ((write.visible || includeHiddenWrites) &&
	                            (!writeIdsToExclude ||
	                                !~writeIdsToExclude.indexOf(write.writeId)) &&
	                            (write.path.contains(treePath) || treePath.contains(write.path)));
	                    };
	                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
	                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
	                    return mergeAtPath.apply(layeredCache);
	                }
	            }
	        }
	    };
	    /**
	     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
	     * Used when creating new views, to pre-fill their complete event children snapshot.
	     *
	     * @param {!Path} treePath
	     * @param {?ChildrenNode} completeServerChildren
	     * @return {!ChildrenNode}
	     */
	    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
	        var completeChildren = ChildrenNode.EMPTY_NODE;
	        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
	        if (topLevelSet) {
	            if (!topLevelSet.isLeafNode()) {
	                // we're shadowing everything. Return the children.
	                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
	                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
	                });
	            }
	            return completeChildren;
	        }
	        else if (completeServerChildren) {
	            // Layer any children we have on top of this
	            // We know we don't have a top-level set, so just enumerate existing children
	            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
	            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	                var node = merge_1
	                    .childCompoundWrite(new Path(childName))
	                    .apply(childNode);
	                completeChildren = completeChildren.updateImmediateChild(childName, node);
	            });
	            // Add any complete children we have from the set
	            merge_1.getCompleteChildren().forEach(function (namedNode) {
	                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
	            });
	            return completeChildren;
	        }
	        else {
	            // We don't have anything to layer on top of. Layer on any children we have
	            // Note that we can return an empty snap if we have a defined delete
	            var merge = this.visibleWrites_.childCompoundWrite(treePath);
	            merge.getCompleteChildren().forEach(function (namedNode) {
	                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
	            });
	            return completeChildren;
	        }
	    };
	    /**
	     * Given that the underlying server data has updated, determine what, if anything, needs to be
	     * applied to the event cache.
	     *
	     * Possibilities:
	     *
	     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
	     *
	     * 2. Some write is completely shadowing. No events to be raised
	     *
	     * 3. Is partially shadowed. Events
	     *
	     * Either existingEventSnap or existingServerSnap must exist
	     *
	     * @param {!Path} treePath
	     * @param {!Path} childPath
	     * @param {?Node} existingEventSnap
	     * @param {?Node} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
	        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
	        var path = treePath.child(childPath);
	        if (this.visibleWrites_.hasCompleteWrite(path)) {
	            // At this point we can probably guarantee that we're in case 2, meaning no events
	            // May need to check visibility while doing the findRootMostValueAndPath call
	            return null;
	        }
	        else {
	            // No complete shadowing. We're either partially shadowing or not shadowing at all.
	            var childMerge = this.visibleWrites_.childCompoundWrite(path);
	            if (childMerge.isEmpty()) {
	                // We're not shadowing at all. Case 1
	                return existingServerSnap.getChild(childPath);
	            }
	            else {
	                // This could be more efficient if the serverNode + updates doesn't change the eventSnap
	                // However this is tricky to find out, since user updates don't necessary change the server
	                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
	                // adds nodes, but doesn't change any existing writes. It is therefore not enough to
	                // only check if the updates change the serverNode.
	                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
	                return childMerge.apply(existingServerSnap.getChild(childPath));
	            }
	        }
	    };
	    /**
	     * Returns a complete child for a given server snap after applying all user writes or null if there is no
	     * complete child for this ChildKey.
	     *
	     * @param {!Path} treePath
	     * @param {!string} childKey
	     * @param {!CacheNode} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
	        var path = treePath.child(childKey);
	        var shadowingNode = this.visibleWrites_.getCompleteNode(path);
	        if (shadowingNode != null) {
	            return shadowingNode;
	        }
	        else {
	            if (existingServerSnap.isCompleteForChild(childKey)) {
	                var childMerge = this.visibleWrites_.childCompoundWrite(path);
	                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
	            }
	            else {
	                return null;
	            }
	        }
	    };
	    /**
	     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
	     * a higher path, this will return the child of that write relative to the write and this path.
	     * Returns null if there is no write at this path.
	     *
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    WriteTree.prototype.shadowingWrite = function (path) {
	        return this.visibleWrites_.getCompleteNode(path);
	    };
	    /**
	     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
	     * the window, but may now be in the window.
	     *
	     * @param {!Path} treePath
	     * @param {?Node} completeServerData
	     * @param {!NamedNode} startPost
	     * @param {!number} count
	     * @param {boolean} reverse
	     * @param {!Index} index
	     * @return {!Array.<!NamedNode>}
	     */
	    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
	        var toIterate;
	        var merge = this.visibleWrites_.childCompoundWrite(treePath);
	        var shadowingNode = merge.getCompleteNode(Path.Empty);
	        if (shadowingNode != null) {
	            toIterate = shadowingNode;
	        }
	        else if (completeServerData != null) {
	            toIterate = merge.apply(completeServerData);
	        }
	        else {
	            // no children to iterate on
	            return [];
	        }
	        toIterate = toIterate.withIndex(index);
	        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
	            var nodes = [];
	            var cmp = index.getCompare();
	            var iter = reverse
	                ? toIterate.getReverseIteratorFrom(startPost, index)
	                : toIterate.getIteratorFrom(startPost, index);
	            var next = iter.getNext();
	            while (next && nodes.length < count) {
	                if (cmp(next, startPost) !== 0) {
	                    nodes.push(next);
	                }
	                next = iter.getNext();
	            }
	            return nodes;
	        }
	        else {
	            return [];
	        }
	    };
	    /**
	     * @param {!WriteRecord} writeRecord
	     * @param {!Path} path
	     * @return {boolean}
	     * @private
	     */
	    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
	        if (writeRecord.snap) {
	            return writeRecord.path.contains(path);
	        }
	        else {
	            // findKey can return undefined, so use !! to coerce to boolean
	            return !!util.findKey(writeRecord.children, function (childSnap, childName) {
	                return writeRecord.path.child(childName).contains(path);
	            });
	        }
	    };
	    /**
	     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
	     * @private
	     */
	    WriteTree.prototype.resetTree_ = function () {
	        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);
	        if (this.allWrites_.length > 0) {
	            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
	        }
	        else {
	            this.lastWriteId_ = -1;
	        }
	    };
	    /**
	     * The default filter used when constructing the tree. Keep everything that's visible.
	     *
	     * @param {!WriteRecord} write
	     * @return {boolean}
	     * @private
	     */
	    WriteTree.DefaultFilter_ = function (write) {
	        return write.visible;
	    };
	    /**
	     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
	     * event data at that path.
	     *
	     * @param {!Array.<!WriteRecord>} writes
	     * @param {!function(!WriteRecord):boolean} filter
	     * @param {!Path} treeRoot
	     * @return {!CompoundWrite}
	     * @private
	     */
	    WriteTree.layerTree_ = function (writes, filter, treeRoot) {
	        var compoundWrite = CompoundWrite.Empty;
	        for (var i = 0; i < writes.length; ++i) {
	            var write = writes[i];
	            // Theory, a later set will either:
	            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
	            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
	            if (filter(write)) {
	                var writePath = write.path;
	                var relativePath = void 0;
	                if (write.snap) {
	                    if (treeRoot.contains(writePath)) {
	                        relativePath = Path.relativePath(treeRoot, writePath);
	                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
	                    }
	                    else if (writePath.contains(treeRoot)) {
	                        relativePath = Path.relativePath(writePath, treeRoot);
	                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
	                    }
	                    else {
	                        // There is no overlap between root path and write path, ignore write
	                    }
	                }
	                else if (write.children) {
	                    if (treeRoot.contains(writePath)) {
	                        relativePath = Path.relativePath(treeRoot, writePath);
	                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);
	                    }
	                    else if (writePath.contains(treeRoot)) {
	                        relativePath = Path.relativePath(writePath, treeRoot);
	                        if (relativePath.isEmpty()) {
	                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
	                        }
	                        else {
	                            var child = util.safeGet(write.children, relativePath.getFront());
	                            if (child) {
	                                // There exists a child in this node that matches the root path
	                                var deepNode = child.getChild(relativePath.popFront());
	                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
	                            }
	                        }
	                    }
	                    else {
	                        // There is no overlap between root path and write path, ignore write
	                    }
	                }
	                else {
	                    throw util.assertionError('WriteRecord should have .snap or .children');
	                }
	            }
	        }
	        return compoundWrite;
	    };
	    return WriteTree;
	}());
	/**
	 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
	 * just proxy to the underlying WriteTree.
	 *
	 * @constructor
	 */
	var WriteTreeRef = /** @class */ (function () {
	    /**
	     * @param {!Path} path
	     * @param {!WriteTree} writeTree
	     */
	    function WriteTreeRef(path, writeTree) {
	        this.treePath_ = path;
	        this.writeTree_ = writeTree;
	    }
	    /**
	     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
	     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
	     * can lead to a more expensive calculation.
	     *
	     * @param {?Node} completeServerCache
	     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
	     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
	        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
	    };
	    /**
	     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
	     * mix of the given server data and write data.
	     *
	     * @param {?ChildrenNode} completeServerChildren
	     * @return {!ChildrenNode}
	     */
	    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
	        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
	    };
	    /**
	     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
	     * if anything, needs to be applied to the event cache.
	     *
	     * Possibilities:
	     *
	     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
	     *
	     * 2. Some write is completely shadowing. No events to be raised
	     *
	     * 3. Is partially shadowed. Events should be raised
	     *
	     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
	     *
	     * @param {!Path} path
	     * @param {?Node} existingEventSnap
	     * @param {?Node} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
	        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
	    };
	    /**
	     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
	     * a higher path, this will return the child of that write relative to the write and this path.
	     * Returns null if there is no write at this path.
	     *
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.shadowingWrite = function (path) {
	        return this.writeTree_.shadowingWrite(this.treePath_.child(path));
	    };
	    /**
	     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
	     * the window, but may now be in the window
	     *
	     * @param {?Node} completeServerData
	     * @param {!NamedNode} startPost
	     * @param {!number} count
	     * @param {boolean} reverse
	     * @param {!Index} index
	     * @return {!Array.<!NamedNode>}
	     */
	    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
	        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
	    };
	    /**
	     * Returns a complete child for a given server snap after applying all user writes or null if there is no
	     * complete child for this ChildKey.
	     *
	     * @param {!string} childKey
	     * @param {!CacheNode} existingServerCache
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
	        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
	    };
	    /**
	     * Return a WriteTreeRef for a child.
	     *
	     * @param {string} childName
	     * @return {!WriteTreeRef}
	     */
	    WriteTreeRef.prototype.child = function (childName) {
	        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
	    };
	    return WriteTreeRef;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SyncTree is the central class for managing event callback registration, data caching, views
	 * (query processing), and event generation.  There are typically two SyncTree instances for
	 * each Repo, one for the normal Firebase data, and one for the .info data.
	 *
	 * It has a number of responsibilities, including:
	 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
	 *  - Applying and caching data changes for user set(), transaction(), and update() calls
	 *    (applyUserOverwrite(), applyUserMerge()).
	 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
	 *    applyServerMerge()).
	 *  - Generating user-facing events for server and user changes (all of the apply* methods
	 *    return the set of events that need to be raised as a result).
	 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
	 *    to the correct set of paths and queries to satisfy the current set of user event
	 *    callbacks (listens are started/stopped using the provided listenProvider).
	 *
	 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
	 * events are returned to the caller rather than raised synchronously.
	 *
	 * @constructor
	 */
	var SyncTree = /** @class */ (function () {
	    /**
	     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
	     *   to server data.
	     */
	    function SyncTree(listenProvider_) {
	        this.listenProvider_ = listenProvider_;
	        /**
	         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
	         * @type {!ImmutableTree.<!SyncPoint>}
	         * @private
	         */
	        this.syncPointTree_ = ImmutableTree.Empty;
	        /**
	         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
	         * @type {!WriteTree}
	         * @private
	         */
	        this.pendingWriteTree_ = new WriteTree();
	        this.tagToQueryMap_ = {};
	        this.queryToTagMap_ = {};
	    }
	    /**
	     * Apply the data changes for a user-generated set() or transaction() call.
	     *
	     * @param {!Path} path
	     * @param {!Node} newData
	     * @param {number} writeId
	     * @param {boolean=} visible
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
	        // Record pending write.
	        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
	        if (!visible) {
	            return [];
	        }
	        else {
	            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
	        }
	    };
	    /**
	     * Apply the data from a user-generated update() call
	     *
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} changedChildren
	     * @param {!number} writeId
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
	        // Record pending merge.
	        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
	        var changeTree = ImmutableTree.fromObject(changedChildren);
	        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
	    };
	    /**
	     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
	     *
	     * @param {!number} writeId
	     * @param {boolean=} revert True if the given write failed and needs to be reverted
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.ackUserWrite = function (writeId, revert) {
	        if (revert === void 0) { revert = false; }
	        var write = this.pendingWriteTree_.getWrite(writeId);
	        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
	        if (!needToReevaluate) {
	            return [];
	        }
	        else {
	            var affectedTree_1 = ImmutableTree.Empty;
	            if (write.snap != null) {
	                // overwrite
	                affectedTree_1 = affectedTree_1.set(Path.Empty, true);
	            }
	            else {
	                util.forEach(write.children, function (pathString, node) {
	                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
	                });
	            }
	            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
	        }
	    };
	    /**
	     * Apply new server data for the specified path..
	     *
	     * @param {!Path} path
	     * @param {!Node} newData
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyServerOverwrite = function (path, newData) {
	        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
	    };
	    /**
	     * Apply new server data to be merged in at the specified path.
	     *
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} changedChildren
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
	        var changeTree = ImmutableTree.fromObject(changedChildren);
	        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
	    };
	    /**
	     * Apply a listen complete for a query
	     *
	     * @param {!Path} path
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyListenComplete = function (path) {
	        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
	    };
	    /**
	     * Apply new server data for the specified tagged query.
	     *
	     * @param {!Path} path
	     * @param {!Node} snap
	     * @param {!number} tag
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey != null) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // Query must have been removed already
	            return [];
	        }
	    };
	    /**
	     * Apply server data to be merged in for the specified tagged query.
	     *
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} changedChildren
	     * @param {!number} tag
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var changeTree = ImmutableTree.fromObject(changedChildren);
	            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // We've already removed the query. No big deal, ignore the update
	            return [];
	        }
	    };
	    /**
	     * Apply a listen complete for a tagged query
	     *
	     * @param {!Path} path
	     * @param {!number} tag
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // We've already removed the query. No big deal, ignore the update
	            return [];
	        }
	    };
	    /**
	     * Add an event callback for the specified query.
	     *
	     * @param {!Query} query
	     * @param {!EventRegistration} eventRegistration
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
	        var path = query.path;
	        var serverCache = null;
	        var foundAncestorDefaultView = false;
	        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
	        // Consider optimizing this once there's a better understanding of what actual behavior will be.
	        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
	            var relativePath = Path.relativePath(pathToSyncPoint, path);
	            serverCache = serverCache || sp.getCompleteServerCache(relativePath);
	            foundAncestorDefaultView =
	                foundAncestorDefaultView || sp.hasCompleteView();
	        });
	        var syncPoint = this.syncPointTree_.get(path);
	        if (!syncPoint) {
	            syncPoint = new SyncPoint();
	            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
	        }
	        else {
	            foundAncestorDefaultView =
	                foundAncestorDefaultView || syncPoint.hasCompleteView();
	            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
	        }
	        var serverCacheComplete;
	        if (serverCache != null) {
	            serverCacheComplete = true;
	        }
	        else {
	            serverCacheComplete = false;
	            serverCache = ChildrenNode.EMPTY_NODE;
	            var subtree = this.syncPointTree_.subtree(path);
	            subtree.foreachChild(function (childName, childSyncPoint) {
	                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
	                if (completeCache) {
	                    serverCache = serverCache.updateImmediateChild(childName, completeCache);
	                }
	            });
	        }
	        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
	        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
	            // We need to track a tag for this query
	            var queryKey = SyncTree.makeQueryKey_(query);
	            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');
	            var tag = SyncTree.getNextQueryTag_();
	            this.queryToTagMap_[queryKey] = tag;
	            // Coerce to string to avoid sparse arrays.
	            this.tagToQueryMap_['_' + tag] = queryKey;
	        }
	        var writesCache = this.pendingWriteTree_.childWrites(path);
	        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
	        if (!viewAlreadyExists && !foundAncestorDefaultView) {
	            var view /** @type !View */ = syncPoint.viewForQuery(query);
	            events = events.concat(this.setupListener_(query, view));
	        }
	        return events;
	    };
	    /**
	     * Remove event callback(s).
	     *
	     * If query is the default query, we'll check all queries for the specified eventRegistration.
	     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
	     *
	     * @param {!Query} query
	     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.
	     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
	     */
	    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
	        var _this = this;
	        // Find the syncPoint first. Then deal with whether or not it has matching listeners
	        var path = query.path;
	        var maybeSyncPoint = this.syncPointTree_.get(path);
	        var cancelEvents = [];
	        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
	        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
	        // not loadsAllData().
	        if (maybeSyncPoint &&
	            (query.queryIdentifier() === 'default' ||
	                maybeSyncPoint.viewExistsForQuery(query))) {
	            /**
	             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
	             */
	            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
	            if (maybeSyncPoint.isEmpty()) {
	                this.syncPointTree_ = this.syncPointTree_.remove(path);
	            }
	            var removed = removedAndEvents.removed;
	            cancelEvents = removedAndEvents.events;
	            // We may have just removed one of many listeners and can short-circuit this whole process
	            // We may also not have removed a default listener, in which case all of the descendant listeners should already be
	            // properly set up.
	            //
	            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
	            // queryId === 'default'
	            var removingDefault = -1 !==
	                removed.findIndex(function (query) {
	                    return query.getQueryParams().loadsAllData();
	                });
	            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
	                return parentSyncPoint.hasCompleteView();
	            });
	            if (removingDefault && !covered) {
	                var subtree = this.syncPointTree_.subtree(path);
	                // There are potentially child listeners. Determine what if any listens we need to send before executing the
	                // removal
	                if (!subtree.isEmpty()) {
	                    // We need to fold over our subtree and collect the listeners to send
	                    var newViews = this.collectDistinctViewsForSubTree_(subtree);
	                    // Ok, we've collected all the listens we need. Set them up.
	                    for (var i = 0; i < newViews.length; ++i) {
	                        var view = newViews[i], newQuery = view.getQuery();
	                        var listener = this.createListenerForView_(view);
	                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
	                    }
	                }
	                else {
	                    // There's nothing below us, so nothing we need to start listening on
	                }
	            }
	            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
	            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
	            // Also, note that if we have a cancelError, it's already been removed at the provider level.
	            if (!covered && removed.length > 0 && !cancelError) {
	                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
	                // default. Otherwise, we need to iterate through and cancel each individual query
	                if (removingDefault) {
	                    // We don't tag default listeners
	                    var defaultTag = null;
	                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
	                }
	                else {
	                    removed.forEach(function (queryToRemove) {
	                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];
	                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
	                    });
	                }
	            }
	            // Now, clear all of the tags we're tracking for the removed listens
	            this.removeTags_(removed);
	        }
	        else {
	            // No-op, this listener must've been already removed
	        }
	        return cancelEvents;
	    };
	    /**
	     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above
	     * it, but as this is only used by transaction code, that should always be the case anyways.
	     *
	     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
	     * @param {!Path} path The path to the data we want
	     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded
	     * @return {?Node}
	     */
	    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
	        var includeHiddenSets = true;
	        var writeTree = this.pendingWriteTree_;
	        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
	            var relativePath = Path.relativePath(pathSoFar, path);
	            var serverCache = syncPoint.getCompleteServerCache(relativePath);
	            if (serverCache) {
	                return serverCache;
	            }
	        });
	        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
	    };
	    /**
	     * This collapses multiple unfiltered views into a single view, since we only need a single
	     * listener for them.
	     *
	     * @param {!ImmutableTree.<!SyncPoint>} subtree
	     * @return {!Array.<!View>}
	     * @private
	     */
	    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
	        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
	            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
	                var completeView = maybeChildSyncPoint.getCompleteView();
	                return [completeView];
	            }
	            else {
	                // No complete view here, flatten any deeper listens into an array
	                var views_1 = [];
	                if (maybeChildSyncPoint) {
	                    views_1 = maybeChildSyncPoint.getQueryViews();
	                }
	                util.forEach(childMap, function (key, childViews) {
	                    views_1 = views_1.concat(childViews);
	                });
	                return views_1;
	            }
	        });
	    };
	    /**
	     * @param {!Array.<!Query>} queries
	     * @private
	     */
	    SyncTree.prototype.removeTags_ = function (queries) {
	        for (var j = 0; j < queries.length; ++j) {
	            var removedQuery = queries[j];
	            if (!removedQuery.getQueryParams().loadsAllData()) {
	                // We should have a tag for this
	                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
	                var removedQueryTag = this.queryToTagMap_[removedQueryKey];
	                delete this.queryToTagMap_[removedQueryKey];
	                delete this.tagToQueryMap_['_' + removedQueryTag];
	            }
	        }
	    };
	    /**
	     * Normalizes a query to a query we send the server for listening
	     * @param {!Query} query
	     * @return {!Query} The normalized query
	     * @private
	     */
	    SyncTree.queryForListening_ = function (query) {
	        if (query.getQueryParams().loadsAllData() &&
	            !query.getQueryParams().isDefault()) {
	            // We treat queries that load all data as default queries
	            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
	            // from Query
	            return /** @type {!Query} */ query.getRef();
	        }
	        else {
	            return query;
	        }
	    };
	    /**
	     * For a given new listen, manage the de-duplication of outstanding subscriptions.
	     *
	     * @param {!Query} query
	     * @param {!View} view
	     * @return {!Array.<!Event>} This method can return events to support synchronous data sources
	     * @private
	     */
	    SyncTree.prototype.setupListener_ = function (query, view) {
	        var path = query.path;
	        var tag = this.tagForQuery_(query);
	        var listener = this.createListenerForView_(view);
	        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
	        var subtree = this.syncPointTree_.subtree(path);
	        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
	        // may need to shadow other listens as well.
	        if (tag) {
	            util.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
	        }
	        else {
	            // Shadow everything at or below this location, this is a default listener.
	            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
	                if (!relativePath.isEmpty() &&
	                    maybeChildSyncPoint &&
	                    maybeChildSyncPoint.hasCompleteView()) {
	                    return [maybeChildSyncPoint.getCompleteView().getQuery()];
	                }
	                else {
	                    // No default listener here, flatten any deeper queries into an array
	                    var queries_1 = [];
	                    if (maybeChildSyncPoint) {
	                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
	                    }
	                    util.forEach(childMap, function (key, childQueries) {
	                        queries_1 = queries_1.concat(childQueries);
	                    });
	                    return queries_1;
	                }
	            });
	            for (var i = 0; i < queriesToStop.length; ++i) {
	                var queryToStop = queriesToStop[i];
	                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
	            }
	        }
	        return events;
	    };
	    /**
	     *
	     * @param {!View} view
	     * @return {{hashFn: function(), onComplete: function(!string, *)}}
	     * @private
	     */
	    SyncTree.prototype.createListenerForView_ = function (view) {
	        var _this = this;
	        var query = view.getQuery();
	        var tag = this.tagForQuery_(query);
	        return {
	            hashFn: function () {
	                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
	                return cache.hash();
	            },
	            onComplete: function (status) {
	                if (status === 'ok') {
	                    if (tag) {
	                        return _this.applyTaggedListenComplete(query.path, tag);
	                    }
	                    else {
	                        return _this.applyListenComplete(query.path);
	                    }
	                }
	                else {
	                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
	                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children
	                    var error$$1 = errorForServerCode(status, query);
	                    return _this.removeEventRegistration(query, 
	                    /*eventRegistration*/ null, error$$1);
	                }
	            }
	        };
	    };
	    /**
	     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
	     * @private
	     * @param {!Query} query
	     * @return {string}
	     */
	    SyncTree.makeQueryKey_ = function (query) {
	        return query.path.toString() + '$' + query.queryIdentifier();
	    };
	    /**
	     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
	     * @private
	     * @param {!string} queryKey
	     * @return {{queryId: !string, path: !Path}}
	     */
	    SyncTree.parseQueryKey_ = function (queryKey) {
	        var splitIndex = queryKey.indexOf('$');
	        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
	        return {
	            queryId: queryKey.substr(splitIndex + 1),
	            path: new Path(queryKey.substr(0, splitIndex))
	        };
	    };
	    /**
	     * Return the query associated with the given tag, if we have one
	     * @param {!number} tag
	     * @return {?string}
	     * @private
	     */
	    SyncTree.prototype.queryKeyForTag_ = function (tag) {
	        return this.tagToQueryMap_['_' + tag];
	    };
	    /**
	     * Return the tag associated with the given query.
	     * @param {!Query} query
	     * @return {?number}
	     * @private
	     */
	    SyncTree.prototype.tagForQuery_ = function (query) {
	        var queryKey = SyncTree.makeQueryKey_(query);
	        return util.safeGet(this.queryToTagMap_, queryKey);
	    };
	    /**
	     * Static accessor for query tags.
	     * @return {number}
	     * @private
	     */
	    SyncTree.getNextQueryTag_ = function () {
	        return SyncTree.nextQueryTag_++;
	    };
	    /**
	     * A helper method to apply tagged operations
	     *
	     * @param {!Path} queryPath
	     * @param {!Operation} operation
	     * @return {!Array.<!Event>}
	     * @private
	     */
	    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
	        var syncPoint = this.syncPointTree_.get(queryPath);
	        util.assert(syncPoint, "Missing sync point for query tag that we're tracking");
	        var writesCache = this.pendingWriteTree_.childWrites(queryPath);
	        return syncPoint.applyOperation(operation, writesCache, 
	        /*serverCache=*/ null);
	    };
	    /**
	     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
	     *
	     * NOTES:
	     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
	  
	     * - We call applyOperation() on each SyncPoint passing three things:
	     *   1. A version of the Operation that has been made relative to the SyncPoint location.
	     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
	     *   3. A snapshot Node with cached server data, if we have it.
	  
	     * - We concatenate all of the events returned by each SyncPoint and return the result.
	     *
	     * @param {!Operation} operation
	     * @return {!Array.<!Event>}
	     * @private
	     */
	    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
	        return this.applyOperationHelper_(operation, this.syncPointTree_, 
	        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));
	    };
	    /**
	     * Recursive helper for applyOperationToSyncPoints_
	     *
	     * @private
	     * @param {!Operation} operation
	     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
	     * @param {?Node} serverCache
	     * @param {!WriteTreeRef} writesCache
	     * @return {!Array.<!Event>}
	     */
	    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
	        if (operation.path.isEmpty()) {
	            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
	        }
	        else {
	            var syncPoint = syncPointTree.get(Path.Empty);
	            // If we don't have cached server data, see if we can get it from this SyncPoint.
	            if (serverCache == null && syncPoint != null) {
	                serverCache = syncPoint.getCompleteServerCache(Path.Empty);
	            }
	            var events = [];
	            var childName = operation.path.getFront();
	            var childOperation = operation.operationForChild(childName);
	            var childTree = syncPointTree.children.get(childName);
	            if (childTree && childOperation) {
	                var childServerCache = serverCache
	                    ? serverCache.getImmediateChild(childName)
	                    : null;
	                var childWritesCache = writesCache.child(childName);
	                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
	            }
	            if (syncPoint) {
	                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
	            }
	            return events;
	        }
	    };
	    /**
	     * Recursive helper for applyOperationToSyncPoints_
	     *
	     * @private
	     * @param {!Operation} operation
	     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
	     * @param {?Node} serverCache
	     * @param {!WriteTreeRef} writesCache
	     * @return {!Array.<!Event>}
	     */
	    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
	        var _this = this;
	        var syncPoint = syncPointTree.get(Path.Empty);
	        // If we don't have cached server data, see if we can get it from this SyncPoint.
	        if (serverCache == null && syncPoint != null) {
	            serverCache = syncPoint.getCompleteServerCache(Path.Empty);
	        }
	        var events = [];
	        syncPointTree.children.inorderTraversal(function (childName, childTree) {
	            var childServerCache = serverCache
	                ? serverCache.getImmediateChild(childName)
	                : null;
	            var childWritesCache = writesCache.child(childName);
	            var childOperation = operation.operationForChild(childName);
	            if (childOperation) {
	                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
	            }
	        });
	        if (syncPoint) {
	            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
	        }
	        return events;
	    };
	    /**
	     * Static tracker for next query tag.
	     * @type {number}
	     * @private
	     */
	    SyncTree.nextQueryTag_ = 1;
	    return SyncTree;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
	 *
	 * @constructor
	 */
	var SnapshotHolder = /** @class */ (function () {
	    function SnapshotHolder() {
	        this.rootNode_ = ChildrenNode.EMPTY_NODE;
	    }
	    SnapshotHolder.prototype.getNode = function (path) {
	        return this.rootNode_.getChild(path);
	    };
	    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
	        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
	    };
	    return SnapshotHolder;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Abstraction around FirebaseApp's token fetching capabilities.
	 */
	var AuthTokenProvider = /** @class */ (function () {
	    /**
	     * @param {!FirebaseApp} app_
	     */
	    function AuthTokenProvider(app_) {
	        this.app_ = app_;
	    }
	    /**
	     * @param {boolean} forceRefresh
	     * @return {!Promise<FirebaseAuthTokenData>}
	     */
	    AuthTokenProvider.prototype.getToken = function (forceRefresh) {
	        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, 
	        // .catch
	        function (error$$1) {
	            // TODO: Need to figure out all the cases this is raised and whether
	            // this makes sense.
	            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {
	                log('Got auth/token-not-initialized error.  Treating as null token.');
	                return null;
	            }
	            else {
	                return Promise.reject(error$$1);
	            }
	        });
	    };
	    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
	        // TODO: We might want to wrap the listener and call it with no args to
	        // avoid a leaky abstraction, but that makes removing the listener harder.
	        this.app_['INTERNAL']['addAuthTokenListener'](listener);
	    };
	    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
	        this.app_['INTERNAL']['removeAuthTokenListener'](listener);
	    };
	    AuthTokenProvider.prototype.notifyForInvalidToken = function () {
	        var errorMessage = 'Provided authentication credentials for the app named "' +
	            this.app_.name +
	            '" are invalid. This usually indicates your app was not ' +
	            'initialized correctly. ';
	        if ('credential' in this.app_.options) {
	            errorMessage +=
	                'Make sure the "credential" property provided to initializeApp() ' +
	                    'is authorized to access the specified "databaseURL" and is from the correct ' +
	                    'project.';
	        }
	        else if ('serviceAccount' in this.app_.options) {
	            errorMessage +=
	                'Make sure the "serviceAccount" property provided to initializeApp() ' +
	                    'is authorized to access the specified "databaseURL" and is from the correct ' +
	                    'project.';
	        }
	        else {
	            errorMessage +=
	                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
	                    'initializeApp() match the values provided for your app at ' +
	                    'https://console.firebase.google.com/.';
	        }
	        warn(errorMessage);
	    };
	    return AuthTokenProvider;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Tracks a collection of stats.
	 *
	 * @constructor
	 */
	var StatsCollection = /** @class */ (function () {
	    function StatsCollection() {
	        this.counters_ = {};
	    }
	    StatsCollection.prototype.incrementCounter = function (name, amount) {
	        if (amount === void 0) { amount = 1; }
	        if (!util.contains(this.counters_, name))
	            this.counters_[name] = 0;
	        this.counters_[name] += amount;
	    };
	    StatsCollection.prototype.get = function () {
	        return util.deepCopy(this.counters_);
	    };
	    return StatsCollection;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var StatsManager = /** @class */ (function () {
	    function StatsManager() {
	    }
	    StatsManager.getCollection = function (repoInfo) {
	        var hashString = repoInfo.toString();
	        if (!this.collections_[hashString]) {
	            this.collections_[hashString] = new StatsCollection();
	        }
	        return this.collections_[hashString];
	    };
	    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
	        var hashString = repoInfo.toString();
	        if (!this.reporters_[hashString]) {
	            this.reporters_[hashString] = creatorFunction();
	        }
	        return this.reporters_[hashString];
	    };
	    StatsManager.collections_ = {};
	    StatsManager.reporters_ = {};
	    return StatsManager;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns the delta from the previous call to get stats.
	 *
	 * @param collection_ The collection to "listen" to.
	 * @constructor
	 */
	var StatsListener = /** @class */ (function () {
	    function StatsListener(collection_) {
	        this.collection_ = collection_;
	        this.last_ = null;
	    }
	    StatsListener.prototype.get = function () {
	        var newStats = this.collection_.get();
	        var delta = util.clone(newStats);
	        if (this.last_) {
	            util.forEach(this.last_, function (stat, value) {
	                delta[stat] = delta[stat] - value;
	            });
	        }
	        this.last_ = newStats;
	        return delta;
	    };
	    return StatsListener;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
	// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
	// seconds to try to ensure the Firebase connection is established / settled.
	var FIRST_STATS_MIN_TIME = 10 * 1000;
	var FIRST_STATS_MAX_TIME = 30 * 1000;
	// We'll continue to report stats on average every 5 minutes.
	var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
	/**
	 * @constructor
	 */
	var StatsReporter = /** @class */ (function () {
	    /**
	     * @param collection
	     * @param server_
	     */
	    function StatsReporter(collection, server_) {
	        this.server_ = server_;
	        this.statsToReport_ = {};
	        this.statsListener_ = new StatsListener(collection);
	        var timeout = FIRST_STATS_MIN_TIME +
	            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
	        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
	    }
	    StatsReporter.prototype.includeStat = function (stat) {
	        this.statsToReport_[stat] = true;
	    };
	    StatsReporter.prototype.reportStats_ = function () {
	        var _this = this;
	        var stats = this.statsListener_.get();
	        var reportedStats = {};
	        var haveStatsToReport = false;
	        util.forEach(stats, function (stat, value) {
	            if (value > 0 && util.contains(_this.statsToReport_, stat)) {
	                reportedStats[stat] = value;
	                haveStatsToReport = true;
	            }
	        });
	        if (haveStatsToReport) {
	            this.server_.reportStats(reportedStats);
	        }
	        // queue our next run.
	        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
	    };
	    return StatsReporter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The event queue serves a few purposes:
	 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
	 *    events being queued.
	 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
	 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
	 *    left off, ensuring that the events are still raised synchronously and in order.
	 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
	 *    events are raised synchronously.
	 *
	 * NOTE: This can all go away if/when we move to async events.
	 *
	 * @constructor
	 */
	var EventQueue = /** @class */ (function () {
	    function EventQueue() {
	        /**
	         * @private
	         * @type {!Array.<EventList>}
	         */
	        this.eventLists_ = [];
	        /**
	         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
	         * @private
	         * @type {!number}
	         */
	        this.recursionDepth_ = 0;
	    }
	    /**
	     * @param {!Array.<Event>} eventDataList The new events to queue.
	     */
	    EventQueue.prototype.queueEvents = function (eventDataList) {
	        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
	        var currList = null;
	        for (var i = 0; i < eventDataList.length; i++) {
	            var eventData = eventDataList[i];
	            var eventPath = eventData.getPath();
	            if (currList !== null && !eventPath.equals(currList.getPath())) {
	                this.eventLists_.push(currList);
	                currList = null;
	            }
	            if (currList === null) {
	                currList = new EventList(eventPath);
	            }
	            currList.add(eventData);
	        }
	        if (currList) {
	            this.eventLists_.push(currList);
	        }
	    };
	    /**
	     * Queues the specified events and synchronously raises all events (including previously queued ones)
	     * for the specified path.
	     *
	     * It is assumed that the new events are all for the specified path.
	     *
	     * @param {!Path} path The path to raise events for.
	     * @param {!Array.<Event>} eventDataList The new events to raise.
	     */
	    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
	        this.queueEvents(eventDataList);
	        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
	            return eventPath.equals(path);
	        });
	    };
	    /**
	     * Queues the specified events and synchronously raises all events (including previously queued ones) for
	     * locations related to the specified change path (i.e. all ancestors and descendants).
	     *
	     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
	     *
	     * @param {!Path} changedPath The path to raise events for.
	     * @param {!Array.<!Event>} eventDataList The events to raise
	     */
	    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
	        this.queueEvents(eventDataList);
	        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
	            return eventPath.contains(changedPath) || changedPath.contains(eventPath);
	        });
	    };
	    /**
	     * @param {!function(!Path):boolean} predicate
	     * @private
	     */
	    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
	        this.recursionDepth_++;
	        var sentAll = true;
	        for (var i = 0; i < this.eventLists_.length; i++) {
	            var eventList = this.eventLists_[i];
	            if (eventList) {
	                var eventPath = eventList.getPath();
	                if (predicate(eventPath)) {
	                    this.eventLists_[i].raise();
	                    this.eventLists_[i] = null;
	                }
	                else {
	                    sentAll = false;
	                }
	            }
	        }
	        if (sentAll) {
	            this.eventLists_ = [];
	        }
	        this.recursionDepth_--;
	    };
	    return EventQueue;
	}());
	/**
	 * @param {!Path} path
	 * @constructor
	 */
	var EventList = /** @class */ (function () {
	    function EventList(path_) {
	        this.path_ = path_;
	        /**
	         * @type {!Array.<Event>}
	         * @private
	         */
	        this.events_ = [];
	    }
	    /**
	     * @param {!Event} eventData
	     */
	    EventList.prototype.add = function (eventData) {
	        this.events_.push(eventData);
	    };
	    /**
	     * Iterates through the list and raises each event
	     */
	    EventList.prototype.raise = function () {
	        for (var i = 0; i < this.events_.length; i++) {
	            var eventData = this.events_[i];
	            if (eventData !== null) {
	                this.events_[i] = null;
	                var eventFn = eventData.getEventRunner();
	                if (logger$1) {
	                    log('event: ' + eventData.toString());
	                }
	                exceptionGuard(eventFn);
	            }
	        }
	    };
	    /**
	     * @return {!Path}
	     */
	    EventList.prototype.getPath = function () {
	        return this.path_;
	    };
	    return EventList;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Base class to be used if you want to emit events. Call the constructor with
	 * the set of allowed event names.
	 */
	var EventEmitter = /** @class */ (function () {
	    /**
	     * @param {!Array.<string>} allowedEvents_
	     */
	    function EventEmitter(allowedEvents_) {
	        this.allowedEvents_ = allowedEvents_;
	        this.listeners_ = {};
	        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
	    }
	    /**
	     * To be called by derived classes to trigger events.
	     * @param {!string} eventType
	     * @param {...*} var_args
	     */
	    EventEmitter.prototype.trigger = function (eventType) {
	        var var_args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            var_args[_i - 1] = arguments[_i];
	        }
	        if (Array.isArray(this.listeners_[eventType])) {
	            // Clone the list, since callbacks could add/remove listeners.
	            var listeners = this.listeners_[eventType].slice();
	            for (var i = 0; i < listeners.length; i++) {
	                listeners[i].callback.apply(listeners[i].context, var_args);
	            }
	        }
	    };
	    EventEmitter.prototype.on = function (eventType, callback, context) {
	        this.validateEventType_(eventType);
	        this.listeners_[eventType] = this.listeners_[eventType] || [];
	        this.listeners_[eventType].push({ callback: callback, context: context });
	        var eventData = this.getInitialEvent(eventType);
	        if (eventData) {
	            callback.apply(context, eventData);
	        }
	    };
	    EventEmitter.prototype.off = function (eventType, callback, context) {
	        this.validateEventType_(eventType);
	        var listeners = this.listeners_[eventType] || [];
	        for (var i = 0; i < listeners.length; i++) {
	            if (listeners[i].callback === callback &&
	                (!context || context === listeners[i].context)) {
	                listeners.splice(i, 1);
	                return;
	            }
	        }
	    };
	    EventEmitter.prototype.validateEventType_ = function (eventType) {
	        util.assert(this.allowedEvents_.find(function (et) {
	            return et === eventType;
	        }), 'Unknown event: ' + eventType);
	    };
	    return EventEmitter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @extends {EventEmitter}
	 */
	var VisibilityMonitor = /** @class */ (function (_super) {
	    tslib_1.__extends(VisibilityMonitor, _super);
	    function VisibilityMonitor() {
	        var _this = _super.call(this, ['visible']) || this;
	        var hidden;
	        var visibilityChange;
	        if (typeof document !== 'undefined' &&
	            typeof document.addEventListener !== 'undefined') {
	            if (typeof document['hidden'] !== 'undefined') {
	                // Opera 12.10 and Firefox 18 and later support
	                visibilityChange = 'visibilitychange';
	                hidden = 'hidden';
	            }
	            else if (typeof document['mozHidden'] !== 'undefined') {
	                visibilityChange = 'mozvisibilitychange';
	                hidden = 'mozHidden';
	            }
	            else if (typeof document['msHidden'] !== 'undefined') {
	                visibilityChange = 'msvisibilitychange';
	                hidden = 'msHidden';
	            }
	            else if (typeof document['webkitHidden'] !== 'undefined') {
	                visibilityChange = 'webkitvisibilitychange';
	                hidden = 'webkitHidden';
	            }
	        }
	        // Initially, we always assume we are visible. This ensures that in browsers
	        // without page visibility support or in cases where we are never visible
	        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
	        // reconnects
	        _this.visible_ = true;
	        if (visibilityChange) {
	            document.addEventListener(visibilityChange, function () {
	                var visible = !document[hidden];
	                if (visible !== _this.visible_) {
	                    _this.visible_ = visible;
	                    _this.trigger('visible', visible);
	                }
	            }, false);
	        }
	        return _this;
	    }
	    VisibilityMonitor.getInstance = function () {
	        return new VisibilityMonitor();
	    };
	    /**
	     * @param {!string} eventType
	     * @return {Array.<boolean>}
	     */
	    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
	        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
	        return [this.visible_];
	    };
	    return VisibilityMonitor;
	}(EventEmitter));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Monitors online state (as reported by window.online/offline events).
	 *
	 * The expectation is that this could have many false positives (thinks we are online
	 * when we're not), but no false negatives.  So we can safely use it to determine when
	 * we definitely cannot reach the internet.
	 *
	 * @extends {EventEmitter}
	 */
	var OnlineMonitor = /** @class */ (function (_super) {
	    tslib_1.__extends(OnlineMonitor, _super);
	    function OnlineMonitor() {
	        var _this = _super.call(this, ['online']) || this;
	        _this.online_ = true;
	        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
	        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
	        // It would seem that the 'online' event does not always fire consistently. So we disable it
	        // for Cordova.
	        if (typeof window !== 'undefined' &&
	            typeof window.addEventListener !== 'undefined' &&
	            !util.isMobileCordova()) {
	            window.addEventListener('online', function () {
	                if (!_this.online_) {
	                    _this.online_ = true;
	                    _this.trigger('online', true);
	                }
	            }, false);
	            window.addEventListener('offline', function () {
	                if (_this.online_) {
	                    _this.online_ = false;
	                    _this.trigger('online', false);
	                }
	            }, false);
	        }
	        return _this;
	    }
	    OnlineMonitor.getInstance = function () {
	        return new OnlineMonitor();
	    };
	    /**
	     * @param {!string} eventType
	     * @return {Array.<boolean>}
	     */
	    OnlineMonitor.prototype.getInitialEvent = function (eventType) {
	        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);
	        return [this.online_];
	    };
	    /**
	     * @return {boolean}
	     */
	    OnlineMonitor.prototype.currentlyOnline = function () {
	        return this.online_;
	    };
	    return OnlineMonitor;
	}(EventEmitter));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class ensures the packets from the server arrive in order
	 * This class takes data from the server and ensures it gets passed into the callbacks in order.
	 * @constructor
	 */
	var PacketReceiver = /** @class */ (function () {
	    /**
	     * @param onMessage_
	     */
	    function PacketReceiver(onMessage_) {
	        this.onMessage_ = onMessage_;
	        this.pendingResponses = [];
	        this.currentResponseNum = 0;
	        this.closeAfterResponse = -1;
	        this.onClose = null;
	    }
	    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
	        this.closeAfterResponse = responseNum;
	        this.onClose = callback;
	        if (this.closeAfterResponse < this.currentResponseNum) {
	            this.onClose();
	            this.onClose = null;
	        }
	    };
	    /**
	     * Each message from the server comes with a response number, and an array of data. The responseNumber
	     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
	     * browsers will respond in the same order as the requests we sent
	     * @param {number} requestNum
	     * @param {Array} data
	     */
	    PacketReceiver.prototype.handleResponse = function (requestNum, data) {
	        var _this = this;
	        this.pendingResponses[requestNum] = data;
	        var _loop_1 = function () {
	            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
	            delete this_1.pendingResponses[this_1.currentResponseNum];
	            var _loop_2 = function (i) {
	                if (toProcess[i]) {
	                    exceptionGuard(function () {
	                        _this.onMessage_(toProcess[i]);
	                    });
	                }
	            };
	            for (var i = 0; i < toProcess.length; ++i) {
	                _loop_2(i);
	            }
	            if (this_1.currentResponseNum === this_1.closeAfterResponse) {
	                if (this_1.onClose) {
	                    this_1.onClose();
	                    this_1.onClose = null;
	                }
	                return "break";
	            }
	            this_1.currentResponseNum++;
	        };
	        var this_1 = this;
	        while (this.pendingResponses[this.currentResponseNum]) {
	            var state_1 = _loop_1();
	            if (state_1 === "break")
	                break;
	        }
	    };
	    return PacketReceiver;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// URL query parameters associated with longpolling
	var FIREBASE_LONGPOLL_START_PARAM = 'start';
	var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
	var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
	var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
	var FIREBASE_LONGPOLL_ID_PARAM = 'id';
	var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
	var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
	var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
	var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
	var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
	var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
	var FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';
	var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
	//Data size constants.
	//TODO: Perf: the maximum length actually differs from browser to browser.
	// We should check what browser we're on and set accordingly.
	var MAX_URL_DATA_SIZE = 1870;
	var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
	var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
	/**
	 * Keepalive period
	 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
	 * length of 30 seconds that we can't exceed.
	 * @const
	 * @type {number}
	 */
	var KEEPALIVE_REQUEST_INTERVAL = 25000;
	/**
	 * How long to wait before aborting a long-polling connection attempt.
	 * @const
	 * @type {number}
	 */
	var LP_CONNECT_TIMEOUT = 30000;
	/**
	 * This class manages a single long-polling connection.
	 *
	 * @constructor
	 * @implements {Transport}
	 */
	var BrowserPollConnection = /** @class */ (function () {
	    /**
	     * @param {string} connId An identifier for this connection, used for logging
	     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.
	     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing
	     *                                         transport session
	     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a
	     *                                     connection previously
	     */
	    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
	        this.connId = connId;
	        this.repoInfo = repoInfo;
	        this.transportSessionId = transportSessionId;
	        this.lastSessionId = lastSessionId;
	        this.bytesSent = 0;
	        this.bytesReceived = 0;
	        this.everConnected_ = false;
	        this.log_ = logWrapper(connId);
	        this.stats_ = StatsManager.getCollection(repoInfo);
	        this.urlFn = function (params) {
	            return repoInfo.connectionURL(LONG_POLLING, params);
	        };
	    }
	    /**
	     *
	     * @param {function(Object)} onMessage Callback when messages arrive
	     * @param {function()} onDisconnect Callback with connection lost.
	     */
	    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
	        var _this = this;
	        this.curSegmentNum = 0;
	        this.onDisconnect_ = onDisconnect;
	        this.myPacketOrderer = new PacketReceiver(onMessage);
	        this.isClosed_ = false;
	        this.connectTimeoutTimer_ = setTimeout(function () {
	            _this.log_('Timed out trying to connect.');
	            // Make sure we clear the host cache
	            _this.onClosed_();
	            _this.connectTimeoutTimer_ = null;
	        }, Math.floor(LP_CONNECT_TIMEOUT));
	        // Ensure we delay the creation of the iframe until the DOM is loaded.
	        executeWhenDOMReady(function () {
	            if (_this.isClosed_)
	                return;
	            //Set up a callback that gets triggered once a connection is set up.
	            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var command = args[0], arg1 = args[1], arg2 = args[2];
	                _this.incrementIncomingBytes_(args);
	                if (!_this.scriptTagHolder)
	                    return; // we closed the connection.
	                if (_this.connectTimeoutTimer_) {
	                    clearTimeout(_this.connectTimeoutTimer_);
	                    _this.connectTimeoutTimer_ = null;
	                }
	                _this.everConnected_ = true;
	                if (command == FIREBASE_LONGPOLL_START_PARAM) {
	                    _this.id = arg1;
	                    _this.password = arg2;
	                }
	                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
	                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
	                    if (arg1) {
	                        // We aren't expecting any more data (other than what the server's already in the process of sending us
	                        // through our already open polls), so don't send any more.
	                        _this.scriptTagHolder.sendNewPolls = false;
	                        // arg1 in this case is the last response number sent by the server. We should try to receive
	                        // all of the responses up to this one before closing
	                        _this.myPacketOrderer.closeAfter(arg1, function () {
	                            _this.onClosed_();
	                        });
	                    }
	                    else {
	                        _this.onClosed_();
	                    }
	                }
	                else {
	                    throw new Error('Unrecognized command received: ' + command);
	                }
	            }, function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var pN = args[0], data = args[1];
	                _this.incrementIncomingBytes_(args);
	                _this.myPacketOrderer.handleResponse(pN, data);
	            }, function () {
	                _this.onClosed_();
	            }, _this.urlFn);
	            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
	            //from cache.
	            var urlParams = {};
	            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
	            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
	            if (_this.scriptTagHolder.uniqueCallbackIdentifier)
	                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
	            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
	            if (_this.transportSessionId) {
	                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
	            }
	            if (_this.lastSessionId) {
	                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
	            }
	            if (!util.isNodeSdk() &&
	                typeof location !== 'undefined' &&
	                location.href &&
	                location.href.indexOf(FORGE_DOMAIN) !== -1) {
	                urlParams[REFERER_PARAM] = FORGE_REF;
	            }
	            var connectURL = _this.urlFn(urlParams);
	            _this.log_('Connecting via long-poll to ' + connectURL);
	            _this.scriptTagHolder.addTag(connectURL, function () {
	                /* do nothing */
	            });
	        });
	    };
	    /**
	     * Call this when a handshake has completed successfully and we want to consider the connection established
	     */
	    BrowserPollConnection.prototype.start = function () {
	        this.scriptTagHolder.startLongPoll(this.id, this.password);
	        this.addDisconnectPingFrame(this.id, this.password);
	    };
	    /**
	     * Forces long polling to be considered as a potential transport
	     */
	    BrowserPollConnection.forceAllow = function () {
	        BrowserPollConnection.forceAllow_ = true;
	    };
	    /**
	     * Forces longpolling to not be considered as a potential transport
	     */
	    BrowserPollConnection.forceDisallow = function () {
	        BrowserPollConnection.forceDisallow_ = true;
	    };
	    // Static method, use string literal so it can be accessed in a generic way
	    BrowserPollConnection.isAvailable = function () {
	        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
	        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
	        return (BrowserPollConnection.forceAllow_ ||
	            (!BrowserPollConnection.forceDisallow_ &&
	                typeof document !== 'undefined' &&
	                document.createElement != null &&
	                !isChromeExtensionContentScript() &&
	                !isWindowsStoreApp() &&
	                !util.isNodeSdk()));
	    };
	    /**
	     * No-op for polling
	     */
	    BrowserPollConnection.prototype.markConnectionHealthy = function () { };
	    /**
	     * Stops polling and cleans up the iframe
	     * @private
	     */
	    BrowserPollConnection.prototype.shutdown_ = function () {
	        this.isClosed_ = true;
	        if (this.scriptTagHolder) {
	            this.scriptTagHolder.close();
	            this.scriptTagHolder = null;
	        }
	        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
	        if (this.myDisconnFrame) {
	            document.body.removeChild(this.myDisconnFrame);
	            this.myDisconnFrame = null;
	        }
	        if (this.connectTimeoutTimer_) {
	            clearTimeout(this.connectTimeoutTimer_);
	            this.connectTimeoutTimer_ = null;
	        }
	    };
	    /**
	     * Triggered when this transport is closed
	     * @private
	     */
	    BrowserPollConnection.prototype.onClosed_ = function () {
	        if (!this.isClosed_) {
	            this.log_('Longpoll is closing itself');
	            this.shutdown_();
	            if (this.onDisconnect_) {
	                this.onDisconnect_(this.everConnected_);
	                this.onDisconnect_ = null;
	            }
	        }
	    };
	    /**
	     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
	     * that we've left.
	     */
	    BrowserPollConnection.prototype.close = function () {
	        if (!this.isClosed_) {
	            this.log_('Longpoll is being closed.');
	            this.shutdown_();
	        }
	    };
	    /**
	     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
	     * broken into chunks (since URLs have a small maximum length).
	     * @param {!Object} data The JSON data to transmit.
	     */
	    BrowserPollConnection.prototype.send = function (data) {
	        var dataStr = util.stringify(data);
	        this.bytesSent += dataStr.length;
	        this.stats_.incrementCounter('bytes_sent', dataStr.length);
	        //first, lets get the base64-encoded data
	        var base64data = util.base64Encode(dataStr);
	        //We can only fit a certain amount in each URL, so we need to split this request
	        //up into multiple pieces if it doesn't fit in one request.
	        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
	        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
	        //of segments so that we can reassemble the packet on the server.
	        for (var i = 0; i < dataSegs.length; i++) {
	            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
	            this.curSegmentNum++;
	        }
	    };
	    /**
	     * This is how we notify the server that we're leaving.
	     * We aren't able to send requests with DHTML on a window close event, but we can
	     * trigger XHR requests in some browsers (everything but Opera basically).
	     * @param {!string} id
	     * @param {!string} pw
	     */
	    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
	        if (util.isNodeSdk())
	            return;
	        this.myDisconnFrame = document.createElement('iframe');
	        var urlParams = {};
	        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
	        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
	        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
	        this.myDisconnFrame.src = this.urlFn(urlParams);
	        this.myDisconnFrame.style.display = 'none';
	        document.body.appendChild(this.myDisconnFrame);
	    };
	    /**
	     * Used to track the bytes received by this client
	     * @param {*} args
	     * @private
	     */
	    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
	        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
	        var bytesReceived = util.stringify(args).length;
	        this.bytesReceived += bytesReceived;
	        this.stats_.incrementCounter('bytes_received', bytesReceived);
	    };
	    return BrowserPollConnection;
	}());
	/*********************************************************************************************
	 * A wrapper around an iframe that is used as a long-polling script holder.
	 * @constructor
	 *********************************************************************************************/
	var FirebaseIFrameScriptHolder = /** @class */ (function () {
	    /**
	     * @param commandCB - The callback to be called when control commands are recevied from the server.
	     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
	     * @param onDisconnect - The callback to be triggered when this tag holder is closed
	     * @param urlFn - A function that provides the URL of the endpoint to send data to.
	     */
	    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
	        this.onDisconnect = onDisconnect;
	        this.urlFn = urlFn;
	        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
	        //problems in some browsers.
	        /**
	         * @type {CountedSet.<number, number>}
	         */
	        this.outstandingRequests = new CountedSet();
	        //A queue of the pending segments waiting for transmission to the server.
	        this.pendingSegs = [];
	        //A serial number. We use this for two things:
	        // 1) A way to ensure the browser doesn't cache responses to polls
	        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
	        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
	        //    JSONP code in the order it was added to the iframe.
	        this.currentSerial = Math.floor(Math.random() * 100000000);
	        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
	        // incoming data from the server that we're waiting for).
	        this.sendNewPolls = true;
	        if (!util.isNodeSdk()) {
	            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
	            //iframes where we put the long-polling script tags. We have two callbacks:
	            //   1) Command Callback - Triggered for control issues, like starting a connection.
	            //   2) Message Callback - Triggered when new data arrives.
	            this.uniqueCallbackIdentifier = LUIDGenerator();
	            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
	            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
	            //Create an iframe for us to add script tags to.
	            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
	            // Set the iframe's contents.
	            var script = '';
	            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
	            // for ie9, but ie8 needs to do it again in the document itself.
	            if (this.myIFrame.src &&
	                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
	                var currentDomain = document.domain;
	                script = '<script>document.domain="' + currentDomain + '";</script>';
	            }
	            var iframeContents = '<html><body>' + script + '</body></html>';
	            try {
	                this.myIFrame.doc.open();
	                this.myIFrame.doc.write(iframeContents);
	                this.myIFrame.doc.close();
	            }
	            catch (e) {
	                log('frame writing exception');
	                if (e.stack) {
	                    log(e.stack);
	                }
	                log(e);
	            }
	        }
	        else {
	            this.commandCB = commandCB;
	            this.onMessageCB = onMessageCB;
	        }
	    }
	    /**
	     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
	     * actually use.
	     * @private
	     * @return {Element}
	     */
	    FirebaseIFrameScriptHolder.createIFrame_ = function () {
	        var iframe = document.createElement('iframe');
	        iframe.style.display = 'none';
	        // This is necessary in order to initialize the document inside the iframe
	        if (document.body) {
	            document.body.appendChild(iframe);
	            try {
	                // If document.domain has been modified in IE, this will throw an error, and we need to set the
	                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
	                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
	                var a = iframe.contentWindow.document;
	                if (!a) {
	                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
	                    log('No IE domain setting required');
	                }
	            }
	            catch (e) {
	                var domain = document.domain;
	                iframe.src =
	                    "javascript:void((function(){document.open();document.domain='" +
	                        domain +
	                        "';document.close();})())";
	            }
	        }
	        else {
	            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
	            // never gets hit.
	            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
	        }
	        // Get the document of the iframe in a browser-specific way.
	        if (iframe.contentDocument) {
	            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
	        }
	        else if (iframe.contentWindow) {
	            iframe.doc = iframe.contentWindow.document; // Internet Explorer
	        }
	        else if (iframe.document) {
	            iframe.doc = iframe.document; //others?
	        }
	        return iframe;
	    };
	    /**
	     * Cancel all outstanding queries and remove the frame.
	     */
	    FirebaseIFrameScriptHolder.prototype.close = function () {
	        var _this = this;
	        //Mark this iframe as dead, so no new requests are sent.
	        this.alive = false;
	        if (this.myIFrame) {
	            //We have to actually remove all of the html inside this iframe before removing it from the
	            //window, or IE will continue loading and executing the script tags we've already added, which
	            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
	            this.myIFrame.doc.body.innerHTML = '';
	            setTimeout(function () {
	                if (_this.myIFrame !== null) {
	                    document.body.removeChild(_this.myIFrame);
	                    _this.myIFrame = null;
	                }
	            }, Math.floor(0));
	        }
	        if (util.isNodeSdk() && this.myID) {
	            var urlParams = {};
	            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';
	            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
	            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
	            var theURL = this.urlFn(urlParams);
	            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);
	        }
	        // Protect from being called recursively.
	        var onDisconnect = this.onDisconnect;
	        if (onDisconnect) {
	            this.onDisconnect = null;
	            onDisconnect();
	        }
	    };
	    /**
	     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
	     * @param {!string} id - The ID of this connection
	     * @param {!string} pw - The password for this connection
	     */
	    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
	        this.myID = id;
	        this.myPW = pw;
	        this.alive = true;
	        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
	        while (this.newRequest_()) { }
	    };
	    /**
	     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
	     * too many outstanding requests and we are still alive.
	     *
	     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
	     * needed.
	     */
	    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
	        // We keep one outstanding request open all the time to receive data, but if we need to send data
	        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
	        // close the old request.
	        if (this.alive &&
	            this.sendNewPolls &&
	            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {
	            //construct our url
	            this.currentSerial++;
	            var urlParams = {};
	            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
	            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
	            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
	            var theURL = this.urlFn(urlParams);
	            //Now add as much data as we can.
	            var curDataString = '';
	            var i = 0;
	            while (this.pendingSegs.length > 0) {
	                //first, lets see if the next segment will fit.
	                var nextSeg = this.pendingSegs[0];
	                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=
	                    MAX_URL_DATA_SIZE) {
	                    //great, the segment will fit. Lets append it.
	                    var theSeg = this.pendingSegs.shift();
	                    curDataString =
	                        curDataString +
	                            '&' +
	                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
	                            i +
	                            '=' +
	                            theSeg.seg +
	                            '&' +
	                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
	                            i +
	                            '=' +
	                            theSeg.ts +
	                            '&' +
	                            FIREBASE_LONGPOLL_DATA_PARAM +
	                            i +
	                            '=' +
	                            theSeg.d;
	                    i++;
	                }
	                else {
	                    break;
	                }
	            }
	            theURL = theURL + curDataString;
	            this.addLongPollTag_(theURL, this.currentSerial);
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * Queue a packet for transmission to the server.
	     * @param segnum - A sequential id for this packet segment used for reassembly
	     * @param totalsegs - The total number of segments in this packet
	     * @param data - The data for this segment.
	     */
	    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
	        //add this to the queue of segments to send.
	        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
	        //send the data immediately if there isn't already data being transmitted, unless
	        //startLongPoll hasn't been called yet.
	        if (this.alive) {
	            this.newRequest_();
	        }
	    };
	    /**
	     * Add a script tag for a regular long-poll request.
	     * @param {!string} url - The URL of the script tag.
	     * @param {!number} serial - The serial number of the request.
	     * @private
	     */
	    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
	        var _this = this;
	        //remember that we sent this request.
	        this.outstandingRequests.add(serial, 1);
	        var doNewRequest = function () {
	            _this.outstandingRequests.remove(serial);
	            _this.newRequest_();
	        };
	        // If this request doesn't return on its own accord (by the server sending us some data), we'll
	        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
	        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
	        var readyStateCB = function () {
	            // Request completed.  Cancel the keepalive.
	            clearTimeout(keepaliveTimeout);
	            // Trigger a new request so we can continue receiving data.
	            doNewRequest();
	        };
	        this.addTag(url, readyStateCB);
	    };
	    /**
	     * Add an arbitrary script tag to the iframe.
	     * @param {!string} url - The URL for the script tag source.
	     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
	     */
	    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
	        var _this = this;
	        if (util.isNodeSdk()) {
	            this.doNodeLongPoll(url, loadCB);
	        }
	        else {
	            setTimeout(function () {
	                try {
	                    // if we're already closed, don't add this poll
	                    if (!_this.sendNewPolls)
	                        return;
	                    var newScript_1 = _this.myIFrame.doc.createElement('script');
	                    newScript_1.type = 'text/javascript';
	                    newScript_1.async = true;
	                    newScript_1.src = url;
	                    newScript_1.onload = newScript_1.onreadystatechange = function () {
	                        var rstate = newScript_1.readyState;
	                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {
	                            newScript_1.onload = newScript_1.onreadystatechange = null;
	                            if (newScript_1.parentNode) {
	                                newScript_1.parentNode.removeChild(newScript_1);
	                            }
	                            loadCB();
	                        }
	                    };
	                    newScript_1.onerror = function () {
	                        log('Long-poll script failed to load: ' + url);
	                        _this.sendNewPolls = false;
	                        _this.close();
	                    };
	                    _this.myIFrame.doc.body.appendChild(newScript_1);
	                }
	                catch (e) {
	                    // TODO: we should make this error visible somehow
	                }
	            }, Math.floor(1));
	        }
	    };
	    return FirebaseIFrameScriptHolder;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var WEBSOCKET_MAX_FRAME_SIZE = 16384;
	var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
	var WebSocketImpl = null;
	if (typeof MozWebSocket !== 'undefined') {
	    WebSocketImpl = MozWebSocket;
	}
	else if (typeof WebSocket !== 'undefined') {
	    WebSocketImpl = WebSocket;
	}
	/**
	 * Create a new websocket connection with the given callbacks.
	 * @constructor
	 * @implements {Transport}
	 */
	var WebSocketConnection = /** @class */ (function () {
	    /**
	     * @param {string} connId identifier for this transport
	     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
	     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
	     *                                         session
	     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
	     */
	    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
	        this.connId = connId;
	        this.keepaliveTimer = null;
	        this.frames = null;
	        this.totalFrames = 0;
	        this.bytesSent = 0;
	        this.bytesReceived = 0;
	        this.log_ = logWrapper(this.connId);
	        this.stats_ = StatsManager.getCollection(repoInfo);
	        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
	    }
	    /**
	     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
	     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
	     *                                         session
	     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
	     * @return {string} connection url
	     * @private
	     */
	    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
	        var urlParams = {};
	        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
	        if (!util.isNodeSdk() &&
	            typeof location !== 'undefined' &&
	            location.href &&
	            location.href.indexOf(FORGE_DOMAIN) !== -1) {
	            urlParams[REFERER_PARAM] = FORGE_REF;
	        }
	        if (transportSessionId) {
	            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
	        }
	        if (lastSessionId) {
	            urlParams[LAST_SESSION_PARAM] = lastSessionId;
	        }
	        return repoInfo.connectionURL(WEBSOCKET, urlParams);
	    };
	    /**
	     *
	     * @param onMessage Callback when messages arrive
	     * @param onDisconnect Callback with connection lost.
	     */
	    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
	        var _this = this;
	        this.onDisconnect = onDisconnect;
	        this.onMessage = onMessage;
	        this.log_('Websocket connecting to ' + this.connURL);
	        this.everConnected_ = false;
	        // Assume failure until proven otherwise.
	        PersistentStorage.set('previous_websocket_failure', true);
	        try {
	            if (util.isNodeSdk()) {
	                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
	                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
	                var options = {
	                    headers: {
	                        'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + firebase.SDK_VERSION + "/" + process.platform + "/" + device
	                    }
	                };
	                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
	                var env = process['env'];
	                var proxy = this.connURL.indexOf('wss://') == 0
	                    ? env['HTTPS_PROXY'] || env['https_proxy']
	                    : env['HTTP_PROXY'] || env['http_proxy'];
	                if (proxy) {
	                    options['proxy'] = { origin: proxy };
	                }
	                this.mySock = new WebSocketImpl(this.connURL, [], options);
	            }
	            else {
	                this.mySock = new WebSocketImpl(this.connURL);
	            }
	        }
	        catch (e) {
	            this.log_('Error instantiating WebSocket.');
	            var error$$1 = e.message || e.data;
	            if (error$$1) {
	                this.log_(error$$1);
	            }
	            this.onClosed_();
	            return;
	        }
	        this.mySock.onopen = function () {
	            _this.log_('Websocket connected.');
	            _this.everConnected_ = true;
	        };
	        this.mySock.onclose = function () {
	            _this.log_('Websocket connection was disconnected.');
	            _this.mySock = null;
	            _this.onClosed_();
	        };
	        this.mySock.onmessage = function (m) {
	            _this.handleIncomingFrame(m);
	        };
	        this.mySock.onerror = function (e) {
	            _this.log_('WebSocket error.  Closing connection.');
	            var error$$1 = e.message || e.data;
	            if (error$$1) {
	                _this.log_(error$$1);
	            }
	            _this.onClosed_();
	        };
	    };
	    /**
	     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
	     */
	    WebSocketConnection.prototype.start = function () { };
	    WebSocketConnection.forceDisallow = function () {
	        WebSocketConnection.forceDisallow_ = true;
	    };
	    WebSocketConnection.isAvailable = function () {
	        var isOldAndroid = false;
	        if (typeof navigator !== 'undefined' && navigator.userAgent) {
	            var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
	            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
	            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
	                if (parseFloat(oldAndroidMatch[1]) < 4.4) {
	                    isOldAndroid = true;
	                }
	            }
	        }
	        return (!isOldAndroid &&
	            WebSocketImpl !== null &&
	            !WebSocketConnection.forceDisallow_);
	    };
	    /**
	     * Returns true if we previously failed to connect with this transport.
	     * @return {boolean}
	     */
	    WebSocketConnection.previouslyFailed = function () {
	        // If our persistent storage is actually only in-memory storage,
	        // we default to assuming that it previously failed to be safe.
	        return (PersistentStorage.isInMemoryStorage ||
	            PersistentStorage.get('previous_websocket_failure') === true);
	    };
	    WebSocketConnection.prototype.markConnectionHealthy = function () {
	        PersistentStorage.remove('previous_websocket_failure');
	    };
	    WebSocketConnection.prototype.appendFrame_ = function (data) {
	        this.frames.push(data);
	        if (this.frames.length == this.totalFrames) {
	            var fullMess = this.frames.join('');
	            this.frames = null;
	            var jsonMess = util.jsonEval(fullMess);
	            //handle the message
	            this.onMessage(jsonMess);
	        }
	    };
	    /**
	     * @param {number} frameCount The number of frames we are expecting from the server
	     * @private
	     */
	    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
	        this.totalFrames = frameCount;
	        this.frames = [];
	    };
	    /**
	     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
	     * @param {!String} data
	     * @return {?String} Any remaining data to be process, or null if there is none
	     * @private
	     */
	    WebSocketConnection.prototype.extractFrameCount_ = function (data) {
	        util.assert(this.frames === null, 'We already have a frame buffer');
	        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
	        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
	        if (data.length <= 6) {
	            var frameCount = Number(data);
	            if (!isNaN(frameCount)) {
	                this.handleNewFrameCount_(frameCount);
	                return null;
	            }
	        }
	        this.handleNewFrameCount_(1);
	        return data;
	    };
	    /**
	     * Process a websocket frame that has arrived from the server.
	     * @param mess The frame data
	     */
	    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
	        if (this.mySock === null)
	            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
	        var data = mess['data'];
	        this.bytesReceived += data.length;
	        this.stats_.incrementCounter('bytes_received', data.length);
	        this.resetKeepAlive();
	        if (this.frames !== null) {
	            // we're buffering
	            this.appendFrame_(data);
	        }
	        else {
	            // try to parse out a frame count, otherwise, assume 1 and process it
	            var remainingData = this.extractFrameCount_(data);
	            if (remainingData !== null) {
	                this.appendFrame_(remainingData);
	            }
	        }
	    };
	    /**
	     * Send a message to the server
	     * @param {Object} data The JSON object to transmit
	     */
	    WebSocketConnection.prototype.send = function (data) {
	        this.resetKeepAlive();
	        var dataStr = util.stringify(data);
	        this.bytesSent += dataStr.length;
	        this.stats_.incrementCounter('bytes_sent', dataStr.length);
	        //We can only fit a certain amount in each websocket frame, so we need to split this request
	        //up into multiple pieces if it doesn't fit in one request.
	        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
	        //Send the length header
	        if (dataSegs.length > 1) {
	            this.sendString_(String(dataSegs.length));
	        }
	        //Send the actual data in segments.
	        for (var i = 0; i < dataSegs.length; i++) {
	            this.sendString_(dataSegs[i]);
	        }
	    };
	    WebSocketConnection.prototype.shutdown_ = function () {
	        this.isClosed_ = true;
	        if (this.keepaliveTimer) {
	            clearInterval(this.keepaliveTimer);
	            this.keepaliveTimer = null;
	        }
	        if (this.mySock) {
	            this.mySock.close();
	            this.mySock = null;
	        }
	    };
	    WebSocketConnection.prototype.onClosed_ = function () {
	        if (!this.isClosed_) {
	            this.log_('WebSocket is closing itself');
	            this.shutdown_();
	            // since this is an internal close, trigger the close listener
	            if (this.onDisconnect) {
	                this.onDisconnect(this.everConnected_);
	                this.onDisconnect = null;
	            }
	        }
	    };
	    /**
	     * External-facing close handler.
	     * Close the websocket and kill the connection.
	     */
	    WebSocketConnection.prototype.close = function () {
	        if (!this.isClosed_) {
	            this.log_('WebSocket is being closed');
	            this.shutdown_();
	        }
	    };
	    /**
	     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
	     * the last activity.
	     */
	    WebSocketConnection.prototype.resetKeepAlive = function () {
	        var _this = this;
	        clearInterval(this.keepaliveTimer);
	        this.keepaliveTimer = setInterval(function () {
	            //If there has been no websocket activity for a while, send a no-op
	            if (_this.mySock) {
	                _this.sendString_('0');
	            }
	            _this.resetKeepAlive();
	        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
	    };
	    /**
	     * Send a string over the websocket.
	     *
	     * @param {string} str String to send.
	     * @private
	     */
	    WebSocketConnection.prototype.sendString_ = function (str) {
	        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
	        // calls for some unknown reason.  We treat these as an error and disconnect.
	        // See https://app.asana.com/0/58926111402292/68021340250410
	        try {
	            this.mySock.send(str);
	        }
	        catch (e) {
	            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
	            setTimeout(this.onClosed_.bind(this), 0);
	        }
	    };
	    /**
	     * Number of response before we consider the connection "healthy."
	     * @type {number}
	     */
	    WebSocketConnection.responsesRequiredToBeHealthy = 2;
	    /**
	     * Time to wait for the connection te become healthy before giving up.
	     * @type {number}
	     */
	    WebSocketConnection.healthyTimeout = 30000;
	    return WebSocketConnection;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
	 * lifecycle.
	 *
	 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
	 * they are available.
	 * @constructor
	 */
	var TransportManager = /** @class */ (function () {
	    /**
	     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
	     */
	    function TransportManager(repoInfo) {
	        this.initTransports_(repoInfo);
	    }
	    Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
	        /**
	         * @const
	         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
	         */
	        get: function () {
	            return [BrowserPollConnection, WebSocketConnection];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @param {!RepoInfo} repoInfo
	     * @private
	     */
	    TransportManager.prototype.initTransports_ = function (repoInfo) {
	        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
	        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
	        if (repoInfo.webSocketOnly) {
	            if (!isWebSocketsAvailable)
	                warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
	            isSkipPollConnection = true;
	        }
	        if (isSkipPollConnection) {
	            this.transports_ = [WebSocketConnection];
	        }
	        else {
	            var transports_1 = (this.transports_ = []);
	            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {
	                if (transport && transport['isAvailable']()) {
	                    transports_1.push(transport);
	                }
	            });
	        }
	    };
	    /**
	     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
	     * initial transport to use
	     */
	    TransportManager.prototype.initialTransport = function () {
	        if (this.transports_.length > 0) {
	            return this.transports_[0];
	        }
	        else {
	            throw new Error('No transports available');
	        }
	    };
	    /**
	     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
	     * transport, or null
	     */
	    TransportManager.prototype.upgradeTransport = function () {
	        if (this.transports_.length > 1) {
	            return this.transports_[1];
	        }
	        else {
	            return null;
	        }
	    };
	    return TransportManager;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Abort upgrade attempt if it takes longer than 60s.
	var UPGRADE_TIMEOUT = 60000;
	// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
	// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
	var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
	// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
	// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
	// but we've sent/received enough bytes, we don't cancel the connection.
	var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
	var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
	var MESSAGE_TYPE = 't';
	var MESSAGE_DATA = 'd';
	var CONTROL_SHUTDOWN = 's';
	var CONTROL_RESET = 'r';
	var CONTROL_ERROR = 'e';
	var CONTROL_PONG = 'o';
	var SWITCH_ACK = 'a';
	var END_TRANSMISSION = 'n';
	var PING = 'p';
	var SERVER_HELLO = 'h';
	/**
	 * Creates a new real-time connection to the server using whichever method works
	 * best in the current browser.
	 *
	 * @constructor
	 */
	var Connection = /** @class */ (function () {
	    /**
	     * @param {!string} id - an id for this connection
	     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to
	     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives
	     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.
	     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost
	     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.
	     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
	     */
	    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
	        this.id = id;
	        this.repoInfo_ = repoInfo_;
	        this.onMessage_ = onMessage_;
	        this.onReady_ = onReady_;
	        this.onDisconnect_ = onDisconnect_;
	        this.onKill_ = onKill_;
	        this.lastSessionId = lastSessionId;
	        this.connectionCount = 0;
	        this.pendingDataMessages = [];
	        this.state_ = 0 /* CONNECTING */;
	        this.log_ = logWrapper('c:' + this.id + ':');
	        this.transportManager_ = new TransportManager(repoInfo_);
	        this.log_('Connection created');
	        this.start_();
	    }
	    /**
	     * Starts a connection attempt
	     * @private
	     */
	    Connection.prototype.start_ = function () {
	        var _this = this;
	        var conn = this.transportManager_.initialTransport();
	        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
	        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
	        // can consider the transport healthy.
	        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
	        var onMessageReceived = this.connReceiver_(this.conn_);
	        var onConnectionLost = this.disconnReceiver_(this.conn_);
	        this.tx_ = this.conn_;
	        this.rx_ = this.conn_;
	        this.secondaryConn_ = null;
	        this.isHealthy_ = false;
	        /*
	         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
	         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
	         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
	         * still have the context of your originating frame.
	         */
	        setTimeout(function () {
	            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
	            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
	        }, Math.floor(0));
	        var healthyTimeout_ms = conn['healthyTimeout'] || 0;
	        if (healthyTimeout_ms > 0) {
	            this.healthyTimeout_ = setTimeoutNonBlocking(function () {
	                _this.healthyTimeout_ = null;
	                if (!_this.isHealthy_) {
	                    if (_this.conn_ &&
	                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
	                        _this.log_('Connection exceeded healthy timeout but has received ' +
	                            _this.conn_.bytesReceived +
	                            ' bytes.  Marking connection healthy.');
	                        _this.isHealthy_ = true;
	                        _this.conn_.markConnectionHealthy();
	                    }
	                    else if (_this.conn_ &&
	                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
	                        _this.log_('Connection exceeded healthy timeout but has sent ' +
	                            _this.conn_.bytesSent +
	                            ' bytes.  Leaving connection alive.');
	                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
	                        // the server.
	                    }
	                    else {
	                        _this.log_('Closing unhealthy connection after timeout.');
	                        _this.close();
	                    }
	                }
	            }, Math.floor(healthyTimeout_ms));
	        }
	    };
	    /**
	     * @return {!string}
	     * @private
	     */
	    Connection.prototype.nextTransportId_ = function () {
	        return 'c:' + this.id + ':' + this.connectionCount++;
	    };
	    Connection.prototype.disconnReceiver_ = function (conn) {
	        var _this = this;
	        return function (everConnected) {
	            if (conn === _this.conn_) {
	                _this.onConnectionLost_(everConnected);
	            }
	            else if (conn === _this.secondaryConn_) {
	                _this.log_('Secondary connection lost.');
	                _this.onSecondaryConnectionLost_();
	            }
	            else {
	                _this.log_('closing an old connection');
	            }
	        };
	    };
	    Connection.prototype.connReceiver_ = function (conn) {
	        var _this = this;
	        return function (message) {
	            if (_this.state_ != 2 /* DISCONNECTED */) {
	                if (conn === _this.rx_) {
	                    _this.onPrimaryMessageReceived_(message);
	                }
	                else if (conn === _this.secondaryConn_) {
	                    _this.onSecondaryMessageReceived_(message);
	                }
	                else {
	                    _this.log_('message on old connection');
	                }
	            }
	        };
	    };
	    /**
	     *
	     * @param {Object} dataMsg An arbitrary data message to be sent to the server
	     */
	    Connection.prototype.sendRequest = function (dataMsg) {
	        // wrap in a data message envelope and send it on
	        var msg = { t: 'd', d: dataMsg };
	        this.sendData_(msg);
	    };
	    Connection.prototype.tryCleanupConnection = function () {
	        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
	            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
	            this.conn_ = this.secondaryConn_;
	            this.secondaryConn_ = null;
	            // the server will shutdown the old connection
	        }
	    };
	    Connection.prototype.onSecondaryControl_ = function (controlData) {
	        if (MESSAGE_TYPE in controlData) {
	            var cmd = controlData[MESSAGE_TYPE];
	            if (cmd === SWITCH_ACK) {
	                this.upgradeIfSecondaryHealthy_();
	            }
	            else if (cmd === CONTROL_RESET) {
	                // Most likely the session wasn't valid. Abandon the switch attempt
	                this.log_('Got a reset on secondary, closing it');
	                this.secondaryConn_.close();
	                // If we were already using this connection for something, than we need to fully close
	                if (this.tx_ === this.secondaryConn_ ||
	                    this.rx_ === this.secondaryConn_) {
	                    this.close();
	                }
	            }
	            else if (cmd === CONTROL_PONG) {
	                this.log_('got pong on secondary.');
	                this.secondaryResponsesRequired_--;
	                this.upgradeIfSecondaryHealthy_();
	            }
	        }
	    };
	    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
	        var layer = requireKey('t', parsedData);
	        var data = requireKey('d', parsedData);
	        if (layer == 'c') {
	            this.onSecondaryControl_(data);
	        }
	        else if (layer == 'd') {
	            // got a data message, but we're still second connection. Need to buffer it up
	            this.pendingDataMessages.push(data);
	        }
	        else {
	            throw new Error('Unknown protocol layer: ' + layer);
	        }
	    };
	    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
	        if (this.secondaryResponsesRequired_ <= 0) {
	            this.log_('Secondary connection is healthy.');
	            this.isHealthy_ = true;
	            this.secondaryConn_.markConnectionHealthy();
	            this.proceedWithUpgrade_();
	        }
	        else {
	            // Send a ping to make sure the connection is healthy.
	            this.log_('sending ping on secondary.');
	            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
	        }
	    };
	    Connection.prototype.proceedWithUpgrade_ = function () {
	        // tell this connection to consider itself open
	        this.secondaryConn_.start();
	        // send ack
	        this.log_('sending client ack on secondary');
	        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
	        // send end packet on primary transport, switch to sending on this one
	        // can receive on this one, buffer responses until end received on primary transport
	        this.log_('Ending transmission on primary');
	        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
	        this.tx_ = this.secondaryConn_;
	        this.tryCleanupConnection();
	    };
	    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
	        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
	        var layer = requireKey('t', parsedData);
	        var data = requireKey('d', parsedData);
	        if (layer == 'c') {
	            this.onControl_(data);
	        }
	        else if (layer == 'd') {
	            this.onDataMessage_(data);
	        }
	    };
	    Connection.prototype.onDataMessage_ = function (message) {
	        this.onPrimaryResponse_();
	        // We don't do anything with data messages, just kick them up a level
	        this.onMessage_(message);
	    };
	    Connection.prototype.onPrimaryResponse_ = function () {
	        if (!this.isHealthy_) {
	            this.primaryResponsesRequired_--;
	            if (this.primaryResponsesRequired_ <= 0) {
	                this.log_('Primary connection is healthy.');
	                this.isHealthy_ = true;
	                this.conn_.markConnectionHealthy();
	            }
	        }
	    };
	    Connection.prototype.onControl_ = function (controlData) {
	        var cmd = requireKey(MESSAGE_TYPE, controlData);
	        if (MESSAGE_DATA in controlData) {
	            var payload = controlData[MESSAGE_DATA];
	            if (cmd === SERVER_HELLO) {
	                this.onHandshake_(payload);
	            }
	            else if (cmd === END_TRANSMISSION) {
	                this.log_('recvd end transmission on primary');
	                this.rx_ = this.secondaryConn_;
	                for (var i = 0; i < this.pendingDataMessages.length; ++i) {
	                    this.onDataMessage_(this.pendingDataMessages[i]);
	                }
	                this.pendingDataMessages = [];
	                this.tryCleanupConnection();
	            }
	            else if (cmd === CONTROL_SHUTDOWN) {
	                // This was previously the 'onKill' callback passed to the lower-level connection
	                // payload in this case is the reason for the shutdown. Generally a human-readable error
	                this.onConnectionShutdown_(payload);
	            }
	            else if (cmd === CONTROL_RESET) {
	                // payload in this case is the host we should contact
	                this.onReset_(payload);
	            }
	            else if (cmd === CONTROL_ERROR) {
	                error('Server Error: ' + payload);
	            }
	            else if (cmd === CONTROL_PONG) {
	                this.log_('got pong on primary.');
	                this.onPrimaryResponse_();
	                this.sendPingOnPrimaryIfNecessary_();
	            }
	            else {
	                error('Unknown control packet command: ' + cmd);
	            }
	        }
	    };
	    /**
	     *
	     * @param {Object} handshake The handshake data returned from the server
	     * @private
	     */
	    Connection.prototype.onHandshake_ = function (handshake) {
	        var timestamp = handshake.ts;
	        var version = handshake.v;
	        var host = handshake.h;
	        this.sessionId = handshake.s;
	        this.repoInfo_.updateHost(host);
	        // if we've already closed the connection, then don't bother trying to progress further
	        if (this.state_ == 0 /* CONNECTING */) {
	            this.conn_.start();
	            this.onConnectionEstablished_(this.conn_, timestamp);
	            if (PROTOCOL_VERSION !== version) {
	                warn('Protocol version mismatch detected');
	            }
	            // TODO: do we want to upgrade? when? maybe a delay?
	            this.tryStartUpgrade_();
	        }
	    };
	    Connection.prototype.tryStartUpgrade_ = function () {
	        var conn = this.transportManager_.upgradeTransport();
	        if (conn) {
	            this.startUpgrade_(conn);
	        }
	    };
	    Connection.prototype.startUpgrade_ = function (conn) {
	        var _this = this;
	        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
	        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
	        // can consider the transport healthy.
	        this.secondaryResponsesRequired_ =
	            conn['responsesRequiredToBeHealthy'] || 0;
	        var onMessage = this.connReceiver_(this.secondaryConn_);
	        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
	        this.secondaryConn_.open(onMessage, onDisconnect);
	        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
	        setTimeoutNonBlocking(function () {
	            if (_this.secondaryConn_) {
	                _this.log_('Timed out trying to upgrade.');
	                _this.secondaryConn_.close();
	            }
	        }, Math.floor(UPGRADE_TIMEOUT));
	    };
	    Connection.prototype.onReset_ = function (host) {
	        this.log_('Reset packet received.  New host: ' + host);
	        this.repoInfo_.updateHost(host);
	        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
	        // We don't currently support resets after the connection has already been established
	        if (this.state_ === 1 /* CONNECTED */) {
	            this.close();
	        }
	        else {
	            // Close whatever connections we have open and start again.
	            this.closeConnections_();
	            this.start_();
	        }
	    };
	    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
	        var _this = this;
	        this.log_('Realtime connection established.');
	        this.conn_ = conn;
	        this.state_ = 1 /* CONNECTED */;
	        if (this.onReady_) {
	            this.onReady_(timestamp, this.sessionId);
	            this.onReady_ = null;
	        }
	        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
	        // send some pings.
	        if (this.primaryResponsesRequired_ === 0) {
	            this.log_('Primary connection is healthy.');
	            this.isHealthy_ = true;
	        }
	        else {
	            setTimeoutNonBlocking(function () {
	                _this.sendPingOnPrimaryIfNecessary_();
	            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
	        }
	    };
	    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
	        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
	        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
	            this.log_('sending ping on primary.');
	            this.sendData_({ t: 'c', d: { t: PING, d: {} } });
	        }
	    };
	    Connection.prototype.onSecondaryConnectionLost_ = function () {
	        var conn = this.secondaryConn_;
	        this.secondaryConn_ = null;
	        if (this.tx_ === conn || this.rx_ === conn) {
	            // we are relying on this connection already in some capacity. Therefore, a failure is real
	            this.close();
	        }
	    };
	    /**
	     *
	     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
	     * we should flush the host cache
	     * @private
	     */
	    Connection.prototype.onConnectionLost_ = function (everConnected) {
	        this.conn_ = null;
	        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
	        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
	        if (!everConnected && this.state_ === 0 /* CONNECTING */) {
	            this.log_('Realtime connection failed.');
	            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
	            if (this.repoInfo_.isCacheableHost()) {
	                PersistentStorage.remove('host:' + this.repoInfo_.host);
	                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
	                this.repoInfo_.internalHost = this.repoInfo_.host;
	            }
	        }
	        else if (this.state_ === 1 /* CONNECTED */) {
	            this.log_('Realtime connection lost.');
	        }
	        this.close();
	    };
	    /**
	     *
	     * @param {string} reason
	     * @private
	     */
	    Connection.prototype.onConnectionShutdown_ = function (reason) {
	        this.log_('Connection shutdown command received. Shutting down...');
	        if (this.onKill_) {
	            this.onKill_(reason);
	            this.onKill_ = null;
	        }
	        // We intentionally don't want to fire onDisconnect (kill is a different case),
	        // so clear the callback.
	        this.onDisconnect_ = null;
	        this.close();
	    };
	    Connection.prototype.sendData_ = function (data) {
	        if (this.state_ !== 1 /* CONNECTED */) {
	            throw 'Connection is not connected';
	        }
	        else {
	            this.tx_.send(data);
	        }
	    };
	    /**
	     * Cleans up this connection, calling the appropriate callbacks
	     */
	    Connection.prototype.close = function () {
	        if (this.state_ !== 2 /* DISCONNECTED */) {
	            this.log_('Closing realtime connection.');
	            this.state_ = 2 /* DISCONNECTED */;
	            this.closeConnections_();
	            if (this.onDisconnect_) {
	                this.onDisconnect_();
	                this.onDisconnect_ = null;
	            }
	        }
	    };
	    /**
	     *
	     * @private
	     */
	    Connection.prototype.closeConnections_ = function () {
	        this.log_('Shutting down all connections');
	        if (this.conn_) {
	            this.conn_.close();
	            this.conn_ = null;
	        }
	        if (this.secondaryConn_) {
	            this.secondaryConn_.close();
	            this.secondaryConn_ = null;
	        }
	        if (this.healthyTimeout_) {
	            clearTimeout(this.healthyTimeout_);
	            this.healthyTimeout_ = null;
	        }
	    };
	    return Connection;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Interface defining the set of actions that can be performed against the Firebase server
	 * (basically corresponds to our wire protocol).
	 *
	 * @interface
	 */
	var ServerActions = /** @class */ (function () {
	    function ServerActions() {
	    }
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     * @param {string=} hash
	     */
	    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, ?string)} onComplete
	     * @param {string=} hash
	     */
	    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
	    /**
	     * Refreshes the auth token for the current connection.
	     * @param {string} token The authentication token
	     */
	    ServerActions.prototype.refreshAuthToken = function (token) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
	    /**
	     * @param {string} pathString
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
	    /**
	     * @param {Object.<string, *>} stats
	     */
	    ServerActions.prototype.reportStats = function (stats) { };
	    return ServerActions;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var RECONNECT_MIN_DELAY = 1000;
	var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
	var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
	var RECONNECT_DELAY_MULTIPLIER = 1.3;
	var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
	var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
	// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
	var INVALID_AUTH_TOKEN_THRESHOLD = 3;
	/**
	 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
	 *
	 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
	 * in quotes to make sure the closure compiler does not minify them.
	 */
	var PersistentConnection = /** @class */ (function (_super) {
	    tslib_1.__extends(PersistentConnection, _super);
	    /**
	     * @implements {ServerActions}
	     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
	     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
	     * @param onConnectStatus_
	     * @param onServerInfoUpdate_
	     * @param authTokenProvider_
	     * @param authOverride_
	     */
	    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
	        var _this = _super.call(this) || this;
	        _this.repoInfo_ = repoInfo_;
	        _this.onDataUpdate_ = onDataUpdate_;
	        _this.onConnectStatus_ = onConnectStatus_;
	        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
	        _this.authTokenProvider_ = authTokenProvider_;
	        _this.authOverride_ = authOverride_;
	        // Used for diagnostic logging.
	        _this.id = PersistentConnection.nextPersistentConnectionId_++;
	        _this.log_ = logWrapper('p:' + _this.id + ':');
	        /** @private {Object} */
	        _this.interruptReasons_ = {};
	        _this.listens_ = {};
	        _this.outstandingPuts_ = [];
	        _this.outstandingPutCount_ = 0;
	        _this.onDisconnectRequestQueue_ = [];
	        _this.connected_ = false;
	        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
	        _this.securityDebugCallback_ = null;
	        _this.lastSessionId = null;
	        /** @private {number|null} */
	        _this.establishConnectionTimer_ = null;
	        /** @private {boolean} */
	        _this.visible_ = false;
	        // Before we get connected, we keep a queue of pending messages to send.
	        _this.requestCBHash_ = {};
	        _this.requestNumber_ = 0;
	        /** @private {?{
	         *   sendRequest(Object),
	         *   close()
	         * }} */
	        _this.realtime_ = null;
	        /** @private {string|null} */
	        _this.authToken_ = null;
	        _this.forceTokenRefresh_ = false;
	        _this.invalidAuthTokenCount_ = 0;
	        _this.firstConnection_ = true;
	        _this.lastConnectionAttemptTime_ = null;
	        _this.lastConnectionEstablishedTime_ = null;
	        if (authOverride_ && !util.isNodeSdk()) {
	            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
	        }
	        _this.scheduleConnect_(0);
	        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
	        if (repoInfo_.host.indexOf('fblocal') === -1) {
	            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
	        }
	        return _this;
	    }
	    /**
	     * @param {!string} action
	     * @param {*} body
	     * @param {function(*)=} onResponse
	     * @protected
	     */
	    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
	        var curReqNum = ++this.requestNumber_;
	        var msg = { r: curReqNum, a: action, b: body };
	        this.log_(util.stringify(msg));
	        util.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
	        this.realtime_.sendRequest(msg);
	        if (onResponse) {
	            this.requestCBHash_[curReqNum] = onResponse;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
	        var queryId = query.queryIdentifier();
	        var pathString = query.path.toString();
	        this.log_('Listen called for ' + pathString + ' ' + queryId);
	        this.listens_[pathString] = this.listens_[pathString] || {};
	        util.assert(query.getQueryParams().isDefault() ||
	            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
	        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');
	        var listenSpec = {
	            onComplete: onComplete,
	            hashFn: currentHashFn,
	            query: query,
	            tag: tag
	        };
	        this.listens_[pathString][queryId] = listenSpec;
	        if (this.connected_) {
	            this.sendListen_(listenSpec);
	        }
	    };
	    /**
	     * @param {!{onComplete(),
	     *           hashFn():!string,
	     *           query: !Query,
	     *           tag: ?number}} listenSpec
	     * @private
	     */
	    PersistentConnection.prototype.sendListen_ = function (listenSpec) {
	        var _this = this;
	        var query = listenSpec.query;
	        var pathString = query.path.toString();
	        var queryId = query.queryIdentifier();
	        this.log_('Listen on ' + pathString + ' for ' + queryId);
	        var req = { /*path*/ p: pathString };
	        var action = 'q';
	        // Only bother to send query if it's non-default.
	        if (listenSpec.tag) {
	            req['q'] = query.queryObject();
	            req['t'] = listenSpec.tag;
	        }
	        req[ /*hash*/'h'] = listenSpec.hashFn();
	        this.sendRequest(action, req, function (message) {
	            var payload = message[ /*data*/'d'];
	            var status = message[ /*status*/'s'];
	            // print warnings in any case...
	            PersistentConnection.warnOnListenWarnings_(payload, query);
	            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];
	            // only trigger actions if the listen hasn't been removed and readded
	            if (currentListenSpec === listenSpec) {
	                _this.log_('listen response', message);
	                if (status !== 'ok') {
	                    _this.removeListen_(pathString, queryId);
	                }
	                if (listenSpec.onComplete) {
	                    listenSpec.onComplete(status, payload);
	                }
	            }
	        });
	    };
	    /**
	     * @param {*} payload
	     * @param {!Query} query
	     * @private
	     */
	    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
	        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {
	            var warnings = util.safeGet(payload, 'w');
	            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
	                var indexSpec = '".indexOn": "' +
	                    query
	                        .getQueryParams()
	                        .getIndex()
	                        .toString() +
	                    '"';
	                var indexPath = query.path.toString();
	                warn("Using an unspecified index. Your data will be downloaded and " +
	                    ("filtered on the client. Consider adding " + indexSpec + " at ") +
	                    (indexPath + " to your security rules for better performance."));
	            }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.refreshAuthToken = function (token) {
	        this.authToken_ = token;
	        this.log_('Auth token refreshed');
	        if (this.authToken_) {
	            this.tryAuth();
	        }
	        else {
	            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
	            //the credential so we dont become authenticated next time we connect.
	            if (this.connected_) {
	                this.sendRequest('unauth', {}, function () { });
	            }
	        }
	        this.reduceReconnectDelayIfAdminCredential_(token);
	    };
	    /**
	     * @param {!string} credential
	     * @private
	     */
	    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
	        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
	        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
	        var isFirebaseSecret = credential && credential.length === 40;
	        if (isFirebaseSecret || util.isAdmin(credential)) {
	            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
	            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
	        }
	    };
	    /**
	     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
	     * a auth revoked (the connection is closed).
	     */
	    PersistentConnection.prototype.tryAuth = function () {
	        var _this = this;
	        if (this.connected_ && this.authToken_) {
	            var token_1 = this.authToken_;
	            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';
	            var requestData = { cred: token_1 };
	            if (this.authOverride_ === null) {
	                requestData['noauth'] = true;
	            }
	            else if (typeof this.authOverride_ === 'object') {
	                requestData['authvar'] = this.authOverride_;
	            }
	            this.sendRequest(authMethod, requestData, function (res) {
	                var status = res[ /*status*/'s'];
	                var data = res[ /*data*/'d'] || 'error';
	                if (_this.authToken_ === token_1) {
	                    if (status === 'ok') {
	                        _this.invalidAuthTokenCount_ = 0;
	                    }
	                    else {
	                        // Triggers reconnect and force refresh for auth token
	                        _this.onAuthRevoked_(status, data);
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.unlisten = function (query, tag) {
	        var pathString = query.path.toString();
	        var queryId = query.queryIdentifier();
	        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
	        util.assert(query.getQueryParams().isDefault() ||
	            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
	        var listen = this.removeListen_(pathString, queryId);
	        if (listen && this.connected_) {
	            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
	        }
	    };
	    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
	        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
	        var req = { /*path*/ p: pathString };
	        var action = 'n';
	        // Only bother sending queryId if it's non-default.
	        if (tag) {
	            req['q'] = queryObj;
	            req['t'] = tag;
	        }
	        this.sendRequest(action, req);
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('o', pathString, data, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'o',
	                data: data,
	                onComplete: onComplete
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('om', pathString, data, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'om',
	                data: data,
	                onComplete: onComplete
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('oc', pathString, null, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'oc',
	                data: null,
	                onComplete: onComplete
	            });
	        }
	    };
	    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
	        var request = { /*path*/ p: pathString, /*data*/ d: data };
	        this.log_('onDisconnect ' + action, request);
	        this.sendRequest(action, request, function (response) {
	            if (onComplete) {
	                setTimeout(function () {
	                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);
	                }, Math.floor(0));
	            }
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
	        this.putInternal('p', pathString, data, onComplete, hash);
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
	        this.putInternal('m', pathString, data, onComplete, hash);
	    };
	    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
	        var request = {
	            /*path*/ p: pathString,
	            /*data*/ d: data
	        };
	        if (hash !== undefined)
	            request[ /*hash*/'h'] = hash;
	        // TODO: Only keep track of the most recent put for a given path?
	        this.outstandingPuts_.push({
	            action: action,
	            request: request,
	            onComplete: onComplete
	        });
	        this.outstandingPutCount_++;
	        var index = this.outstandingPuts_.length - 1;
	        if (this.connected_) {
	            this.sendPut_(index);
	        }
	        else {
	            this.log_('Buffering put: ' + pathString);
	        }
	    };
	    PersistentConnection.prototype.sendPut_ = function (index) {
	        var _this = this;
	        var action = this.outstandingPuts_[index].action;
	        var request = this.outstandingPuts_[index].request;
	        var onComplete = this.outstandingPuts_[index].onComplete;
	        this.outstandingPuts_[index].queued = this.connected_;
	        this.sendRequest(action, request, function (message) {
	            _this.log_(action + ' response', message);
	            delete _this.outstandingPuts_[index];
	            _this.outstandingPutCount_--;
	            // Clean up array occasionally.
	            if (_this.outstandingPutCount_ === 0) {
	                _this.outstandingPuts_ = [];
	            }
	            if (onComplete)
	                onComplete(message[ /*status*/'s'], message[ /* data */'d']);
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.reportStats = function (stats) {
	        var _this = this;
	        // If we're not connected, we just drop the stats.
	        if (this.connected_) {
	            var request = { /*counters*/ c: stats };
	            this.log_('reportStats', request);
	            this.sendRequest(/*stats*/ 's', request, function (result) {
	                var status = result[ /*status*/'s'];
	                if (status !== 'ok') {
	                    var errorReason = result[ /* data */'d'];
	                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);
	                }
	            });
	        }
	    };
	    /**
	     * @param {*} message
	     * @private
	     */
	    PersistentConnection.prototype.onDataMessage_ = function (message) {
	        if ('r' in message) {
	            // this is a response
	            this.log_('from server: ' + util.stringify(message));
	            var reqNum = message['r'];
	            var onResponse = this.requestCBHash_[reqNum];
	            if (onResponse) {
	                delete this.requestCBHash_[reqNum];
	                onResponse(message[ /*body*/'b']);
	            }
	        }
	        else if ('error' in message) {
	            throw 'A server-side error has occurred: ' + message['error'];
	        }
	        else if ('a' in message) {
	            // a and b are action and body, respectively
	            this.onDataPush_(message['a'], message['b']);
	        }
	    };
	    PersistentConnection.prototype.onDataPush_ = function (action, body) {
	        this.log_('handleServerMessage', action, body);
	        if (action === 'd')
	            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
	            /*isMerge*/ false, body['t']);
	        else if (action === 'm')
	            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
	            /*isMerge=*/ true, body['t']);
	        else if (action === 'c')
	            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
	        else if (action === 'ac')
	            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
	        else if (action === 'sd')
	            this.onSecurityDebugPacket_(body);
	        else
	            error('Unrecognized action received from server: ' +
	                util.stringify(action) +
	                '\nAre you using the latest client?');
	    };
	    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
	        this.log_('connection ready');
	        this.connected_ = true;
	        this.lastConnectionEstablishedTime_ = new Date().getTime();
	        this.handleTimestamp_(timestamp);
	        this.lastSessionId = sessionId;
	        if (this.firstConnection_) {
	            this.sendConnectStats_();
	        }
	        this.restoreState_();
	        this.firstConnection_ = false;
	        this.onConnectStatus_(true);
	    };
	    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
	        var _this = this;
	        util.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
	        if (this.establishConnectionTimer_) {
	            clearTimeout(this.establishConnectionTimer_);
	        }
	        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
	        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
	        this.establishConnectionTimer_ = setTimeout(function () {
	            _this.establishConnectionTimer_ = null;
	            _this.establishConnection_();
	        }, Math.floor(timeout));
	    };
	    /**
	     * @param {boolean} visible
	     * @private
	     */
	    PersistentConnection.prototype.onVisible_ = function (visible) {
	        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
	        if (visible &&
	            !this.visible_ &&
	            this.reconnectDelay_ === this.maxReconnectDelay_) {
	            this.log_('Window became visible.  Reducing delay.');
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	        this.visible_ = visible;
	    };
	    PersistentConnection.prototype.onOnline_ = function (online) {
	        if (online) {
	            this.log_('Browser went online.');
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	        else {
	            this.log_('Browser went offline.  Killing connection.');
	            if (this.realtime_) {
	                this.realtime_.close();
	            }
	        }
	    };
	    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
	        this.log_('data client disconnected');
	        this.connected_ = false;
	        this.realtime_ = null;
	        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
	        this.cancelSentTransactions_();
	        // Clear out the pending requests.
	        this.requestCBHash_ = {};
	        if (this.shouldReconnect_()) {
	            if (!this.visible_) {
	                this.log_("Window isn't visible.  Delaying reconnect.");
	                this.reconnectDelay_ = this.maxReconnectDelay_;
	                this.lastConnectionAttemptTime_ = new Date().getTime();
	            }
	            else if (this.lastConnectionEstablishedTime_) {
	                // If we've been connected long enough, reset reconnect delay to minimum.
	                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
	                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)
	                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	                this.lastConnectionEstablishedTime_ = null;
	            }
	            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
	            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
	            reconnectDelay = Math.random() * reconnectDelay;
	            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
	            this.scheduleConnect_(reconnectDelay);
	            // Adjust reconnect delay for next time.
	            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
	        }
	        this.onConnectStatus_(false);
	    };
	    PersistentConnection.prototype.establishConnection_ = function () {
	        if (this.shouldReconnect_()) {
	            this.log_('Making a connection attempt');
	            this.lastConnectionAttemptTime_ = new Date().getTime();
	            this.lastConnectionEstablishedTime_ = null;
	            var onDataMessage_1 = this.onDataMessage_.bind(this);
	            var onReady_1 = this.onReady_.bind(this);
	            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
	            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
	            var self_1 = this;
	            var lastSessionId_1 = this.lastSessionId;
	            var canceled_1 = false;
	            var connection_1 = null;
	            var closeFn_1 = function () {
	                if (connection_1) {
	                    connection_1.close();
	                }
	                else {
	                    canceled_1 = true;
	                    onDisconnect_1();
	                }
	            };
	            var sendRequestFn = function (msg) {
	                util.assert(connection_1, "sendRequest call when we're not connected not allowed.");
	                connection_1.sendRequest(msg);
	            };
	            this.realtime_ = {
	                close: closeFn_1,
	                sendRequest: sendRequestFn
	            };
	            var forceRefresh = this.forceTokenRefresh_;
	            this.forceTokenRefresh_ = false;
	            // First fetch auth token, and establish connection after fetching the token was successful
	            this.authTokenProvider_
	                .getToken(forceRefresh)
	                .then(function (result) {
	                if (!canceled_1) {
	                    log('getToken() completed. Creating connection.');
	                    self_1.authToken_ = result && result.accessToken;
	                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, 
	                    /* onKill= */ function (reason) {
	                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
	                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
	                    }, lastSessionId_1);
	                }
	                else {
	                    log('getToken() completed but was canceled');
	                }
	            })
	                .then(null, function (error$$1) {
	                self_1.log_('Failed to get token: ' + error$$1);
	                if (!canceled_1) {
	                    if (util.CONSTANTS.NODE_ADMIN) {
	                        // This may be a critical error for the Admin Node.js SDK, so log a warning.
	                        // But getToken() may also just have temporarily failed, so we still want to
	                        // continue retrying.
	                        warn(error$$1);
	                    }
	                    closeFn_1();
	                }
	            });
	        }
	    };
	    /**
	     * @param {string} reason
	     */
	    PersistentConnection.prototype.interrupt = function (reason) {
	        log('Interrupting connection for reason: ' + reason);
	        this.interruptReasons_[reason] = true;
	        if (this.realtime_) {
	            this.realtime_.close();
	        }
	        else {
	            if (this.establishConnectionTimer_) {
	                clearTimeout(this.establishConnectionTimer_);
	                this.establishConnectionTimer_ = null;
	            }
	            if (this.connected_) {
	                this.onRealtimeDisconnect_();
	            }
	        }
	    };
	    /**
	     * @param {string} reason
	     */
	    PersistentConnection.prototype.resume = function (reason) {
	        log('Resuming connection for reason: ' + reason);
	        delete this.interruptReasons_[reason];
	        if (util.isEmpty(this.interruptReasons_)) {
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	    };
	    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
	        var delta = timestamp - new Date().getTime();
	        this.onServerInfoUpdate_({ serverTimeOffset: delta });
	    };
	    PersistentConnection.prototype.cancelSentTransactions_ = function () {
	        for (var i = 0; i < this.outstandingPuts_.length; i++) {
	            var put = this.outstandingPuts_[i];
	            if (put && /*hash*/ 'h' in put.request && put.queued) {
	                if (put.onComplete)
	                    put.onComplete('disconnect');
	                delete this.outstandingPuts_[i];
	                this.outstandingPutCount_--;
	            }
	        }
	        // Clean up array occasionally.
	        if (this.outstandingPutCount_ === 0)
	            this.outstandingPuts_ = [];
	    };
	    /**
	     * @param {!string} pathString
	     * @param {Array.<*>=} query
	     * @private
	     */
	    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
	        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
	        var queryId;
	        if (!query) {
	            queryId = 'default';
	        }
	        else {
	            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
	        }
	        var listen = this.removeListen_(pathString, queryId);
	        if (listen && listen.onComplete)
	            listen.onComplete('permission_denied');
	    };
	    /**
	     * @param {!string} pathString
	     * @param {!string} queryId
	     * @return {{queries:Array.<Query>, onComplete:function(string)}}
	     * @private
	     */
	    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
	        var normalizedPathString = new Path(pathString).toString(); // normalize path.
	        var listen;
	        if (this.listens_[normalizedPathString] !== undefined) {
	            listen = this.listens_[normalizedPathString][queryId];
	            delete this.listens_[normalizedPathString][queryId];
	            if (util.getCount(this.listens_[normalizedPathString]) === 0) {
	                delete this.listens_[normalizedPathString];
	            }
	        }
	        else {
	            // all listens for this path has already been removed
	            listen = undefined;
	        }
	        return listen;
	    };
	    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
	        log('Auth token revoked: ' + statusCode + '/' + explanation);
	        this.authToken_ = null;
	        this.forceTokenRefresh_ = true;
	        this.realtime_.close();
	        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
	            // We'll wait a couple times before logging the warning / increasing the
	            // retry period since oauth tokens will report as "invalid" if they're
	            // just expired. Plus there may be transient issues that resolve themselves.
	            this.invalidAuthTokenCount_++;
	            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
	                // Set a long reconnect delay because recovery is unlikely
	                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
	                // Notify the auth token provider that the token is invalid, which will log
	                // a warning
	                this.authTokenProvider_.notifyForInvalidToken();
	            }
	        }
	    };
	    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
	        if (this.securityDebugCallback_) {
	            this.securityDebugCallback_(body);
	        }
	        else {
	            if ('msg' in body) {
	                console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
	            }
	        }
	    };
	    PersistentConnection.prototype.restoreState_ = function () {
	        var _this = this;
	        //Re-authenticate ourselves if we have a credential stored.
	        this.tryAuth();
	        // Puts depend on having received the corresponding data update from the server before they complete, so we must
	        // make sure to send listens before puts.
	        util.forEach(this.listens_, function (pathString, queries) {
	            util.forEach(queries, function (key, listenSpec) {
	                _this.sendListen_(listenSpec);
	            });
	        });
	        for (var i = 0; i < this.outstandingPuts_.length; i++) {
	            if (this.outstandingPuts_[i])
	                this.sendPut_(i);
	        }
	        while (this.onDisconnectRequestQueue_.length) {
	            var request = this.onDisconnectRequestQueue_.shift();
	            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
	        }
	    };
	    /**
	     * Sends client stats for first connection
	     * @private
	     */
	    PersistentConnection.prototype.sendConnectStats_ = function () {
	        var stats = {};
	        var clientName = 'js';
	        if (util.CONSTANTS.NODE_ADMIN) {
	            clientName = 'admin_node';
	        }
	        else if (util.CONSTANTS.NODE_CLIENT) {
	            clientName = 'node';
	        }
	        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\./g, '-')] = 1;
	        if (util.isMobileCordova()) {
	            stats['framework.cordova'] = 1;
	        }
	        else if (util.isReactNative()) {
	            stats['framework.reactnative'] = 1;
	        }
	        this.reportStats(stats);
	    };
	    /**
	     * @return {boolean}
	     * @private
	     */
	    PersistentConnection.prototype.shouldReconnect_ = function () {
	        var online = OnlineMonitor.getInstance().currentlyOnline();
	        return util.isEmpty(this.interruptReasons_) && online;
	    };
	    /**
	     * @private
	     */
	    PersistentConnection.nextPersistentConnectionId_ = 0;
	    /**
	     * Counter for number of connections created. Mainly used for tagging in the logs
	     * @type {number}
	     * @private
	     */
	    PersistentConnection.nextConnectionId_ = 0;
	    return PersistentConnection;
	}(ServerActions));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An implementation of ServerActions that communicates with the server via REST requests.
	 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
	 * persistent connection (using WebSockets or long-polling)
	 */
	var ReadonlyRestClient = /** @class */ (function (_super) {
	    tslib_1.__extends(ReadonlyRestClient, _super);
	    /**
	     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
	     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
	     * @param {AuthTokenProvider} authTokenProvider_
	     * @implements {ServerActions}
	     */
	    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
	        var _this = _super.call(this) || this;
	        _this.repoInfo_ = repoInfo_;
	        _this.onDataUpdate_ = onDataUpdate_;
	        _this.authTokenProvider_ = authTokenProvider_;
	        /** @private {function(...[*])} */
	        _this.log_ = logWrapper('p:rest:');
	        /**
	         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
	         * that's been removed. :-/
	         *
	         * @private {!Object.<string, !Object>}
	         */
	        _this.listens_ = {};
	        return _this;
	    }
	    ReadonlyRestClient.prototype.reportStats = function (stats) {
	        throw new Error('Method not implemented.');
	    };
	    /**
	     * @param {!Query} query
	     * @param {?number=} tag
	     * @return {string}
	     * @private
	     */
	    ReadonlyRestClient.getListenId_ = function (query, tag) {
	        if (tag !== undefined) {
	            return 'tag$' + tag;
	        }
	        else {
	            util.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
	            return query.path.toString();
	        }
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
	        var _this = this;
	        var pathString = query.path.toString();
	        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
	        // Mark this listener so we can tell if it's removed.
	        var listenId = ReadonlyRestClient.getListenId_(query, tag);
	        var thisListen = {};
	        this.listens_[listenId] = thisListen;
	        var queryStringParamaters = query
	            .getQueryParams()
	            .toRestQueryStringParameters();
	        this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {
	            var data = result;
	            if (error$$1 === 404) {
	                data = null;
	                error$$1 = null;
	            }
	            if (error$$1 === null) {
	                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
	            }
	            if (util.safeGet(_this.listens_, listenId) === thisListen) {
	                var status_1;
	                if (!error$$1) {
	                    status_1 = 'ok';
	                }
	                else if (error$$1 == 401) {
	                    status_1 = 'permission_denied';
	                }
	                else {
	                    status_1 = 'rest_error:' + error$$1;
	                }
	                onComplete(status_1, null);
	            }
	        });
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.unlisten = function (query, tag) {
	        var listenId = ReadonlyRestClient.getListenId_(query, tag);
	        delete this.listens_[listenId];
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
	        // no-op since we just always call getToken.
	    };
	    /**
	     * Performs a REST request to the given path, with the provided query string parameters,
	     * and any auth credentials we have.
	     *
	     * @param {!string} pathString
	     * @param {!Object.<string, *>} queryStringParameters
	     * @param {?function(?number, *=)} callback
	     * @private
	     */
	    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
	        var _this = this;
	        if (queryStringParameters === void 0) { queryStringParameters = {}; }
	        queryStringParameters['format'] = 'export';
	        this.authTokenProvider_
	            .getToken(/*forceRefresh=*/ false)
	            .then(function (authTokenData) {
	            var authToken = authTokenData && authTokenData.accessToken;
	            if (authToken) {
	                queryStringParameters['auth'] = authToken;
	            }
	            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
	                _this.repoInfo_.host +
	                pathString +
	                '?' +
	                util.querystring(queryStringParameters);
	            _this.log_('Sending REST request for ' + url);
	            var xhr = new XMLHttpRequest();
	            xhr.onreadystatechange = function () {
	                if (callback && xhr.readyState === 4) {
	                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
	                    var res = null;
	                    if (xhr.status >= 200 && xhr.status < 300) {
	                        try {
	                            res = util.jsonEval(xhr.responseText);
	                        }
	                        catch (e) {
	                            warn('Failed to parse JSON response for ' +
	                                url +
	                                ': ' +
	                                xhr.responseText);
	                        }
	                        callback(null, res);
	                    }
	                    else {
	                        // 401 and 404 are expected.
	                        if (xhr.status !== 401 && xhr.status !== 404) {
	                            warn('Got unsuccessful REST response for ' +
	                                url +
	                                ' Status: ' +
	                                xhr.status);
	                        }
	                        callback(xhr.status);
	                    }
	                    callback = null;
	                }
	            };
	            xhr.open('GET', url, /*asynchronous=*/ true);
	            xhr.send();
	        });
	    };
	    return ReadonlyRestClient;
	}(ServerActions));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var INTERRUPT_REASON = 'repo_interrupt';
	/**
	 * A connection to a single data repository.
	 */
	var Repo = /** @class */ (function () {
	    /**
	     * @param {!RepoInfo} repoInfo_
	     * @param {boolean} forceRestClient
	     * @param {!FirebaseApp} app
	     */
	    function Repo(repoInfo_, forceRestClient, app) {
	        var _this = this;
	        this.repoInfo_ = repoInfo_;
	        this.app = app;
	        this.dataUpdateCount = 0;
	        this.statsListener_ = null;
	        this.eventQueue_ = new EventQueue();
	        this.nextWriteId_ = 1;
	        this.interceptServerDataCallback_ = null;
	        // A list of data pieces and paths to be set when this client disconnects.
	        this.onDisconnect_ = new SparseSnapshotTree();
	        /**
	         * TODO: This should be @private but it's used by test_access.js and internal.js
	         * @type {?PersistentConnection}
	         */
	        this.persistentConnection_ = null;
	        /** @type {!AuthTokenProvider} */
	        var authTokenProvider = new AuthTokenProvider(app);
	        this.stats_ = StatsManager.getCollection(repoInfo_);
	        if (forceRestClient || beingCrawled()) {
	            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
	            // Minor hack: Fire onConnect immediately, since there's no actual connection.
	            setTimeout(this.onConnectStatus_.bind(this, true), 0);
	        }
	        else {
	            var authOverride = app.options['databaseAuthVariableOverride'];
	            // Validate authOverride
	            if (typeof authOverride !== 'undefined' && authOverride !== null) {
	                if (typeof authOverride !== 'object') {
	                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
	                }
	                try {
	                    util.stringify(authOverride);
	                }
	                catch (e) {
	                    throw new Error('Invalid authOverride provided: ' + e);
	                }
	            }
	            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
	            this.server_ = this.persistentConnection_;
	        }
	        authTokenProvider.addTokenChangeListener(function (token) {
	            _this.server_.refreshAuthToken(token);
	        });
	        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
	        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
	        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });
	        this.transactions_init_();
	        // Used for .info.
	        this.infoData_ = new SnapshotHolder();
	        this.infoSyncTree_ = new SyncTree({
	            startListening: function (query, tag, currentHashFn, onComplete) {
	                var infoEvents = [];
	                var node = _this.infoData_.getNode(query.path);
	                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
	                // on initial data...
	                if (!node.isEmpty()) {
	                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
	                    setTimeout(function () {
	                        onComplete('ok');
	                    }, 0);
	                }
	                return infoEvents;
	            },
	            stopListening: function () { }
	        });
	        this.updateInfo_('connected', false);
	        this.serverSyncTree_ = new SyncTree({
	            startListening: function (query, tag, currentHashFn, onComplete) {
	                _this.server_.listen(query, currentHashFn, tag, function (status, data) {
	                    var events = onComplete(status, data);
	                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
	                });
	                // No synchronous events for network-backed sync trees
	                return [];
	            },
	            stopListening: function (query, tag) {
	                _this.server_.unlisten(query, tag);
	            }
	        });
	    }
	    /**
	     * @return {string}  The URL corresponding to the root of this Firebase.
	     */
	    Repo.prototype.toString = function () {
	        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
	    };
	    /**
	     * @return {!string} The namespace represented by the repo.
	     */
	    Repo.prototype.name = function () {
	        return this.repoInfo_.namespace;
	    };
	    /**
	     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.
	     */
	    Repo.prototype.serverTime = function () {
	        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
	        var offset = offsetNode.val() || 0;
	        return new Date().getTime() + offset;
	    };
	    /**
	     * Generate ServerValues using some variables from the repo object.
	     * @return {!Object}
	     */
	    Repo.prototype.generateServerValues = function () {
	        return generateWithValues({
	            timestamp: this.serverTime()
	        });
	    };
	    /**
	     * Called by realtime when we get new messages from the server.
	     *
	     * @private
	     * @param {string} pathString
	     * @param {*} data
	     * @param {boolean} isMerge
	     * @param {?number} tag
	     */
	    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
	        // For testing.
	        this.dataUpdateCount++;
	        var path = new Path(pathString);
	        data = this.interceptServerDataCallback_
	            ? this.interceptServerDataCallback_(pathString, data)
	            : data;
	        var events = [];
	        if (tag) {
	            if (isMerge) {
	                var taggedChildren = util.map(data, function (raw) {
	                    return nodeFromJSON$1(raw);
	                });
	                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
	            }
	            else {
	                var taggedSnap = nodeFromJSON$1(data);
	                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
	            }
	        }
	        else if (isMerge) {
	            var changedChildren = util.map(data, function (raw) {
	                return nodeFromJSON$1(raw);
	            });
	            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
	        }
	        else {
	            var snap = nodeFromJSON$1(data);
	            events = this.serverSyncTree_.applyServerOverwrite(path, snap);
	        }
	        var affectedPath = path;
	        if (events.length > 0) {
	            // Since we have a listener outstanding for each transaction, receiving any events
	            // is a proxy for some change having occurred.
	            affectedPath = this.rerunTransactions_(path);
	        }
	        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
	    };
	    /**
	     * TODO: This should be @private but it's used by test_access.js and internal.js
	     * @param {?function(!string, *):*} callback
	     * @private
	     */
	    Repo.prototype.interceptServerData_ = function (callback) {
	        this.interceptServerDataCallback_ = callback;
	    };
	    /**
	     * @param {!boolean} connectStatus
	     * @private
	     */
	    Repo.prototype.onConnectStatus_ = function (connectStatus) {
	        this.updateInfo_('connected', connectStatus);
	        if (connectStatus === false) {
	            this.runOnDisconnectEvents_();
	        }
	    };
	    /**
	     * @param {!Object} updates
	     * @private
	     */
	    Repo.prototype.onServerInfoUpdate_ = function (updates) {
	        var _this = this;
	        each(updates, function (value, key) {
	            _this.updateInfo_(key, value);
	        });
	    };
	    /**
	     *
	     * @param {!string} pathString
	     * @param {*} value
	     * @private
	     */
	    Repo.prototype.updateInfo_ = function (pathString, value) {
	        var path = new Path('/.info/' + pathString);
	        var newNode = nodeFromJSON$1(value);
	        this.infoData_.updateSnapshot(path, newNode);
	        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	    };
	    /**
	     * @return {!number}
	     * @private
	     */
	    Repo.prototype.getNextWriteId_ = function () {
	        return this.nextWriteId_++;
	    };
	    /**
	     * @param {!Path} path
	     * @param {*} newVal
	     * @param {number|string|null} newPriority
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
	        var _this = this;
	        this.log_('set', {
	            path: path.toString(),
	            value: newVal,
	            priority: newPriority
	        });
	        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
	        // (b) store unresolved paths on JSON parse
	        var serverValues = this.generateServerValues();
	        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
	        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
	        var writeId = this.getNextWriteId_();
	        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
	        this.eventQueue_.queueEvents(events);
	        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
	            var success = status === 'ok';
	            if (!success) {
	                warn('set at ' + path + ' failed: ' + status);
	            }
	            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
	            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	        var affectedPath = this.abortTransactions_(path);
	        this.rerunTransactions_(affectedPath);
	        // We queued the events above, so just flush the queue here
	        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
	    };
	    /**
	     * @param {!Path} path
	     * @param {!Object} childrenToMerge
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.update = function (path, childrenToMerge, onComplete) {
	        var _this = this;
	        this.log_('update', { path: path.toString(), value: childrenToMerge });
	        // Start with our existing data and merge each child into it.
	        var empty = true;
	        var serverValues = this.generateServerValues();
	        var changedChildren = {};
	        util.forEach(childrenToMerge, function (changedKey, changedValue) {
	            empty = false;
	            var newNodeUnresolved = nodeFromJSON$1(changedValue);
	            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
	        });
	        if (!empty) {
	            var writeId_1 = this.getNextWriteId_();
	            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
	            this.eventQueue_.queueEvents(events);
	            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
	                var success = status === 'ok';
	                if (!success) {
	                    warn('update at ' + path + ' failed: ' + status);
	                }
	                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
	                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
	                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
	                _this.callOnCompleteCallback(onComplete, status, errorReason);
	            });
	            util.forEach(childrenToMerge, function (changedPath) {
	                var affectedPath = _this.abortTransactions_(path.child(changedPath));
	                _this.rerunTransactions_(affectedPath);
	            });
	            // We queued the events above, so just flush the queue here
	            this.eventQueue_.raiseEventsForChangedPath(path, []);
	        }
	        else {
	            log("update() called with empty data.  Don't do anything.");
	            this.callOnCompleteCallback(onComplete, 'ok');
	        }
	    };
	    /**
	     * Applies all of the changes stored up in the onDisconnect_ tree.
	     * @private
	     */
	    Repo.prototype.runOnDisconnectEvents_ = function () {
	        var _this = this;
	        this.log_('onDisconnectEvents');
	        var serverValues = this.generateServerValues();
	        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);
	        var events = [];
	        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
	            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
	            var affectedPath = _this.abortTransactions_(path);
	            _this.rerunTransactions_(affectedPath);
	        });
	        this.onDisconnect_ = new SparseSnapshotTree();
	        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
	    };
	    /**
	     * @param {!Path} path
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.onDisconnectCancel = function (path, onComplete) {
	        var _this = this;
	        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.forget(path);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    /**
	     * @param {!Path} path
	     * @param {*} value
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
	        var _this = this;
	        var newNode = nodeFromJSON$1(value);
	        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.remember(path, newNode);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    /**
	     * @param {!Path} path
	     * @param {*} value
	     * @param {*} priority
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
	        var _this = this;
	        var newNode = nodeFromJSON$1(value, priority);
	        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.remember(path, newNode);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    /**
	     * @param {!Path} path
	     * @param {*} childrenToMerge
	     * @param {?function(?Error, *=)} onComplete
	     */
	    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
	        var _this = this;
	        if (util.isEmpty(childrenToMerge)) {
	            log("onDisconnect().update() called with empty data.  Don't do anything.");
	            this.callOnCompleteCallback(onComplete, 'ok');
	            return;
	        }
	        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
	            if (status === 'ok') {
	                util.forEach(childrenToMerge, function (childName, childNode) {
	                    var newChildNode = nodeFromJSON$1(childNode);
	                    _this.onDisconnect_.remember(path.child(childName), newChildNode);
	                });
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    /**
	     * @param {!Query} query
	     * @param {!EventRegistration} eventRegistration
	     */
	    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
	        var events;
	        if (query.path.getFront() === '.info') {
	            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
	        }
	        else {
	            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
	        }
	        this.eventQueue_.raiseEventsAtPath(query.path, events);
	    };
	    /**
	     * @param {!Query} query
	     * @param {?EventRegistration} eventRegistration
	     */
	    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
	        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
	        // a little bit by handling the return values anyways.
	        var events;
	        if (query.path.getFront() === '.info') {
	            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
	        }
	        else {
	            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
	        }
	        this.eventQueue_.raiseEventsAtPath(query.path, events);
	    };
	    Repo.prototype.interrupt = function () {
	        if (this.persistentConnection_) {
	            this.persistentConnection_.interrupt(INTERRUPT_REASON);
	        }
	    };
	    Repo.prototype.resume = function () {
	        if (this.persistentConnection_) {
	            this.persistentConnection_.resume(INTERRUPT_REASON);
	        }
	    };
	    Repo.prototype.stats = function (showDelta) {
	        if (showDelta === void 0) { showDelta = false; }
	        if (typeof console === 'undefined')
	            return;
	        var stats;
	        if (showDelta) {
	            if (!this.statsListener_)
	                this.statsListener_ = new StatsListener(this.stats_);
	            stats = this.statsListener_.get();
	        }
	        else {
	            stats = this.stats_.get();
	        }
	        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
	            return Math.max(currentValue.length, previousValue);
	        }, 0);
	        util.forEach(stats, function (stat, value) {
	            // pad stat names to be the same length (plus 2 extra spaces).
	            for (var i = stat.length; i < longestName + 2; i++)
	                stat += ' ';
	            console.log(stat + value);
	        });
	    };
	    Repo.prototype.statsIncrementCounter = function (metric) {
	        this.stats_.incrementCounter(metric);
	        this.statsReporter_.includeStat(metric);
	    };
	    /**
	     * @param {...*} var_args
	     * @private
	     */
	    Repo.prototype.log_ = function () {
	        var var_args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            var_args[_i] = arguments[_i];
	        }
	        var prefix = '';
	        if (this.persistentConnection_) {
	            prefix = this.persistentConnection_.id + ':';
	        }
	        log.apply(void 0, [prefix].concat(var_args));
	    };
	    /**
	     * @param {?function(?Error, *=)} callback
	     * @param {!string} status
	     * @param {?string=} errorReason
	     */
	    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
	        if (callback) {
	            exceptionGuard(function () {
	                if (status == 'ok') {
	                    callback(null);
	                }
	                else {
	                    var code = (status || 'error').toUpperCase();
	                    var message = code;
	                    if (errorReason)
	                        message += ': ' + errorReason;
	                    var error$$1 = new Error(message);
	                    error$$1.code = code;
	                    callback(error$$1);
	                }
	            });
	        }
	    };
	    Object.defineProperty(Repo.prototype, "database", {
	        get: function () {
	            return this.__database || (this.__database = new Database(this));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Repo;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 */
	var RangedFilter = /** @class */ (function () {
	    /**
	     * @param {!QueryParams} params
	     */
	    function RangedFilter(params) {
	        this.indexedFilter_ = new IndexedFilter(params.getIndex());
	        this.index_ = params.getIndex();
	        this.startPost_ = RangedFilter.getStartPost_(params);
	        this.endPost_ = RangedFilter.getEndPost_(params);
	    }
	    /**
	     * @return {!NamedNode}
	     */
	    RangedFilter.prototype.getStartPost = function () {
	        return this.startPost_;
	    };
	    /**
	     * @return {!NamedNode}
	     */
	    RangedFilter.prototype.getEndPost = function () {
	        return this.endPost_;
	    };
	    /**
	     * @param {!NamedNode} node
	     * @return {boolean}
	     */
	    RangedFilter.prototype.matches = function (node) {
	        return (this.index_.compare(this.getStartPost(), node) <= 0 &&
	            this.index_.compare(node, this.getEndPost()) <= 0);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        if (!this.matches(new NamedNode(key, newChild))) {
	            newChild = ChildrenNode.EMPTY_NODE;
	        }
	        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        if (newSnap.isLeafNode()) {
	            // Make sure we have a children node with the correct index, not a leaf node;
	            newSnap = ChildrenNode.EMPTY_NODE;
	        }
	        var filtered = newSnap.withIndex(this.index_);
	        // Don't support priorities on queries
	        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
	        var self = this;
	        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	            if (!self.matches(new NamedNode(key, childNode))) {
	                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
	            }
	        });
	        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        // Don't support priorities on queries
	        return oldSnap;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.filtersNodes = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.getIndexedFilter = function () {
	        return this.indexedFilter_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @param {!QueryParams} params
	     * @return {!NamedNode}
	     * @private
	     */
	    RangedFilter.getStartPost_ = function (params) {
	        if (params.hasStart()) {
	            var startName = params.getIndexStartName();
	            return params.getIndex().makePost(params.getIndexStartValue(), startName);
	        }
	        else {
	            return params.getIndex().minPost();
	        }
	    };
	    /**
	     * @param {!QueryParams} params
	     * @return {!NamedNode}
	     * @private
	     */
	    RangedFilter.getEndPost_ = function (params) {
	        if (params.hasEnd()) {
	            var endName = params.getIndexEndName();
	            return params.getIndex().makePost(params.getIndexEndValue(), endName);
	        }
	        else {
	            return params.getIndex().maxPost();
	        }
	    };
	    return RangedFilter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 */
	var LimitedFilter = /** @class */ (function () {
	    /**
	     * @param {!QueryParams} params
	     */
	    function LimitedFilter(params) {
	        this.rangedFilter_ = new RangedFilter(params);
	        this.index_ = params.getIndex();
	        this.limit_ = params.getLimit();
	        this.reverse_ = !params.isViewFromLeft();
	    }
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
	            newChild = ChildrenNode.EMPTY_NODE;
	        }
	        if (snap.getImmediateChild(key).equals(newChild)) {
	            // No change
	            return snap;
	        }
	        else if (snap.numChildren() < this.limit_) {
	            return this.rangedFilter_
	                .getIndexedFilter()
	                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
	        }
	        else {
	            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        var filtered;
	        if (newSnap.isLeafNode() || newSnap.isEmpty()) {
	            // Make sure we have a children node with the correct index, not a leaf node;
	            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
	        }
	        else {
	            if (this.limit_ * 2 < newSnap.numChildren() &&
	                newSnap.isIndexed(this.index_)) {
	                // Easier to build up a snapshot, since what we're given has more than twice the elements we want
	                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
	                // anchor to the startPost, endPost, or last element as appropriate
	                var iterator = void 0;
	                if (this.reverse_) {
	                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
	                }
	                else {
	                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
	                }
	                var count = 0;
	                while (iterator.hasNext() && count < this.limit_) {
	                    var next = iterator.getNext();
	                    var inRange = void 0;
	                    if (this.reverse_) {
	                        inRange =
	                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
	                    }
	                    else {
	                        inRange =
	                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
	                    }
	                    if (inRange) {
	                        filtered = filtered.updateImmediateChild(next.name, next.node);
	                        count++;
	                    }
	                    else {
	                        // if we have reached the end post, we cannot keep adding elemments
	                        break;
	                    }
	                }
	            }
	            else {
	                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
	                filtered = newSnap.withIndex(this.index_);
	                // Don't support priorities on queries
	                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
	                var startPost = void 0;
	                var endPost = void 0;
	                var cmp = void 0;
	                var iterator = void 0;
	                if (this.reverse_) {
	                    iterator = filtered.getReverseIterator(this.index_);
	                    startPost = this.rangedFilter_.getEndPost();
	                    endPost = this.rangedFilter_.getStartPost();
	                    var indexCompare_1 = this.index_.getCompare();
	                    cmp = function (a, b) { return indexCompare_1(b, a); };
	                }
	                else {
	                    iterator = filtered.getIterator(this.index_);
	                    startPost = this.rangedFilter_.getStartPost();
	                    endPost = this.rangedFilter_.getEndPost();
	                    cmp = this.index_.getCompare();
	                }
	                var count = 0;
	                var foundStartPost = false;
	                while (iterator.hasNext()) {
	                    var next = iterator.getNext();
	                    if (!foundStartPost && cmp(startPost, next) <= 0) {
	                        // start adding
	                        foundStartPost = true;
	                    }
	                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
	                    if (inRange) {
	                        count++;
	                    }
	                    else {
	                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
	                    }
	                }
	            }
	        }
	        return this.rangedFilter_
	            .getIndexedFilter()
	            .updateFullNode(oldSnap, filtered, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        // Don't support priorities on queries
	        return oldSnap;
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.filtersNodes = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.getIndexedFilter = function () {
	        return this.rangedFilter_.getIndexedFilter();
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @param {!Node} snap
	     * @param {string} childKey
	     * @param {!Node} childSnap
	     * @param {!CompleteChildSource} source
	     * @param {?ChildChangeAccumulator} changeAccumulator
	     * @return {!Node}
	     * @private
	     */
	    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
	        // TODO: rename all cache stuff etc to general snap terminology
	        var cmp;
	        if (this.reverse_) {
	            var indexCmp_1 = this.index_.getCompare();
	            cmp = function (a, b) { return indexCmp_1(b, a); };
	        }
	        else {
	            cmp = this.index_.getCompare();
	        }
	        var oldEventCache = snap;
	        util.assert(oldEventCache.numChildren() == this.limit_, '');
	        var newChildNamedNode = new NamedNode(childKey, childSnap);
	        var windowBoundary = this.reverse_
	            ? oldEventCache.getFirstChild(this.index_)
	            : oldEventCache.getLastChild(this.index_);
	        var inRange = this.rangedFilter_.matches(newChildNamedNode);
	        if (oldEventCache.hasChild(childKey)) {
	            var oldChildSnap = oldEventCache.getImmediateChild(childKey);
	            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
	            while (nextChild != null &&
	                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {
	                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
	                // been applied to the limited filter yet. Ignore this next child which will be updated later in
	                // the limited filter...
	                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
	            }
	            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
	            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
	            if (remainsInWindow) {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
	                }
	                return oldEventCache.updateImmediateChild(childKey, childSnap);
	            }
	            else {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
	                }
	                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
	                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
	                if (nextChildInRange) {
	                    if (changeAccumulator != null) {
	                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
	                    }
	                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
	                }
	                else {
	                    return newEventCache;
	                }
	            }
	        }
	        else if (childSnap.isEmpty()) {
	            // we're deleting a node, but it was not in the window, so ignore it
	            return snap;
	        }
	        else if (inRange) {
	            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
	                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
	                }
	                return oldEventCache
	                    .updateImmediateChild(childKey, childSnap)
	                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
	            }
	            else {
	                return snap;
	            }
	        }
	        else {
	            return snap;
	        }
	    };
	    return LimitedFilter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
	 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
	 * user-facing API level, so it is not done here.
	 * @constructor
	 */
	var QueryParams = /** @class */ (function () {
	    function QueryParams() {
	        this.limitSet_ = false;
	        this.startSet_ = false;
	        this.startNameSet_ = false;
	        this.endSet_ = false;
	        this.endNameSet_ = false;
	        this.limit_ = 0;
	        this.viewFrom_ = '';
	        this.indexStartValue_ = null;
	        this.indexStartName_ = '';
	        this.indexEndValue_ = null;
	        this.indexEndName_ = '';
	        this.index_ = PRIORITY_INDEX;
	    }
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasStart = function () {
	        return this.startSet_;
	    };
	    /**
	     * @return {boolean} True if it would return from left.
	     */
	    QueryParams.prototype.isViewFromLeft = function () {
	        if (this.viewFrom_ === '') {
	            // limit(), rather than limitToFirst or limitToLast was called.
	            // This means that only one of startSet_ and endSet_ is true. Use them
	            // to calculate which side of the view to anchor to. If neither is set,
	            // anchor to the end.
	            return this.startSet_;
	        }
	        else {
	            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
	        }
	    };
	    /**
	     * Only valid to call if hasStart() returns true
	     * @return {*}
	     */
	    QueryParams.prototype.getIndexStartValue = function () {
	        util.assert(this.startSet_, 'Only valid if start has been set');
	        return this.indexStartValue_;
	    };
	    /**
	     * Only valid to call if hasStart() returns true.
	     * Returns the starting key name for the range defined by these query parameters
	     * @return {!string}
	     */
	    QueryParams.prototype.getIndexStartName = function () {
	        util.assert(this.startSet_, 'Only valid if start has been set');
	        if (this.startNameSet_) {
	            return this.indexStartName_;
	        }
	        else {
	            return MIN_NAME;
	        }
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasEnd = function () {
	        return this.endSet_;
	    };
	    /**
	     * Only valid to call if hasEnd() returns true.
	     * @return {*}
	     */
	    QueryParams.prototype.getIndexEndValue = function () {
	        util.assert(this.endSet_, 'Only valid if end has been set');
	        return this.indexEndValue_;
	    };
	    /**
	     * Only valid to call if hasEnd() returns true.
	     * Returns the end key name for the range defined by these query parameters
	     * @return {!string}
	     */
	    QueryParams.prototype.getIndexEndName = function () {
	        util.assert(this.endSet_, 'Only valid if end has been set');
	        if (this.endNameSet_) {
	            return this.indexEndName_;
	        }
	        else {
	            return MAX_NAME;
	        }
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasLimit = function () {
	        return this.limitSet_;
	    };
	    /**
	     * @return {boolean} True if a limit has been set and it has been explicitly anchored
	     */
	    QueryParams.prototype.hasAnchoredLimit = function () {
	        return this.limitSet_ && this.viewFrom_ !== '';
	    };
	    /**
	     * Only valid to call if hasLimit() returns true
	     * @return {!number}
	     */
	    QueryParams.prototype.getLimit = function () {
	        util.assert(this.limitSet_, 'Only valid if limit has been set');
	        return this.limit_;
	    };
	    /**
	     * @return {!Index}
	     */
	    QueryParams.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @return {!QueryParams}
	     * @private
	     */
	    QueryParams.prototype.copy_ = function () {
	        var copy = new QueryParams();
	        copy.limitSet_ = this.limitSet_;
	        copy.limit_ = this.limit_;
	        copy.startSet_ = this.startSet_;
	        copy.indexStartValue_ = this.indexStartValue_;
	        copy.startNameSet_ = this.startNameSet_;
	        copy.indexStartName_ = this.indexStartName_;
	        copy.endSet_ = this.endSet_;
	        copy.indexEndValue_ = this.indexEndValue_;
	        copy.endNameSet_ = this.endNameSet_;
	        copy.indexEndName_ = this.indexEndName_;
	        copy.index_ = this.index_;
	        copy.viewFrom_ = this.viewFrom_;
	        return copy;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limit = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = '';
	        return newParams;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limitToFirst = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
	        return newParams;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limitToLast = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
	        return newParams;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {?string=} key
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.startAt = function (indexValue, key) {
	        var newParams = this.copy_();
	        newParams.startSet_ = true;
	        if (!(indexValue !== undefined)) {
	            indexValue = null;
	        }
	        newParams.indexStartValue_ = indexValue;
	        if (key != null) {
	            newParams.startNameSet_ = true;
	            newParams.indexStartName_ = key;
	        }
	        else {
	            newParams.startNameSet_ = false;
	            newParams.indexStartName_ = '';
	        }
	        return newParams;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {?string=} key
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.endAt = function (indexValue, key) {
	        var newParams = this.copy_();
	        newParams.endSet_ = true;
	        if (!(indexValue !== undefined)) {
	            indexValue = null;
	        }
	        newParams.indexEndValue_ = indexValue;
	        if (key !== undefined) {
	            newParams.endNameSet_ = true;
	            newParams.indexEndName_ = key;
	        }
	        else {
	            newParams.endNameSet_ = false;
	            newParams.indexEndName_ = '';
	        }
	        return newParams;
	    };
	    /**
	     * @param {!Index} index
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.orderBy = function (index) {
	        var newParams = this.copy_();
	        newParams.index_ = index;
	        return newParams;
	    };
	    /**
	     * @return {!Object}
	     */
	    QueryParams.prototype.getQueryObject = function () {
	        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
	        var obj = {};
	        if (this.startSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
	            if (this.startNameSet_) {
	                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
	            }
	        }
	        if (this.endSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
	            if (this.endNameSet_) {
	                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
	            }
	        }
	        if (this.limitSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
	            var viewFrom = this.viewFrom_;
	            if (viewFrom === '') {
	                if (this.isViewFromLeft()) {
	                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
	                }
	                else {
	                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
	                }
	            }
	            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
	        }
	        // For now, priority index is the default, so we only specify if it's some other index
	        if (this.index_ !== PRIORITY_INDEX) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
	        }
	        return obj;
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.loadsAllData = function () {
	        return !(this.startSet_ || this.endSet_ || this.limitSet_);
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.isDefault = function () {
	        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;
	    };
	    /**
	     * @return {!NodeFilter}
	     */
	    QueryParams.prototype.getNodeFilter = function () {
	        if (this.loadsAllData()) {
	            return new IndexedFilter(this.getIndex());
	        }
	        else if (this.hasLimit()) {
	            return new LimitedFilter(this);
	        }
	        else {
	            return new RangedFilter(this);
	        }
	    };
	    /**
	     * Returns a set of REST query string parameters representing this query.
	     *
	     * @return {!Object.<string,*>} query string parameters
	     */
	    QueryParams.prototype.toRestQueryStringParameters = function () {
	        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
	        var qs = {};
	        if (this.isDefault()) {
	            return qs;
	        }
	        var orderBy;
	        if (this.index_ === PRIORITY_INDEX) {
	            orderBy = REST_CONSTANTS.PRIORITY_INDEX;
	        }
	        else if (this.index_ === VALUE_INDEX) {
	            orderBy = REST_CONSTANTS.VALUE_INDEX;
	        }
	        else if (this.index_ === KEY_INDEX) {
	            orderBy = REST_CONSTANTS.KEY_INDEX;
	        }
	        else {
	            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');
	            orderBy = this.index_.toString();
	        }
	        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);
	        if (this.startSet_) {
	            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);
	            if (this.startNameSet_) {
	                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);
	            }
	        }
	        if (this.endSet_) {
	            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);
	            if (this.endNameSet_) {
	                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);
	            }
	        }
	        if (this.limitSet_) {
	            if (this.isViewFromLeft()) {
	                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
	            }
	            else {
	                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
	            }
	        }
	        return qs;
	    };
	    /**
	     * Wire Protocol Constants
	     * @const
	     * @enum {string}
	     * @private
	     */
	    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
	        INDEX_START_VALUE: 'sp',
	        INDEX_START_NAME: 'sn',
	        INDEX_END_VALUE: 'ep',
	        INDEX_END_NAME: 'en',
	        LIMIT: 'l',
	        VIEW_FROM: 'vf',
	        VIEW_FROM_LEFT: 'l',
	        VIEW_FROM_RIGHT: 'r',
	        INDEX: 'i'
	    };
	    /**
	     * REST Query Constants
	     * @const
	     * @enum {string}
	     * @private
	     */
	    QueryParams.REST_QUERY_CONSTANTS_ = {
	        ORDER_BY: 'orderBy',
	        PRIORITY_INDEX: '$priority',
	        VALUE_INDEX: '$value',
	        KEY_INDEX: '$key',
	        START_AT: 'startAt',
	        END_AT: 'endAt',
	        LIMIT_TO_FIRST: 'limitToFirst',
	        LIMIT_TO_LAST: 'limitToLast'
	    };
	    /**
	     * Default, empty query parameters
	     * @type {!QueryParams}
	     * @const
	     */
	    QueryParams.DEFAULT = new QueryParams();
	    return QueryParams;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Reference = /** @class */ (function (_super) {
	    tslib_1.__extends(Reference, _super);
	    /**
	     * Call options:
	     *   new Reference(Repo, Path) or
	     *   new Reference(url: string, string|RepoManager)
	     *
	     * Externally - this is the firebase.database.Reference type.
	     *
	     * @param {!Repo} repo
	     * @param {(!Path)} path
	     * @extends {Query}
	     */
	    function Reference(repo, path) {
	        var _this = this;
	        if (!(repo instanceof Repo)) {
	            throw new Error('new Reference() no longer supported - use app.database().');
	        }
	        // call Query's constructor, passing in the repo and path.
	        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
	        return _this;
	    }
	    /** @return {?string} */
	    Reference.prototype.getKey = function () {
	        util.validateArgCount('Reference.key', 0, 0, arguments.length);
	        if (this.path.isEmpty())
	            return null;
	        else
	            return this.path.getBack();
	    };
	    /**
	     * @param {!(string|Path)} pathString
	     * @return {!Reference}
	     */
	    Reference.prototype.child = function (pathString) {
	        util.validateArgCount('Reference.child', 1, 1, arguments.length);
	        if (typeof pathString === 'number') {
	            pathString = String(pathString);
	        }
	        else if (!(pathString instanceof Path)) {
	            if (this.path.getFront() === null)
	                validateRootPathString('Reference.child', 1, pathString, false);
	            else
	                validatePathString('Reference.child', 1, pathString, false);
	        }
	        return new Reference(this.repo, this.path.child(pathString));
	    };
	    /** @return {?Reference} */
	    Reference.prototype.getParent = function () {
	        util.validateArgCount('Reference.parent', 0, 0, arguments.length);
	        var parentPath = this.path.parent();
	        return parentPath === null ? null : new Reference(this.repo, parentPath);
	    };
	    /** @return {!Reference} */
	    Reference.prototype.getRoot = function () {
	        util.validateArgCount('Reference.root', 0, 0, arguments.length);
	        var ref = this;
	        while (ref.getParent() !== null) {
	            ref = ref.getParent();
	        }
	        return ref;
	    };
	    /** @return {!Database} */
	    Reference.prototype.databaseProp = function () {
	        return this.repo.database;
	    };
	    /**
	     * @param {*} newVal
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.set = function (newVal, onComplete) {
	        util.validateArgCount('Reference.set', 1, 2, arguments.length);
	        validateWritablePath('Reference.set', this.path);
	        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
	        util.validateCallback('Reference.set', 2, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo.setWithPriority(this.path, newVal, 
	        /*priority=*/ null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {!Object} objectToMerge
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.update = function (objectToMerge, onComplete) {
	        util.validateArgCount('Reference.update', 1, 2, arguments.length);
	        validateWritablePath('Reference.update', this.path);
	        if (Array.isArray(objectToMerge)) {
	            var newObjectToMerge = {};
	            for (var i = 0; i < objectToMerge.length; ++i) {
	                newObjectToMerge['' + i] = objectToMerge[i];
	            }
	            objectToMerge = newObjectToMerge;
	            warn('Passing an Array to Firebase.update() is deprecated. ' +
	                'Use set() if you want to overwrite the existing data, or ' +
	                'an Object with integer keys if you really do want to ' +
	                'only update some of the children.');
	        }
	        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
	        util.validateCallback('Reference.update', 2, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} newVal
	     * @param {string|number|null} newPriority
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
	        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
	        validateWritablePath('Reference.setWithPriority', this.path);
	        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
	        validatePriority('Reference.setWithPriority', 2, newPriority, false);
	        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);
	        if (this.getKey() === '.length' || this.getKey() === '.keys')
	            throw 'Reference.setWithPriority failed: ' +
	                this.getKey() +
	                ' is a read-only object.';
	        var deferred = new util.Deferred();
	        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.remove = function (onComplete) {
	        util.validateArgCount('Reference.remove', 0, 1, arguments.length);
	        validateWritablePath('Reference.remove', this.path);
	        util.validateCallback('Reference.remove', 1, onComplete, true);
	        return this.set(null, onComplete);
	    };
	    /**
	     * @param {function(*):*} transactionUpdate
	     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
	     * @param {boolean=} applyLocally
	     * @return {!Promise}
	     */
	    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
	        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);
	        validateWritablePath('Reference.transaction', this.path);
	        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);
	        util.validateCallback('Reference.transaction', 2, onComplete, true);
	        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
	        // to expose it.
	        validateBoolean('Reference.transaction', 3, applyLocally, true);
	        if (this.getKey() === '.length' || this.getKey() === '.keys')
	            throw 'Reference.transaction failed: ' +
	                this.getKey() +
	                ' is a read-only object.';
	        if (applyLocally === undefined)
	            applyLocally = true;
	        var deferred = new util.Deferred();
	        if (typeof onComplete === 'function') {
	            deferred.promise.catch(function () { });
	        }
	        var promiseComplete = function (error$$1, committed, snapshot) {
	            if (error$$1) {
	                deferred.reject(error$$1);
	            }
	            else {
	                deferred.resolve(new TransactionResult(committed, snapshot));
	            }
	            if (typeof onComplete === 'function') {
	                onComplete(error$$1, committed, snapshot);
	            }
	        };
	        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
	        return deferred.promise;
	    };
	    /**
	     * @param {string|number|null} priority
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.setPriority = function (priority, onComplete) {
	        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
	        validateWritablePath('Reference.setPriority', this.path);
	        validatePriority('Reference.setPriority', 1, priority, false);
	        util.validateCallback('Reference.setPriority', 2, onComplete, true);
	        var deferred = new util.Deferred();
	        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*=} value
	     * @param {function(?Error)=} onComplete
	     * @return {!Reference}
	     */
	    Reference.prototype.push = function (value, onComplete) {
	        util.validateArgCount('Reference.push', 0, 2, arguments.length);
	        validateWritablePath('Reference.push', this.path);
	        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
	        util.validateCallback('Reference.push', 2, onComplete, true);
	        var now = this.repo.serverTime();
	        var name = nextPushId(now);
	        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
	        // We use child() to create handles to two different references. The first is turned into a
	        // ThennableReference below by adding then() and catch() methods and is used as the
	        // return value of push(). The second remains a regular Reference and is used as the fulfilled
	        // value of the first ThennableReference.
	        var thennablePushRef = this.child(name);
	        var pushRef = this.child(name);
	        var promise;
	        if (value != null) {
	            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
	        }
	        else {
	            promise = Promise.resolve(pushRef);
	        }
	        thennablePushRef.then = promise.then.bind(promise);
	        thennablePushRef.catch = promise.then.bind(promise, undefined);
	        if (typeof onComplete === 'function') {
	            promise.catch(function () { });
	        }
	        return thennablePushRef;
	    };
	    /**
	     * @return {!OnDisconnect}
	     */
	    Reference.prototype.onDisconnect = function () {
	        validateWritablePath('Reference.onDisconnect', this.path);
	        return new OnDisconnect(this.repo, this.path);
	    };
	    Object.defineProperty(Reference.prototype, "database", {
	        get: function () {
	            return this.databaseProp();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "key", {
	        get: function () {
	            return this.getKey();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "parent", {
	        get: function () {
	            return this.getParent();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "root", {
	        get: function () {
	            return this.getRoot();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Reference;
	}(Query));
	/**
	 * Define reference constructor in various modules
	 *
	 * We are doing this here to avoid several circular
	 * dependency issues
	 */
	Query.__referenceConstructor = Reference;
	SyncPoint.__referenceConstructor = Reference;

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Node in a Tree.
	 */
	var TreeNode = /** @class */ (function () {
	    function TreeNode() {
	        // TODO: Consider making accessors that create children and value lazily or
	        // separate Internal / Leaf 'types'.
	        this.children = {};
	        this.childCount = 0;
	        this.value = null;
	    }
	    return TreeNode;
	}());
	/**
	 * A light-weight tree, traversable by path.  Nodes can have both values and children.
	 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
	 * children.
	 */
	var Tree = /** @class */ (function () {
	    /**
	     * @template T
	     * @param {string=} name_ Optional name of the node.
	     * @param {Tree=} parent_ Optional parent node.
	     * @param {TreeNode=} node_ Optional node to wrap.
	     */
	    function Tree(name_, parent_, node_) {
	        if (name_ === void 0) { name_ = ''; }
	        if (parent_ === void 0) { parent_ = null; }
	        if (node_ === void 0) { node_ = new TreeNode(); }
	        this.name_ = name_;
	        this.parent_ = parent_;
	        this.node_ = node_;
	    }
	    /**
	     * Returns a sub-Tree for the given path.
	     *
	     * @param {!(string|Path)} pathObj Path to look up.
	     * @return {!Tree.<T>} Tree for path.
	     */
	    Tree.prototype.subTree = function (pathObj) {
	        // TODO: Require pathObj to be Path?
	        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
	        var child = this, next;
	        while ((next = path.getFront()) !== null) {
	            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();
	            child = new Tree(next, child, childNode);
	            path = path.popFront();
	        }
	        return child;
	    };
	    /**
	     * Returns the data associated with this tree node.
	     *
	     * @return {?T} The data or null if no data exists.
	     */
	    Tree.prototype.getValue = function () {
	        return this.node_.value;
	    };
	    /**
	     * Sets data to this tree node.
	     *
	     * @param {!T} value Value to set.
	     */
	    Tree.prototype.setValue = function (value) {
	        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
	        this.node_.value = value;
	        this.updateParents_();
	    };
	    /**
	     * Clears the contents of the tree node (its value and all children).
	     */
	    Tree.prototype.clear = function () {
	        this.node_.value = null;
	        this.node_.children = {};
	        this.node_.childCount = 0;
	        this.updateParents_();
	    };
	    /**
	     * @return {boolean} Whether the tree has any children.
	     */
	    Tree.prototype.hasChildren = function () {
	        return this.node_.childCount > 0;
	    };
	    /**
	     * @return {boolean} Whether the tree is empty (no value or children).
	     */
	    Tree.prototype.isEmpty = function () {
	        return this.getValue() === null && !this.hasChildren();
	    };
	    /**
	     * Calls action for each child of this tree node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     */
	    Tree.prototype.forEachChild = function (action) {
	        var _this = this;
	        util.forEach(this.node_.children, function (child, childTree) {
	            action(new Tree(child, _this, childTree));
	        });
	    };
	    /**
	     * Does a depth-first traversal of this node's descendants, calling action for each one.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
	     *   false.
	     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
	     *   parent.
	     */
	    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
	        if (includeSelf && !childrenFirst)
	            action(this);
	        this.forEachChild(function (child) {
	            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
	        });
	        if (includeSelf && childrenFirst)
	            action(this);
	    };
	    /**
	     * Calls action on each ancestor node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
	     *   true to abort.
	     * @param {boolean=} includeSelf Whether to call action on this node as well.
	     * @return {boolean} true if the action callback returned true.
	     */
	    Tree.prototype.forEachAncestor = function (action, includeSelf) {
	        var node = includeSelf ? this : this.parent();
	        while (node !== null) {
	            if (action(node)) {
	                return true;
	            }
	            node = node.parent();
	        }
	        return false;
	    };
	    /**
	     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
	     * is found, action is called on it and traversal does not continue inside the node.
	     * Action is *not* called on this node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     */
	    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
	        this.forEachChild(function (child) {
	            if (child.getValue() !== null)
	                action(child);
	            else
	                child.forEachImmediateDescendantWithValue(action);
	        });
	    };
	    /**
	     * @return {!Path} The path of this tree node, as a Path.
	     */
	    Tree.prototype.path = function () {
	        return new Path(this.parent_ === null
	            ? this.name_
	            : this.parent_.path() + '/' + this.name_);
	    };
	    /**
	     * @return {string} The name of the tree node.
	     */
	    Tree.prototype.name = function () {
	        return this.name_;
	    };
	    /**
	     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
	     */
	    Tree.prototype.parent = function () {
	        return this.parent_;
	    };
	    /**
	     * Adds or removes this child from its parent based on whether it's empty or not.
	     *
	     * @private
	     */
	    Tree.prototype.updateParents_ = function () {
	        if (this.parent_ !== null)
	            this.parent_.updateChild_(this.name_, this);
	    };
	    /**
	     * Adds or removes the passed child to this tree node, depending on whether it's empty.
	     *
	     * @param {string} childName The name of the child to update.
	     * @param {!Tree.<T>} child The child to update.
	     * @private
	     */
	    Tree.prototype.updateChild_ = function (childName, child) {
	        var childEmpty = child.isEmpty();
	        var childExists = util.contains(this.node_.children, childName);
	        if (childEmpty && childExists) {
	            delete this.node_.children[childName];
	            this.node_.childCount--;
	            this.updateParents_();
	        }
	        else if (!childEmpty && !childExists) {
	            this.node_.children[childName] = child.node_;
	            this.node_.childCount++;
	            this.updateParents_();
	        }
	    };
	    return Tree;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
	// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
	// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
	// For now it's part of Repo, but in its own file.
	/**
	 * @enum {number}
	 */
	var TransactionStatus;
	(function (TransactionStatus) {
	    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
	    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
	    // mismatched hash.
	    TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
	    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
	    // or rejected yet).
	    TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
	    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
	    // removed when we get a chance to prune completed ones.
	    TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
	    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
	    // If it comes back as unsuccessful, we'll abort it.
	    TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
	    // Temporary state used to mark transactions that need to be aborted.
	    TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
	})(TransactionStatus || (TransactionStatus = {}));
	/**
	 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
	 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
	 * @type {number}
	 * @const
	 * @private
	 */
	Repo.MAX_TRANSACTION_RETRIES_ = 25;
	/**
	 * Setup the transaction data structures
	 * @private
	 */
	Repo.prototype.transactions_init_ = function () {
	    /**
	     * Stores queues of outstanding transactions for Firebase locations.
	     *
	     * @type {!Tree.<Array.<!Transaction>>}
	     * @private
	     */
	    this.transactionQueueTree_ = new Tree();
	};
	/**
	 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
	 *
	 * @param {!Path} path Path at which to do transaction.
	 * @param {function(*):*} transactionUpdate Update callback.
	 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
	 * @param {boolean} applyLocally Whether or not to make intermediate results visible
	 */
	Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
	    this.log_('transaction on ' + path);
	    // Add a watch to make sure we get server updates.
	    var valueCallback = function () { };
	    var watchRef = new Reference(this, path);
	    watchRef.on('value', valueCallback);
	    var unwatcher = function () {
	        watchRef.off('value', valueCallback);
	    };
	    // Initialize transaction.
	    var transaction = {
	        path: path,
	        update: transactionUpdate,
	        onComplete: onComplete,
	        // One of TransactionStatus enums.
	        status: null,
	        // Used when combining transactions at different locations to figure out which one goes first.
	        order: LUIDGenerator(),
	        // Whether to raise local events for this transaction.
	        applyLocally: applyLocally,
	        // Count of how many times we've retried the transaction.
	        retryCount: 0,
	        // Function to call to clean up our .on() listener.
	        unwatcher: unwatcher,
	        // Stores why a transaction was aborted.
	        abortReason: null,
	        currentWriteId: null,
	        currentInputSnapshot: null,
	        currentOutputSnapshotRaw: null,
	        currentOutputSnapshotResolved: null
	    };
	    // Run transaction initially.
	    var currentState = this.getLatestState_(path);
	    transaction.currentInputSnapshot = currentState;
	    var newVal = transaction.update(currentState.val());
	    if (newVal === undefined) {
	        // Abort transaction.
	        transaction.unwatcher();
	        transaction.currentOutputSnapshotRaw = null;
	        transaction.currentOutputSnapshotResolved = null;
	        if (transaction.onComplete) {
	            // We just set the input snapshot, so this cast should be safe
	            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
	            transaction.onComplete(null, false, snapshot);
	        }
	    }
	    else {
	        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
	        // Mark as run and add to our queue.
	        transaction.status = TransactionStatus.RUN;
	        var queueNode = this.transactionQueueTree_.subTree(path);
	        var nodeQueue = queueNode.getValue() || [];
	        nodeQueue.push(transaction);
	        queueNode.setValue(nodeQueue);
	        // Update visibleData and raise events
	        // Note: We intentionally raise events after updating all of our transaction state, since the user could
	        // start new transactions from the event callbacks.
	        var priorityForNode = void 0;
	        if (typeof newVal === 'object' &&
	            newVal !== null &&
	            util.contains(newVal, '.priority')) {
	            priorityForNode = util.safeGet(newVal, '.priority');
	            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
	                'Priority must be a valid string, finite number, server value, or null.');
	        }
	        else {
	            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
	                ChildrenNode.EMPTY_NODE;
	            priorityForNode = currentNode.getPriority().val();
	        }
	        priorityForNode /** @type {null|number|string} */ = priorityForNode;
	        var serverValues = this.generateServerValues();
	        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
	        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
	        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
	        transaction.currentOutputSnapshotResolved = newNode;
	        transaction.currentWriteId = this.getNextWriteId_();
	        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	        this.sendReadyTransactions_();
	    }
	};
	/**
	 * @param {!Path} path
	 * @param {Array.<number>=} excludeSets A specific set to exclude
	 * @return {Node}
	 * @private
	 */
	Repo.prototype.getLatestState_ = function (path, excludeSets) {
	    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
	        ChildrenNode.EMPTY_NODE);
	};
	/**
	 * Sends any already-run transactions that aren't waiting for outstanding transactions to
	 * complete.
	 *
	 * Externally it's called with no arguments, but it calls itself recursively with a particular
	 * transactionQueueTree node to recurse through the tree.
	 *
	 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
	 * @private
	 */
	Repo.prototype.sendReadyTransactions_ = function (node) {
	    var _this = this;
	    if (node === void 0) { node = this.transactionQueueTree_; }
	    // Before recursing, make sure any completed transactions are removed.
	    if (!node) {
	        this.pruneCompletedTransactionsBelowNode_(node);
	    }
	    if (node.getValue() !== null) {
	        var queue = this.buildTransactionQueue_(node);
	        util.assert(queue.length > 0, 'Sending zero length transaction queue');
	        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
	        // If they're all run (and not sent), we can send them.  Else, we must wait.
	        if (allRun) {
	            this.sendTransactionQueue_(node.path(), queue);
	        }
	    }
	    else if (node.hasChildren()) {
	        node.forEachChild(function (childNode) {
	            _this.sendReadyTransactions_(childNode);
	        });
	    }
	};
	/**
	 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
	 *
	 * @param {!Path} path The location of the queue.
	 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
	 * @private
	 */
	Repo.prototype.sendTransactionQueue_ = function (path, queue) {
	    var _this = this;
	    // Mark transactions as sent and increment retry count!
	    var setsToIgnore = queue.map(function (txn) {
	        return txn.currentWriteId;
	    });
	    var latestState = this.getLatestState_(path, setsToIgnore);
	    var snapToSend = latestState;
	    var latestHash = latestState.hash();
	    for (var i = 0; i < queue.length; i++) {
	        var txn = queue[i];
	        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
	        txn.status = TransactionStatus.SENT;
	        txn.retryCount++;
	        var relativePath = Path.relativePath(path, txn.path);
	        // If we've gotten to this point, the output snapshot must be defined.
	        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);
	    }
	    var dataToSend = snapToSend.val(true);
	    var pathToSend = path;
	    // Send the put.
	    this.server_.put(pathToSend.toString(), dataToSend, function (status) {
	        _this.log_('transaction put response', {
	            path: pathToSend.toString(),
	            status: status
	        });
	        var events = [];
	        if (status === 'ok') {
	            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	            // the callback could trigger more transactions or sets.
	            var callbacks = [];
	            for (var i = 0; i < queue.length; i++) {
	                queue[i].status = TransactionStatus.COMPLETED;
	                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
	                if (queue[i].onComplete) {
	                    // We never unset the output snapshot, and given that this transaction is complete, it should be set
	                    var node = queue[i].currentOutputSnapshotResolved;
	                    var ref = new Reference(_this, queue[i].path);
	                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
	                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
	                }
	                queue[i].unwatcher();
	            }
	            // Now remove the completed transactions.
	            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
	            // There may be pending transactions that we can now send.
	            _this.sendReadyTransactions_();
	            _this.eventQueue_.raiseEventsForChangedPath(path, events);
	            // Finally, trigger onComplete callbacks.
	            for (var i = 0; i < callbacks.length; i++) {
	                exceptionGuard(callbacks[i]);
	            }
	        }
	        else {
	            // transactions are no longer sent.  Update their status appropriately.
	            if (status === 'datastale') {
	                for (var i = 0; i < queue.length; i++) {
	                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)
	                        queue[i].status = TransactionStatus.NEEDS_ABORT;
	                    else
	                        queue[i].status = TransactionStatus.RUN;
	                }
	            }
	            else {
	                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
	                for (var i = 0; i < queue.length; i++) {
	                    queue[i].status = TransactionStatus.NEEDS_ABORT;
	                    queue[i].abortReason = status;
	                }
	            }
	            _this.rerunTransactions_(path);
	        }
	    }, latestHash);
	};
	/**
	 * Finds all transactions dependent on the data at changedPath and reruns them.
	 *
	 * Should be called any time cached data changes.
	 *
	 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
	 * be raised for.
	 *
	 * @param {!Path} changedPath The path in mergedData that changed.
	 * @return {!Path} The rootmost path that was affected by rerunning transactions.
	 * @private
	 */
	Repo.prototype.rerunTransactions_ = function (changedPath) {
	    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
	    var path = rootMostTransactionNode.path();
	    var queue = this.buildTransactionQueue_(rootMostTransactionNode);
	    this.rerunTransactionQueue_(queue, path);
	    return path;
	};
	/**
	 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
	 *
	 * @param {Array.<Transaction>} queue The queue of transactions to run.
	 * @param {!Path} path The path the queue is for.
	 * @private
	 */
	Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
	    if (queue.length === 0) {
	        return; // Nothing to do!
	    }
	    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	    // the callback could trigger more transactions or sets.
	    var callbacks = [];
	    var events = [];
	    // Ignore all of the sets we're going to re-run.
	    var txnsToRerun = queue.filter(function (q) {
	        return q.status === TransactionStatus.RUN;
	    });
	    var setsToIgnore = txnsToRerun.map(function (q) {
	        return q.currentWriteId;
	    });
	    for (var i = 0; i < queue.length; i++) {
	        var transaction = queue[i];
	        var relativePath = Path.relativePath(path, transaction.path);
	        var abortTransaction = false, abortReason = void 0;
	        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
	        if (transaction.status === TransactionStatus.NEEDS_ABORT) {
	            abortTransaction = true;
	            abortReason = transaction.abortReason;
	            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	        }
	        else if (transaction.status === TransactionStatus.RUN) {
	            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
	                abortTransaction = true;
	                abortReason = 'maxretry';
	                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	            }
	            else {
	                // This code reruns a transaction
	                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
	                transaction.currentInputSnapshot = currentNode;
	                var newData = queue[i].update(currentNode.val());
	                if (newData !== undefined) {
	                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
	                    var newDataNode = nodeFromJSON$1(newData);
	                    var hasExplicitPriority = typeof newData === 'object' &&
	                        newData != null &&
	                        util.contains(newData, '.priority');
	                    if (!hasExplicitPriority) {
	                        // Keep the old priority if there wasn't a priority explicitly specified.
	                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());
	                    }
	                    var oldWriteId = transaction.currentWriteId;
	                    var serverValues = this.generateServerValues();
	                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);
	                    transaction.currentOutputSnapshotRaw = newDataNode;
	                    transaction.currentOutputSnapshotResolved = newNodeResolved;
	                    transaction.currentWriteId = this.getNextWriteId_();
	                    // Mutates setsToIgnore in place
	                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
	                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
	                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
	                }
	                else {
	                    abortTransaction = true;
	                    abortReason = 'nodata';
	                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	                }
	            }
	        }
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	        events = [];
	        if (abortTransaction) {
	            // Abort.
	            queue[i].status = TransactionStatus.COMPLETED;
	            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
	            // So defer the unwatcher until we're done.
	            (function (unwatcher) {
	                setTimeout(unwatcher, Math.floor(0));
	            })(queue[i].unwatcher);
	            if (queue[i].onComplete) {
	                if (abortReason === 'nodata') {
	                    var ref = new Reference(this, queue[i].path);
	                    // We set this field immediately, so it's safe to cast to an actual snapshot
	                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
	                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
	                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
	                }
	                else {
	                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
	                }
	            }
	        }
	    }
	    // Clean up completed transactions.
	    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
	    // Now fire callbacks, now that we're in a good, known state.
	    for (var i = 0; i < callbacks.length; i++) {
	        exceptionGuard(callbacks[i]);
	    }
	    // Try to send the transaction result to the server.
	    this.sendReadyTransactions_();
	};
	/**
	 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
	 * the node for the given path if there are no pending transactions on any ancestor.
	 *
	 * @param {!Path} path The location to start at.
	 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
	 * @private
	 */
	Repo.prototype.getAncestorTransactionNode_ = function (path) {
	    var front;
	    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
	    var transactionNode = this.transactionQueueTree_;
	    while ((front = path.getFront()) !== null &&
	        transactionNode.getValue() === null) {
	        transactionNode = transactionNode.subTree(front);
	        path = path.popFront();
	    }
	    return transactionNode;
	};
	/**
	 * Builds the queue of all transactions at or below the specified transactionNode.
	 *
	 * @param {!Tree.<Array.<Transaction>>} transactionNode
	 * @return {Array.<Transaction>} The generated queue.
	 * @private
	 */
	Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
	    // Walk any child transaction queues and aggregate them into a single queue.
	    var transactionQueue = [];
	    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
	    // Sort them by the order the transactions were created.
	    transactionQueue.sort(function (a, b) {
	        return a.order - b.order;
	    });
	    return transactionQueue;
	};
	/**
	 * @param {!Tree.<Array.<Transaction>>} node
	 * @param {Array.<Transaction>} queue
	 * @private
	 */
	Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
	    var _this = this;
	    var nodeQueue = node.getValue();
	    if (nodeQueue !== null) {
	        for (var i = 0; i < nodeQueue.length; i++) {
	            queue.push(nodeQueue[i]);
	        }
	    }
	    node.forEachChild(function (child) {
	        _this.aggregateTransactionQueuesForNode_(child, queue);
	    });
	};
	/**
	 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
	 *
	 * @param {!Tree.<Array.<!Transaction>>} node
	 * @private
	 */
	Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
	    var _this = this;
	    var queue = node.getValue();
	    if (queue) {
	        var to = 0;
	        for (var from = 0; from < queue.length; from++) {
	            if (queue[from].status !== TransactionStatus.COMPLETED) {
	                queue[to] = queue[from];
	                to++;
	            }
	        }
	        queue.length = to;
	        node.setValue(queue.length > 0 ? queue : null);
	    }
	    node.forEachChild(function (childNode) {
	        _this.pruneCompletedTransactionsBelowNode_(childNode);
	    });
	};
	/**
	 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
	 * since we consider them incompatible with transactions.
	 *
	 * @param {!Path} path Path for which we want to abort related transactions.
	 * @return {!Path}
	 * @private
	 */
	Repo.prototype.abortTransactions_ = function (path) {
	    var _this = this;
	    var affectedPath = this.getAncestorTransactionNode_(path).path();
	    var transactionNode = this.transactionQueueTree_.subTree(path);
	    transactionNode.forEachAncestor(function (node) {
	        _this.abortTransactionsOnNode_(node);
	    });
	    this.abortTransactionsOnNode_(transactionNode);
	    transactionNode.forEachDescendant(function (node) {
	        _this.abortTransactionsOnNode_(node);
	    });
	    return affectedPath;
	};
	/**
	 * Abort transactions stored in this transaction queue node.
	 *
	 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
	 * @private
	 */
	Repo.prototype.abortTransactionsOnNode_ = function (node) {
	    var queue = node.getValue();
	    if (queue !== null) {
	        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	        // the callback could trigger more transactions or sets.
	        var callbacks = [];
	        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
	        // can be immediately aborted and removed.
	        var events = [];
	        var lastSent = -1;
	        for (var i = 0; i < queue.length; i++) {
	            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
	                // Already marked.  No action needed.
	            }
	            else if (queue[i].status === TransactionStatus.SENT) {
	                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
	                lastSent = i;
	                // Mark transaction for abort when it comes back.
	                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
	                queue[i].abortReason = 'set';
	            }
	            else {
	                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
	                // We can abort it immediately.
	                queue[i].unwatcher();
	                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
	                if (queue[i].onComplete) {
	                    var snapshot = null;
	                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
	                }
	            }
	        }
	        if (lastSent === -1) {
	            // We're not waiting for any sent transactions.  We can clear the queue.
	            node.setValue(null);
	        }
	        else {
	            // Remove the transactions we aborted.
	            queue.length = lastSent + 1;
	        }
	        // Now fire the callbacks.
	        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
	        for (var i = 0; i < callbacks.length; i++) {
	            exceptionGuard(callbacks[i]);
	        }
	    }
	};

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** @const {string} */
	var DATABASE_URL_OPTION = 'databaseURL';
	var _staticInstance;
	/**
	 * Creates and caches Repo instances.
	 */
	var RepoManager = /** @class */ (function () {
	    function RepoManager() {
	        /**
	         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
	         */
	        this.repos_ = {};
	        /**
	         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
	         * @private {boolean}
	         */
	        this.useRestClient_ = false;
	    }
	    RepoManager.getInstance = function () {
	        if (!_staticInstance) {
	            _staticInstance = new RepoManager();
	        }
	        return _staticInstance;
	    };
	    // TODO(koss): Remove these functions unless used in tests?
	    RepoManager.prototype.interrupt = function () {
	        for (var appName in this.repos_) {
	            for (var dbUrl in this.repos_[appName]) {
	                this.repos_[appName][dbUrl].interrupt();
	            }
	        }
	    };
	    RepoManager.prototype.resume = function () {
	        for (var appName in this.repos_) {
	            for (var dbUrl in this.repos_[appName]) {
	                this.repos_[appName][dbUrl].resume();
	            }
	        }
	    };
	    /**
	     * This function should only ever be called to CREATE a new database instance.
	     *
	     * @param {!FirebaseApp} app
	     * @return {!Database}
	     */
	    RepoManager.prototype.databaseFromApp = function (app, url) {
	        var dbUrl = url || app.options[DATABASE_URL_OPTION];
	        if (dbUrl === undefined) {
	            fatal("Can't determine Firebase Database URL.  Be sure to include " +
	                DATABASE_URL_OPTION +
	                ' option when calling firebase.initializeApp().');
	        }
	        var parsedUrl = parseRepoInfo(dbUrl);
	        var repoInfo = parsedUrl.repoInfo;
	        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
	        if (!parsedUrl.path.isEmpty()) {
	            fatal('Database URL must point to the root of a Firebase Database ' +
	                '(not including a child path).');
	        }
	        var repo = this.createRepo(repoInfo, app);
	        return repo.database;
	    };
	    /**
	     * Remove the repo and make sure it is disconnected.
	     *
	     * @param {!Repo} repo
	     */
	    RepoManager.prototype.deleteRepo = function (repo) {
	        var appRepos = util.safeGet(this.repos_, repo.app.name);
	        // This should never happen...
	        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
	            fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
	        }
	        repo.interrupt();
	        delete appRepos[repo.repoInfo_.toURLString()];
	    };
	    /**
	     * Ensures a repo doesn't already exist and then creates one using the
	     * provided app.
	     *
	     * @param {!RepoInfo} repoInfo The metadata about the Repo
	     * @param {!FirebaseApp} app
	     * @return {!Repo} The Repo object for the specified server / repoName.
	     */
	    RepoManager.prototype.createRepo = function (repoInfo, app) {
	        var appRepos = util.safeGet(this.repos_, app.name);
	        if (!appRepos) {
	            appRepos = {};
	            this.repos_[app.name] = appRepos;
	        }
	        var repo = util.safeGet(appRepos, repoInfo.toURLString());
	        if (repo) {
	            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
	        }
	        repo = new Repo(repoInfo, this.useRestClient_, app);
	        appRepos[repoInfo.toURLString()] = repo;
	        return repo;
	    };
	    /**
	     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
	     * @param {boolean} forceRestClient
	     */
	    RepoManager.prototype.forceRestClient = function (forceRestClient) {
	        this.useRestClient_ = forceRestClient;
	    };
	    return RepoManager;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Class representing a firebase database.
	 * @implements {FirebaseService}
	 */
	var Database = /** @class */ (function () {
	    /**
	     * The constructor should not be called by users of our public API.
	     * @param {!Repo} repo_
	     */
	    function Database(repo_) {
	        this.repo_ = repo_;
	        if (!(repo_ instanceof Repo)) {
	            fatal("Don't call new Database() directly - please use firebase.database().");
	        }
	        /** @type {Reference} */
	        this.root_ = new Reference(repo_, Path.Empty);
	        this.INTERNAL = new DatabaseInternals(this);
	    }
	    Object.defineProperty(Database.prototype, "app", {
	        get: function () {
	            return this.repo_.app;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Database.prototype.ref = function (path) {
	        this.checkDeleted_('ref');
	        util.validateArgCount('database.ref', 0, 1, arguments.length);
	        if (path instanceof Reference) {
	            return this.refFromURL(path.toString());
	        }
	        return path !== undefined ? this.root_.child(path) : this.root_;
	    };
	    /**
	     * Returns a reference to the root or the path specified in url.
	     * We throw a exception if the url is not in the same domain as the
	     * current repo.
	     * @param {string} url
	     * @return {!Reference} Firebase reference.
	     */
	    Database.prototype.refFromURL = function (url) {
	        /** @const {string} */
	        var apiName = 'database.refFromURL';
	        this.checkDeleted_(apiName);
	        util.validateArgCount(apiName, 1, 1, arguments.length);
	        var parsedURL = parseRepoInfo(url);
	        validateUrl(apiName, 1, parsedURL);
	        var repoInfo = parsedURL.repoInfo;
	        if (repoInfo.host !== this.repo_.repoInfo_.host) {
	            fatal(apiName +
	                ': Host name does not match the current database: ' +
	                '(found ' +
	                repoInfo.host +
	                ' but expected ' +
	                this.repo_.repoInfo_.host +
	                ')');
	        }
	        return this.ref(parsedURL.path.toString());
	    };
	    /**
	     * @param {string} apiName
	     */
	    Database.prototype.checkDeleted_ = function (apiName) {
	        if (this.repo_ === null) {
	            fatal('Cannot call ' + apiName + ' on a deleted database.');
	        }
	    };
	    // Make individual repo go offline.
	    Database.prototype.goOffline = function () {
	        util.validateArgCount('database.goOffline', 0, 0, arguments.length);
	        this.checkDeleted_('goOffline');
	        this.repo_.interrupt();
	    };
	    Database.prototype.goOnline = function () {
	        util.validateArgCount('database.goOnline', 0, 0, arguments.length);
	        this.checkDeleted_('goOnline');
	        this.repo_.resume();
	    };
	    Database.ServerValue = {
	        TIMESTAMP: {
	            '.sv': 'timestamp'
	        }
	    };
	    return Database;
	}());
	var DatabaseInternals = /** @class */ (function () {
	    /** @param {!Database} database */
	    function DatabaseInternals(database) {
	        this.database = database;
	    }
	    /** @return {Promise<void>} */
	    DatabaseInternals.prototype.delete = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                this.database.checkDeleted_('delete');
	                RepoManager.getInstance().deleteRepo(this.database.repo_);
	                this.database.repo_ = null;
	                this.database.root_ = null;
	                this.database.INTERNAL = null;
	                this.database = null;
	                return [2 /*return*/];
	            });
	        });
	    };
	    return DatabaseInternals;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * INTERNAL methods for internal-use only (tests, etc.).
	 *
	 * Customers shouldn't use these or else should be aware that they could break at any time.
	 *
	 * @const
	 */
	var forceLongPolling = function () {
	    WebSocketConnection.forceDisallow();
	    BrowserPollConnection.forceAllow();
	};
	var forceWebSockets = function () {
	    BrowserPollConnection.forceDisallow();
	};
	/* Used by App Manager */
	var isWebSocketsAvailable = function () {
	    return WebSocketConnection['isAvailable']();
	};
	var setSecurityDebugCallback = function (ref, callback) {
	    ref.repo.persistentConnection_.securityDebugCallback_ = callback;
	};
	var stats = function (ref, showDelta) {
	    ref.repo.stats(showDelta);
	};
	var statsIncrementCounter = function (ref, metric) {
	    ref.repo.statsIncrementCounter(metric);
	};
	var dataUpdateCount = function (ref) {
	    return ref.repo.dataUpdateCount;
	};
	var interceptServerData = function (ref, callback) {
	    return ref.repo.interceptServerData_(callback);
	};

	var INTERNAL = /*#__PURE__*/Object.freeze({
	  forceLongPolling: forceLongPolling,
	  forceWebSockets: forceWebSockets,
	  isWebSocketsAvailable: isWebSocketsAvailable,
	  setSecurityDebugCallback: setSecurityDebugCallback,
	  stats: stats,
	  statsIncrementCounter: statsIncrementCounter,
	  dataUpdateCount: dataUpdateCount,
	  interceptServerData: interceptServerData
	});

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DataConnection = PersistentConnection;
	/**
	 * @param {!string} pathString
	 * @param {function(*)} onComplete
	 */
	PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
	    this.sendRequest('q', { p: pathString }, onComplete);
	};
	/**
	 * @param {*} data
	 * @param {function(*)} onEcho
	 */
	PersistentConnection.prototype.echo = function (data, onEcho) {
	    this.sendRequest('echo', { d: data }, onEcho);
	};
	// RealTimeConnection properties that we use in tests.
	var RealTimeConnection = Connection;
	/**
	 * @param {function(): string} newHash
	 * @return {function()}
	 */
	var hijackHash = function (newHash) {
	    var oldPut = PersistentConnection.prototype.put;
	    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {
	        if (opt_hash !== undefined) {
	            opt_hash = newHash();
	        }
	        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);
	    };
	    return function () {
	        PersistentConnection.prototype.put = oldPut;
	    };
	};
	/**
	 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
	 */
	var ConnectionTarget = RepoInfo;
	/**
	 * @param {!Query} query
	 * @return {!string}
	 */
	var queryIdentifier = function (query) {
	    return query.queryIdentifier();
	};
	/**
	 * @param {!Query} firebaseRef
	 * @return {!Object}
	 */
	var listens = function (firebaseRef) {
	    return firebaseRef.repo.persistentConnection_.listens_;
	};
	/**
	 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
	 *
	 * @param {boolean} forceRestClient
	 */
	var forceRestClient = function (forceRestClient) {
	    RepoManager.getInstance().forceRestClient(forceRestClient);
	};

	var TEST_ACCESS = /*#__PURE__*/Object.freeze({
	  DataConnection: DataConnection,
	  RealTimeConnection: RealTimeConnection,
	  hijackHash: hijackHash,
	  ConnectionTarget: ConnectionTarget,
	  queryIdentifier: queryIdentifier,
	  listens: listens,
	  forceRestClient: forceRestClient
	});

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ServerValue = Database.ServerValue;
	function registerDatabase(instance) {
	    // Register the Database Service with the 'firebase' namespace.
	    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, 
	    // firebase.database namespace properties
	    {
	        Reference: Reference,
	        Query: Query,
	        Database: Database,
	        enableLogging: enableLogging,
	        INTERNAL: INTERNAL,
	        ServerValue: ServerValue,
	        TEST_ACCESS: TEST_ACCESS
	    }, null, true);
	    if (util.isNodeSdk()) {
	        module.exports = namespace;
	    }
	}
	registerDatabase(firebase);

	exports.registerDatabase = registerDatabase;
	exports.Database = Database;
	exports.Query = Query;
	exports.Reference = Reference;
	exports.enableLogging = enableLogging;
	exports.ServerValue = ServerValue;
	exports.DataSnapshot = DataSnapshot;
	exports.OnDisconnect = OnDisconnect;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A container for all of the Logger instances
	 */
	var instances = [];
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
	    LogLevel[LogLevel["INFO"] = 2] = "INFO";
	    LogLevel[LogLevel["WARN"] = 3] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
	})(exports.LogLevel || (exports.LogLevel = {}));
	/**
	 * The default log level
	 */
	var defaultLogLevel = exports.LogLevel.INFO;
	/**
	 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
	 * messages on to their corresponding console counterparts (if the log method
	 * is supported by the current log level)
	 */
	var defaultLogHandler = function (instance, logType) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (logType < instance.logLevel)
	        return;
	    var now = new Date().toISOString();
	    switch (logType) {
	        /**
	         * By default, `console.debug` is not displayed in the developer console (in
	         * chrome). To avoid forcing users to have to opt-in to these logs twice
	         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
	         * logs to the `console.log` function.
	         */
	        case exports.LogLevel.DEBUG:
	            console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
	            break;
	        case exports.LogLevel.VERBOSE:
	            console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
	            break;
	        case exports.LogLevel.INFO:
	            console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
	            break;
	        case exports.LogLevel.WARN:
	            console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
	            break;
	        case exports.LogLevel.ERROR:
	            console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
	            break;
	        default:
	            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
	    }
	};
	var Logger = /** @class */ (function () {
	    /**
	     * Gives you an instance of a Logger to capture messages according to
	     * Firebase's logging scheme.
	     *
	     * @param name The name that the logs will be associated with
	     */
	    function Logger(name) {
	        this.name = name;
	        /**
	         * The log level of the given Logger instance.
	         */
	        this._logLevel = defaultLogLevel;
	        /**
	         * The log handler for the Logger instance.
	         */
	        this._logHandler = defaultLogHandler;
	        /**
	         * Capture the current instance for later use
	         */
	        instances.push(this);
	    }
	    Object.defineProperty(Logger.prototype, "logLevel", {
	        get: function () {
	            return this._logLevel;
	        },
	        set: function (val) {
	            if (!(val in exports.LogLevel)) {
	                throw new TypeError('Invalid value assigned to `logLevel`');
	            }
	            this._logLevel = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "logHandler", {
	        get: function () {
	            return this._logHandler;
	        },
	        set: function (val) {
	            if (typeof val !== 'function') {
	                throw new TypeError('Value assigned to `logHandler` must be a function');
	            }
	            this._logHandler = val;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * The functions below are all based on the `console` interface
	     */
	    Logger.prototype.debug = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._logHandler.apply(this, [this, exports.LogLevel.DEBUG].concat(args));
	    };
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._logHandler.apply(this, [this, exports.LogLevel.VERBOSE].concat(args));
	    };
	    Logger.prototype.info = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._logHandler.apply(this, [this, exports.LogLevel.INFO].concat(args));
	    };
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._logHandler.apply(this, [this, exports.LogLevel.WARN].concat(args));
	    };
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._logHandler.apply(this, [this, exports.LogLevel.ERROR].concat(args));
	    };
	    return Logger;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function setLogLevel(level) {
	    instances.forEach(function (inst) {
	        inst.logLevel = level;
	    });
	}

	exports.setLogLevel = setLogLevel;
	exports.Logger = Logger;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var firebase = _interopDefault(__webpack_require__(22));
	var logger = __webpack_require__(27);
	var tslib_1 = __webpack_require__(24);
	var webchannelWrapper = __webpack_require__(29);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** The semver (www.semver.org) version of the SDK. */
	var SDK_VERSION = firebase.SDK_VERSION;

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var logClient = new logger.Logger('@firebase/firestore');
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 2] = "SILENT";
	})(LogLevel || (LogLevel = {}));
	// Helper methods are needed because variables can't be exported as read/write
	function getLogLevel() {
	    if (logClient.logLevel === logger.LogLevel.DEBUG) {
	        return LogLevel.DEBUG;
	    }
	    else if (logClient.logLevel === logger.LogLevel.SILENT) {
	        return LogLevel.SILENT;
	    }
	    else {
	        return LogLevel.ERROR;
	    }
	}
	function setLogLevel(newLevel) {
	    /**
	     * Map the new log level to the associated Firebase Log Level
	     */
	    switch (newLevel) {
	        case LogLevel.DEBUG:
	            logClient.logLevel = logger.LogLevel.DEBUG;
	            break;
	        case LogLevel.ERROR:
	            logClient.logLevel = logger.LogLevel.ERROR;
	            break;
	        case LogLevel.SILENT:
	            logClient.logLevel = logger.LogLevel.SILENT;
	            break;
	        default:
	            logClient.error("Firestore (" + SDK_VERSION + "): Invalid value passed to `setLogLevel`");
	    }
	}
	function debug(tag, msg) {
	    var obj = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        obj[_i - 2] = arguments[_i];
	    }
	    if (logClient.logLevel <= logger.LogLevel.DEBUG) {
	        var args = obj.map(argToString);
	        logClient.debug.apply(logClient, ["Firestore (" + SDK_VERSION + ") [" + tag + "]: " + msg].concat(args));
	    }
	}
	function error(msg) {
	    var obj = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        obj[_i - 1] = arguments[_i];
	    }
	    if (logClient.logLevel <= logger.LogLevel.ERROR) {
	        var args = obj.map(argToString);
	        logClient.error.apply(logClient, ["Firestore (" + SDK_VERSION + "): " + msg].concat(args));
	    }
	}
	/**
	 * Converts an additional log parameter to a string representation.
	 */
	function argToString(obj) {
	    if (typeof obj === 'string') {
	        return obj;
	    }
	    else {
	        var platform = PlatformSupport.getPlatform();
	        try {
	            return platform.formatJSON(obj);
	        }
	        catch (e) {
	            // Converting to JSON failed, just log the object directly
	            return obj;
	        }
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Unconditionally fails, throwing an Error with the given message.
	 *
	 * Returns any so it can be used in expressions:
	 * @example
	 * let futureVar = fail('not implemented yet');
	 */
	function fail(failure) {
	    // Log the failure in addition to throw an exception, just in case the
	    // exception is swallowed.
	    var message = "FIRESTORE (" + SDK_VERSION + ") INTERNAL ASSERTION FAILED: " + failure;
	    error(message);
	    // NOTE: We don't use FirestoreError here because these are internal failures
	    // that cannot be handled by the user. (Also it would create a circular
	    // dependency between the error and assert modules which doesn't work.)
	    throw new Error(message);
	}
	/**
	 * Fails if the given assertion condition is false, throwing an Error with the
	 * given message if it did.
	 */
	function assert(assertion, message) {
	    if (!assertion) {
	        fail(message);
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides singleton helpers where setup code can inject a platform at runtime.
	 * setPlatform needs to be set before Firestore is used and must be set exactly
	 * once.
	 */
	var PlatformSupport = /** @class */ (function () {
	    function PlatformSupport() {
	    }
	    PlatformSupport.setPlatform = function (platform) {
	        if (PlatformSupport.platform) {
	            fail('Platform already defined');
	        }
	        PlatformSupport.platform = platform;
	    };
	    PlatformSupport.getPlatform = function () {
	        if (!PlatformSupport.platform) {
	            fail('Platform not set');
	        }
	        return PlatformSupport.platform;
	    };
	    return PlatformSupport;
	}());
	/**
	 * Returns the representation of an empty "proto" byte string for the
	 * platform.
	 */
	function emptyByteString() {
	    return PlatformSupport.getPlatform().emptyByteString;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.
	//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum
	var Code = {
	    // Causes are copied from:
	    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	    /** Not an error; returned on success. */
	    OK: 'ok',
	    /** The operation was cancelled (typically by the caller). */
	    CANCELLED: 'cancelled',
	    /** Unknown error or an error from a different error domain. */
	    UNKNOWN: 'unknown',
	    /**
	     * Client specified an invalid argument. Note that this differs from
	     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
	     * problematic regardless of the state of the system (e.g., a malformed file
	     * name).
	     */
	    INVALID_ARGUMENT: 'invalid-argument',
	    /**
	     * Deadline expired before operation could complete. For operations that
	     * change the state of the system, this error may be returned even if the
	     * operation has completed successfully. For example, a successful response
	     * from a server could have been delayed long enough for the deadline to
	     * expire.
	     */
	    DEADLINE_EXCEEDED: 'deadline-exceeded',
	    /** Some requested entity (e.g., file or directory) was not found. */
	    NOT_FOUND: 'not-found',
	    /**
	     * Some entity that we attempted to create (e.g., file or directory) already
	     * exists.
	     */
	    ALREADY_EXISTS: 'already-exists',
	    /**
	     * The caller does not have permission to execute the specified operation.
	     * PERMISSION_DENIED must not be used for rejections caused by exhausting
	     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
	     * PERMISSION_DENIED must not be used if the caller can not be identified
	     * (use UNAUTHENTICATED instead for those errors).
	     */
	    PERMISSION_DENIED: 'permission-denied',
	    /**
	     * The request does not have valid authentication credentials for the
	     * operation.
	     */
	    UNAUTHENTICATED: 'unauthenticated',
	    /**
	     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
	     * entire file system is out of space.
	     */
	    RESOURCE_EXHAUSTED: 'resource-exhausted',
	    /**
	     * Operation was rejected because the system is not in a state required for
	     * the operation's execution. For example, directory to be deleted may be
	     * non-empty, an rmdir operation is applied to a non-directory, etc.
	     *
	     * A litmus test that may help a service implementor in deciding
	     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
	     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
	     *  (b) Use ABORTED if the client should retry at a higher-level
	     *      (e.g., restarting a read-modify-write sequence).
	     *  (c) Use FAILED_PRECONDITION if the client should not retry until
	     *      the system state has been explicitly fixed. E.g., if an "rmdir"
	     *      fails because the directory is non-empty, FAILED_PRECONDITION
	     *      should be returned since the client should not retry unless
	     *      they have first fixed up the directory by deleting files from it.
	     *  (d) Use FAILED_PRECONDITION if the client performs conditional
	     *      REST Get/Update/Delete on a resource and the resource on the
	     *      server does not match the condition. E.g., conflicting
	     *      read-modify-write on the same resource.
	     */
	    FAILED_PRECONDITION: 'failed-precondition',
	    /**
	     * The operation was aborted, typically due to a concurrency issue like
	     * sequencer check failures, transaction aborts, etc.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    ABORTED: 'aborted',
	    /**
	     * Operation was attempted past the valid range. E.g., seeking or reading
	     * past end of file.
	     *
	     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
	     * if the system state changes. For example, a 32-bit file system will
	     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
	     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
	     * an offset past the current file size.
	     *
	     * There is a fair bit of overlap between FAILED_PRECONDITION and
	     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
	     * when it applies so that callers who are iterating through a space can
	     * easily look for an OUT_OF_RANGE error to detect when they are done.
	     */
	    OUT_OF_RANGE: 'out-of-range',
	    /** Operation is not implemented or not supported/enabled in this service. */
	    UNIMPLEMENTED: 'unimplemented',
	    /**
	     * Internal errors. Means some invariants expected by underlying System has
	     * been broken. If you see one of these errors, Something is very broken.
	     */
	    INTERNAL: 'internal',
	    /**
	     * The service is currently unavailable. This is a most likely a transient
	     * condition and may be corrected by retrying with a backoff.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    UNAVAILABLE: 'unavailable',
	    /** Unrecoverable data loss or corruption. */
	    DATA_LOSS: 'data-loss'
	};
	/**
	 * An error class used for Firestore-generated errors. Ideally we should be
	 * using FirebaseError, but integrating with it is overly arduous at the moment,
	 * so we define our own compatible error class (with a `name` of 'FirebaseError'
	 * and compatible `code` and `message` fields.)
	 */
	var FirestoreError = /** @class */ (function (_super) {
	    tslib_1.__extends(FirestoreError, _super);
	    function FirestoreError(code, message) {
	        var _this = _super.call(this, message) || this;
	        _this.code = code;
	        _this.message = message;
	        _this.name = 'FirebaseError';
	        // HACK: We write a toString property directly because Error is not a real
	        // class and so inheritance does not work correctly. We could alternatively
	        // do the same "back-door inheritance" trick that FirebaseError does.
	        _this.toString = function () { return _this.name + ": [code=" + _this.code + "]: " + _this.message; };
	        return _this;
	    }
	    return FirestoreError;
	}(Error));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Helper function to prevent instantiation through the constructor.
	 *
	 * This method creates a new constructor that throws when it's invoked.
	 * The prototype of that constructor is then set to the prototype of the hidden
	 * "class" to expose all the prototype methods and allow for instanceof
	 * checks.
	 *
	 * To also make all the static methods available, all properties of the
	 * original constructor are copied to the new constructor.
	 */
	function makeConstructorPrivate(cls, optionalMessage) {
	    function PublicConstructor() {
	        var error = 'This constructor is private.';
	        if (optionalMessage) {
	            error += ' ';
	            error += optionalMessage;
	        }
	        throw new FirestoreError(Code.INVALID_ARGUMENT, error);
	    }
	    // Make sure instanceof checks work and all methods are exposed on the public
	    // constructor
	    PublicConstructor.prototype = cls.prototype;
	    // Copy any static methods/members
	    for (var staticProperty in cls) {
	        if (cls.hasOwnProperty(staticProperty)) {
	            PublicConstructor[staticProperty] = cls[staticProperty];
	        }
	    }
	    return PublicConstructor;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function contains(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}
	/** Returns the given value if it's defined or the defaultValue otherwise. */
	function defaulted(value, defaultValue) {
	    return value !== undefined ? value : defaultValue;
	}
	function forEachNumber(obj, fn) {
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            var num = Number(key);
	            if (!isNaN(num)) {
	                fn(num, obj[key]);
	            }
	        }
	    }
	}
	function values(obj) {
	    var vs = [];
	    forEach(obj, function (_, v) { return vs.push(v); });
	    return vs;
	}
	function forEach(obj, fn) {
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            fn(key, obj[key]);
	        }
	    }
	}
	function isEmpty(obj) {
	    assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            return false;
	        }
	    }
	    return true;
	}
	function shallowCopy(obj) {
	    assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');
	    var result = {};
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            result[key] = obj[key];
	        }
	    }
	    return result;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Validates the invocation of functionName has the exact number of arguments.
	 *
	 * Forward the magic "arguments" variable as second parameter on which the
	 * parameter validation is performed:
	 * validateExactNumberOfArgs('myFunction', arguments, 2);
	 */
	function validateExactNumberOfArgs(functionName, args, numberOfArgs) {
	    if (args.length !== numberOfArgs) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires " +
	            formatPlural(numberOfArgs, 'argument') +
	            ', but was called with ' +
	            formatPlural(args.length, 'argument') +
	            '.');
	    }
	}
	/**
	 * Validates the invocation of functionName has at least the provided number of
	 * arguments (but can have many more).
	 *
	 * Forward the magic "arguments" variable as second parameter on which the
	 * parameter validation is performed:
	 * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
	 */
	function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {
	    if (args.length < minNumberOfArgs) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires at least " +
	            formatPlural(minNumberOfArgs, 'argument') +
	            ', but was called with ' +
	            formatPlural(args.length, 'argument') +
	            '.');
	    }
	}
	/**
	 * Validates the invocation of functionName has number of arguments between
	 * the values provided.
	 *
	 * Forward the magic "arguments" variable as second parameter on which the
	 * parameter validation is performed:
	 * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
	 */
	function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {
	    if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires between " + minNumberOfArgs + " and " +
	            (maxNumberOfArgs + " arguments, but was called with ") +
	            formatPlural(args.length, 'argument') +
	            '.');
	    }
	}
	/**
	 * Validates the provided argument is an array and has as least the expected
	 * number of elements.
	 */
	function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {
	    if (!(value instanceof Array) || value.length < minNumberOfElements) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + name + " argument to be an " +
	            'array with at least ' +
	            (formatPlural(minNumberOfElements, 'element') + "."));
	    }
	}
	/**
	 * Validates the provided positional argument has the native JavaScript type
	 * using typeof checks.
	 */
	function validateArgType(functionName, type, position, argument) {
	    validateType(functionName, type, ordinal(position) + " argument", argument);
	}
	/**
	 * Validates the provided argument has the native JavaScript type using
	 * typeof checks or is undefined.
	 */
	function validateOptionalArgType(functionName, type, position, argument) {
	    if (argument !== undefined) {
	        validateArgType(functionName, type, position, argument);
	    }
	}
	/**
	 * Validates the provided named option has the native JavaScript type using
	 * typeof checks.
	 */
	function validateNamedType(functionName, type, optionName, argument) {
	    validateType(functionName, type, optionName + " option", argument);
	}
	/**
	 * Validates the provided named option has the native JavaScript type using
	 * typeof checks or is undefined.
	 */
	function validateNamedOptionalType(functionName, type, optionName, argument) {
	    if (argument !== undefined) {
	        validateNamedType(functionName, type, optionName, argument);
	    }
	}
	function validateArrayElements(functionName, optionName, typeDescription, argument, validator) {
	    if (!(argument instanceof Array)) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + optionName + " " +
	            ("option to be an array, but it was: " + valueDescription(argument)));
	    }
	    for (var i = 0; i < argument.length; ++i) {
	        if (!validator(argument[i])) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires all " + optionName + " " +
	                ("elements to be " + typeDescription + ", but the value at index " + i + " ") +
	                ("was: " + valueDescription(argument[i])));
	        }
	    }
	}
	function validateOptionalArrayElements(functionName, optionName, typeDescription, argument, validator) {
	    if (argument !== undefined) {
	        validateArrayElements(functionName, optionName, typeDescription, argument, validator);
	    }
	}
	/**
	 * Validates that the provided named option equals one of the expected values.
	 */
	function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {
	    var expectedDescription = [];
	    for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {
	        var val = expected_1[_i];
	        if (val === input) {
	            return;
	        }
	        expectedDescription.push(valueDescription(val));
	    }
	    var actualDescription = valueDescription(input);
	    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + actualDescription + " provided to function " + functionName + "() for option " +
	        ("\"" + optionName + "\". Acceptable values: " + expectedDescription.join(', ')));
	}
	/**
	 * Validates that the provided named option equals one of the expected values or
	 * is undefined.
	 */
	function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {
	    if (input !== undefined) {
	        validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);
	    }
	}
	/** Helper to validate the type of a provided input. */
	function validateType(functionName, type, inputName, input) {
	    var valid = false;
	    if (type === 'object') {
	        valid = isPlainObject(input);
	    }
	    else if (type === 'non-empty string') {
	        valid = typeof input === 'string' && input !== '';
	    }
	    else {
	        valid = typeof input === type;
	    }
	    if (!valid) {
	        var description = valueDescription(input);
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + inputName + " " +
	            ("to be of type " + type + ", but it was: " + description));
	    }
	}
	/**
	 * Returns true if it's a non-null object without a custom prototype
	 * (i.e. excludes Array, Date, etc.).
	 */
	function isPlainObject(input) {
	    return (typeof input === 'object' &&
	        input !== null &&
	        (Object.getPrototypeOf(input) === Object.prototype ||
	            Object.getPrototypeOf(input) === null));
	}
	/** Returns a string describing the type / value of the provided input. */
	function valueDescription(input) {
	    if (input === undefined) {
	        return 'undefined';
	    }
	    else if (input === null) {
	        return 'null';
	    }
	    else if (typeof input === 'string') {
	        if (input.length > 20) {
	            input = input.substring(0, 20) + "...";
	        }
	        return JSON.stringify(input);
	    }
	    else if (typeof input === 'number' || typeof input === 'boolean') {
	        return '' + input;
	    }
	    else if (typeof input === 'object') {
	        if (input instanceof Array) {
	            return 'an array';
	        }
	        else {
	            var customObjectName = tryGetCustomObjectType(input);
	            if (customObjectName) {
	                return "a custom " + customObjectName + " object";
	            }
	            else {
	                return 'an object';
	            }
	        }
	    }
	    else if (typeof input === 'function') {
	        return 'a function';
	    }
	    else {
	        return fail('Unknown wrong type: ' + typeof input);
	    }
	}
	/** Hacky method to try to get the constructor name for an object. */
	function tryGetCustomObjectType(input) {
	    if (input.constructor) {
	        var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
	        var results = funcNameRegex.exec(input.constructor.toString());
	        if (results && results.length > 1) {
	            return results[1];
	        }
	    }
	    return null;
	}
	/** Validates the provided argument is defined. */
	function validateDefined(functionName, position, argument) {
	    if (argument === undefined) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a valid " + ordinal(position) + " " +
	            "argument, but it was undefined.");
	    }
	}
	/**
	 * Validates the provided positional argument is an object, and its keys and
	 * values match the expected keys and types provided in optionTypes.
	 */
	function validateOptionNames(functionName, options, optionNames) {
	    forEach(options, function (key, _) {
	        if (optionNames.indexOf(key) < 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Unknown option '" + key + "' passed to function " + functionName + "(). " +
	                'Available options: ' +
	                optionNames.join(', '));
	        }
	    });
	}
	/**
	 * Helper method to throw an error that the provided argument did not pass
	 * an instanceof check.
	 */
	function invalidClassError(functionName, type, position, argument) {
	    var description = valueDescription(argument);
	    return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + ordinal(position) + " " +
	        ("argument to be a " + type + ", but it was: " + description));
	}
	/** Converts a number to its english word representation */
	function ordinal(num) {
	    switch (num) {
	        case 1:
	            return 'first';
	        case 2:
	            return 'second';
	        case 3:
	            return 'third';
	        default:
	            return num + 'th';
	    }
	}
	/**
	 * Formats the given word as plural conditionally given the preceding number.
	 */
	function formatPlural(num, str) {
	    return num + " " + str + (num === 1 ? '' : 's');
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// tslint:disable-next-line:class-as-namespace
	var AutoId = /** @class */ (function () {
	    function AutoId() {
	    }
	    AutoId.newId = function () {
	        // Alphanumeric characters
	        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	        var autoId = '';
	        for (var i = 0; i < 20; i++) {
	            autoId += chars.charAt(Math.floor(Math.random() * chars.length));
	        }
	        assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);
	        return autoId;
	    };
	    return AutoId;
	}());
	function primitiveComparator(left, right) {
	    if (left < right)
	        return -1;
	    if (left > right)
	        return 1;
	    return 0;
	}
	/** Helper to compare nullable (or undefined-able) objects using isEqual(). */
	function equals(left, right) {
	    if (left !== null && left !== undefined) {
	        return !!(right && left.isEqual(right));
	    }
	    else {
	        // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't
	        // smart enough.
	        return left === right;
	    }
	}
	/** Helper to compare arrays using isEqual(). */
	function arrayEquals(left, right) {
	    if (left.length !== right.length) {
	        return false;
	    }
	    for (var i = 0; i < left.length; i++) {
	        if (!left[i].isEqual(right[i])) {
	            return false;
	        }
	    }
	    return true;
	}
	/**
	 * Returns the immediate lexicographically-following string. This is useful to
	 * construct an inclusive range for indexeddb iterators.
	 */
	function immediateSuccessor(s) {
	    // Return the input string, with an additional NUL byte appended.
	    return s + '\0';
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Helper function to assert Uint8Array is available at runtime. */
	function assertUint8ArrayAvailable() {
	    if (typeof Uint8Array === 'undefined') {
	        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');
	    }
	}
	/** Helper function to assert Base64 functions are available at runtime. */
	function assertBase64Available() {
	    if (!PlatformSupport.getPlatform().base64Available) {
	        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');
	    }
	}
	/**
	 * Immutable class holding a blob (binary data).
	 * This class is directly exposed in the public API.
	 *
	 * Note that while you can't hide the constructor in JavaScript code, we are
	 * using the hack above to make sure no-one outside this module can call it.
	 */
	var Blob = /** @class */ (function () {
	    function Blob(binaryString) {
	        assertBase64Available();
	        this._binaryString = binaryString;
	    }
	    Blob.fromBase64String = function (base64) {
	        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);
	        validateArgType('Blob.fromBase64String', 'string', 1, base64);
	        assertBase64Available();
	        try {
	            var binaryString = PlatformSupport.getPlatform().atob(base64);
	            return new Blob(binaryString);
	        }
	        catch (e) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);
	        }
	    };
	    Blob.fromUint8Array = function (array) {
	        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);
	        assertUint8ArrayAvailable();
	        if (!(array instanceof Uint8Array)) {
	            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);
	        }
	        // We can't call array.map directly because it expects the return type to
	        // be a Uint8Array, whereas we can convert it to a regular array by invoking
	        // map on the Array prototype.
	        var binaryString = Array.prototype.map
	            .call(array, function (char) {
	            return String.fromCharCode(char);
	        })
	            .join('');
	        return new Blob(binaryString);
	    };
	    Blob.prototype.toBase64 = function () {
	        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);
	        assertBase64Available();
	        return PlatformSupport.getPlatform().btoa(this._binaryString);
	    };
	    Blob.prototype.toUint8Array = function () {
	        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);
	        assertUint8ArrayAvailable();
	        var buffer = new Uint8Array(this._binaryString.length);
	        for (var i = 0; i < this._binaryString.length; i++) {
	            buffer[i] = this._binaryString.charCodeAt(i);
	        }
	        return buffer;
	    };
	    Blob.prototype.toString = function () {
	        return 'Blob(base64: ' + this.toBase64() + ')';
	    };
	    Blob.prototype.isEqual = function (other) {
	        return this._binaryString === other._binaryString;
	    };
	    /**
	     * Actually private to JS consumers of our API, so this function is prefixed
	     * with an underscore.
	     */
	    Blob.prototype._compareTo = function (other) {
	        return primitiveComparator(this._binaryString, other._binaryString);
	    };
	    return Blob;
	}());
	// Public instance that disallows construction at runtime. This constructor is
	// used when exporting Blob on firebase.firestore.Blob and will be called Blob
	// publicly. Internally we still use Blob which has a type checked private
	// constructor. Note that Blob and PublicBlob can be used interchangeably in
	// instanceof checks.
	// For our internal TypeScript code PublicBlob doesn't exist as a type, and so
	// we need to use Blob as type and export it too.
	// tslint:disable-next-line:variable-name We're treating this as a class name.
	var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Immutable class representing a geo point as latitude-longitude pair.
	 * This class is directly exposed in the public API, including its constructor.
	 */
	var GeoPoint = /** @class */ (function () {
	    function GeoPoint(latitude, longitude) {
	        validateExactNumberOfArgs('GeoPoint', arguments, 2);
	        validateArgType('GeoPoint', 'number', 1, latitude);
	        validateArgType('GeoPoint', 'number', 2, longitude);
	        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);
	        }
	        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);
	        }
	        this._lat = latitude;
	        this._long = longitude;
	    }
	    Object.defineProperty(GeoPoint.prototype, "latitude", {
	        /**
	         * Returns the latitude of this geo point, a number between -90 and 90.
	         */
	        get: function () {
	            return this._lat;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GeoPoint.prototype, "longitude", {
	        /**
	         * Returns the longitude of this geo point, a number between -180 and 180.
	         */
	        get: function () {
	            return this._long;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GeoPoint.prototype.isEqual = function (other) {
	        return this._lat === other._lat && this._long === other._long;
	    };
	    /**
	     * Actually private to JS consumers of our API, so this function is prefixed
	     * with an underscore.
	     */
	    GeoPoint.prototype._compareTo = function (other) {
	        return (primitiveComparator(this._lat, other._lat) ||
	            primitiveComparator(this._long, other._long));
	    };
	    return GeoPoint;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Timestamp = /** @class */ (function () {
	    function Timestamp(seconds, nanoseconds) {
	        this.seconds = seconds;
	        this.nanoseconds = nanoseconds;
	        if (nanoseconds < 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
	        }
	        if (nanoseconds >= 1e9) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
	        }
	        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.
	        if (seconds < -62135596800) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
	        }
	        // This will break in the year 10,000.
	        if (seconds >= 253402300800) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
	        }
	    }
	    Timestamp.now = function () {
	        return Timestamp.fromMillis(Date.now());
	    };
	    Timestamp.fromDate = function (date) {
	        return Timestamp.fromMillis(date.getTime());
	    };
	    Timestamp.fromMillis = function (milliseconds) {
	        var seconds = Math.floor(milliseconds / 1000);
	        var nanos = (milliseconds - seconds * 1000) * 1e6;
	        return new Timestamp(seconds, nanos);
	    };
	    Timestamp.prototype.toDate = function () {
	        return new Date(this.toMillis());
	    };
	    Timestamp.prototype.toMillis = function () {
	        return this.seconds * 1000 + this.nanoseconds / 1e6;
	    };
	    Timestamp.prototype._compareTo = function (other) {
	        if (this.seconds === other.seconds) {
	            return primitiveComparator(this.nanoseconds, other.nanoseconds);
	        }
	        return primitiveComparator(this.seconds, other.seconds);
	    };
	    Timestamp.prototype.isEqual = function (other) {
	        return (other.seconds === this.seconds && other.nanoseconds === this.nanoseconds);
	    };
	    Timestamp.prototype.toString = function () {
	        return ('Timestamp(seconds=' +
	            this.seconds +
	            ', nanoseconds=' +
	            this.nanoseconds +
	            ')');
	    };
	    return Timestamp;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DatabaseInfo = /** @class */ (function () {
	    /**
	     * Constructs a DatabaseInfo using the provided host, databaseId and
	     * persistenceKey.
	     *
	     * @param databaseId The database to use.
	     * @param persistenceKey A unique identifier for this Firestore's local
	     * storage (used in conjunction with the databaseId).
	     * @param host The Firestore backend host to connect to.
	     * @param ssl Whether to use SSL when connecting.
	     */
	    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {
	        this.databaseId = databaseId;
	        this.persistenceKey = persistenceKey;
	        this.host = host;
	        this.ssl = ssl;
	    }
	    return DatabaseInfo;
	}());
	/** The default database name for a project. */
	var DEFAULT_DATABASE_NAME = '(default)';
	/** Represents the database ID a Firestore client is associated with. */
	var DatabaseId = /** @class */ (function () {
	    function DatabaseId(projectId, database) {
	        this.projectId = projectId;
	        this.database = database ? database : DEFAULT_DATABASE_NAME;
	    }
	    Object.defineProperty(DatabaseId.prototype, "isDefaultDatabase", {
	        get: function () {
	            return this.database === DEFAULT_DATABASE_NAME;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DatabaseId.prototype.isEqual = function (other) {
	        return (other instanceof DatabaseId &&
	            other.projectId === this.projectId &&
	            other.database === this.database);
	    };
	    DatabaseId.prototype.compareTo = function (other) {
	        return (primitiveComparator(this.projectId, other.projectId) ||
	            primitiveComparator(this.database, other.database));
	    };
	    return DatabaseId;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DOCUMENT_KEY_NAME = '__name__';
	/**
	 * Path represents an ordered sequence of string segments.
	 */
	var Path = /** @class */ (function () {
	    function Path(segments, offset, length) {
	        this.init(segments, offset, length);
	    }
	    /**
	     * An initialization method that can be called from outside the constructor.
	     * We need this so that we can have a non-static construct method that returns
	     * the polymorphic `this` type.
	     */
	    Path.prototype.init = function (segments, offset, length) {
	        if (offset === undefined) {
	            offset = 0;
	        }
	        else if (offset > segments.length) {
	            fail('offset ' + offset + ' out of range ' + segments.length);
	        }
	        if (length === undefined) {
	            length = segments.length - offset;
	        }
	        else if (length > segments.length - offset) {
	            fail('length ' + length + ' out of range ' + (segments.length - offset));
	        }
	        this.segments = segments;
	        this.offset = offset;
	        this.len = length;
	    };
	    /**
	     * Constructs a new instance of Path using the same concrete type as `this`.
	     * We need this instead of using the normal constructor, because polymorphic
	     * `this` doesn't work on static methods.
	     */
	    Path.prototype.construct = function (segments, offset, length) {
	        var path = Object.create(Object.getPrototypeOf(this));
	        path.init(segments, offset, length);
	        return path;
	    };
	    Object.defineProperty(Path.prototype, "length", {
	        get: function () {
	            return this.len;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Path.prototype.isEqual = function (other) {
	        return Path.comparator(this, other) === 0;
	    };
	    Path.prototype.child = function (nameOrPath) {
	        var segments = this.segments.slice(this.offset, this.limit());
	        if (nameOrPath instanceof Path) {
	            nameOrPath.forEach(function (segment) {
	                segments.push(segment);
	            });
	        }
	        else if (typeof nameOrPath === 'string') {
	            segments.push(nameOrPath);
	        }
	        else {
	            fail('Unknown parameter type for Path.child(): ' + nameOrPath);
	        }
	        return this.construct(segments);
	    };
	    /** The index of one past the last segment of the path. */
	    Path.prototype.limit = function () {
	        return this.offset + this.length;
	    };
	    Path.prototype.popFirst = function (size) {
	        size = size === undefined ? 1 : size;
	        assert(this.length >= size, "Can't call popFirst() with less segments");
	        return this.construct(this.segments, this.offset + size, this.length - size);
	    };
	    Path.prototype.popLast = function () {
	        assert(!this.isEmpty(), "Can't call popLast() on empty path");
	        return this.construct(this.segments, this.offset, this.length - 1);
	    };
	    Path.prototype.firstSegment = function () {
	        assert(!this.isEmpty(), "Can't call firstSegment() on empty path");
	        return this.segments[this.offset];
	    };
	    Path.prototype.lastSegment = function () {
	        assert(!this.isEmpty(), "Can't call lastSegment() on empty path");
	        return this.segments[this.limit() - 1];
	    };
	    Path.prototype.get = function (index) {
	        assert(index < this.length, 'Index out of range');
	        return this.segments[this.offset + index];
	    };
	    Path.prototype.isEmpty = function () {
	        return this.length === 0;
	    };
	    Path.prototype.isPrefixOf = function (other) {
	        if (other.length < this.length) {
	            return false;
	        }
	        for (var i = 0; i < this.length; i++) {
	            if (this.get(i) !== other.get(i)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Path.prototype.isImmediateParentOf = function (potentialChild) {
	        if (this.length + 1 !== potentialChild.length) {
	            return false;
	        }
	        for (var i = 0; i < this.length; i++) {
	            if (this.get(i) !== potentialChild.get(i)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Path.prototype.forEach = function (fn) {
	        for (var i = this.offset, end = this.limit(); i < end; i++) {
	            fn(this.segments[i]);
	        }
	    };
	    Path.prototype.toArray = function () {
	        return this.segments.slice(this.offset, this.limit());
	    };
	    Path.comparator = function (p1, p2) {
	        var len = Math.min(p1.length, p2.length);
	        for (var i = 0; i < len; i++) {
	            var left = p1.get(i);
	            var right = p2.get(i);
	            if (left < right)
	                return -1;
	            if (left > right)
	                return 1;
	        }
	        if (p1.length < p2.length)
	            return -1;
	        if (p1.length > p2.length)
	            return 1;
	        return 0;
	    };
	    return Path;
	}());
	/**
	 * A slash-separated path for navigating resources (documents and collections)
	 * within Firestore.
	 */
	var ResourcePath = /** @class */ (function (_super) {
	    tslib_1.__extends(ResourcePath, _super);
	    function ResourcePath() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ResourcePath.prototype.canonicalString = function () {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        return this.toArray().join('/');
	    };
	    ResourcePath.prototype.toString = function () {
	        return this.canonicalString();
	    };
	    /**
	     * Creates a resource path from the given slash-delimited string.
	     */
	    ResourcePath.fromString = function (path) {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        if (path.indexOf('//') >= 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid path (" + path + "). Paths must not contain // in them.");
	        }
	        // We may still have an empty segment at the beginning or end if they had a
	        // leading or trailing slash (which we allow).
	        var segments = path.split('/').filter(function (segment) { return segment.length > 0; });
	        return new ResourcePath(segments);
	    };
	    ResourcePath.EMPTY_PATH = new ResourcePath([]);
	    return ResourcePath;
	}(Path));
	var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
	/** A dot-separated path for navigating sub-objects within a document. */
	var FieldPath = /** @class */ (function (_super) {
	    tslib_1.__extends(FieldPath, _super);
	    function FieldPath() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Returns true if the string could be used as a segment in a field path
	     * without escaping.
	     */
	    FieldPath.isValidIdentifier = function (segment) {
	        return identifierRegExp.test(segment);
	    };
	    FieldPath.prototype.canonicalString = function () {
	        return this.toArray()
	            .map(function (str) {
	            str = str.replace('\\', '\\\\').replace('`', '\\`');
	            if (!FieldPath.isValidIdentifier(str)) {
	                str = '`' + str + '`';
	            }
	            return str;
	        })
	            .join('.');
	    };
	    FieldPath.prototype.toString = function () {
	        return this.canonicalString();
	    };
	    /**
	     * Returns true if this field references the key of a document.
	     */
	    FieldPath.prototype.isKeyField = function () {
	        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
	    };
	    /**
	     * The field designating the key of a document.
	     */
	    FieldPath.keyField = function () {
	        return new FieldPath([DOCUMENT_KEY_NAME]);
	    };
	    /**
	     * Parses a field string from the given server-formatted string.
	     *
	     * - Splitting the empty string is not allowed (for now at least).
	     * - Empty segments within the string (e.g. if there are two consecutive
	     *   separators) are not allowed.
	     *
	     * TODO(b/37244157): we should make this more strict. Right now, it allows
	     * non-identifier path components, even if they aren't escaped.
	     */
	    FieldPath.fromServerFormat = function (path) {
	        var segments = [];
	        var current = '';
	        var i = 0;
	        var addCurrentSegment = function () {
	            if (current.length === 0) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, begin " +
	                    "with '.', end with '.', or contain '..'");
	            }
	            segments.push(current);
	            current = '';
	        };
	        var inBackticks = false;
	        while (i < path.length) {
	            var c = path[i];
	            if (c === '\\') {
	                if (i + 1 === path.length) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);
	                }
	                var next = path[i + 1];
	                if (!(next === '\\' || next === '.' || next === '`')) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);
	                }
	                current += next;
	                i += 2;
	            }
	            else if (c === '`') {
	                inBackticks = !inBackticks;
	                i++;
	            }
	            else if (c === '.' && !inBackticks) {
	                addCurrentSegment();
	                i++;
	            }
	            else {
	                current += c;
	                i++;
	            }
	        }
	        addCurrentSegment();
	        if (inBackticks) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);
	        }
	        return new FieldPath(segments);
	    };
	    FieldPath.EMPTY_PATH = new FieldPath([]);
	    return FieldPath;
	}(Path));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DocumentKey = /** @class */ (function () {
	    function DocumentKey(path) {
	        this.path = path;
	        assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' +
	            path.toArray().join('/'));
	    }
	    DocumentKey.prototype.isEqual = function (other) {
	        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);
	    };
	    DocumentKey.prototype.toString = function () {
	        return this.path.toString();
	    };
	    DocumentKey.comparator = function (k1, k2) {
	        return ResourcePath.comparator(k1.path, k2.path);
	    };
	    DocumentKey.isDocumentKey = function (path) {
	        return path.length % 2 === 0;
	    };
	    /**
	     * Creates and returns a new document key with the given segments.
	     *
	     * @param path The segments of the path to the document
	     * @return A new instance of DocumentKey
	     */
	    DocumentKey.fromSegments = function (segments) {
	        return new DocumentKey(new ResourcePath(segments.slice()));
	    };
	    /**
	     * Creates and returns a new document key using '/' to split the string into
	     * segments.
	     *
	     * @param path The slash-separated path string to the document
	     * @return A new instance of DocumentKey
	     */
	    DocumentKey.fromPathString = function (path) {
	        return new DocumentKey(ResourcePath.fromString(path));
	    };
	    DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));
	    return DocumentKey;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The result of a lookup for a given path may be an existing document or a
	 * marker that this document does not exist at a given version.
	 */
	var MaybeDocument = /** @class */ (function () {
	    function MaybeDocument(key, version) {
	        this.key = key;
	        this.version = version;
	    }
	    MaybeDocument.compareByKey = function (d1, d2) {
	        return DocumentKey.comparator(d1.key, d2.key);
	    };
	    return MaybeDocument;
	}());
	/**
	 * Represents a document in Firestore with a key, version, data and whether the
	 * data has local mutations applied to it.
	 */
	var Document = /** @class */ (function (_super) {
	    tslib_1.__extends(Document, _super);
	    function Document(key, version, data, options) {
	        var _this = _super.call(this, key, version) || this;
	        _this.data = data;
	        _this.hasLocalMutations = !!options.hasLocalMutations;
	        _this.hasCommittedMutations = !!options.hasCommittedMutations;
	        return _this;
	    }
	    Document.prototype.field = function (path) {
	        return this.data.field(path);
	    };
	    Document.prototype.fieldValue = function (path) {
	        var field = this.field(path);
	        return field ? field.value() : undefined;
	    };
	    Document.prototype.value = function () {
	        return this.data.value();
	    };
	    Document.prototype.isEqual = function (other) {
	        return (other instanceof Document &&
	            this.key.isEqual(other.key) &&
	            this.version.isEqual(other.version) &&
	            this.data.isEqual(other.data) &&
	            this.hasLocalMutations === other.hasLocalMutations &&
	            this.hasCommittedMutations === other.hasCommittedMutations);
	    };
	    Document.prototype.toString = function () {
	        return ("Document(" + this.key + ", " + this.version + ", " + this.data.toString() + ", " +
	            ("{hasLocalMutations: " + this.hasLocalMutations + "}), ") +
	            ("{hasCommittedMutations: " + this.hasCommittedMutations + "})"));
	    };
	    Object.defineProperty(Document.prototype, "hasPendingWrites", {
	        get: function () {
	            return this.hasLocalMutations || this.hasCommittedMutations;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Document.compareByField = function (field, d1, d2) {
	        var v1 = d1.field(field);
	        var v2 = d2.field(field);
	        if (v1 !== undefined && v2 !== undefined) {
	            return v1.compareTo(v2);
	        }
	        else {
	            return fail("Trying to compare documents on fields that don't exist");
	        }
	    };
	    return Document;
	}(MaybeDocument));
	/**
	 * A class representing a deleted document.
	 * Version is set to 0 if we don't point to any specific time, otherwise it
	 * denotes time we know it didn't exist at.
	 */
	var NoDocument = /** @class */ (function (_super) {
	    tslib_1.__extends(NoDocument, _super);
	    function NoDocument(key, version, options) {
	        var _this = _super.call(this, key, version) || this;
	        _this.hasCommittedMutations = !!(options && options.hasCommittedMutations);
	        return _this;
	    }
	    NoDocument.prototype.toString = function () {
	        return "NoDocument(" + this.key + ", " + this.version + ")";
	    };
	    Object.defineProperty(NoDocument.prototype, "hasPendingWrites", {
	        get: function () {
	            return this.hasCommittedMutations;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NoDocument.prototype.isEqual = function (other) {
	        return (other instanceof NoDocument &&
	            other.hasCommittedMutations === this.hasCommittedMutations &&
	            other.version.isEqual(this.version) &&
	            other.key.isEqual(this.key));
	    };
	    return NoDocument;
	}(MaybeDocument));
	/**
	 * A class representing an existing document whose data is unknown (e.g. a
	 * document that was updated without a known base document).
	 */
	var UnknownDocument = /** @class */ (function (_super) {
	    tslib_1.__extends(UnknownDocument, _super);
	    function UnknownDocument(key, version) {
	        return _super.call(this, key, version) || this;
	    }
	    UnknownDocument.prototype.toString = function () {
	        return "UnknownDocument(" + this.key + ", " + this.version + ")";
	    };
	    Object.defineProperty(UnknownDocument.prototype, "hasPendingWrites", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    UnknownDocument.prototype.isEqual = function (other) {
	        return (other instanceof UnknownDocument &&
	            other.version.isEqual(this.version) &&
	            other.key.isEqual(this.key));
	    };
	    return UnknownDocument;
	}(MaybeDocument));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// An immutable sorted map implementation, based on a Left-leaning Red-Black
	// tree.
	var SortedMap = /** @class */ (function () {
	    function SortedMap(comparator, root) {
	        this.comparator = comparator;
	        this.root = root ? root : LLRBNode.EMPTY;
	    }
	    // Returns a copy of the map, with the specified key/value added or replaced.
	    SortedMap.prototype.insert = function (key, value) {
	        return new SortedMap(this.comparator, this.root
	            .insert(key, value, this.comparator)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    // Returns a copy of the map, with the specified key removed.
	    SortedMap.prototype.remove = function (key) {
	        return new SortedMap(this.comparator, this.root
	            .remove(key, this.comparator)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    // Returns the value of the node with the given key, or null.
	    SortedMap.prototype.get = function (key) {
	        var node = this.root;
	        while (!node.isEmpty()) {
	            var cmp = this.comparator(key, node.key);
	            if (cmp === 0) {
	                return node.value;
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else if (cmp > 0) {
	                node = node.right;
	            }
	        }
	        return null;
	    };
	    // Returns the index of the element in this sorted map, or -1 if it doesn't
	    // exist.
	    SortedMap.prototype.indexOf = function (key) {
	        // Number of nodes that were pruned when descending right
	        var prunedNodes = 0;
	        var node = this.root;
	        while (!node.isEmpty()) {
	            var cmp = this.comparator(key, node.key);
	            if (cmp === 0) {
	                return prunedNodes + node.left.size;
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else {
	                // Count all nodes left of the node plus the node itself
	                prunedNodes += node.left.size + 1;
	                node = node.right;
	            }
	        }
	        // Node not found
	        return -1;
	    };
	    SortedMap.prototype.isEmpty = function () {
	        return this.root.isEmpty();
	    };
	    Object.defineProperty(SortedMap.prototype, "size", {
	        // Returns the total number of nodes in the map.
	        get: function () {
	            return this.root.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // Returns the minimum key in the map.
	    SortedMap.prototype.minKey = function () {
	        return this.root.minKey();
	    };
	    // Returns the maximum key in the map.
	    SortedMap.prototype.maxKey = function () {
	        return this.root.maxKey();
	    };
	    // Traverses the map in key order and calls the specified action function
	    // for each key/value pair. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    SortedMap.prototype.inorderTraversal = function (action) {
	        return this.root.inorderTraversal(action);
	    };
	    SortedMap.prototype.forEach = function (fn) {
	        this.inorderTraversal(function (k, v) {
	            fn(k, v);
	            return false;
	        });
	    };
	    // Traverses the map in reverse key order and calls the specified action
	    // function for each key/value pair. If action returns true, traversal is
	    // aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    SortedMap.prototype.reverseTraversal = function (action) {
	        return this.root.reverseTraversal(action);
	    };
	    // Returns an iterator over the SortedMap.
	    SortedMap.prototype.getIterator = function () {
	        return new SortedMapIterator(this.root, null, this.comparator, false);
	    };
	    SortedMap.prototype.getIteratorFrom = function (key) {
	        return new SortedMapIterator(this.root, key, this.comparator, false);
	    };
	    SortedMap.prototype.getReverseIterator = function () {
	        return new SortedMapIterator(this.root, null, this.comparator, true);
	    };
	    SortedMap.prototype.getReverseIteratorFrom = function (key) {
	        return new SortedMapIterator(this.root, key, this.comparator, true);
	    };
	    return SortedMap;
	}()); // end SortedMap
	// An iterator over an LLRBNode.
	var SortedMapIterator = /** @class */ (function () {
	    function SortedMapIterator(node, startKey, comparator, isReverse) {
	        this.isReverse = isReverse;
	        this.nodeStack = [];
	        var cmp = 1;
	        while (!node.isEmpty()) {
	            cmp = startKey ? comparator(node.key, startKey) : 1;
	            // flip the comparison if we're going in reverse
	            if (isReverse)
	                cmp *= -1;
	            if (cmp < 0) {
	                // This node is less than our start key. ignore it
	                if (this.isReverse) {
	                    node = node.left;
	                }
	                else {
	                    node = node.right;
	                }
	            }
	            else if (cmp === 0) {
	                // This node is exactly equal to our start key. Push it on the stack,
	                // but stop iterating;
	                this.nodeStack.push(node);
	                break;
	            }
	            else {
	                // This node is greater than our start key, add it to the stack and move
	                // to the next one
	                this.nodeStack.push(node);
	                if (this.isReverse) {
	                    node = node.right;
	                }
	                else {
	                    node = node.left;
	                }
	            }
	        }
	    }
	    SortedMapIterator.prototype.getNext = function () {
	        assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');
	        var node = this.nodeStack.pop();
	        var result = { key: node.key, value: node.value };
	        if (this.isReverse) {
	            node = node.left;
	            while (!node.isEmpty()) {
	                this.nodeStack.push(node);
	                node = node.right;
	            }
	        }
	        else {
	            node = node.right;
	            while (!node.isEmpty()) {
	                this.nodeStack.push(node);
	                node = node.left;
	            }
	        }
	        return result;
	    };
	    SortedMapIterator.prototype.hasNext = function () {
	        return this.nodeStack.length > 0;
	    };
	    SortedMapIterator.prototype.peek = function () {
	        if (this.nodeStack.length === 0)
	            return null;
	        var node = this.nodeStack[this.nodeStack.length - 1];
	        return { key: node.key, value: node.value };
	    };
	    return SortedMapIterator;
	}()); // end SortedMapIterator
	// Represents a node in a Left-leaning Red-Black tree.
	var LLRBNode = /** @class */ (function () {
	    function LLRBNode(key, value, color, left, right) {
	        this.key = key;
	        this.value = value;
	        this.color = color != null ? color : LLRBNode.RED;
	        this.left = left != null ? left : LLRBNode.EMPTY;
	        this.right = right != null ? right : LLRBNode.EMPTY;
	        this.size = this.left.size + 1 + this.right.size;
	    }
	    // Returns a copy of the current node, optionally replacing pieces of it.
	    LLRBNode.prototype.copy = function (key, value, color, left, right) {
	        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
	    };
	    LLRBNode.prototype.isEmpty = function () {
	        return false;
	    };
	    // Traverses the tree in key order and calls the specified action function
	    // for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    LLRBNode.prototype.inorderTraversal = function (action) {
	        return (this.left.inorderTraversal(action) ||
	            action(this.key, this.value) ||
	            this.right.inorderTraversal(action));
	    };
	    // Traverses the tree in reverse key order and calls the specified action
	    // function for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    LLRBNode.prototype.reverseTraversal = function (action) {
	        return (this.right.reverseTraversal(action) ||
	            action(this.key, this.value) ||
	            this.left.reverseTraversal(action));
	    };
	    // Returns the minimum node in the tree.
	    LLRBNode.prototype.min = function () {
	        if (this.left.isEmpty()) {
	            return this;
	        }
	        else {
	            return this.left.min();
	        }
	    };
	    // Returns the maximum key in the tree.
	    LLRBNode.prototype.minKey = function () {
	        return this.min().key;
	    };
	    // Returns the maximum key in the tree.
	    LLRBNode.prototype.maxKey = function () {
	        if (this.right.isEmpty()) {
	            return this.key;
	        }
	        else {
	            return this.right.maxKey();
	        }
	    };
	    // Returns new tree, with the key/value added.
	    LLRBNode.prototype.insert = function (key, value, comparator) {
	        var n = this;
	        var cmp = comparator(key, n.key);
	        if (cmp < 0) {
	            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
	        }
	        else if (cmp === 0) {
	            n = n.copy(null, value, null, null, null);
	        }
	        else {
	            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
	        }
	        return n.fixUp();
	    };
	    LLRBNode.prototype.removeMin = function () {
	        if (this.left.isEmpty()) {
	            return LLRBNode.EMPTY;
	        }
	        var n = this;
	        if (!n.left.isRed() && !n.left.left.isRed())
	            n = n.moveRedLeft();
	        n = n.copy(null, null, null, n.left.removeMin(), null);
	        return n.fixUp();
	    };
	    // Returns new tree, with the specified item removed.
	    LLRBNode.prototype.remove = function (key, comparator) {
	        var smallest;
	        var n = this;
	        if (comparator(key, n.key) < 0) {
	            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
	                n = n.moveRedLeft();
	            }
	            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
	        }
	        else {
	            if (n.left.isRed())
	                n = n.rotateRight();
	            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
	                n = n.moveRedRight();
	            }
	            if (comparator(key, n.key) === 0) {
	                if (n.right.isEmpty()) {
	                    return LLRBNode.EMPTY;
	                }
	                else {
	                    smallest = n.right.min();
	                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
	                }
	            }
	            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
	        }
	        return n.fixUp();
	    };
	    LLRBNode.prototype.isRed = function () {
	        return this.color;
	    };
	    // Returns new tree after performing any needed rotations.
	    LLRBNode.prototype.fixUp = function () {
	        var n = this;
	        if (n.right.isRed() && !n.left.isRed())
	            n = n.rotateLeft();
	        if (n.left.isRed() && n.left.left.isRed())
	            n = n.rotateRight();
	        if (n.left.isRed() && n.right.isRed())
	            n = n.colorFlip();
	        return n;
	    };
	    LLRBNode.prototype.moveRedLeft = function () {
	        var n = this.colorFlip();
	        if (n.right.left.isRed()) {
	            n = n.copy(null, null, null, null, n.right.rotateRight());
	            n = n.rotateLeft();
	            n = n.colorFlip();
	        }
	        return n;
	    };
	    LLRBNode.prototype.moveRedRight = function () {
	        var n = this.colorFlip();
	        if (n.left.left.isRed()) {
	            n = n.rotateRight();
	            n = n.colorFlip();
	        }
	        return n;
	    };
	    LLRBNode.prototype.rotateLeft = function () {
	        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, nl, null);
	    };
	    LLRBNode.prototype.rotateRight = function () {
	        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, nr);
	    };
	    LLRBNode.prototype.colorFlip = function () {
	        var left = this.left.copy(null, null, !this.left.color, null, null);
	        var right = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, left, right);
	    };
	    // For testing.
	    LLRBNode.prototype.checkMaxDepth = function () {
	        var blackDepth = this.check();
	        if (Math.pow(2.0, blackDepth) <= this.size + 1) {
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    // In a balanced RB tree, the black-depth (number of black nodes) from root to
	    // leaves is equal on both sides.  This function verifies that or asserts.
	    LLRBNode.prototype.check = function () {
	        if (this.isRed() && this.left.isRed()) {
	            throw fail('Red node has red child(' + this.key + ',' + this.value + ')');
	        }
	        if (this.right.isRed()) {
	            throw fail('Right child of (' + this.key + ',' + this.value + ') is red');
	        }
	        var blackDepth = this.left.check();
	        if (blackDepth !== this.right.check()) {
	            throw fail('Black depths differ');
	        }
	        else {
	            return blackDepth + (this.isRed() ? 0 : 1);
	        }
	    };
	    // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.
	    LLRBNode.EMPTY = null;
	    LLRBNode.RED = true;
	    LLRBNode.BLACK = false;
	    return LLRBNode;
	}()); // end LLRBNode
	// Represents an empty node (a leaf node in the Red-Black Tree).
	var LLRBEmptyNode = /** @class */ (function () {
	    function LLRBEmptyNode() {
	        this.size = 0;
	    }
	    // Returns a copy of the current node.
	    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
	        return this;
	    };
	    // Returns a copy of the tree, with the specified key/value added.
	    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
	        return new LLRBNode(key, value);
	    };
	    // Returns a copy of the tree, with the specified key removed.
	    LLRBEmptyNode.prototype.remove = function (key, comparator) {
	        return this;
	    };
	    LLRBEmptyNode.prototype.isEmpty = function () {
	        return true;
	    };
	    LLRBEmptyNode.prototype.inorderTraversal = function (action) {
	        return false;
	    };
	    LLRBEmptyNode.prototype.reverseTraversal = function (action) {
	        return false;
	    };
	    LLRBEmptyNode.prototype.minKey = function () {
	        return null;
	    };
	    LLRBEmptyNode.prototype.maxKey = function () {
	        return null;
	    };
	    LLRBEmptyNode.prototype.isRed = function () {
	        return false;
	    };
	    // For testing.
	    LLRBEmptyNode.prototype.checkMaxDepth = function () {
	        return true;
	    };
	    LLRBEmptyNode.prototype.check = function () {
	        return 0;
	    };
	    return LLRBEmptyNode;
	}()); // end LLRBEmptyNode
	LLRBNode.EMPTY = new LLRBEmptyNode();

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var TypeOrder;
	(function (TypeOrder) {
	    // This order is defined by the backend.
	    TypeOrder[TypeOrder["NullValue"] = 0] = "NullValue";
	    TypeOrder[TypeOrder["BooleanValue"] = 1] = "BooleanValue";
	    TypeOrder[TypeOrder["NumberValue"] = 2] = "NumberValue";
	    TypeOrder[TypeOrder["TimestampValue"] = 3] = "TimestampValue";
	    TypeOrder[TypeOrder["StringValue"] = 4] = "StringValue";
	    TypeOrder[TypeOrder["BlobValue"] = 5] = "BlobValue";
	    TypeOrder[TypeOrder["RefValue"] = 6] = "RefValue";
	    TypeOrder[TypeOrder["GeoPointValue"] = 7] = "GeoPointValue";
	    TypeOrder[TypeOrder["ArrayValue"] = 8] = "ArrayValue";
	    TypeOrder[TypeOrder["ObjectValue"] = 9] = "ObjectValue";
	})(TypeOrder || (TypeOrder = {}));
	/** Defines the return value for pending server timestamps. */
	var ServerTimestampBehavior;
	(function (ServerTimestampBehavior) {
	    ServerTimestampBehavior[ServerTimestampBehavior["Default"] = 0] = "Default";
	    ServerTimestampBehavior[ServerTimestampBehavior["Estimate"] = 1] = "Estimate";
	    ServerTimestampBehavior[ServerTimestampBehavior["Previous"] = 2] = "Previous";
	})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));
	/** Holds properties that define field value deserialization options. */
	var FieldValueOptions = /** @class */ (function () {
	    function FieldValueOptions(serverTimestampBehavior, timestampsInSnapshots) {
	        this.serverTimestampBehavior = serverTimestampBehavior;
	        this.timestampsInSnapshots = timestampsInSnapshots;
	    }
	    FieldValueOptions.fromSnapshotOptions = function (options, timestampsInSnapshots) {
	        switch (options.serverTimestamps) {
	            case 'estimate':
	                return new FieldValueOptions(ServerTimestampBehavior.Estimate, timestampsInSnapshots);
	            case 'previous':
	                return new FieldValueOptions(ServerTimestampBehavior.Previous, timestampsInSnapshots);
	            case 'none': // Fall-through intended.
	            case undefined:
	                return new FieldValueOptions(ServerTimestampBehavior.Default, timestampsInSnapshots);
	            default:
	                return fail('fromSnapshotOptions() called with invalid options.');
	        }
	    };
	    return FieldValueOptions;
	}());
	/**
	 * A field value represents a datatype as stored by Firestore.
	 */
	var FieldValue = /** @class */ (function () {
	    function FieldValue() {
	    }
	    FieldValue.prototype.toString = function () {
	        var val = this.value();
	        return val === null ? 'null' : val.toString();
	    };
	    FieldValue.prototype.defaultCompareTo = function (other) {
	        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');
	        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);
	        return cmp;
	    };
	    return FieldValue;
	}());
	var NullValue = /** @class */ (function (_super) {
	    tslib_1.__extends(NullValue, _super);
	    function NullValue() {
	        var _this = _super.call(this) || this;
	        _this.typeOrder = TypeOrder.NullValue;
	        // internalValue is unused but we add it to work around
	        // https://github.com/Microsoft/TypeScript/issues/15585
	        _this.internalValue = null;
	        return _this;
	    }
	    NullValue.prototype.value = function (options) {
	        return null;
	    };
	    NullValue.prototype.isEqual = function (other) {
	        return other instanceof NullValue;
	    };
	    NullValue.prototype.compareTo = function (other) {
	        if (other instanceof NullValue) {
	            return 0;
	        }
	        return this.defaultCompareTo(other);
	    };
	    NullValue.INSTANCE = new NullValue();
	    return NullValue;
	}(FieldValue));
	var BooleanValue = /** @class */ (function (_super) {
	    tslib_1.__extends(BooleanValue, _super);
	    function BooleanValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.BooleanValue;
	        return _this;
	    }
	    BooleanValue.prototype.value = function (options) {
	        return this.internalValue;
	    };
	    BooleanValue.prototype.isEqual = function (other) {
	        return (other instanceof BooleanValue &&
	            this.internalValue === other.internalValue);
	    };
	    BooleanValue.prototype.compareTo = function (other) {
	        if (other instanceof BooleanValue) {
	            return primitiveComparator(this, other);
	        }
	        return this.defaultCompareTo(other);
	    };
	    BooleanValue.of = function (value) {
	        return value ? BooleanValue.TRUE : BooleanValue.FALSE;
	    };
	    BooleanValue.TRUE = new BooleanValue(true);
	    BooleanValue.FALSE = new BooleanValue(false);
	    return BooleanValue;
	}(FieldValue));
	/** Base class for IntegerValue and DoubleValue. */
	var NumberValue = /** @class */ (function (_super) {
	    tslib_1.__extends(NumberValue, _super);
	    function NumberValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.NumberValue;
	        return _this;
	    }
	    NumberValue.prototype.value = function (options) {
	        return this.internalValue;
	    };
	    NumberValue.prototype.compareTo = function (other) {
	        if (other instanceof NumberValue) {
	            return numericComparator(this.internalValue, other.internalValue);
	        }
	        return this.defaultCompareTo(other);
	    };
	    return NumberValue;
	}(FieldValue));
	/** Utility function to compare doubles (using Firestore semantics for NaN). */
	function numericComparator(left, right) {
	    if (left < right) {
	        return -1;
	    }
	    else if (left > right) {
	        return 1;
	    }
	    else if (left === right) {
	        return 0;
	    }
	    else {
	        // one or both are NaN.
	        if (isNaN(left)) {
	            return isNaN(right) ? 0 : -1;
	        }
	        else {
	            return 1;
	        }
	    }
	}
	/**
	 * Utility function to check numbers for equality using Firestore semantics
	 * (NaN === NaN, -0.0 !== 0.0).
	 */
	function numericEquals(left, right) {
	    // Implemented based on Object.is() polyfill from
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	    if (left === right) {
	        // +0 != -0
	        return left !== 0 || 1 / left === 1 / right;
	    }
	    else {
	        // NaN == NaN
	        return left !== left && right !== right;
	    }
	}
	var IntegerValue = /** @class */ (function (_super) {
	    tslib_1.__extends(IntegerValue, _super);
	    function IntegerValue(internalValue) {
	        return _super.call(this, internalValue) || this;
	    }
	    IntegerValue.prototype.isEqual = function (other) {
	        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
	        // but that doesn't make them equal via isEqual().
	        if (other instanceof IntegerValue) {
	            return numericEquals(this.internalValue, other.internalValue);
	        }
	        else {
	            return false;
	        }
	    };
	    return IntegerValue;
	}(NumberValue));
	var DoubleValue = /** @class */ (function (_super) {
	    tslib_1.__extends(DoubleValue, _super);
	    function DoubleValue(internalValue) {
	        var _this = _super.call(this, internalValue) || this;
	        _this.internalValue = internalValue;
	        return _this;
	    }
	    DoubleValue.prototype.isEqual = function (other) {
	        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
	        // but that doesn't make them equal via isEqual().
	        if (other instanceof DoubleValue) {
	            return numericEquals(this.internalValue, other.internalValue);
	        }
	        else {
	            return false;
	        }
	    };
	    DoubleValue.NAN = new DoubleValue(NaN);
	    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);
	    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);
	    return DoubleValue;
	}(NumberValue));
	// TODO(b/37267885): Add truncation support
	var StringValue = /** @class */ (function (_super) {
	    tslib_1.__extends(StringValue, _super);
	    function StringValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.StringValue;
	        return _this;
	    }
	    StringValue.prototype.value = function (options) {
	        return this.internalValue;
	    };
	    StringValue.prototype.isEqual = function (other) {
	        return (other instanceof StringValue && this.internalValue === other.internalValue);
	    };
	    StringValue.prototype.compareTo = function (other) {
	        if (other instanceof StringValue) {
	            return primitiveComparator(this.internalValue, other.internalValue);
	        }
	        return this.defaultCompareTo(other);
	    };
	    return StringValue;
	}(FieldValue));
	var TimestampValue = /** @class */ (function (_super) {
	    tslib_1.__extends(TimestampValue, _super);
	    function TimestampValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.TimestampValue;
	        return _this;
	    }
	    TimestampValue.prototype.value = function (options) {
	        if (options && options.timestampsInSnapshots) {
	            return this.internalValue;
	        }
	        else {
	            return this.internalValue.toDate();
	        }
	    };
	    TimestampValue.prototype.isEqual = function (other) {
	        return (other instanceof TimestampValue &&
	            this.internalValue.isEqual(other.internalValue));
	    };
	    TimestampValue.prototype.compareTo = function (other) {
	        if (other instanceof TimestampValue) {
	            return this.internalValue._compareTo(other.internalValue);
	        }
	        else if (other instanceof ServerTimestampValue) {
	            // Concrete timestamps come before server timestamps.
	            return -1;
	        }
	        else {
	            return this.defaultCompareTo(other);
	        }
	    };
	    return TimestampValue;
	}(FieldValue));
	/**
	 * Represents a locally-applied ServerTimestamp.
	 *
	 * Notes:
	 * - ServerTimestampValue instances are created as the result of applying a
	 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
	 *   the local view of a document. Therefore they do not need to be parsed or
	 *   serialized.
	 * - When evaluated locally (e.g. for snapshot.data()), they by default
	 *   evaluate to `null`. This behavior can be configured by passing custom
	 *   FieldValueOptions to value().
	 * - With respect to other ServerTimestampValues, they sort by their
	 *   localWriteTime.
	 */
	var ServerTimestampValue = /** @class */ (function (_super) {
	    tslib_1.__extends(ServerTimestampValue, _super);
	    function ServerTimestampValue(localWriteTime, previousValue) {
	        var _this = _super.call(this) || this;
	        _this.localWriteTime = localWriteTime;
	        _this.previousValue = previousValue;
	        _this.typeOrder = TypeOrder.TimestampValue;
	        return _this;
	    }
	    ServerTimestampValue.prototype.value = function (options) {
	        if (options &&
	            options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {
	            return new TimestampValue(this.localWriteTime).value(options);
	        }
	        else if (options &&
	            options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {
	            return this.previousValue ? this.previousValue.value(options) : null;
	        }
	        else {
	            return null;
	        }
	    };
	    ServerTimestampValue.prototype.isEqual = function (other) {
	        return (other instanceof ServerTimestampValue &&
	            this.localWriteTime.isEqual(other.localWriteTime));
	    };
	    ServerTimestampValue.prototype.compareTo = function (other) {
	        if (other instanceof ServerTimestampValue) {
	            return this.localWriteTime._compareTo(other.localWriteTime);
	        }
	        else if (other instanceof TimestampValue) {
	            // Server timestamps come after all concrete timestamps.
	            return 1;
	        }
	        else {
	            return this.defaultCompareTo(other);
	        }
	    };
	    ServerTimestampValue.prototype.toString = function () {
	        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';
	    };
	    return ServerTimestampValue;
	}(FieldValue));
	var BlobValue = /** @class */ (function (_super) {
	    tslib_1.__extends(BlobValue, _super);
	    function BlobValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.BlobValue;
	        return _this;
	    }
	    BlobValue.prototype.value = function (options) {
	        return this.internalValue;
	    };
	    BlobValue.prototype.isEqual = function (other) {
	        return (other instanceof BlobValue &&
	            this.internalValue.isEqual(other.internalValue));
	    };
	    BlobValue.prototype.compareTo = function (other) {
	        if (other instanceof BlobValue) {
	            return this.internalValue._compareTo(other.internalValue);
	        }
	        return this.defaultCompareTo(other);
	    };
	    return BlobValue;
	}(FieldValue));
	var RefValue = /** @class */ (function (_super) {
	    tslib_1.__extends(RefValue, _super);
	    function RefValue(databaseId, key) {
	        var _this = _super.call(this) || this;
	        _this.databaseId = databaseId;
	        _this.key = key;
	        _this.typeOrder = TypeOrder.RefValue;
	        return _this;
	    }
	    RefValue.prototype.value = function (options) {
	        return this.key;
	    };
	    RefValue.prototype.isEqual = function (other) {
	        if (other instanceof RefValue) {
	            return (this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId));
	        }
	        else {
	            return false;
	        }
	    };
	    RefValue.prototype.compareTo = function (other) {
	        if (other instanceof RefValue) {
	            var cmp = this.databaseId.compareTo(other.databaseId);
	            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);
	        }
	        return this.defaultCompareTo(other);
	    };
	    return RefValue;
	}(FieldValue));
	var GeoPointValue = /** @class */ (function (_super) {
	    tslib_1.__extends(GeoPointValue, _super);
	    function GeoPointValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.GeoPointValue;
	        return _this;
	    }
	    GeoPointValue.prototype.value = function (options) {
	        return this.internalValue;
	    };
	    GeoPointValue.prototype.isEqual = function (other) {
	        return (other instanceof GeoPointValue &&
	            this.internalValue.isEqual(other.internalValue));
	    };
	    GeoPointValue.prototype.compareTo = function (other) {
	        if (other instanceof GeoPointValue) {
	            return this.internalValue._compareTo(other.internalValue);
	        }
	        return this.defaultCompareTo(other);
	    };
	    return GeoPointValue;
	}(FieldValue));
	var ObjectValue = /** @class */ (function (_super) {
	    tslib_1.__extends(ObjectValue, _super);
	    function ObjectValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.ObjectValue;
	        return _this;
	    }
	    ObjectValue.prototype.value = function (options) {
	        var result = {};
	        this.internalValue.inorderTraversal(function (key, val) {
	            result[key] = val.value(options);
	        });
	        return result;
	    };
	    ObjectValue.prototype.forEach = function (action) {
	        this.internalValue.inorderTraversal(action);
	    };
	    ObjectValue.prototype.isEqual = function (other) {
	        if (other instanceof ObjectValue) {
	            var it1 = this.internalValue.getIterator();
	            var it2 = other.internalValue.getIterator();
	            while (it1.hasNext() && it2.hasNext()) {
	                var next1 = it1.getNext();
	                var next2 = it2.getNext();
	                if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {
	                    return false;
	                }
	            }
	            return !it1.hasNext() && !it2.hasNext();
	        }
	        return false;
	    };
	    ObjectValue.prototype.compareTo = function (other) {
	        if (other instanceof ObjectValue) {
	            var it1 = this.internalValue.getIterator();
	            var it2 = other.internalValue.getIterator();
	            while (it1.hasNext() && it2.hasNext()) {
	                var next1 = it1.getNext();
	                var next2 = it2.getNext();
	                var cmp = primitiveComparator(next1.key, next2.key) ||
	                    next1.value.compareTo(next2.value);
	                if (cmp) {
	                    return cmp;
	                }
	            }
	            // Only equal if both iterators are exhausted
	            return primitiveComparator(it1.hasNext(), it2.hasNext());
	        }
	        else {
	            return this.defaultCompareTo(other);
	        }
	    };
	    ObjectValue.prototype.set = function (path, to) {
	        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');
	        if (path.length === 1) {
	            return this.setChild(path.firstSegment(), to);
	        }
	        else {
	            var child = this.child(path.firstSegment());
	            if (!(child instanceof ObjectValue)) {
	                child = ObjectValue.EMPTY;
	            }
	            var newChild = child.set(path.popFirst(), to);
	            return this.setChild(path.firstSegment(), newChild);
	        }
	    };
	    ObjectValue.prototype.delete = function (path) {
	        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');
	        if (path.length === 1) {
	            return new ObjectValue(this.internalValue.remove(path.firstSegment()));
	        }
	        else {
	            // nested field
	            var child = this.child(path.firstSegment());
	            if (child instanceof ObjectValue) {
	                var newChild = child.delete(path.popFirst());
	                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));
	            }
	            else {
	                // Don't actually change a primitive value to an object for a delete
	                return this;
	            }
	        }
	    };
	    ObjectValue.prototype.contains = function (path) {
	        return this.field(path) !== undefined;
	    };
	    ObjectValue.prototype.field = function (path) {
	        assert(!path.isEmpty(), "Can't get field of empty path");
	        var field = this;
	        path.forEach(function (pathSegment) {
	            if (field instanceof ObjectValue) {
	                field = field.internalValue.get(pathSegment) || undefined;
	            }
	            else {
	                field = undefined;
	            }
	        });
	        return field;
	    };
	    ObjectValue.prototype.toString = function () {
	        return JSON.stringify(this.value());
	    };
	    ObjectValue.prototype.child = function (childName) {
	        return this.internalValue.get(childName) || undefined;
	    };
	    ObjectValue.prototype.setChild = function (childName, value) {
	        return new ObjectValue(this.internalValue.insert(childName, value));
	    };
	    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));
	    return ObjectValue;
	}(FieldValue));
	var ArrayValue = /** @class */ (function (_super) {
	    tslib_1.__extends(ArrayValue, _super);
	    function ArrayValue(internalValue) {
	        var _this = _super.call(this) || this;
	        _this.internalValue = internalValue;
	        _this.typeOrder = TypeOrder.ArrayValue;
	        return _this;
	    }
	    ArrayValue.prototype.value = function (options) {
	        return this.internalValue.map(function (v) { return v.value(options); });
	    };
	    ArrayValue.prototype.forEach = function (action) {
	        this.internalValue.forEach(action);
	    };
	    ArrayValue.prototype.isEqual = function (other) {
	        if (other instanceof ArrayValue) {
	            if (this.internalValue.length !== other.internalValue.length) {
	                return false;
	            }
	            for (var i = 0; i < this.internalValue.length; i++) {
	                if (!this.internalValue[i].isEqual(other.internalValue[i])) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    ArrayValue.prototype.compareTo = function (other) {
	        if (other instanceof ArrayValue) {
	            var minLength = Math.min(this.internalValue.length, other.internalValue.length);
	            for (var i = 0; i < minLength; i++) {
	                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);
	                if (cmp) {
	                    return cmp;
	                }
	            }
	            return primitiveComparator(this.internalValue.length, other.internalValue.length);
	        }
	        else {
	            return this.defaultCompareTo(other);
	        }
	    };
	    ArrayValue.prototype.toString = function () {
	        return JSON.stringify(this.value());
	    };
	    return ArrayValue;
	}(FieldValue));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Untyped Number alias we can use to check for ES6 methods / properties.
	// tslint:disable-next-line:no-any variable-name
	var NumberAsAny = Number;
	/**
	 * Minimum safe integer in Javascript because of floating point precision.
	 * Added to not rely on ES6 features.
	 */
	var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);
	/**
	 * Maximum safe integer in Javascript because of floating point precision.
	 * Added to not rely on ES6 features.
	 */
	var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
	/**
	 * Returns whether an number is an integer, uses native implementation if
	 * available.
	 * Added to not rely on ES6 features.
	 * @param value The value to test for being an integer
	 */
	var isInteger = NumberAsAny.isInteger ||
	    (function (value) {
	        return typeof value === 'number' &&
	            isFinite(value) &&
	            Math.floor(value) === value;
	    });
	/**
	 * Returns whether a variable is either undefined or null.
	 */
	function isNullOrUndefined(value) {
	    return value === null || value === undefined;
	}
	/**
	 * Returns whether a value is an integer and in the safe integer range
	 * @param value The value to test for being an integer and in the safe range
	 */
	function isSafeInteger(value) {
	    return (isInteger(value) &&
	        value <= MAX_SAFE_INTEGER &&
	        value >= MIN_SAFE_INTEGER);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Query = /** @class */ (function () {
	    function Query(path, explicitOrderBy, filters, limit, startAt, endAt) {
	        if (explicitOrderBy === void 0) { explicitOrderBy = []; }
	        if (filters === void 0) { filters = []; }
	        if (limit === void 0) { limit = null; }
	        if (startAt === void 0) { startAt = null; }
	        if (endAt === void 0) { endAt = null; }
	        this.path = path;
	        this.explicitOrderBy = explicitOrderBy;
	        this.filters = filters;
	        this.limit = limit;
	        this.startAt = startAt;
	        this.endAt = endAt;
	        this.memoizedCanonicalId = null;
	        this.memoizedOrderBy = null;
	        if (this.startAt) {
	            this.assertValidBound(this.startAt);
	        }
	        if (this.endAt) {
	            this.assertValidBound(this.endAt);
	        }
	    }
	    Query.atPath = function (path) {
	        return new Query(path);
	    };
	    Object.defineProperty(Query.prototype, "orderBy", {
	        get: function () {
	            if (this.memoizedOrderBy === null) {
	                var inequalityField = this.getInequalityFilterField();
	                var firstOrderByField = this.getFirstOrderByField();
	                if (inequalityField !== null && firstOrderByField === null) {
	                    // In order to implicitly add key ordering, we must also add the
	                    // inequality filter field for it to be a valid query.
	                    // Note that the default inequality field and key ordering is ascending.
	                    if (inequalityField.isKeyField()) {
	                        this.memoizedOrderBy = [KEY_ORDERING_ASC];
	                    }
	                    else {
	                        this.memoizedOrderBy = [
	                            new OrderBy(inequalityField),
	                            KEY_ORDERING_ASC
	                        ];
	                    }
	                }
	                else {
	                    assert(inequalityField === null ||
	                        (firstOrderByField !== null &&
	                            inequalityField.isEqual(firstOrderByField)), 'First orderBy should match inequality field.');
	                    this.memoizedOrderBy = [];
	                    var foundKeyOrdering = false;
	                    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
	                        var orderBy = _a[_i];
	                        this.memoizedOrderBy.push(orderBy);
	                        if (orderBy.field.isKeyField()) {
	                            foundKeyOrdering = true;
	                        }
	                    }
	                    if (!foundKeyOrdering) {
	                        // The order of the implicit key ordering always matches the last
	                        // explicit order by
	                        var lastDirection = this.explicitOrderBy.length > 0
	                            ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir
	                            : Direction.ASCENDING;
	                        this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING
	                            ? KEY_ORDERING_ASC
	                            : KEY_ORDERING_DESC);
	                    }
	                }
	            }
	            return this.memoizedOrderBy;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Query.prototype.addFilter = function (filter) {
	        assert(this.getInequalityFilterField() == null ||
	            !(filter instanceof RelationFilter) ||
	            !filter.isInequality() ||
	            filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');
	        assert(!DocumentKey.isDocumentKey(this.path), 'No filtering allowed for document query');
	        var newFilters = this.filters.concat([filter]);
	        return new Query(this.path, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);
	    };
	    Query.prototype.addOrderBy = function (orderBy) {
	        assert(!DocumentKey.isDocumentKey(this.path), 'No ordering allowed for document query');
	        assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy');
	        // TODO(dimond): validate that orderBy does not list the same key twice.
	        var newOrderBy = this.explicitOrderBy.concat([orderBy]);
	        return new Query(this.path, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);
	    };
	    Query.prototype.withLimit = function (limit) {
	        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);
	    };
	    Query.prototype.withStartAt = function (bound) {
	        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);
	    };
	    Query.prototype.withEndAt = function (bound) {
	        return new Query(this.path, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);
	    };
	    // TODO(b/29183165): This is used to get a unique string from a query to, for
	    // example, use as a dictionary key, but the implementation is subject to
	    // collisions. Make it collision-free.
	    Query.prototype.canonicalId = function () {
	        if (this.memoizedCanonicalId === null) {
	            var canonicalId = this.path.canonicalString();
	            canonicalId += '|f:';
	            for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
	                var filter = _a[_i];
	                canonicalId += filter.canonicalId();
	                canonicalId += ',';
	            }
	            canonicalId += '|ob:';
	            // TODO(dimond): make this collision resistant
	            for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {
	                var orderBy = _c[_b];
	                canonicalId += orderBy.canonicalId();
	                canonicalId += ',';
	            }
	            if (!isNullOrUndefined(this.limit)) {
	                canonicalId += '|l:';
	                canonicalId += this.limit;
	            }
	            if (this.startAt) {
	                canonicalId += '|lb:';
	                canonicalId += this.startAt.canonicalId();
	            }
	            if (this.endAt) {
	                canonicalId += '|ub:';
	                canonicalId += this.endAt.canonicalId();
	            }
	            this.memoizedCanonicalId = canonicalId;
	        }
	        return this.memoizedCanonicalId;
	    };
	    Query.prototype.toString = function () {
	        var str = 'Query(' + this.path.canonicalString();
	        if (this.filters.length > 0) {
	            str += ", filters: [" + this.filters.join(', ') + "]";
	        }
	        if (!isNullOrUndefined(this.limit)) {
	            str += ', limit: ' + this.limit;
	        }
	        if (this.explicitOrderBy.length > 0) {
	            str += ", orderBy: [" + this.explicitOrderBy.join(', ') + "]";
	        }
	        if (this.startAt) {
	            str += ', startAt: ' + this.startAt.canonicalId();
	        }
	        if (this.endAt) {
	            str += ', endAt: ' + this.endAt.canonicalId();
	        }
	        return str + ')';
	    };
	    Query.prototype.isEqual = function (other) {
	        if (this.limit !== other.limit) {
	            return false;
	        }
	        if (this.orderBy.length !== other.orderBy.length) {
	            return false;
	        }
	        for (var i = 0; i < this.orderBy.length; i++) {
	            if (!this.orderBy[i].isEqual(other.orderBy[i])) {
	                return false;
	            }
	        }
	        if (this.filters.length !== other.filters.length) {
	            return false;
	        }
	        for (var i = 0; i < this.filters.length; i++) {
	            if (!this.filters[i].isEqual(other.filters[i])) {
	                return false;
	            }
	        }
	        if (!this.path.isEqual(other.path)) {
	            return false;
	        }
	        if (this.startAt !== null
	            ? !this.startAt.isEqual(other.startAt)
	            : other.startAt !== null) {
	            return false;
	        }
	        return this.endAt !== null
	            ? this.endAt.isEqual(other.endAt)
	            : other.endAt === null;
	    };
	    Query.prototype.docComparator = function (d1, d2) {
	        var comparedOnKeyField = false;
	        for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {
	            var orderBy = _a[_i];
	            var comp = orderBy.compare(d1, d2);
	            if (comp !== 0)
	                return comp;
	            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();
	        }
	        // Assert that we actually compared by key
	        assert(comparedOnKeyField, "orderBy used that doesn't compare on key field");
	        return 0;
	    };
	    Query.prototype.matches = function (doc) {
	        return (this.matchesAncestor(doc) &&
	            this.matchesOrderBy(doc) &&
	            this.matchesFilters(doc) &&
	            this.matchesBounds(doc));
	    };
	    Query.prototype.hasLimit = function () {
	        return !isNullOrUndefined(this.limit);
	    };
	    Query.prototype.getFirstOrderByField = function () {
	        return this.explicitOrderBy.length > 0
	            ? this.explicitOrderBy[0].field
	            : null;
	    };
	    Query.prototype.getInequalityFilterField = function () {
	        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
	            var filter = _a[_i];
	            if (filter instanceof RelationFilter && filter.isInequality()) {
	                return filter.field;
	            }
	        }
	        return null;
	    };
	    Query.prototype.hasArrayContainsFilter = function () {
	        return (this.filters.find(function (filter) {
	            return filter instanceof RelationFilter &&
	                filter.op === RelationOp.ARRAY_CONTAINS;
	        }) !== undefined);
	    };
	    Query.prototype.isDocumentQuery = function () {
	        return DocumentKey.isDocumentKey(this.path) && this.filters.length === 0;
	    };
	    Query.prototype.matchesAncestor = function (doc) {
	        var docPath = doc.key.path;
	        if (DocumentKey.isDocumentKey(this.path)) {
	            // exact match for document queries
	            return this.path.isEqual(docPath);
	        }
	        else {
	            // shallow ancestor queries by default
	            return (this.path.isPrefixOf(docPath) && this.path.length === docPath.length - 1);
	        }
	    };
	    /**
	     * A document must have a value for every ordering clause in order to show up
	     * in the results.
	     */
	    Query.prototype.matchesOrderBy = function (doc) {
	        for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
	            var orderBy = _a[_i];
	            // order by key always matches
	            if (!orderBy.field.isKeyField() &&
	                doc.field(orderBy.field) === undefined) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Query.prototype.matchesFilters = function (doc) {
	        for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
	            var filter = _a[_i];
	            if (!filter.matches(doc)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * Makes sure a document is within the bounds, if provided.
	     */
	    Query.prototype.matchesBounds = function (doc) {
	        if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {
	            return false;
	        }
	        if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {
	            return false;
	        }
	        return true;
	    };
	    Query.prototype.assertValidBound = function (bound) {
	        assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');
	    };
	    return Query;
	}());
	var Filter = /** @class */ (function () {
	    function Filter() {
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */
	    Filter.create = function (field, op, value) {
	        if (value.isEqual(NullValue.INSTANCE)) {
	            if (op !== RelationOp.EQUAL) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on null.');
	            }
	            return new NullFilter(field);
	        }
	        else if (value.isEqual(DoubleValue.NAN)) {
	            if (op !== RelationOp.EQUAL) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on NaN.');
	            }
	            return new NanFilter(field);
	        }
	        else {
	            return new RelationFilter(field, op, value);
	        }
	    };
	    return Filter;
	}());
	var RelationOp = /** @class */ (function () {
	    function RelationOp(name) {
	        this.name = name;
	    }
	    RelationOp.fromString = function (op) {
	        switch (op) {
	            case '<':
	                return RelationOp.LESS_THAN;
	            case '<=':
	                return RelationOp.LESS_THAN_OR_EQUAL;
	            case '==':
	                return RelationOp.EQUAL;
	            case '>=':
	                return RelationOp.GREATER_THAN_OR_EQUAL;
	            case '>':
	                return RelationOp.GREATER_THAN;
	            case 'array-contains':
	                return RelationOp.ARRAY_CONTAINS;
	            default:
	                return fail('Unknown relation: ' + op);
	        }
	    };
	    RelationOp.prototype.toString = function () {
	        return this.name;
	    };
	    RelationOp.prototype.isEqual = function (other) {
	        return this.name === other.name;
	    };
	    RelationOp.LESS_THAN = new RelationOp('<');
	    RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');
	    RelationOp.EQUAL = new RelationOp('==');
	    RelationOp.GREATER_THAN = new RelationOp('>');
	    RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');
	    RelationOp.ARRAY_CONTAINS = new RelationOp('array-contains');
	    return RelationOp;
	}());
	var RelationFilter = /** @class */ (function (_super) {
	    tslib_1.__extends(RelationFilter, _super);
	    function RelationFilter(field, op, value) {
	        var _this = _super.call(this) || this;
	        _this.field = field;
	        _this.op = op;
	        _this.value = value;
	        return _this;
	    }
	    RelationFilter.prototype.matches = function (doc) {
	        if (this.field.isKeyField()) {
	            assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');
	            assert(this.op !== RelationOp.ARRAY_CONTAINS, "array-contains queries don't make sense on document keys.");
	            var refValue = this.value;
	            var comparison = DocumentKey.comparator(doc.key, refValue.key);
	            return this.matchesComparison(comparison);
	        }
	        else {
	            var val = doc.field(this.field);
	            return val !== undefined && this.matchesValue(val);
	        }
	    };
	    RelationFilter.prototype.matchesValue = function (value) {
	        var _this = this;
	        if (this.op === RelationOp.ARRAY_CONTAINS) {
	            return (value instanceof ArrayValue &&
	                value.internalValue.find(function (element) { return element.isEqual(_this.value); }) !==
	                    undefined);
	        }
	        else {
	            // Only compare types with matching backend order (such as double and int).
	            return (this.value.typeOrder === value.typeOrder &&
	                this.matchesComparison(value.compareTo(this.value)));
	        }
	    };
	    RelationFilter.prototype.matchesComparison = function (comparison) {
	        switch (this.op) {
	            case RelationOp.LESS_THAN:
	                return comparison < 0;
	            case RelationOp.LESS_THAN_OR_EQUAL:
	                return comparison <= 0;
	            case RelationOp.EQUAL:
	                return comparison === 0;
	            case RelationOp.GREATER_THAN:
	                return comparison > 0;
	            case RelationOp.GREATER_THAN_OR_EQUAL:
	                return comparison >= 0;
	            default:
	                return fail('Unknown relation op' + this.op);
	        }
	    };
	    RelationFilter.prototype.isInequality = function () {
	        return (this.op !== RelationOp.EQUAL && this.op !== RelationOp.ARRAY_CONTAINS);
	    };
	    RelationFilter.prototype.canonicalId = function () {
	        // TODO(b/29183165): Technically, this won't be unique if two values have
	        // the same description, such as the int 3 and the string "3". So we should
	        // add the types in here somehow, too.
	        return (this.field.canonicalString() + this.op.toString() + this.value.toString());
	    };
	    RelationFilter.prototype.isEqual = function (other) {
	        if (other instanceof RelationFilter) {
	            return (this.op.isEqual(other.op) &&
	                this.field.isEqual(other.field) &&
	                this.value.isEqual(other.value));
	        }
	        else {
	            return false;
	        }
	    };
	    RelationFilter.prototype.toString = function () {
	        return this.field.canonicalString() + " " + this.op + " " + this.value.value();
	    };
	    return RelationFilter;
	}(Filter));
	/**
	 * Filter that matches 'null' values.
	 */
	var NullFilter = /** @class */ (function (_super) {
	    tslib_1.__extends(NullFilter, _super);
	    function NullFilter(field) {
	        var _this = _super.call(this) || this;
	        _this.field = field;
	        return _this;
	    }
	    NullFilter.prototype.matches = function (doc) {
	        var val = doc.field(this.field);
	        return val !== undefined && val.value() === null;
	    };
	    NullFilter.prototype.canonicalId = function () {
	        return this.field.canonicalString() + ' IS null';
	    };
	    NullFilter.prototype.toString = function () {
	        return this.field.canonicalString() + " IS null";
	    };
	    NullFilter.prototype.isEqual = function (other) {
	        if (other instanceof NullFilter) {
	            return this.field.isEqual(other.field);
	        }
	        else {
	            return false;
	        }
	    };
	    return NullFilter;
	}(Filter));
	/**
	 * Filter that matches 'NaN' values.
	 */
	var NanFilter = /** @class */ (function (_super) {
	    tslib_1.__extends(NanFilter, _super);
	    function NanFilter(field) {
	        var _this = _super.call(this) || this;
	        _this.field = field;
	        return _this;
	    }
	    NanFilter.prototype.matches = function (doc) {
	        var field = doc.field(this.field);
	        var val = field && field.value();
	        return typeof val === 'number' && isNaN(val);
	    };
	    NanFilter.prototype.canonicalId = function () {
	        return this.field.canonicalString() + ' IS NaN';
	    };
	    NanFilter.prototype.toString = function () {
	        return this.field.canonicalString() + " IS NaN";
	    };
	    NanFilter.prototype.isEqual = function (other) {
	        if (other instanceof NanFilter) {
	            return this.field.isEqual(other.field);
	        }
	        else {
	            return false;
	        }
	    };
	    return NanFilter;
	}(Filter));
	/**
	 * The direction of sorting in an order by.
	 */
	var Direction = /** @class */ (function () {
	    function Direction(name) {
	        this.name = name;
	    }
	    Direction.prototype.toString = function () {
	        return this.name;
	    };
	    Direction.ASCENDING = new Direction('asc');
	    Direction.DESCENDING = new Direction('desc');
	    return Direction;
	}());
	/**
	 * Represents a bound of a query.
	 *
	 * The bound is specified with the given components representing a position and
	 * whether it's just before or just after the position (relative to whatever the
	 * query order is).
	 *
	 * The position represents a logical index position for a query. It's a prefix
	 * of values for the (potentially implicit) order by clauses of a query.
	 *
	 * Bound provides a function to determine whether a document comes before or
	 * after a bound. This is influenced by whether the position is just before or
	 * just after the provided values.
	 */
	var Bound = /** @class */ (function () {
	    function Bound(position, before) {
	        this.position = position;
	        this.before = before;
	    }
	    Bound.prototype.canonicalId = function () {
	        // TODO(b/29183165): Make this collision robust.
	        var canonicalId = this.before ? 'b:' : 'a:';
	        for (var _i = 0, _a = this.position; _i < _a.length; _i++) {
	            var component = _a[_i];
	            canonicalId += component.toString();
	        }
	        return canonicalId;
	    };
	    /**
	     * Returns true if a document sorts before a bound using the provided sort
	     * order.
	     */
	    Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {
	        assert(this.position.length <= orderBy.length, "Bound has more components than query's orderBy");
	        var comparison = 0;
	        for (var i = 0; i < this.position.length; i++) {
	            var orderByComponent = orderBy[i];
	            var component = this.position[i];
	            if (orderByComponent.field.isKeyField()) {
	                assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');
	                comparison = DocumentKey.comparator(component.key, doc.key);
	            }
	            else {
	                var docValue = doc.field(orderByComponent.field);
	                assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');
	                comparison = component.compareTo(docValue);
	            }
	            if (orderByComponent.dir === Direction.DESCENDING) {
	                comparison = comparison * -1;
	            }
	            if (comparison !== 0) {
	                break;
	            }
	        }
	        return this.before ? comparison <= 0 : comparison < 0;
	    };
	    Bound.prototype.isEqual = function (other) {
	        if (other === null) {
	            return false;
	        }
	        if (this.before !== other.before ||
	            this.position.length !== other.position.length) {
	            return false;
	        }
	        for (var i = 0; i < this.position.length; i++) {
	            var thisPosition = this.position[i];
	            var otherPosition = other.position[i];
	            return thisPosition.isEqual(otherPosition);
	        }
	        return true;
	    };
	    return Bound;
	}());
	/**
	 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
	 */
	var OrderBy = /** @class */ (function () {
	    function OrderBy(field, dir) {
	        this.field = field;
	        if (dir === undefined) {
	            dir = Direction.ASCENDING;
	        }
	        this.dir = dir;
	        this.isKeyOrderBy = field.isKeyField();
	    }
	    OrderBy.prototype.compare = function (d1, d2) {
	        var comparison = this.isKeyOrderBy
	            ? Document.compareByKey(d1, d2)
	            : Document.compareByField(this.field, d1, d2);
	        switch (this.dir) {
	            case Direction.ASCENDING:
	                return comparison;
	            case Direction.DESCENDING:
	                return -1 * comparison;
	            default:
	                return fail('Unknown direction: ' + this.dir);
	        }
	    };
	    OrderBy.prototype.canonicalId = function () {
	        // TODO(b/29183165): Make this collision robust.
	        return this.field.canonicalString() + this.dir.toString();
	    };
	    OrderBy.prototype.toString = function () {
	        return this.field.canonicalString() + " (" + this.dir + ")";
	    };
	    OrderBy.prototype.isEqual = function (other) {
	        return this.dir === other.dir && this.field.isEqual(other.field);
	    };
	    return OrderBy;
	}());
	var KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);
	var KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A version of a document in Firestore. This corresponds to the version
	 * timestamp, such as update_time or read_time.
	 */
	var SnapshotVersion = /** @class */ (function () {
	    function SnapshotVersion(timestamp) {
	        this.timestamp = timestamp;
	    }
	    // TODO(b/34176344): Once we no longer need to use the old alpha protos,
	    // delete this constructor and use a timestamp-backed version everywhere.
	    SnapshotVersion.fromMicroseconds = function (value) {
	        var seconds = Math.floor(value / 1e6);
	        var nanos = (value % 1e6) * 1e3;
	        return new SnapshotVersion(new Timestamp(seconds, nanos));
	    };
	    SnapshotVersion.fromTimestamp = function (value) {
	        return new SnapshotVersion(value);
	    };
	    SnapshotVersion.forDeletedDoc = function () {
	        return SnapshotVersion.MIN;
	    };
	    SnapshotVersion.prototype.compareTo = function (other) {
	        return this.timestamp._compareTo(other.timestamp);
	    };
	    SnapshotVersion.prototype.isEqual = function (other) {
	        return this.timestamp.isEqual(other.timestamp);
	    };
	    /** Returns a number representation of the version for use in spec tests. */
	    SnapshotVersion.prototype.toMicroseconds = function () {
	        // Convert to microseconds.
	        return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;
	    };
	    SnapshotVersion.prototype.toString = function () {
	        return 'SnapshotVersion(' + this.timestamp.toString() + ')';
	    };
	    SnapshotVersion.prototype.toTimestamp = function () {
	        return this.timestamp;
	    };
	    SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));
	    return SnapshotVersion;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** An enumeration of the different purposes we have for queries. */
	var QueryPurpose;
	(function (QueryPurpose) {
	    /** A regular, normal query. */
	    QueryPurpose[QueryPurpose["Listen"] = 0] = "Listen";
	    /**
	     * The query was used to refill a query after an existence filter mismatch.
	     */
	    QueryPurpose[QueryPurpose["ExistenceFilterMismatch"] = 1] = "ExistenceFilterMismatch";
	    /** The query was used to resolve a limbo document. */
	    QueryPurpose[QueryPurpose["LimboResolution"] = 2] = "LimboResolution";
	})(QueryPurpose || (QueryPurpose = {}));
	/**
	 * An immutable set of metadata that the local store tracks for each query.
	 */
	var QueryData = /** @class */ (function () {
	    function QueryData(
	    /** The query being listened to. */
	    query, 
	    /**
	     * The target ID to which the query corresponds; Assigned by the
	     * LocalStore for user listens and by the SyncEngine for limbo watches.
	     */
	    targetId, 
	    /** The purpose of the query. */
	    purpose, 
	    /** The sequence number of the last transaction during which this query data was modified */
	    sequenceNumber, 
	    /** The latest snapshot version seen for this target. */
	    snapshotVersion, 
	    /**
	     * An opaque, server-assigned token that allows watching a query to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the query. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */
	    resumeToken) {
	        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }
	        if (resumeToken === void 0) { resumeToken = emptyByteString(); }
	        this.query = query;
	        this.targetId = targetId;
	        this.purpose = purpose;
	        this.sequenceNumber = sequenceNumber;
	        this.snapshotVersion = snapshotVersion;
	        this.resumeToken = resumeToken;
	    }
	    /**
	     * Creates a new query data instance with an updated snapshot version and
	     * resume token.
	     */
	    QueryData.prototype.copy = function (overwrite) {
	        return new QueryData(this.query, this.targetId, this.purpose, overwrite.sequenceNumber === undefined
	            ? this.sequenceNumber
	            : overwrite.sequenceNumber, overwrite.snapshotVersion === undefined
	            ? this.snapshotVersion
	            : overwrite.snapshotVersion, overwrite.resumeToken === undefined
	            ? this.resumeToken
	            : overwrite.resumeToken);
	    };
	    QueryData.prototype.isEqual = function (other) {
	        return (this.targetId === other.targetId &&
	            this.purpose === other.purpose &&
	            this.sequenceNumber === other.sequenceNumber &&
	            this.snapshotVersion.isEqual(other.snapshotVersion) &&
	            this.resumeToken === other.resumeToken &&
	            this.query.isEqual(other.query));
	    };
	    return QueryData;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a set of fields that can be used to partially patch a document.
	 * FieldMask is used in conjunction with ObjectValue.
	 * Examples:
	 *   foo - Overwrites foo entirely with the provided value. If foo is not
	 *         present in the companion ObjectValue, the field is deleted.
	 *   foo.bar - Overwrites only the field bar of the object foo.
	 *             If foo is not an object, foo is replaced with an object
	 *             containing foo
	 */
	var FieldMask = /** @class */ (function () {
	    function FieldMask(fields) {
	        this.fields = fields;
	        // TODO(dimond): validation of FieldMask
	    }
	    /**
	     * Verifies that `fieldPath` is included by at least one field in this field
	     * mask.
	     *
	     * This is an O(n) operation, where `n` is the size of the field mask.
	     */
	    FieldMask.prototype.covers = function (fieldPath) {
	        for (var _i = 0, _a = this.fields; _i < _a.length; _i++) {
	            var fieldMaskPath = _a[_i];
	            if (fieldMaskPath.isPrefixOf(fieldPath)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    FieldMask.prototype.isEqual = function (other) {
	        return arrayEquals(this.fields, other.fields);
	    };
	    return FieldMask;
	}());
	/** A field path and the TransformOperation to perform upon it. */
	var FieldTransform = /** @class */ (function () {
	    function FieldTransform(field, transform) {
	        this.field = field;
	        this.transform = transform;
	    }
	    FieldTransform.prototype.isEqual = function (other) {
	        return (this.field.isEqual(other.field) && this.transform.isEqual(other.transform));
	    };
	    return FieldTransform;
	}());
	/** The result of successfully applying a mutation to the backend. */
	var MutationResult = /** @class */ (function () {
	    function MutationResult(
	    /**
	     * The version at which the mutation was committed:
	     *
	     * - For most operations, this is the updateTime in the WriteResult.
	     * - For deletes, the commitTime of the WriteResponse (because deletes are
	     *   not stored and have no updateTime).
	     *
	     * Note that these versions can be different: No-op writes will not change
	     * the updateTime even though the commitTime advances.
	     */
	    version, 
	    /**
	     * The resulting fields returned from the backend after a
	     * TransformMutation has been committed. Contains one FieldValue for each
	     * FieldTransform that was in the mutation.
	     *
	     * Will be null if the mutation was not a TransformMutation.
	     */
	    transformResults) {
	        this.version = version;
	        this.transformResults = transformResults;
	    }
	    return MutationResult;
	}());
	var MutationType;
	(function (MutationType) {
	    MutationType[MutationType["Set"] = 0] = "Set";
	    MutationType[MutationType["Patch"] = 1] = "Patch";
	    MutationType[MutationType["Transform"] = 2] = "Transform";
	    MutationType[MutationType["Delete"] = 3] = "Delete";
	})(MutationType || (MutationType = {}));
	/**
	 * Encodes a precondition for a mutation. This follows the model that the
	 * backend accepts with the special case of an explicit "empty" precondition
	 * (meaning no precondition).
	 */
	var Precondition = /** @class */ (function () {
	    function Precondition(updateTime, exists) {
	        this.updateTime = updateTime;
	        this.exists = exists;
	        assert(updateTime === undefined || exists === undefined, 'Precondition can specify "exists" or "updateTime" but not both');
	    }
	    /** Creates a new Precondition with an exists flag. */
	    Precondition.exists = function (exists) {
	        return new Precondition(undefined, exists);
	    };
	    /** Creates a new Precondition based on a version a document exists at. */
	    Precondition.updateTime = function (version) {
	        return new Precondition(version);
	    };
	    Object.defineProperty(Precondition.prototype, "isNone", {
	        /** Returns whether this Precondition is empty. */
	        get: function () {
	            return this.updateTime === undefined && this.exists === undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns true if the preconditions is valid for the given document
	     * (or null if no document is available).
	     */
	    Precondition.prototype.isValidFor = function (maybeDoc) {
	        if (this.updateTime !== undefined) {
	            return (maybeDoc instanceof Document &&
	                maybeDoc.version.isEqual(this.updateTime));
	        }
	        else if (this.exists !== undefined) {
	            return this.exists === maybeDoc instanceof Document;
	        }
	        else {
	            assert(this.isNone, 'Precondition should be empty');
	            return true;
	        }
	    };
	    Precondition.prototype.isEqual = function (other) {
	        return (equals(this.updateTime, other.updateTime) &&
	            this.exists === other.exists);
	    };
	    Precondition.NONE = new Precondition();
	    return Precondition;
	}());
	/**
	 * A mutation describes a self-contained change to a document. Mutations can
	 * create, replace, delete, and update subsets of documents.
	 *
	 * Mutations not only act on the value of the document but also it version.
	 *
	 * For local mutations (mutations that haven't been committed yet), we preserve
	 * the existing version for Set, Patch, and Transform mutations. For Delete
	 * mutations, we reset the version to 0.
	 *
	 * Here's the expected transition table.
	 *
	 * MUTATION           APPLIED TO            RESULTS IN
	 *
	 * SetMutation        Document(v3)          Document(v3)
	 * SetMutation        NoDocument(v3)        Document(v0)
	 * SetMutation        null                  Document(v0)
	 * PatchMutation      Document(v3)          Document(v3)
	 * PatchMutation      NoDocument(v3)        NoDocument(v3)
	 * PatchMutation      null                  null
	 * TransformMutation  Document(v3)          Document(v3)
	 * TransformMutation  NoDocument(v3)        NoDocument(v3)
	 * TransformMutation  null                  null
	 * DeleteMutation     Document(v3)          NoDocument(v0)
	 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
	 * DeleteMutation     null                  NoDocument(v0)
	 *
	 * For acknowledged mutations, we use the updateTime of the WriteResponse as
	 * the resulting version for Set, Patch, and Transform mutations. As deletes
	 * have no explicit update time, we use the commitTime of the WriteResponse for
	 * Delete mutations.
	 *
	 * If a mutation is acknowledged by the backend but fails the precondition check
	 * locally, we return an `UnknownDocument` and rely on Watch to send us the
	 * updated version.
	 *
	 * Note that TransformMutations don't create Documents (in the case of being
	 * applied to a NoDocument), even though they would on the backend. This is
	 * because the client always combines the TransformMutation with a SetMutation
	 * or PatchMutation and we only want to apply the transform if the prior
	 * mutation resulted in a Document (always true for a SetMutation, but not
	 * necessarily for a PatchMutation).
	 *
	 * ## Subclassing Notes
	 *
	 * Subclasses of Mutation need to implement applyToRemoteDocument() and
	 * applyToLocalView() to implement the actual behavior of applying the mutation
	 * to some source document.
	 */
	var Mutation = /** @class */ (function () {
	    function Mutation() {
	    }
	    Mutation.prototype.verifyKeyMatches = function (maybeDoc) {
	        if (maybeDoc != null) {
	            assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');
	        }
	    };
	    /**
	     * Returns the version from the given document for use as the result of a
	     * mutation. Mutations are defined to return the version of the base document
	     * only if it is an existing document. Deleted and unknown documents have a
	     * post-mutation version of SnapshotVersion.MIN.
	     */
	    Mutation.getPostMutationVersion = function (maybeDoc) {
	        if (maybeDoc instanceof Document) {
	            return maybeDoc.version;
	        }
	        else {
	            return SnapshotVersion.MIN;
	        }
	    };
	    return Mutation;
	}());
	/**
	 * A mutation that creates or replaces the document at the given key with the
	 * object value contents.
	 */
	var SetMutation = /** @class */ (function (_super) {
	    tslib_1.__extends(SetMutation, _super);
	    function SetMutation(key, value, precondition) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.value = value;
	        _this.precondition = precondition;
	        _this.type = MutationType.Set;
	        return _this;
	    }
	    SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
	        this.verifyKeyMatches(maybeDoc);
	        assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.');
	        // Unlike applyToLocalView, if we're applying a mutation to a remote
	        // document the server has accepted the mutation so the precondition must
	        // have held.
	        var version = mutationResult.version;
	        return new Document(this.key, version, this.value, {
	            hasCommittedMutations: true
	        });
	    };
	    SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
	        this.verifyKeyMatches(maybeDoc);
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            return maybeDoc;
	        }
	        var version = Mutation.getPostMutationVersion(maybeDoc);
	        return new Document(this.key, version, this.value, {
	            hasLocalMutations: true
	        });
	    };
	    SetMutation.prototype.isEqual = function (other) {
	        return (other instanceof SetMutation &&
	            this.key.isEqual(other.key) &&
	            this.value.isEqual(other.value) &&
	            this.precondition.isEqual(other.precondition));
	    };
	    return SetMutation;
	}(Mutation));
	/**
	 * A mutation that modifies fields of the document at the given key with the
	 * given values. The values are applied through a field mask:
	 *
	 *  * When a field is in both the mask and the values, the corresponding field
	 *    is updated.
	 *  * When a field is in neither the mask nor the values, the corresponding
	 *    field is unmodified.
	 *  * When a field is in the mask but not in the values, the corresponding field
	 *    is deleted.
	 *  * When a field is not in the mask but is in the values, the values map is
	 *    ignored.
	 */
	var PatchMutation = /** @class */ (function (_super) {
	    tslib_1.__extends(PatchMutation, _super);
	    function PatchMutation(key, data, fieldMask, precondition) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.data = data;
	        _this.fieldMask = fieldMask;
	        _this.precondition = precondition;
	        _this.type = MutationType.Patch;
	        return _this;
	    }
	    PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
	        this.verifyKeyMatches(maybeDoc);
	        assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            // Since the mutation was not rejected, we know that the  precondition
	            // matched on the backend. We therefore must not have the expected version
	            // of the document in our cache and return an UnknownDocument with the
	            // known updateTime.
	            return new UnknownDocument(this.key, mutationResult.version);
	        }
	        var newData = this.patchDocument(maybeDoc);
	        return new Document(this.key, mutationResult.version, newData, {
	            hasCommittedMutations: true
	        });
	    };
	    PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
	        this.verifyKeyMatches(maybeDoc);
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            return maybeDoc;
	        }
	        var version = Mutation.getPostMutationVersion(maybeDoc);
	        var newData = this.patchDocument(maybeDoc);
	        return new Document(this.key, version, newData, {
	            hasLocalMutations: true
	        });
	    };
	    PatchMutation.prototype.isEqual = function (other) {
	        return (other instanceof PatchMutation &&
	            this.key.isEqual(other.key) &&
	            this.fieldMask.isEqual(other.fieldMask) &&
	            this.precondition.isEqual(other.precondition));
	    };
	    /**
	     * Patches the data of document if available or creates a new document. Note
	     * that this does not check whether or not the precondition of this patch
	     * holds.
	     */
	    PatchMutation.prototype.patchDocument = function (maybeDoc) {
	        var data;
	        if (maybeDoc instanceof Document) {
	            data = maybeDoc.data;
	        }
	        else {
	            data = ObjectValue.EMPTY;
	        }
	        return this.patchObject(data);
	    };
	    PatchMutation.prototype.patchObject = function (data) {
	        for (var _i = 0, _a = this.fieldMask.fields; _i < _a.length; _i++) {
	            var fieldPath = _a[_i];
	            if (!fieldPath.isEmpty()) {
	                var newValue = this.data.field(fieldPath);
	                if (newValue !== undefined) {
	                    data = data.set(fieldPath, newValue);
	                }
	                else {
	                    data = data.delete(fieldPath);
	                }
	            }
	        }
	        return data;
	    };
	    return PatchMutation;
	}(Mutation));
	/**
	 * A mutation that modifies specific fields of the document with transform
	 * operations. Currently the only supported transform is a server timestamp, but
	 * IP Address, increment(n), etc. could be supported in the future.
	 *
	 * It is somewhat similar to a PatchMutation in that it patches specific fields
	 * and has no effect when applied to a null or NoDocument (see comment on
	 * Mutation for rationale).
	 */
	var TransformMutation = /** @class */ (function (_super) {
	    tslib_1.__extends(TransformMutation, _super);
	    function TransformMutation(key, fieldTransforms) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.fieldTransforms = fieldTransforms;
	        _this.type = MutationType.Transform;
	        // NOTE: We set a precondition of exists: true as a safety-check, since we
	        // always combine TransformMutations with a SetMutation or PatchMutation which
	        // (if successful) should end up with an existing document.
	        _this.precondition = Precondition.exists(true);
	        return _this;
	    }
	    TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
	        this.verifyKeyMatches(maybeDoc);
	        assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            // Since the mutation was not rejected, we know that the  precondition
	            // matched on the backend. We therefore must not have the expected version
	            // of the document in our cache and return an UnknownDocument with the
	            // known updateTime.
	            return new UnknownDocument(this.key, mutationResult.version);
	        }
	        var doc = this.requireDocument(maybeDoc);
	        var transformResults = this.serverTransformResults(maybeDoc, mutationResult.transformResults);
	        var version = mutationResult.version;
	        var newData = this.transformObject(doc.data, transformResults);
	        return new Document(this.key, version, newData, {
	            hasCommittedMutations: true
	        });
	    };
	    TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
	        this.verifyKeyMatches(maybeDoc);
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            return maybeDoc;
	        }
	        var doc = this.requireDocument(maybeDoc);
	        var transformResults = this.localTransformResults(localWriteTime, baseDoc);
	        var newData = this.transformObject(doc.data, transformResults);
	        return new Document(this.key, doc.version, newData, {
	            hasLocalMutations: true
	        });
	    };
	    TransformMutation.prototype.isEqual = function (other) {
	        return (other instanceof TransformMutation &&
	            this.key.isEqual(other.key) &&
	            arrayEquals(this.fieldTransforms, other.fieldTransforms) &&
	            this.precondition.isEqual(other.precondition));
	    };
	    /**
	     * Asserts that the given MaybeDocument is actually a Document and verifies
	     * that it matches the key for this mutation. Since we only support
	     * transformations with precondition exists this method is guaranteed to be
	     * safe.
	     */
	    TransformMutation.prototype.requireDocument = function (maybeDoc) {
	        assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);
	        var doc = maybeDoc;
	        assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');
	        return doc;
	    };
	    /**
	     * Creates a list of "transform results" (a transform result is a field value
	     * representing the result of applying a transform) for use after a
	     * TransformMutation has been acknowledged by the server.
	     *
	     * @param baseDoc The document prior to applying this mutation batch.
	     * @param serverTransformResults The transform results received by the server.
	     * @return The transform results list.
	     */
	    TransformMutation.prototype.serverTransformResults = function (baseDoc, serverTransformResults) {
	        var transformResults = [];
	        assert(this.fieldTransforms.length === serverTransformResults.length, "server transform result count (" + serverTransformResults.length + ") " +
	            ("should match field transform count (" + this.fieldTransforms.length + ")"));
	        for (var i = 0; i < serverTransformResults.length; i++) {
	            var fieldTransform = this.fieldTransforms[i];
	            var transform = fieldTransform.transform;
	            var previousValue = null;
	            if (baseDoc instanceof Document) {
	                previousValue = baseDoc.field(fieldTransform.field) || null;
	            }
	            transformResults.push(transform.applyToRemoteDocument(previousValue, serverTransformResults[i]));
	        }
	        return transformResults;
	    };
	    /**
	     * Creates a list of "transform results" (a transform result is a field value
	     * representing the result of applying a transform) for use when applying a
	     * TransformMutation locally.
	     *
	     * @param localWriteTime The local time of the transform mutation (used to
	     *     generate ServerTimestampValues).
	     * @param baseDoc The document prior to applying this mutation batch.
	     * @return The transform results list.
	     */
	    TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {
	        var transformResults = [];
	        for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {
	            var fieldTransform = _a[_i];
	            var transform = fieldTransform.transform;
	            var previousValue = null;
	            if (baseDoc instanceof Document) {
	                previousValue = baseDoc.field(fieldTransform.field) || null;
	            }
	            transformResults.push(transform.applyToLocalView(previousValue, localWriteTime));
	        }
	        return transformResults;
	    };
	    TransformMutation.prototype.transformObject = function (data, transformResults) {
	        assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');
	        for (var i = 0; i < this.fieldTransforms.length; i++) {
	            var fieldTransform = this.fieldTransforms[i];
	            var fieldPath = fieldTransform.field;
	            data = data.set(fieldPath, transformResults[i]);
	        }
	        return data;
	    };
	    return TransformMutation;
	}(Mutation));
	/** A mutation that deletes the document at the given key. */
	var DeleteMutation = /** @class */ (function (_super) {
	    tslib_1.__extends(DeleteMutation, _super);
	    function DeleteMutation(key, precondition) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.precondition = precondition;
	        _this.type = MutationType.Delete;
	        return _this;
	    }
	    DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
	        this.verifyKeyMatches(maybeDoc);
	        assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.');
	        // Unlike applyToLocalView, if we're applying a mutation to a remote
	        // document the server has accepted the mutation so the precondition must
	        // have held.
	        return new NoDocument(this.key, mutationResult.version, {
	            hasCommittedMutations: true
	        });
	    };
	    DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
	        this.verifyKeyMatches(maybeDoc);
	        if (!this.precondition.isValidFor(maybeDoc)) {
	            return maybeDoc;
	        }
	        if (maybeDoc) {
	            assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');
	        }
	        return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());
	    };
	    DeleteMutation.prototype.isEqual = function (other) {
	        return (other instanceof DeleteMutation &&
	            this.key.isEqual(other.key) &&
	            this.precondition.isEqual(other.precondition));
	    };
	    return DeleteMutation;
	}(Mutation));

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Transforms a value into a server-generated timestamp. */
	var ServerTimestampTransform = /** @class */ (function () {
	    function ServerTimestampTransform() {
	    }
	    ServerTimestampTransform.prototype.applyToLocalView = function (previousValue, localWriteTime) {
	        return new ServerTimestampValue(localWriteTime, previousValue);
	    };
	    ServerTimestampTransform.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
	        return transformResult;
	    };
	    ServerTimestampTransform.prototype.isEqual = function (other) {
	        return other instanceof ServerTimestampTransform;
	    };
	    ServerTimestampTransform.instance = new ServerTimestampTransform();
	    return ServerTimestampTransform;
	}());
	/** Transforms an array value via a union operation. */
	var ArrayUnionTransformOperation = /** @class */ (function () {
	    function ArrayUnionTransformOperation(elements) {
	        this.elements = elements;
	    }
	    ArrayUnionTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
	        return this.apply(previousValue);
	    };
	    ArrayUnionTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
	        // The server just sends null as the transform result for array operations,
	        // so we have to calculate a result the same as we do for local
	        // applications.
	        return this.apply(previousValue);
	    };
	    ArrayUnionTransformOperation.prototype.apply = function (previousValue) {
	        var result = coercedFieldValuesArray(previousValue);
	        var _loop_1 = function (toUnion) {
	            if (!result.find(function (element) { return element.isEqual(toUnion); })) {
	                result.push(toUnion);
	            }
	        };
	        for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
	            var toUnion = _a[_i];
	            _loop_1(toUnion);
	        }
	        return new ArrayValue(result);
	    };
	    ArrayUnionTransformOperation.prototype.isEqual = function (other) {
	        return (other instanceof ArrayUnionTransformOperation &&
	            arrayEquals(other.elements, this.elements));
	    };
	    return ArrayUnionTransformOperation;
	}());
	/** Transforms an array value via a remove operation. */
	var ArrayRemoveTransformOperation = /** @class */ (function () {
	    function ArrayRemoveTransformOperation(elements) {
	        this.elements = elements;
	    }
	    ArrayRemoveTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
	        return this.apply(previousValue);
	    };
	    ArrayRemoveTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
	        // The server just sends null as the transform result for array operations,
	        // so we have to calculate a result the same as we do for local
	        // applications.
	        return this.apply(previousValue);
	    };
	    ArrayRemoveTransformOperation.prototype.apply = function (previousValue) {
	        var result = coercedFieldValuesArray(previousValue);
	        var _loop_2 = function (toRemove) {
	            result = result.filter(function (element) { return !element.isEqual(toRemove); });
	        };
	        for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
	            var toRemove = _a[_i];
	            _loop_2(toRemove);
	        }
	        return new ArrayValue(result);
	    };
	    ArrayRemoveTransformOperation.prototype.isEqual = function (other) {
	        return (other instanceof ArrayRemoveTransformOperation &&
	            arrayEquals(other.elements, this.elements));
	    };
	    return ArrayRemoveTransformOperation;
	}());
	function coercedFieldValuesArray(value) {
	    if (value instanceof ArrayValue) {
	        return value.internalValue.slice();
	    }
	    else {
	        // coerce to empty array.
	        return [];
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ExistenceFilter = /** @class */ (function () {
	    // TODO(b/33078163): just use simplest form of existence filter for now
	    function ExistenceFilter(count) {
	        this.count = count;
	    }
	    ExistenceFilter.prototype.isEqual = function (other) {
	        return other && other.count === this.count;
	    };
	    return ExistenceFilter;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Error Codes describing the different ways GRPC can fail. These are copied
	 * directly from GRPC's sources here:
	 *
	 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	 *
	 * Important! The names of these identifiers matter because the string forms
	 * are used for reverse lookups from the webchannel stream. Do NOT change the
	 * names of these identifiers.
	 */
	var RpcCode;
	(function (RpcCode) {
	    RpcCode[RpcCode["OK"] = 0] = "OK";
	    RpcCode[RpcCode["CANCELLED"] = 1] = "CANCELLED";
	    RpcCode[RpcCode["UNKNOWN"] = 2] = "UNKNOWN";
	    RpcCode[RpcCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
	    RpcCode[RpcCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
	    RpcCode[RpcCode["NOT_FOUND"] = 5] = "NOT_FOUND";
	    RpcCode[RpcCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
	    RpcCode[RpcCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
	    RpcCode[RpcCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
	    RpcCode[RpcCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
	    RpcCode[RpcCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
	    RpcCode[RpcCode["ABORTED"] = 10] = "ABORTED";
	    RpcCode[RpcCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
	    RpcCode[RpcCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
	    RpcCode[RpcCode["INTERNAL"] = 13] = "INTERNAL";
	    RpcCode[RpcCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
	    RpcCode[RpcCode["DATA_LOSS"] = 15] = "DATA_LOSS";
	})(RpcCode || (RpcCode = {}));
	function isPermanentError(code) {
	    switch (code) {
	        case Code.OK:
	            return fail('Treated status OK as error');
	        case Code.CANCELLED:
	        case Code.UNKNOWN:
	        case Code.DEADLINE_EXCEEDED:
	        case Code.RESOURCE_EXHAUSTED:
	        case Code.INTERNAL:
	        case Code.UNAVAILABLE:
	        // Unauthenticated means something went wrong with our token and we need
	        // to retry with new credentials which will happen automatically.
	        case Code.UNAUTHENTICATED:
	            return false;
	        case Code.INVALID_ARGUMENT:
	        case Code.NOT_FOUND:
	        case Code.ALREADY_EXISTS:
	        case Code.PERMISSION_DENIED:
	        case Code.FAILED_PRECONDITION:
	        // Aborted might be retried in some scenarios, but that is dependant on
	        // the context and should handled individually by the calling code.
	        // See https://cloud.google.com/apis/design/errors.
	        case Code.ABORTED:
	        case Code.OUT_OF_RANGE:
	        case Code.UNIMPLEMENTED:
	        case Code.DATA_LOSS:
	            return true;
	        default:
	            return fail('Unknown status code: ' + code);
	    }
	}
	/**
	 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
	 *
	 * @returns The Code equivalent to the given status string or undefined if
	 *     there is no match.
	 */
	function mapCodeFromRpcStatus(status) {
	    // tslint:disable-next-line:no-any lookup by string
	    var code = RpcCode[status];
	    if (code === undefined) {
	        return undefined;
	    }
	    return mapCodeFromRpcCode(code);
	}
	/**
	 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
	 * are not the same as HTTP status codes.
	 *
	 * @returns The Code equivalent to the given GRPC status code. Fails if there
	 *     is no match.
	 */
	function mapCodeFromRpcCode(code) {
	    if (code === undefined) {
	        // This shouldn't normally happen, but in certain error cases (like trying
	        // to send invalid proto messages) we may get an error with no GRPC code.
	        error('GRPC error has no .code');
	        return Code.UNKNOWN;
	    }
	    switch (code) {
	        case RpcCode.OK:
	            return Code.OK;
	        case RpcCode.CANCELLED:
	            return Code.CANCELLED;
	        case RpcCode.UNKNOWN:
	            return Code.UNKNOWN;
	        case RpcCode.DEADLINE_EXCEEDED:
	            return Code.DEADLINE_EXCEEDED;
	        case RpcCode.RESOURCE_EXHAUSTED:
	            return Code.RESOURCE_EXHAUSTED;
	        case RpcCode.INTERNAL:
	            return Code.INTERNAL;
	        case RpcCode.UNAVAILABLE:
	            return Code.UNAVAILABLE;
	        case RpcCode.UNAUTHENTICATED:
	            return Code.UNAUTHENTICATED;
	        case RpcCode.INVALID_ARGUMENT:
	            return Code.INVALID_ARGUMENT;
	        case RpcCode.NOT_FOUND:
	            return Code.NOT_FOUND;
	        case RpcCode.ALREADY_EXISTS:
	            return Code.ALREADY_EXISTS;
	        case RpcCode.PERMISSION_DENIED:
	            return Code.PERMISSION_DENIED;
	        case RpcCode.FAILED_PRECONDITION:
	            return Code.FAILED_PRECONDITION;
	        case RpcCode.ABORTED:
	            return Code.ABORTED;
	        case RpcCode.OUT_OF_RANGE:
	            return Code.OUT_OF_RANGE;
	        case RpcCode.UNIMPLEMENTED:
	            return Code.UNIMPLEMENTED;
	        case RpcCode.DATA_LOSS:
	            return Code.DATA_LOSS;
	        default:
	            return fail('Unknown status code: ' + code);
	    }
	}
	/**
	 * Maps an RPC code from a Code. This is the reverse operation from
	 * mapCodeFromRpcCode and should really only be used in tests.
	 */
	function mapRpcCodeFromCode(code) {
	    if (code === undefined) {
	        return RpcCode.OK;
	    }
	    switch (code) {
	        case Code.OK:
	            return RpcCode.OK;
	        case Code.CANCELLED:
	            return RpcCode.CANCELLED;
	        case Code.UNKNOWN:
	            return RpcCode.UNKNOWN;
	        case Code.DEADLINE_EXCEEDED:
	            return RpcCode.DEADLINE_EXCEEDED;
	        case Code.RESOURCE_EXHAUSTED:
	            return RpcCode.RESOURCE_EXHAUSTED;
	        case Code.INTERNAL:
	            return RpcCode.INTERNAL;
	        case Code.UNAVAILABLE:
	            return RpcCode.UNAVAILABLE;
	        case Code.UNAUTHENTICATED:
	            return RpcCode.UNAUTHENTICATED;
	        case Code.INVALID_ARGUMENT:
	            return RpcCode.INVALID_ARGUMENT;
	        case Code.NOT_FOUND:
	            return RpcCode.NOT_FOUND;
	        case Code.ALREADY_EXISTS:
	            return RpcCode.ALREADY_EXISTS;
	        case Code.PERMISSION_DENIED:
	            return RpcCode.PERMISSION_DENIED;
	        case Code.FAILED_PRECONDITION:
	            return RpcCode.FAILED_PRECONDITION;
	        case Code.ABORTED:
	            return RpcCode.ABORTED;
	        case Code.OUT_OF_RANGE:
	            return RpcCode.OUT_OF_RANGE;
	        case Code.UNIMPLEMENTED:
	            return RpcCode.UNIMPLEMENTED;
	        case Code.DATA_LOSS:
	            return RpcCode.DATA_LOSS;
	        default:
	            return fail('Unknown status code: ' + code);
	    }
	}
	/**
	 * Converts an HTTP Status Code to the equivalent error code.
	 *
	 * @param status An HTTP Status Code, like 200, 404, 503, etc.
	 * @returns The equivalent Code. Unknown status codes are mapped to
	 *     Code.UNKNOWN.
	 */
	function mapCodeFromHttpStatus(status) {
	    // The canonical error codes for Google APIs [1] specify mapping onto HTTP
	    // status codes but the mapping is not bijective. In each case of ambiguity
	    // this function chooses a primary error.
	    //
	    // [1]
	    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
	    switch (status) {
	        case 200: // OK
	            return Code.OK;
	        case 400: // Bad Request
	            return Code.INVALID_ARGUMENT;
	        // Other possibilities based on the forward mapping
	        // return Code.FAILED_PRECONDITION;
	        // return Code.OUT_OF_RANGE;
	        case 401: // Unauthorized
	            return Code.UNAUTHENTICATED;
	        case 403: // Forbidden
	            return Code.PERMISSION_DENIED;
	        case 404: // Not Found
	            return Code.NOT_FOUND;
	        case 409: // Conflict
	            return Code.ABORTED;
	        // Other possibilities:
	        // return Code.ALREADY_EXISTS;
	        case 416: // Range Not Satisfiable
	            return Code.OUT_OF_RANGE;
	        case 429: // Too Many Requests
	            return Code.RESOURCE_EXHAUSTED;
	        case 499: // Client Closed Request
	            return Code.CANCELLED;
	        case 500: // Internal Server Error
	            return Code.UNKNOWN;
	        // Other possibilities:
	        // return Code.INTERNAL;
	        // return Code.DATA_LOSS;
	        case 501: // Unimplemented
	            return Code.UNIMPLEMENTED;
	        case 503: // Service Unavailable
	            return Code.UNAVAILABLE;
	        case 504: // Gateway Timeout
	            return Code.DEADLINE_EXCEEDED;
	        default:
	            if (status >= 200 && status < 300)
	                return Code.OK;
	            if (status >= 400 && status < 500)
	                return Code.FAILED_PRECONDITION;
	            if (status >= 500 && status < 600)
	                return Code.INTERNAL;
	            return Code.UNKNOWN;
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SortedSet is an immutable (copy-on-write) collection that holds elements
	 * in order specified by the provided comparator.
	 *
	 * NOTE: if provided comparator returns 0 for two elements, we consider them to
	 * be equal!
	 */
	var SortedSet = /** @class */ (function () {
	    function SortedSet(comparator) {
	        this.comparator = comparator;
	        this.data = new SortedMap(this.comparator);
	    }
	    /**
	     * Creates a SortedSet from the keys of the map.
	     * This is currently implemented as an O(n) copy.
	     */
	    SortedSet.fromMapKeys = function (map) {
	        var keys = new SortedSet(map.comparator);
	        map.forEach(function (key) {
	            keys = keys.add(key);
	        });
	        return keys;
	    };
	    SortedSet.prototype.has = function (elem) {
	        return this.data.get(elem) !== null;
	    };
	    SortedSet.prototype.first = function () {
	        return this.data.minKey();
	    };
	    SortedSet.prototype.last = function () {
	        return this.data.maxKey();
	    };
	    Object.defineProperty(SortedSet.prototype, "size", {
	        get: function () {
	            return this.data.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SortedSet.prototype.indexOf = function (elem) {
	        return this.data.indexOf(elem);
	    };
	    /** Iterates elements in order defined by "comparator" */
	    SortedSet.prototype.forEach = function (cb) {
	        this.data.inorderTraversal(function (k, v) {
	            cb(k);
	            return false;
	        });
	    };
	    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */
	    SortedSet.prototype.forEachInRange = function (range, cb) {
	        var iter = this.data.getIteratorFrom(range[0]);
	        while (iter.hasNext()) {
	            var elem = iter.getNext();
	            if (this.comparator(elem.key, range[1]) >= 0)
	                return;
	            cb(elem.key);
	        }
	    };
	    /**
	     * Iterates over `elem`s such that: start <= elem until false is returned.
	     */
	    SortedSet.prototype.forEachWhile = function (cb, start) {
	        var iter;
	        if (start !== undefined) {
	            iter = this.data.getIteratorFrom(start);
	        }
	        else {
	            iter = this.data.getIterator();
	        }
	        while (iter.hasNext()) {
	            var elem = iter.getNext();
	            var result = cb(elem.key);
	            if (!result)
	                return;
	        }
	    };
	    /** Finds the least element greater than or equal to `elem`. */
	    SortedSet.prototype.firstAfterOrEqual = function (elem) {
	        var iter = this.data.getIteratorFrom(elem);
	        return iter.hasNext() ? iter.getNext().key : null;
	    };
	    /** Inserts or updates an element */
	    SortedSet.prototype.add = function (elem) {
	        return this.copy(this.data.remove(elem).insert(elem, true));
	    };
	    /** Deletes an element */
	    SortedSet.prototype.delete = function (elem) {
	        if (!this.has(elem))
	            return this;
	        return this.copy(this.data.remove(elem));
	    };
	    SortedSet.prototype.isEmpty = function () {
	        return this.data.isEmpty();
	    };
	    SortedSet.prototype.unionWith = function (other) {
	        var result = this;
	        other.forEach(function (elem) {
	            result = result.add(elem);
	        });
	        return result;
	    };
	    SortedSet.prototype.isEqual = function (other) {
	        if (!(other instanceof SortedSet))
	            return false;
	        if (this.size !== other.size)
	            return false;
	        var thisIt = this.data.getIterator();
	        var otherIt = other.data.getIterator();
	        while (thisIt.hasNext()) {
	            var thisElem = thisIt.getNext().key;
	            var otherElem = otherIt.getNext().key;
	            if (this.comparator(thisElem, otherElem) !== 0)
	                return false;
	        }
	        return true;
	    };
	    SortedSet.prototype.toArray = function () {
	        var res = [];
	        this.forEach(function (targetId) {
	            res.push(targetId);
	        });
	        return res;
	    };
	    SortedSet.prototype.toString = function () {
	        var result = [];
	        this.forEach(function (elem) { return result.push(elem); });
	        return 'SortedSet(' + result.toString() + ')';
	    };
	    SortedSet.prototype.copy = function (data) {
	        var result = new SortedSet(this.comparator);
	        result.data = data;
	        return result;
	    };
	    return SortedSet;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
	function maybeDocumentMap() {
	    return EMPTY_MAYBE_DOCUMENT_MAP;
	}
	var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
	function documentMap() {
	    return EMPTY_DOCUMENT_MAP;
	}
	var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);
	function documentVersionMap() {
	    return EMPTY_DOCUMENT_VERSION_MAP;
	}
	var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);
	function documentKeySet() {
	    return EMPTY_DOCUMENT_KEY_SET;
	}
	var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);
	function targetIdSet() {
	    return EMPTY_TARGET_ID_SET;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * DocumentSet is an immutable (copy-on-write) collection that holds documents
	 * in order specified by the provided comparator. We always add a document key
	 * comparator on top of what is provided to guarantee document equality based on
	 * the key.
	 */
	var DocumentSet = /** @class */ (function () {
	    /** The default ordering is by key if the comparator is omitted */
	    function DocumentSet(comp) {
	        // We are adding document key comparator to the end as it's the only
	        // guaranteed unique property of a document.
	        if (comp) {
	            this.comparator = function (d1, d2) {
	                return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
	            };
	        }
	        else {
	            this.comparator = function (d1, d2) {
	                return DocumentKey.comparator(d1.key, d2.key);
	            };
	        }
	        this.keyedMap = documentMap();
	        this.sortedSet = new SortedMap(this.comparator);
	    }
	    /**
	     * Returns an empty copy of the existing DocumentSet, using the same
	     * comparator.
	     */
	    DocumentSet.emptySet = function (oldSet) {
	        return new DocumentSet(oldSet.comparator);
	    };
	    DocumentSet.prototype.has = function (key) {
	        return this.keyedMap.get(key) != null;
	    };
	    DocumentSet.prototype.get = function (key) {
	        return this.keyedMap.get(key);
	    };
	    DocumentSet.prototype.first = function () {
	        return this.sortedSet.minKey();
	    };
	    DocumentSet.prototype.last = function () {
	        return this.sortedSet.maxKey();
	    };
	    DocumentSet.prototype.isEmpty = function () {
	        return this.sortedSet.isEmpty();
	    };
	    /**
	     * Returns the index of the provided key in the document set, or -1 if the
	     * document key is not present in the set;
	     */
	    DocumentSet.prototype.indexOf = function (key) {
	        var doc = this.keyedMap.get(key);
	        return doc ? this.sortedSet.indexOf(doc) : -1;
	    };
	    Object.defineProperty(DocumentSet.prototype, "size", {
	        get: function () {
	            return this.sortedSet.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Iterates documents in order defined by "comparator" */
	    DocumentSet.prototype.forEach = function (cb) {
	        this.sortedSet.inorderTraversal(function (k, v) {
	            cb(k);
	            return false;
	        });
	    };
	    /** Inserts or updates a document with the same key */
	    DocumentSet.prototype.add = function (doc) {
	        // First remove the element if we have it.
	        var set = this.delete(doc.key);
	        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));
	    };
	    /** Deletes a document with a given key */
	    DocumentSet.prototype.delete = function (key) {
	        var doc = this.get(key);
	        if (!doc) {
	            return this;
	        }
	        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));
	    };
	    DocumentSet.prototype.isEqual = function (other) {
	        if (!(other instanceof DocumentSet))
	            return false;
	        if (this.size !== other.size)
	            return false;
	        var thisIt = this.sortedSet.getIterator();
	        var otherIt = other.sortedSet.getIterator();
	        while (thisIt.hasNext()) {
	            var thisDoc = thisIt.getNext().key;
	            var otherDoc = otherIt.getNext().key;
	            if (!thisDoc.isEqual(otherDoc))
	                return false;
	        }
	        return true;
	    };
	    DocumentSet.prototype.toString = function () {
	        var docStrings = [];
	        this.forEach(function (doc) {
	            docStrings.push(doc.toString());
	        });
	        if (docStrings.length === 0) {
	            return 'DocumentSet ()';
	        }
	        else {
	            return 'DocumentSet (\n  ' + docStrings.join('  \n') + '\n)';
	        }
	    };
	    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {
	        var newSet = new DocumentSet();
	        newSet.comparator = this.comparator;
	        newSet.keyedMap = keyedMap;
	        newSet.sortedSet = sortedSet;
	        return newSet;
	    };
	    return DocumentSet;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ChangeType;
	(function (ChangeType) {
	    ChangeType[ChangeType["Added"] = 0] = "Added";
	    ChangeType[ChangeType["Removed"] = 1] = "Removed";
	    ChangeType[ChangeType["Modified"] = 2] = "Modified";
	    ChangeType[ChangeType["Metadata"] = 3] = "Metadata";
	})(ChangeType || (ChangeType = {}));
	var SyncState;
	(function (SyncState) {
	    SyncState[SyncState["Local"] = 0] = "Local";
	    SyncState[SyncState["Synced"] = 1] = "Synced";
	})(SyncState || (SyncState = {}));
	/**
	 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
	 * duplicate events for the same doc.
	 */
	var DocumentChangeSet = /** @class */ (function () {
	    function DocumentChangeSet() {
	        this.changeMap = new SortedMap(DocumentKey.comparator);
	    }
	    DocumentChangeSet.prototype.track = function (change) {
	        var key = change.doc.key;
	        var oldChange = this.changeMap.get(key);
	        if (!oldChange) {
	            this.changeMap = this.changeMap.insert(key, change);
	            return;
	        }
	        // Merge the new change with the existing change.
	        if (change.type !== ChangeType.Added &&
	            oldChange.type === ChangeType.Metadata) {
	            this.changeMap = this.changeMap.insert(key, change);
	        }
	        else if (change.type === ChangeType.Metadata &&
	            oldChange.type !== ChangeType.Removed) {
	            this.changeMap = this.changeMap.insert(key, {
	                type: oldChange.type,
	                doc: change.doc
	            });
	        }
	        else if (change.type === ChangeType.Modified &&
	            oldChange.type === ChangeType.Modified) {
	            this.changeMap = this.changeMap.insert(key, {
	                type: ChangeType.Modified,
	                doc: change.doc
	            });
	        }
	        else if (change.type === ChangeType.Modified &&
	            oldChange.type === ChangeType.Added) {
	            this.changeMap = this.changeMap.insert(key, {
	                type: ChangeType.Added,
	                doc: change.doc
	            });
	        }
	        else if (change.type === ChangeType.Removed &&
	            oldChange.type === ChangeType.Added) {
	            this.changeMap = this.changeMap.remove(key);
	        }
	        else if (change.type === ChangeType.Removed &&
	            oldChange.type === ChangeType.Modified) {
	            this.changeMap = this.changeMap.insert(key, {
	                type: ChangeType.Removed,
	                doc: oldChange.doc
	            });
	        }
	        else if (change.type === ChangeType.Added &&
	            oldChange.type === ChangeType.Removed) {
	            this.changeMap = this.changeMap.insert(key, {
	                type: ChangeType.Modified,
	                doc: change.doc
	            });
	        }
	        else {
	            // This includes these cases, which don't make sense:
	            // Added->Added
	            // Removed->Removed
	            // Modified->Added
	            // Removed->Modified
	            // Metadata->Added
	            // Removed->Metadata
	            fail('unsupported combination of changes: ' +
	                JSON.stringify(change) +
	                ' after ' +
	                JSON.stringify(oldChange));
	        }
	    };
	    DocumentChangeSet.prototype.getChanges = function () {
	        var changes = [];
	        this.changeMap.inorderTraversal(function (key, change) {
	            changes.push(change);
	        });
	        return changes;
	    };
	    return DocumentChangeSet;
	}());
	var ViewSnapshot = /** @class */ (function () {
	    function ViewSnapshot(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
	        this.query = query;
	        this.docs = docs;
	        this.oldDocs = oldDocs;
	        this.docChanges = docChanges;
	        this.mutatedKeys = mutatedKeys;
	        this.fromCache = fromCache;
	        this.syncStateChanged = syncStateChanged;
	        this.excludesMetadataChanges = excludesMetadataChanges;
	    }
	    /** Returns a view snapshot as if all documents in the snapshot were added. */
	    ViewSnapshot.fromInitialDocuments = function (query, documents, mutatedKeys, fromCache) {
	        var changes = [];
	        documents.forEach(function (doc) {
	            changes.push({ type: ChangeType.Added, doc: doc });
	        });
	        return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
	    };
	    Object.defineProperty(ViewSnapshot.prototype, "hasPendingWrites", {
	        get: function () {
	            return !this.mutatedKeys.isEmpty();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewSnapshot.prototype.isEqual = function (other) {
	        if (this.fromCache !== other.fromCache ||
	            this.syncStateChanged !== other.syncStateChanged ||
	            !this.mutatedKeys.isEqual(other.mutatedKeys) ||
	            !this.query.isEqual(other.query) ||
	            !this.docs.isEqual(other.docs) ||
	            !this.oldDocs.isEqual(other.oldDocs)) {
	            return false;
	        }
	        var changes = this.docChanges;
	        var otherChanges = other.docChanges;
	        if (changes.length !== otherChanges.length) {
	            return false;
	        }
	        for (var i = 0; i < changes.length; i++) {
	            if (changes[i].type !== otherChanges[i].type ||
	                !changes[i].doc.isEqual(otherChanges[i].doc)) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return ViewSnapshot;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An event from the RemoteStore. It is split into targetChanges (changes to the
	 * state or the set of documents in our watched targets) and documentUpdates
	 * (changes to the actual documents).
	 */
	var RemoteEvent = /** @class */ (function () {
	    function RemoteEvent(
	    /**
	     * The snapshot version this event brings us up to, or MIN if not set.
	     */
	    snapshotVersion, 
	    /**
	     * A map from target to changes to the target. See TargetChange.
	     */
	    targetChanges, 
	    /**
	     * A set of targets that is known to be inconsistent. Listens for these
	     * targets should be re-established without resume tokens.
	     */
	    targetMismatches, 
	    /**
	     * A set of which documents have changed or been deleted, along with the
	     * doc's new values (if not deleted).
	     */
	    documentUpdates, 
	    /**
	     * A set of which document updates are due only to limbo resolution targets.
	     */
	    resolvedLimboDocuments) {
	        this.snapshotVersion = snapshotVersion;
	        this.targetChanges = targetChanges;
	        this.targetMismatches = targetMismatches;
	        this.documentUpdates = documentUpdates;
	        this.resolvedLimboDocuments = resolvedLimboDocuments;
	    }
	    /**
	     * HACK: Views require RemoteEvents in order to determine whether the view is
	     * CURRENT, but secondary tabs don't receive remote events. So this method is
	     * used to create a synthesized RemoteEvent that can be used to apply a
	     * CURRENT status change to a View, for queries executed in a different tab.
	     */
	    // PORTING NOTE: Multi-tab only
	    RemoteEvent.createSynthesizedRemoteEventForCurrentChange = function (targetId, current) {
	        var targetChanges = (_a = {}, _a[targetId] = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current), _a);
	        return new RemoteEvent(SnapshotVersion.MIN, targetChanges, targetIdSet(), maybeDocumentMap(), documentKeySet());
	        var _a;
	    };
	    return RemoteEvent;
	}());
	/**
	 * A TargetChange specifies the set of changes for a specific target as part of
	 * a RemoteEvent. These changes track which documents are added, modified or
	 * removed, as well as the target's resume token and whether the target is
	 * marked CURRENT.
	 * The actual changes *to* documents are not part of the TargetChange since
	 * documents may be part of multiple targets.
	 */
	var TargetChange = /** @class */ (function () {
	    function TargetChange(
	    /**
	     * An opaque, server-assigned token that allows watching a query to be resumed
	     * after disconnecting without retransmitting all the data that matches the
	     * query. The resume token essentially identifies a point in time from which
	     * the server should resume sending results.
	     */
	    resumeToken, 
	    /**
	     * The "current" (synced) status of this target. Note that "current"
	     * has special meaning in the RPC protocol that implies that a target is
	     * both up-to-date and consistent with the rest of the watch stream.
	     */
	    current, 
	    /**
	     * The set of documents that were newly assigned to this target as part of
	     * this remote event.
	     */
	    addedDocuments, 
	    /**
	     * The set of documents that were already assigned to this target but received
	     * an update during this remote event.
	     */
	    modifiedDocuments, 
	    /**
	     * The set of documents that were removed from this target as part of this
	     * remote event.
	     */
	    removedDocuments) {
	        this.resumeToken = resumeToken;
	        this.current = current;
	        this.addedDocuments = addedDocuments;
	        this.modifiedDocuments = modifiedDocuments;
	        this.removedDocuments = removedDocuments;
	    }
	    /**
	     * HACK: Views require TargetChanges in order to determine whether the view is
	     * CURRENT, but secondary tabs don't receive remote events. So this method is
	     * used to create a synthesized TargetChanges that can be used to apply a
	     * CURRENT status change to a View, for queries executed in a different tab.
	     */
	    // PORTING NOTE: Multi-tab only
	    TargetChange.createSynthesizedTargetChangeForCurrentChange = function (targetId, current) {
	        return new TargetChange(emptyByteString(), current, documentKeySet(), documentKeySet(), documentKeySet());
	    };
	    return TargetChange;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a changed document and a list of target ids to which this change
	 * applies.
	 *
	 * If document has been deleted NoDocument will be provided.
	 */
	var DocumentWatchChange = /** @class */ (function () {
	    function DocumentWatchChange(
	    /** The new document applies to all of these targets. */
	    updatedTargetIds, 
	    /** The new document is removed from all of these targets. */
	    removedTargetIds, 
	    /** The key of the document for this change. */
	    key, 
	    /**
	     * The new document or NoDocument if it was deleted. Is null if the
	     * document went out of view without the server sending a new document.
	     */
	    newDoc) {
	        this.updatedTargetIds = updatedTargetIds;
	        this.removedTargetIds = removedTargetIds;
	        this.key = key;
	        this.newDoc = newDoc;
	    }
	    return DocumentWatchChange;
	}());
	var ExistenceFilterChange = /** @class */ (function () {
	    function ExistenceFilterChange(targetId, existenceFilter) {
	        this.targetId = targetId;
	        this.existenceFilter = existenceFilter;
	    }
	    return ExistenceFilterChange;
	}());
	var WatchTargetChangeState;
	(function (WatchTargetChangeState) {
	    WatchTargetChangeState[WatchTargetChangeState["NoChange"] = 0] = "NoChange";
	    WatchTargetChangeState[WatchTargetChangeState["Added"] = 1] = "Added";
	    WatchTargetChangeState[WatchTargetChangeState["Removed"] = 2] = "Removed";
	    WatchTargetChangeState[WatchTargetChangeState["Current"] = 3] = "Current";
	    WatchTargetChangeState[WatchTargetChangeState["Reset"] = 4] = "Reset";
	})(WatchTargetChangeState || (WatchTargetChangeState = {}));
	var WatchTargetChange = /** @class */ (function () {
	    function WatchTargetChange(
	    /** What kind of change occurred to the watch target. */
	    state, 
	    /** The target IDs that were added/removed/set. */
	    targetIds, 
	    /**
	     * An opaque, server-assigned token that allows watching a query to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the query. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */
	    resumeToken, 
	    /** An RPC error indicating why the watch failed. */
	    cause) {
	        if (resumeToken === void 0) { resumeToken = emptyByteString(); }
	        if (cause === void 0) { cause = null; }
	        this.state = state;
	        this.targetIds = targetIds;
	        this.resumeToken = resumeToken;
	        this.cause = cause;
	    }
	    return WatchTargetChange;
	}());
	/** Tracks the internal state of a Watch target. */
	var TargetState = /** @class */ (function () {
	    function TargetState() {
	        /**
	         * The number of pending responses (adds or removes) that we are waiting on.
	         * We only consider targets active that have no pending responses.
	         */
	        this.pendingResponses = 0;
	        /**
	         * Keeps track of the document changes since the last raised snapshot.
	         *
	         * These changes are continuously updated as we receive document updates and
	         * always reflect the current set of changes against the last issued snapshot.
	         */
	        this.documentChanges = snapshotChangesMap();
	        /** See public getters for explanations of these fields. */
	        this._resumeToken = emptyByteString();
	        this._current = false;
	        /**
	         * Whether this target state should be included in the next snapshot. We
	         * initialize to true so that newly-added targets are included in the next
	         * RemoteEvent.
	         */
	        this._hasPendingChanges = true;
	    }
	    Object.defineProperty(TargetState.prototype, "current", {
	        /**
	         * Whether this target has been marked 'current'.
	         *
	         * 'Current' has special meaning in the RPC protocol: It implies that the
	         * Watch backend has sent us all changes up to the point at which the target
	         * was added and that the target is consistent with the rest of the watch
	         * stream.
	         */
	        get: function () {
	            return this._current;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TargetState.prototype, "resumeToken", {
	        /** The last resume token sent to us for this target. */
	        get: function () {
	            return this._resumeToken;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TargetState.prototype, "isPending", {
	        /** Whether this target has pending target adds or target removes. */
	        get: function () {
	            return this.pendingResponses !== 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TargetState.prototype, "hasPendingChanges", {
	        /** Whether we have modified any state that should trigger a snapshot. */
	        get: function () {
	            return this._hasPendingChanges;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Applies the resume token to the TargetChange, but only when it has a new
	     * value. Empty resumeTokens are discarded.
	     */
	    TargetState.prototype.updateResumeToken = function (resumeToken) {
	        if (resumeToken.length > 0) {
	            this._hasPendingChanges = true;
	            this._resumeToken = resumeToken;
	        }
	    };
	    /**
	     * Creates a target change from the current set of changes.
	     *
	     * To reset the document changes after raising this snapshot, call
	     * `clearPendingChanges()`.
	     */
	    TargetState.prototype.toTargetChange = function () {
	        var addedDocuments = documentKeySet();
	        var modifiedDocuments = documentKeySet();
	        var removedDocuments = documentKeySet();
	        this.documentChanges.forEach(function (key, changeType) {
	            switch (changeType) {
	                case ChangeType.Added:
	                    addedDocuments = addedDocuments.add(key);
	                    break;
	                case ChangeType.Modified:
	                    modifiedDocuments = modifiedDocuments.add(key);
	                    break;
	                case ChangeType.Removed:
	                    removedDocuments = removedDocuments.add(key);
	                    break;
	                default:
	                    fail('Encountered invalid change type: ' + changeType);
	            }
	        });
	        return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
	    };
	    /**
	     * Resets the document changes and sets `hasPendingChanges` to false.
	     */
	    TargetState.prototype.clearPendingChanges = function () {
	        this._hasPendingChanges = false;
	        this.documentChanges = snapshotChangesMap();
	    };
	    TargetState.prototype.addDocumentChange = function (key, changeType) {
	        this._hasPendingChanges = true;
	        this.documentChanges = this.documentChanges.insert(key, changeType);
	    };
	    TargetState.prototype.removeDocumentChange = function (key) {
	        this._hasPendingChanges = true;
	        this.documentChanges = this.documentChanges.remove(key);
	    };
	    TargetState.prototype.recordPendingTargetRequest = function () {
	        this.pendingResponses += 1;
	    };
	    TargetState.prototype.recordTargetResponse = function () {
	        this.pendingResponses -= 1;
	    };
	    TargetState.prototype.markCurrent = function () {
	        this._hasPendingChanges = true;
	        this._current = true;
	    };
	    return TargetState;
	}());
	/**
	 * A helper class to accumulate watch changes into a RemoteEvent.
	 */
	var WatchChangeAggregator = /** @class */ (function () {
	    function WatchChangeAggregator(metadataProvider) {
	        this.metadataProvider = metadataProvider;
	        /** The internal state of all tracked targets. */
	        this.targetStates = {};
	        /** Keeps track of the documents to update since the last raised snapshot. */
	        this.pendingDocumentUpdates = maybeDocumentMap();
	        /** A mapping of document keys to their set of target IDs. */
	        this.pendingDocumentTargetMapping = documentTargetMap();
	        /**
	         * A list of targets with existence filter mismatches. These targets are
	         * known to be inconsistent and their listens needs to be re-established by
	         * RemoteStore.
	         */
	        this.pendingTargetResets = new SortedSet(primitiveComparator);
	    }
	    /**
	     * Processes and adds the DocumentWatchChange to the current set of changes.
	     */
	    WatchChangeAggregator.prototype.handleDocumentChange = function (docChange) {
	        for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {
	            var targetId = _a[_i];
	            if (docChange.newDoc instanceof Document) {
	                this.addDocumentToTarget(targetId, docChange.newDoc);
	            }
	            else if (docChange.newDoc instanceof NoDocument) {
	                this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
	            }
	        }
	        for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {
	            var targetId = _c[_b];
	            this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
	        }
	    };
	    /** Processes and adds the WatchTargetChange to the current set of changes. */
	    WatchChangeAggregator.prototype.handleTargetChange = function (targetChange) {
	        var _this = this;
	        this.forEachTarget(targetChange, function (targetId) {
	            var targetState = _this.ensureTargetState(targetId);
	            switch (targetChange.state) {
	                case WatchTargetChangeState.NoChange:
	                    if (_this.isActiveTarget(targetId)) {
	                        targetState.updateResumeToken(targetChange.resumeToken);
	                    }
	                    break;
	                case WatchTargetChangeState.Added:
	                    // We need to decrement the number of pending acks needed from watch
	                    // for this targetId.
	                    targetState.recordTargetResponse();
	                    if (!targetState.isPending) {
	                        // We have a freshly added target, so we need to reset any state
	                        // that we had previously. This can happen e.g. when remove and add
	                        // back a target for existence filter mismatches.
	                        targetState.clearPendingChanges();
	                    }
	                    targetState.updateResumeToken(targetChange.resumeToken);
	                    break;
	                case WatchTargetChangeState.Removed:
	                    // We need to keep track of removed targets to we can post-filter and
	                    // remove any target changes.
	                    // We need to decrement the number of pending acks needed from watch
	                    // for this targetId.
	                    targetState.recordTargetResponse();
	                    if (!targetState.isPending) {
	                        _this.removeTarget(targetId);
	                    }
	                    assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');
	                    break;
	                case WatchTargetChangeState.Current:
	                    if (_this.isActiveTarget(targetId)) {
	                        targetState.markCurrent();
	                        targetState.updateResumeToken(targetChange.resumeToken);
	                    }
	                    break;
	                case WatchTargetChangeState.Reset:
	                    if (_this.isActiveTarget(targetId)) {
	                        // Reset the target and synthesizes removes for all existing
	                        // documents. The backend will re-add any documents that still
	                        // match the target before it sends the next global snapshot.
	                        _this.resetTarget(targetId);
	                        targetState.updateResumeToken(targetChange.resumeToken);
	                    }
	                    break;
	                default:
	                    fail('Unknown target watch change state: ' + targetChange.state);
	            }
	        });
	    };
	    /**
	     * Iterates over all targetIds that the watch change applies to: either the
	     * targetIds explicitly listed in the change or the targetIds of all currently
	     * active targets.
	     */
	    WatchChangeAggregator.prototype.forEachTarget = function (targetChange, fn) {
	        if (targetChange.targetIds.length > 0) {
	            targetChange.targetIds.forEach(fn);
	        }
	        else {
	            forEachNumber(this.targetStates, fn);
	        }
	    };
	    /**
	     * Handles existence filters and synthesizes deletes for filter mismatches.
	     * Targets that are invalidated by filter mismatches are added to
	     * `pendingTargetResets`.
	     */
	    WatchChangeAggregator.prototype.handleExistenceFilter = function (watchChange) {
	        var targetId = watchChange.targetId;
	        var expectedCount = watchChange.existenceFilter.count;
	        var queryData = this.queryDataForActiveTarget(targetId);
	        if (queryData) {
	            var query = queryData.query;
	            if (query.isDocumentQuery()) {
	                if (expectedCount === 0) {
	                    // The existence filter told us the document does not exist. We deduce
	                    // that this document does not exist and apply a deleted document to
	                    // our updates. Without applying this deleted document there might be
	                    // another query that will raise this document as part of a snapshot
	                    // until it is resolved, essentially exposing inconsistency between
	                    // queries.
	                    var key = new DocumentKey(query.path);
	                    this.removeDocumentFromTarget(targetId, key, new NoDocument(key, SnapshotVersion.forDeletedDoc()));
	                }
	                else {
	                    assert(expectedCount === 1, 'Single document existence filter with count: ' + expectedCount);
	                }
	            }
	            else {
	                var currentSize = this.getCurrentDocumentCountForTarget(targetId);
	                if (currentSize !== expectedCount) {
	                    // Existence filter mismatch: We reset the mapping and raise a new
	                    // snapshot with `isFromCache:true`.
	                    this.resetTarget(targetId);
	                    this.pendingTargetResets = this.pendingTargetResets.add(targetId);
	                }
	            }
	        }
	    };
	    /**
	     * Converts the currently accumulated state into a remote event at the
	     * provided snapshot version. Resets the accumulated changes before returning.
	     */
	    WatchChangeAggregator.prototype.createRemoteEvent = function (snapshotVersion) {
	        var _this = this;
	        var targetChanges = {};
	        forEachNumber(this.targetStates, function (targetId, targetState) {
	            var queryData = _this.queryDataForActiveTarget(targetId);
	            if (queryData) {
	                if (targetState.current && queryData.query.isDocumentQuery()) {
	                    // Document queries for document that don't exist can produce an empty
	                    // result set. To update our local cache, we synthesize a document
	                    // delete if we have not previously received the document. This
	                    // resolves the limbo state of the document, removing it from
	                    // limboDocumentRefs.
	                    //
	                    // TODO(dimond): Ideally we would have an explicit lookup query
	                    // instead resulting in an explicit delete message and we could
	                    // remove this special logic.
	                    var key = new DocumentKey(queryData.query.path);
	                    if (_this.pendingDocumentUpdates.get(key) === null &&
	                        !_this.targetContainsDocument(targetId, key)) {
	                        _this.removeDocumentFromTarget(targetId, key, new NoDocument(key, snapshotVersion));
	                    }
	                }
	                if (targetState.hasPendingChanges) {
	                    targetChanges[targetId] = targetState.toTargetChange();
	                    targetState.clearPendingChanges();
	                }
	            }
	        });
	        var resolvedLimboDocuments = documentKeySet();
	        // We extract the set of limbo-only document updates as the GC logic
	        // special-cases documents that do not appear in the query cache.
	        //
	        // TODO(gsoltis): Expand on this comment once GC is available in the JS
	        // client.
	        this.pendingDocumentTargetMapping.forEach(function (key, targets) {
	            var isOnlyLimboTarget = true;
	            targets.forEachWhile(function (targetId) {
	                var queryData = _this.queryDataForActiveTarget(targetId);
	                if (queryData && queryData.purpose !== QueryPurpose.LimboResolution) {
	                    isOnlyLimboTarget = false;
	                    return false;
	                }
	                return true;
	            });
	            if (isOnlyLimboTarget) {
	                resolvedLimboDocuments = resolvedLimboDocuments.add(key);
	            }
	        });
	        var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
	        this.pendingDocumentUpdates = maybeDocumentMap();
	        this.pendingDocumentTargetMapping = documentTargetMap();
	        this.pendingTargetResets = new SortedSet(primitiveComparator);
	        return remoteEvent;
	    };
	    /**
	     * Adds the provided document to the internal list of document updates and
	     * its document key to the given target's mapping.
	     */
	    // Visible for testing.
	    WatchChangeAggregator.prototype.addDocumentToTarget = function (targetId, document) {
	        if (!this.isActiveTarget(targetId)) {
	            return;
	        }
	        var changeType = this.targetContainsDocument(targetId, document.key)
	            ? ChangeType.Modified
	            : ChangeType.Added;
	        var targetState = this.ensureTargetState(targetId);
	        targetState.addDocumentChange(document.key, changeType);
	        this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);
	        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));
	    };
	    /**
	     * Removes the provided document from the target mapping. If the
	     * document no longer matches the target, but the document's state is still
	     * known (e.g. we know that the document was deleted or we received the change
	     * that caused the filter mismatch), the new document can be provided
	     * to update the remote document cache.
	     */
	    // Visible for testing.
	    WatchChangeAggregator.prototype.removeDocumentFromTarget = function (targetId, key, updatedDocument) {
	        if (!this.isActiveTarget(targetId)) {
	            return;
	        }
	        var targetState = this.ensureTargetState(targetId);
	        if (this.targetContainsDocument(targetId, key)) {
	            targetState.addDocumentChange(key, ChangeType.Removed);
	        }
	        else {
	            // The document may have entered and left the target before we raised a
	            // snapshot, so we can just ignore the change.
	            targetState.removeDocumentChange(key);
	        }
	        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));
	        if (updatedDocument) {
	            this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
	        }
	    };
	    WatchChangeAggregator.prototype.removeTarget = function (targetId) {
	        delete this.targetStates[targetId];
	    };
	    /**
	     * Returns the current count of documents in the target. This includes both
	     * the number of documents that the LocalStore considers to be part of the
	     * target as well as any accumulated changes.
	     */
	    WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget = function (targetId) {
	        var targetState = this.ensureTargetState(targetId);
	        var targetChange = targetState.toTargetChange();
	        return (this.metadataProvider.getRemoteKeysForTarget(targetId).size +
	            targetChange.addedDocuments.size -
	            targetChange.removedDocuments.size);
	    };
	    /**
	     * Increment the number of acks needed from watch before we can consider the
	     * server to be 'in-sync' with the client's active targets.
	     */
	    WatchChangeAggregator.prototype.recordPendingTargetRequest = function (targetId) {
	        // For each request we get we need to record we need a response for it.
	        var targetState = this.ensureTargetState(targetId);
	        targetState.recordPendingTargetRequest();
	    };
	    WatchChangeAggregator.prototype.ensureTargetState = function (targetId) {
	        if (!this.targetStates[targetId]) {
	            this.targetStates[targetId] = new TargetState();
	        }
	        return this.targetStates[targetId];
	    };
	    WatchChangeAggregator.prototype.ensureDocumentTargetMapping = function (key) {
	        var targetMapping = this.pendingDocumentTargetMapping.get(key);
	        if (!targetMapping) {
	            targetMapping = new SortedSet(primitiveComparator);
	            this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
	        }
	        return targetMapping;
	    };
	    /**
	     * Verifies that the user is still interested in this target (by calling
	     * `getQueryDataForTarget()`) and that we are not waiting for pending ADDs
	     * from watch.
	     */
	    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {
	        return this.queryDataForActiveTarget(targetId) !== null;
	    };
	    /**
	     * Returns the QueryData for an active target (i.e. a target that the user
	     * is still interested in that has no outstanding target change requests).
	     */
	    WatchChangeAggregator.prototype.queryDataForActiveTarget = function (targetId) {
	        var targetState = this.targetStates[targetId];
	        return targetState && targetState.isPending
	            ? null
	            : this.metadataProvider.getQueryDataForTarget(targetId);
	    };
	    /**
	     * Resets the state of a Watch target to its initial state (e.g. sets
	     * 'current' to false, clears the resume token and removes its target mapping
	     * from all documents).
	     */
	    WatchChangeAggregator.prototype.resetTarget = function (targetId) {
	        var _this = this;
	        assert(!this.targetStates[targetId].isPending, 'Should only reset active targets');
	        this.targetStates[targetId] = new TargetState();
	        // Trigger removal for any documents currently mapped to this target.
	        // These removals will be part of the initial snapshot if Watch does not
	        // resend these documents.
	        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
	        existingKeys.forEach(function (key) {
	            _this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);
	        });
	    };
	    /**
	     * Returns whether the LocalStore considers the document to be part of the
	     * specified target.
	     */
	    WatchChangeAggregator.prototype.targetContainsDocument = function (targetId, key) {
	        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
	        return existingKeys.has(key);
	    };
	    return WatchChangeAggregator;
	}());
	function documentTargetMap() {
	    return new SortedMap(DocumentKey.comparator);
	}
	function snapshotChangesMap() {
	    return new SortedMap(DocumentKey.comparator);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DIRECTIONS = (function () {
	    var dirs = {};
	    dirs[Direction.ASCENDING.name] = 'ASCENDING';
	    dirs[Direction.DESCENDING.name] = 'DESCENDING';
	    return dirs;
	})();
	var OPERATORS = (function () {
	    var ops = {};
	    ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';
	    ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';
	    ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';
	    ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';
	    ops[RelationOp.EQUAL.name] = 'EQUAL';
	    ops[RelationOp.ARRAY_CONTAINS.name] = 'ARRAY_CONTAINS';
	    return ops;
	})();
	// A RegExp matching ISO 8601 UTC timestamps with optional fraction.
	var ISO_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
	function assertPresent(value, description) {
	    assert(!isNullOrUndefined(value), description + ' is missing');
	}
	function parseInt64(value) {
	    // TODO(bjornick): Handle int64 greater than 53 bits.
	    if (typeof value === 'number') {
	        return value;
	    }
	    else if (typeof value === 'string') {
	        return Number(value);
	    }
	    else {
	        return fail("can't parse " + value);
	    }
	}
	/**
	 * Generates JsonObject values for the Datastore API suitable for sending to
	 * either GRPC stub methods or via the JSON/HTTP REST API.
	 * TODO(klimt): We can remove the databaseId argument if we keep the full
	 * resource name in documents.
	 */
	var JsonProtoSerializer = /** @class */ (function () {
	    function JsonProtoSerializer(databaseId, options) {
	        this.databaseId = databaseId;
	        this.options = options;
	    }
	    JsonProtoSerializer.prototype.emptyByteString = function () {
	        if (this.options.useProto3Json) {
	            return '';
	        }
	        else {
	            return new Uint8Array(0);
	        }
	    };
	    JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {
	        // byteStrings can be either string or UInt8Array, but the typings say
	        // it's always a string. Cast as string to avoid type check failing
	        return byteString;
	    };
	    JsonProtoSerializer.prototype.fromRpcStatus = function (status) {
	        var code = status.code === undefined
	            ? Code.UNKNOWN
	            : mapCodeFromRpcCode(status.code);
	        return new FirestoreError(code, status.message || '');
	    };
	    /**
	     * Returns a value for a number (or undefined) that's appropriate to put into
	     * a google.protobuf.Int32Value proto.
	     * DO NOT USE THIS FOR ANYTHING ELSE.
	     * This method cheats. It's typed as returning "number" because that's what
	     * our generated proto interfaces say Int32Value must be. But GRPC actually
	     * expects a { value: <number> } struct.
	     */
	    JsonProtoSerializer.prototype.toInt32Value = function (val) {
	        if (!isNullOrUndefined(val)) {
	            // tslint:disable-next-line:no-any We need to match generated Proto types.
	            return { value: val };
	        }
	        else {
	            return undefined;
	        }
	    };
	    /**
	     * Returns a number (or null) from a google.protobuf.Int32Value proto.
	     * DO NOT USE THIS FOR ANYTHING ELSE.
	     * This method cheats. It's typed as accepting "number" because that's what
	     * our generated proto interfaces say Int32Value must be, but it actually
	     * accepts { value: number } to match our serialization in toInt32Value().
	     */
	    JsonProtoSerializer.prototype.fromInt32Value = function (val) {
	        var result;
	        if (typeof val === 'object') {
	            // tslint:disable-next-line:no-any We need to match generated Proto types.
	            result = val.value;
	        }
	        else {
	            // We accept raw numbers (without the {value: ... } wrapper) for
	            // compatibility with legacy persisted data.
	            result = val;
	        }
	        return isNullOrUndefined(result) ? null : result;
	    };
	    /**
	     * Returns a value for a Date that's appropriate to put into a proto.
	     * DO NOT USE THIS FOR ANYTHING ELSE.
	     * This method cheats. It's typed as returning "string" because that's what
	     * our generated proto interfaces say dates must be. But it's easier and safer
	     * to actually return a Timestamp proto.
	     */
	    JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {
	        return {
	            seconds: timestamp.seconds,
	            nanos: timestamp.nanoseconds
	            // tslint:disable-next-line:no-any
	        };
	    };
	    JsonProtoSerializer.prototype.fromTimestamp = function (date) {
	        // The json interface (for the browser) will return an iso timestamp string,
	        // while the proto js library (for node) will return a
	        // google.protobuf.Timestamp instance.
	        if (typeof date === 'string') {
	            // TODO(b/37282237): Use strings for Proto3 timestamps
	            // assert(this.options.useProto3Json,
	            //   'The timestamp string format requires Proto3.');
	            return this.fromIso8601String(date);
	        }
	        else {
	            assert(!!date, 'Cannot deserialize null or undefined timestamp.');
	            // TODO(b/37282237): Use strings for Proto3 timestamps
	            // assert(!this.options.useProto3Json,
	            //   'The timestamp instance format requires Proto JS.');
	            var seconds = parseInt64(date.seconds || '0');
	            var nanos = date.nanos || 0;
	            return new Timestamp(seconds, nanos);
	        }
	    };
	    JsonProtoSerializer.prototype.fromIso8601String = function (utc) {
	        // The date string can have higher precision (nanos) than the Date class
	        // (millis), so we do some custom parsing here.
	        // Parse the nanos right out of the string.
	        var nanos = 0;
	        var fraction = ISO_REG_EXP.exec(utc);
	        assert(!!fraction, 'invalid timestamp: ' + utc);
	        if (fraction[1]) {
	            // Pad the fraction out to 9 digits (nanos).
	            var nanoStr = fraction[1];
	            nanoStr = (nanoStr + '000000000').substr(0, 9);
	            nanos = Number(nanoStr);
	        }
	        // Parse the date to get the seconds.
	        var date = new Date(utc);
	        var seconds = Math.floor(date.getTime() / 1000);
	        return new Timestamp(seconds, nanos);
	    };
	    /**
	     * Returns a value for bytes that's appropriate to put in a proto.
	     * DO NOT USE THIS FOR ANYTHING ELSE.
	     * This method cheats. It's typed as returning "string" because that's what
	     * our generated proto interfaces say bytes must be. But it should return
	     * an Uint8Array in Node.
	     */
	    JsonProtoSerializer.prototype.toBytes = function (bytes) {
	        if (this.options.useProto3Json) {
	            return bytes.toBase64();
	        }
	        else {
	            // The typings say it's a string, but it needs to be a Uint8Array in Node.
	            return this.unsafeCastProtoByteString(bytes.toUint8Array());
	        }
	    };
	    /**
	     * Parse the blob from the protos into the internal Blob class. Note that the
	     * typings assume all blobs are strings, but they are actually Uint8Arrays
	     * on Node.
	     */
	    JsonProtoSerializer.prototype.fromBlob = function (blob) {
	        if (typeof blob === 'string') {
	            assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');
	            return Blob.fromBase64String(blob);
	        }
	        else {
	            assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');
	            return Blob.fromUint8Array(blob);
	        }
	    };
	    JsonProtoSerializer.prototype.toVersion = function (version) {
	        return this.toTimestamp(version.toTimestamp());
	    };
	    JsonProtoSerializer.prototype.fromVersion = function (version) {
	        assert(!!version, "Trying to deserialize version that isn't set");
	        return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));
	    };
	    JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {
	        return this.fullyQualifiedPrefixPath(databaseId)
	            .child('documents')
	            .child(path)
	            .canonicalString();
	    };
	    JsonProtoSerializer.prototype.fromResourceName = function (name) {
	        var resource = ResourcePath.fromString(name);
	        assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());
	        return resource;
	    };
	    JsonProtoSerializer.prototype.toName = function (key) {
	        return this.toResourceName(this.databaseId, key.path);
	    };
	    JsonProtoSerializer.prototype.fromName = function (name) {
	        var resource = this.fromResourceName(name);
	        assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' +
	            resource.get(1) +
	            ' vs ' +
	            this.databaseId.projectId);
	        assert((!resource.get(3) && !this.databaseId.database) ||
	            resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' +
	            resource.get(3) +
	            ' vs ' +
	            this.databaseId.database);
	        return new DocumentKey(this.extractLocalPathFromResourceName(resource));
	    };
	    JsonProtoSerializer.prototype.toQueryPath = function (path) {
	        if (path.length === 0) {
	            // If the path is empty, the backend requires we leave off the /documents
	            // at the end.
	            return this.encodedDatabaseId;
	        }
	        return this.toResourceName(this.databaseId, path);
	    };
	    JsonProtoSerializer.prototype.fromQueryPath = function (name) {
	        var resourceName = this.fromResourceName(name);
	        if (resourceName.length === 4) {
	            return ResourcePath.EMPTY_PATH;
	        }
	        return this.extractLocalPathFromResourceName(resourceName);
	    };
	    Object.defineProperty(JsonProtoSerializer.prototype, "encodedDatabaseId", {
	        get: function () {
	            var path = new ResourcePath([
	                'projects',
	                this.databaseId.projectId,
	                'databases',
	                this.databaseId.database
	            ]);
	            return path.canonicalString();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {
	        return new ResourcePath([
	            'projects',
	            databaseId.projectId,
	            'databases',
	            databaseId.database
	        ]);
	    };
	    JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {
	        assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());
	        return resourceName.popFirst(5);
	    };
	    JsonProtoSerializer.prototype.isValidResourceName = function (path) {
	        // Resource names have at least 4 components (project ID, database ID)
	        return (path.length >= 4 &&
	            path.get(0) === 'projects' &&
	            path.get(2) === 'databases');
	    };
	    JsonProtoSerializer.prototype.toValue = function (val) {
	        if (val instanceof NullValue) {
	            return { nullValue: 'NULL_VALUE' };
	        }
	        else if (val instanceof BooleanValue) {
	            return { booleanValue: val.value() };
	        }
	        else if (val instanceof IntegerValue) {
	            return { integerValue: '' + val.value() };
	        }
	        else if (val instanceof DoubleValue) {
	            var doubleValue = val.value();
	            if (this.options.useProto3Json) {
	                // Proto 3 let's us encode NaN and Infinity as string values as
	                // expected by the backend. This is currently not checked by our unit
	                // tests because they rely on protobuf.js.
	                if (isNaN(doubleValue)) {
	                    return { doubleValue: 'NaN' };
	                }
	                else if (doubleValue === Infinity) {
	                    return { doubleValue: 'Infinity' };
	                }
	                else if (doubleValue === -Infinity) {
	                    return { doubleValue: '-Infinity' };
	                }
	            }
	            return { doubleValue: val.value() };
	        }
	        else if (val instanceof StringValue) {
	            return { stringValue: val.value() };
	        }
	        else if (val instanceof ObjectValue) {
	            return { mapValue: this.toMapValue(val) };
	        }
	        else if (val instanceof ArrayValue) {
	            return { arrayValue: this.toArrayValue(val) };
	        }
	        else if (val instanceof TimestampValue) {
	            return {
	                timestampValue: this.toTimestamp(val.internalValue)
	            };
	        }
	        else if (val instanceof GeoPointValue) {
	            return {
	                geoPointValue: {
	                    latitude: val.value().latitude,
	                    longitude: val.value().longitude
	                }
	            };
	        }
	        else if (val instanceof BlobValue) {
	            return {
	                bytesValue: this.toBytes(val.value())
	            };
	        }
	        else if (val instanceof RefValue) {
	            return {
	                referenceValue: this.toResourceName(val.databaseId, val.key.path)
	            };
	        }
	        else {
	            return fail('Unknown FieldValue ' + JSON.stringify(val));
	        }
	    };
	    JsonProtoSerializer.prototype.fromValue = function (obj) {
	        var _this = this;
	        // tslint:disable-next-line:no-any
	        var type = obj['value_type'];
	        if (hasTag(obj, type, 'nullValue')) {
	            return NullValue.INSTANCE;
	        }
	        else if (hasTag(obj, type, 'booleanValue')) {
	            return BooleanValue.of(obj.booleanValue);
	        }
	        else if (hasTag(obj, type, 'integerValue')) {
	            return new IntegerValue(parseInt64(obj.integerValue));
	        }
	        else if (hasTag(obj, type, 'doubleValue')) {
	            if (this.options.useProto3Json) {
	                // Proto 3 uses the string values 'NaN' and 'Infinity'.
	                if (obj.doubleValue === 'NaN') {
	                    return DoubleValue.NAN;
	                }
	                else if (obj.doubleValue === 'Infinity') {
	                    return DoubleValue.POSITIVE_INFINITY;
	                }
	                else if (obj.doubleValue === '-Infinity') {
	                    return DoubleValue.NEGATIVE_INFINITY;
	                }
	            }
	            return new DoubleValue(obj.doubleValue);
	        }
	        else if (hasTag(obj, type, 'stringValue')) {
	            return new StringValue(obj.stringValue);
	        }
	        else if (hasTag(obj, type, 'mapValue')) {
	            return this.fromFields(obj.mapValue.fields || {});
	        }
	        else if (hasTag(obj, type, 'arrayValue')) {
	            // "values" is not present if the array is empty
	            assertPresent(obj.arrayValue, 'arrayValue');
	            var values$$1 = obj.arrayValue.values || [];
	            return new ArrayValue(values$$1.map(function (v) { return _this.fromValue(v); }));
	        }
	        else if (hasTag(obj, type, 'timestampValue')) {
	            assertPresent(obj.timestampValue, 'timestampValue');
	            return new TimestampValue(this.fromTimestamp(obj.timestampValue));
	        }
	        else if (hasTag(obj, type, 'geoPointValue')) {
	            assertPresent(obj.geoPointValue, 'geoPointValue');
	            var latitude = obj.geoPointValue.latitude || 0;
	            var longitude = obj.geoPointValue.longitude || 0;
	            return new GeoPointValue(new GeoPoint(latitude, longitude));
	        }
	        else if (hasTag(obj, type, 'bytesValue')) {
	            assertPresent(obj.bytesValue, 'bytesValue');
	            var blob = this.fromBlob(obj.bytesValue);
	            return new BlobValue(blob);
	        }
	        else if (hasTag(obj, type, 'referenceValue')) {
	            assertPresent(obj.referenceValue, 'referenceValue');
	            var resourceName = this.fromResourceName(obj.referenceValue);
	            var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));
	            var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));
	            return new RefValue(dbId, key);
	        }
	        else {
	            return fail('Unknown Value proto ' + JSON.stringify(obj));
	        }
	    };
	    /** Creates an api.Document from key and fields (but no create/update time) */
	    JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {
	        return {
	            name: this.toName(key),
	            fields: this.toFields(fields)
	        };
	    };
	    JsonProtoSerializer.prototype.toDocument = function (document) {
	        assert(!document.hasLocalMutations, "Can't serialize documents with mutations.");
	        return {
	            name: this.toName(document.key),
	            fields: this.toFields(document.data),
	            updateTime: this.toTimestamp(document.version.toTimestamp())
	        };
	    };
	    JsonProtoSerializer.prototype.fromDocument = function (document, hasCommittedMutations) {
	        return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), { hasCommittedMutations: !!hasCommittedMutations });
	    };
	    JsonProtoSerializer.prototype.toFields = function (fields) {
	        var _this = this;
	        var result = {};
	        fields.forEach(function (key, value) {
	            result[key] = _this.toValue(value);
	        });
	        return result;
	    };
	    JsonProtoSerializer.prototype.fromFields = function (object) {
	        var _this = this;
	        // Proto map<string, Value> gets mapped to Object, so cast it.
	        var map = object;
	        var result = ObjectValue.EMPTY;
	        forEach(map, function (key, value) {
	            result = result.set(new FieldPath([key]), _this.fromValue(value));
	        });
	        return result;
	    };
	    JsonProtoSerializer.prototype.toMapValue = function (map) {
	        return {
	            fields: this.toFields(map)
	        };
	    };
	    JsonProtoSerializer.prototype.toArrayValue = function (array) {
	        var _this = this;
	        var result = [];
	        array.forEach(function (value) {
	            result.push(_this.toValue(value));
	        });
	        return { values: result };
	    };
	    JsonProtoSerializer.prototype.fromFound = function (doc) {
	        assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');
	        assertPresent(doc.found.name, 'doc.found.name');
	        assertPresent(doc.found.updateTime, 'doc.found.updateTime');
	        var key = this.fromName(doc.found.name);
	        var version = this.fromVersion(doc.found.updateTime);
	        var fields = this.fromFields(doc.found.fields || {});
	        return new Document(key, version, fields, {});
	    };
	    JsonProtoSerializer.prototype.fromMissing = function (result) {
	        assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');
	        assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');
	        var key = this.fromName(result.missing);
	        var version = this.fromVersion(result.readTime);
	        return new NoDocument(key, version);
	    };
	    JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {
	        // tslint:disable-next-line:no-any
	        var type = result['result'];
	        if (hasTag(result, type, 'found')) {
	            return this.fromFound(result);
	        }
	        else if (hasTag(result, type, 'missing')) {
	            return this.fromMissing(result);
	        }
	        return fail('invalid batch get response: ' + JSON.stringify(result));
	    };
	    JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {
	        switch (state) {
	            case WatchTargetChangeState.Added:
	                return 'ADD';
	            case WatchTargetChangeState.Current:
	                return 'CURRENT';
	            case WatchTargetChangeState.NoChange:
	                return 'NO_CHANGE';
	            case WatchTargetChangeState.Removed:
	                return 'REMOVE';
	            case WatchTargetChangeState.Reset:
	                return 'RESET';
	            default:
	                return fail('Unknown WatchTargetChangeState: ' + state);
	        }
	    };
	    JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {
	        if (watchChange instanceof ExistenceFilterChange) {
	            return {
	                filter: {
	                    count: watchChange.existenceFilter.count,
	                    targetId: watchChange.targetId
	                }
	            };
	        }
	        if (watchChange instanceof DocumentWatchChange) {
	            if (watchChange.newDoc instanceof Document) {
	                var doc = watchChange.newDoc;
	                return {
	                    documentChange: {
	                        document: {
	                            name: this.toName(doc.key),
	                            fields: this.toFields(doc.data),
	                            updateTime: this.toVersion(doc.version)
	                        },
	                        targetIds: watchChange.updatedTargetIds,
	                        removedTargetIds: watchChange.removedTargetIds
	                    }
	                };
	            }
	            else if (watchChange.newDoc instanceof NoDocument) {
	                var doc = watchChange.newDoc;
	                return {
	                    documentDelete: {
	                        document: this.toName(doc.key),
	                        readTime: this.toVersion(doc.version),
	                        removedTargetIds: watchChange.removedTargetIds
	                    }
	                };
	            }
	            else if (watchChange.newDoc === null) {
	                return {
	                    documentRemove: {
	                        document: this.toName(watchChange.key),
	                        removedTargetIds: watchChange.removedTargetIds
	                    }
	                };
	            }
	        }
	        if (watchChange instanceof WatchTargetChange) {
	            var cause = undefined;
	            if (watchChange.cause) {
	                cause = {
	                    code: mapRpcCodeFromCode(watchChange.cause.code),
	                    message: watchChange.cause.message
	                };
	            }
	            return {
	                targetChange: {
	                    targetChangeType: this.toWatchTargetChangeState(watchChange.state),
	                    targetIds: watchChange.targetIds,
	                    resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),
	                    cause: cause
	                }
	            };
	        }
	        return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));
	    };
	    JsonProtoSerializer.prototype.fromWatchChange = function (change) {
	        // tslint:disable-next-line:no-any
	        var type = change['response_type'];
	        var watchChange;
	        if (hasTag(change, type, 'targetChange')) {
	            assertPresent(change.targetChange, 'targetChange');
	            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
	            // if unset
	            var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');
	            var targetIds = change.targetChange.targetIds || [];
	            var resumeToken = change.targetChange.resumeToken || this.emptyByteString();
	            var causeProto = change.targetChange.cause;
	            var cause = causeProto && this.fromRpcStatus(causeProto);
	            watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
	        }
	        else if (hasTag(change, type, 'documentChange')) {
	            assertPresent(change.documentChange, 'documentChange');
	            assertPresent(change.documentChange.document, 'documentChange.name');
	            assertPresent(change.documentChange.document.name, 'documentChange.document.name');
	            assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');
	            var entityChange = change.documentChange;
	            var key = this.fromName(entityChange.document.name);
	            var version = this.fromVersion(entityChange.document.updateTime);
	            var fields = this.fromFields(entityChange.document.fields || {});
	            var doc = new Document(key, version, fields, {});
	            var updatedTargetIds = entityChange.targetIds || [];
	            var removedTargetIds = entityChange.removedTargetIds || [];
	            watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);
	        }
	        else if (hasTag(change, type, 'documentDelete')) {
	            assertPresent(change.documentDelete, 'documentDelete');
	            assertPresent(change.documentDelete.document, 'documentDelete.document');
	            var docDelete = change.documentDelete;
	            var key = this.fromName(docDelete.document);
	            var version = docDelete.readTime
	                ? this.fromVersion(docDelete.readTime)
	                : SnapshotVersion.forDeletedDoc();
	            var doc = new NoDocument(key, version);
	            var removedTargetIds = docDelete.removedTargetIds || [];
	            watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);
	        }
	        else if (hasTag(change, type, 'documentRemove')) {
	            assertPresent(change.documentRemove, 'documentRemove');
	            assertPresent(change.documentRemove.document, 'documentRemove');
	            var docRemove = change.documentRemove;
	            var key = this.fromName(docRemove.document);
	            var removedTargetIds = docRemove.removedTargetIds || [];
	            watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
	        }
	        else if (hasTag(change, type, 'filter')) {
	            // TODO(dimond): implement existence filter parsing with strategy.
	            assertPresent(change.filter, 'filter');
	            assertPresent(change.filter.targetId, 'filter.targetId');
	            var filter = change.filter;
	            var count = filter.count || 0;
	            var existenceFilter = new ExistenceFilter(count);
	            var targetId = filter.targetId;
	            watchChange = new ExistenceFilterChange(targetId, existenceFilter);
	        }
	        else {
	            return fail('Unknown change type ' + JSON.stringify(change));
	        }
	        return watchChange;
	    };
	    JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {
	        if (state === 'NO_CHANGE') {
	            return WatchTargetChangeState.NoChange;
	        }
	        else if (state === 'ADD') {
	            return WatchTargetChangeState.Added;
	        }
	        else if (state === 'REMOVE') {
	            return WatchTargetChangeState.Removed;
	        }
	        else if (state === 'CURRENT') {
	            return WatchTargetChangeState.Current;
	        }
	        else if (state === 'RESET') {
	            return WatchTargetChangeState.Reset;
	        }
	        else {
	            return fail('Got unexpected TargetChange.state: ' + state);
	        }
	    };
	    JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {
	        // We have only reached a consistent snapshot for the entire stream if there
	        // is a read_time set and it applies to all targets (i.e. the list of
	        // targets is empty). The backend is guaranteed to send such responses.
	        // tslint:disable-next-line:no-any
	        var type = change['response_type'];
	        if (!hasTag(change, type, 'targetChange')) {
	            return SnapshotVersion.MIN;
	        }
	        var targetChange = change.targetChange;
	        if (targetChange.targetIds && targetChange.targetIds.length) {
	            return SnapshotVersion.MIN;
	        }
	        if (!targetChange.readTime) {
	            return SnapshotVersion.MIN;
	        }
	        return this.fromVersion(targetChange.readTime);
	    };
	    JsonProtoSerializer.prototype.toMutation = function (mutation) {
	        var _this = this;
	        var result;
	        if (mutation instanceof SetMutation) {
	            result = {
	                update: this.toMutationDocument(mutation.key, mutation.value)
	            };
	        }
	        else if (mutation instanceof DeleteMutation) {
	            result = { delete: this.toName(mutation.key) };
	        }
	        else if (mutation instanceof PatchMutation) {
	            result = {
	                update: this.toMutationDocument(mutation.key, mutation.data),
	                updateMask: this.toDocumentMask(mutation.fieldMask)
	            };
	        }
	        else if (mutation instanceof TransformMutation) {
	            result = {
	                transform: {
	                    document: this.toName(mutation.key),
	                    fieldTransforms: mutation.fieldTransforms.map(function (transform) {
	                        return _this.toFieldTransform(transform);
	                    })
	                }
	            };
	        }
	        else {
	            return fail('Unknown mutation type ' + mutation.type);
	        }
	        if (!mutation.precondition.isNone) {
	            result.currentDocument = this.toPrecondition(mutation.precondition);
	        }
	        return result;
	    };
	    JsonProtoSerializer.prototype.fromMutation = function (proto) {
	        var _this = this;
	        var precondition = proto.currentDocument
	            ? this.fromPrecondition(proto.currentDocument)
	            : Precondition.NONE;
	        if (proto.update) {
	            assertPresent(proto.update.name, 'name');
	            var key = this.fromName(proto.update.name);
	            var value = this.fromFields(proto.update.fields || {});
	            if (proto.updateMask) {
	                var fieldMask = this.fromDocumentMask(proto.updateMask);
	                return new PatchMutation(key, value, fieldMask, precondition);
	            }
	            else {
	                return new SetMutation(key, value, precondition);
	            }
	        }
	        else if (proto.delete) {
	            var key = this.fromName(proto.delete);
	            return new DeleteMutation(key, precondition);
	        }
	        else if (proto.transform) {
	            var key = this.fromName(proto.transform.document);
	            var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {
	                return _this.fromFieldTransform(transform);
	            });
	            assert(precondition.exists === true, 'Transforms only support precondition "exists == true"');
	            return new TransformMutation(key, fieldTransforms);
	        }
	        else {
	            return fail('unknown mutation proto: ' + JSON.stringify(proto));
	        }
	    };
	    JsonProtoSerializer.prototype.toPrecondition = function (precondition) {
	        assert(!precondition.isNone, "Can't serialize an empty precondition");
	        if (precondition.updateTime !== undefined) {
	            return {
	                updateTime: this.toVersion(precondition.updateTime)
	            };
	        }
	        else if (precondition.exists !== undefined) {
	            return { exists: precondition.exists };
	        }
	        else {
	            return fail('Unknown precondition');
	        }
	    };
	    JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {
	        if (precondition.updateTime !== undefined) {
	            return Precondition.updateTime(this.fromVersion(precondition.updateTime));
	        }
	        else if (precondition.exists !== undefined) {
	            return Precondition.exists(precondition.exists);
	        }
	        else {
	            return Precondition.NONE;
	        }
	    };
	    JsonProtoSerializer.prototype.fromWriteResult = function (proto, commitTime) {
	        var _this = this;
	        // NOTE: Deletes don't have an updateTime.
	        var version = proto.updateTime
	            ? this.fromVersion(proto.updateTime)
	            : this.fromVersion(commitTime);
	        var transformResults = null;
	        if (proto.transformResults && proto.transformResults.length > 0) {
	            transformResults = proto.transformResults.map(function (result) {
	                return _this.fromValue(result);
	            });
	        }
	        return new MutationResult(version, transformResults);
	    };
	    JsonProtoSerializer.prototype.fromWriteResults = function (protos, commitTime) {
	        var _this = this;
	        if (protos && protos.length > 0) {
	            assert(commitTime !== undefined, 'Received a write result without a commit time');
	            return protos.map(function (proto) { return _this.fromWriteResult(proto, commitTime); });
	        }
	        else {
	            return [];
	        }
	    };
	    JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {
	        var _this = this;
	        var transform = fieldTransform.transform;
	        if (transform instanceof ServerTimestampTransform) {
	            return {
	                fieldPath: fieldTransform.field.canonicalString(),
	                setToServerValue: 'REQUEST_TIME'
	            };
	        }
	        else if (transform instanceof ArrayUnionTransformOperation) {
	            return {
	                fieldPath: fieldTransform.field.canonicalString(),
	                appendMissingElements: {
	                    values: transform.elements.map(function (v) { return _this.toValue(v); })
	                }
	            };
	        }
	        else if (transform instanceof ArrayRemoveTransformOperation) {
	            return {
	                fieldPath: fieldTransform.field.canonicalString(),
	                removeAllFromArray: {
	                    values: transform.elements.map(function (v) { return _this.toValue(v); })
	                }
	            };
	        }
	        else {
	            throw fail('Unknown transform: ' + fieldTransform.transform);
	        }
	    };
	    JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {
	        var _this = this;
	        // tslint:disable-next-line:no-any We need to match generated Proto types.
	        var type = proto['transform_type'];
	        var transform = null;
	        if (hasTag(proto, type, 'setToServerValue')) {
	            assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown server value transform proto: ' + JSON.stringify(proto));
	            transform = ServerTimestampTransform.instance;
	        }
	        else if (hasTag(proto, type, 'appendMissingElements')) {
	            var values$$1 = proto.appendMissingElements.values || [];
	            transform = new ArrayUnionTransformOperation(values$$1.map(function (v) { return _this.fromValue(v); }));
	        }
	        else if (hasTag(proto, type, 'removeAllFromArray')) {
	            var values$$1 = proto.removeAllFromArray.values || [];
	            transform = new ArrayRemoveTransformOperation(values$$1.map(function (v) { return _this.fromValue(v); }));
	        }
	        else {
	            fail('Unknown transform proto: ' + JSON.stringify(proto));
	        }
	        var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);
	        return new FieldTransform(fieldPath, transform);
	    };
	    JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {
	        return { documents: [this.toQueryPath(query.path)] };
	    };
	    JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {
	        var count = documentsTarget.documents.length;
	        assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);
	        var name = documentsTarget.documents[0];
	        return Query.atPath(this.fromQueryPath(name));
	    };
	    JsonProtoSerializer.prototype.toQueryTarget = function (query) {
	        // Dissect the path into parent, collectionId, and optional key filter.
	        var result = { structuredQuery: {} };
	        if (query.path.isEmpty()) {
	            result.parent = this.toQueryPath(ResourcePath.EMPTY_PATH);
	        }
	        else {
	            var path = query.path;
	            assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');
	            result.parent = this.toQueryPath(path.popLast());
	            result.structuredQuery.from = [{ collectionId: path.lastSegment() }];
	        }
	        var where = this.toFilter(query.filters);
	        if (where) {
	            result.structuredQuery.where = where;
	        }
	        var orderBy = this.toOrder(query.orderBy);
	        if (orderBy) {
	            result.structuredQuery.orderBy = orderBy;
	        }
	        var limit = this.toInt32Value(query.limit);
	        if (limit !== undefined) {
	            result.structuredQuery.limit = limit;
	        }
	        if (query.startAt) {
	            result.structuredQuery.startAt = this.toCursor(query.startAt);
	        }
	        if (query.endAt) {
	            result.structuredQuery.endAt = this.toCursor(query.endAt);
	        }
	        return result;
	    };
	    JsonProtoSerializer.prototype.fromQueryTarget = function (target) {
	        var path = this.fromQueryPath(target.parent);
	        var query = target.structuredQuery;
	        var fromCount = query.from ? query.from.length : 0;
	        if (fromCount > 0) {
	            assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');
	            var from = query.from[0];
	            path = path.child(from.collectionId);
	        }
	        var filterBy = [];
	        if (query.where) {
	            filterBy = this.fromFilter(query.where);
	        }
	        var orderBy = [];
	        if (query.orderBy) {
	            orderBy = this.fromOrder(query.orderBy);
	        }
	        var limit = null;
	        if (query.limit) {
	            limit = this.fromInt32Value(query.limit);
	        }
	        var startAt = null;
	        if (query.startAt) {
	            startAt = this.fromCursor(query.startAt);
	        }
	        var endAt = null;
	        if (query.endAt) {
	            endAt = this.fromCursor(query.endAt);
	        }
	        return new Query(path, orderBy, filterBy, limit, startAt, endAt);
	    };
	    JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {
	        var value = this.toLabel(queryData.purpose);
	        if (value == null) {
	            return null;
	        }
	        else {
	            return {
	                'goog-listen-tags': value
	            };
	        }
	    };
	    JsonProtoSerializer.prototype.toLabel = function (purpose) {
	        switch (purpose) {
	            case QueryPurpose.Listen:
	                return null;
	            case QueryPurpose.ExistenceFilterMismatch:
	                return 'existence-filter-mismatch';
	            case QueryPurpose.LimboResolution:
	                return 'limbo-document';
	            default:
	                return fail('Unrecognized query purpose: ' + purpose);
	        }
	    };
	    JsonProtoSerializer.prototype.toTarget = function (queryData) {
	        var result;
	        var query = queryData.query;
	        if (query.isDocumentQuery()) {
	            result = { documents: this.toDocumentsTarget(query) };
	        }
	        else {
	            result = { query: this.toQueryTarget(query) };
	        }
	        result.targetId = queryData.targetId;
	        if (queryData.resumeToken.length > 0) {
	            result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);
	        }
	        return result;
	    };
	    JsonProtoSerializer.prototype.toFilter = function (filters) {
	        var _this = this;
	        if (filters.length === 0)
	            return;
	        var protos = filters.map(function (filter) {
	            return filter instanceof RelationFilter
	                ? _this.toRelationFilter(filter)
	                : _this.toUnaryFilter(filter);
	        });
	        if (protos.length === 1) {
	            return protos[0];
	        }
	        return { compositeFilter: { op: 'AND', filters: protos } };
	    };
	    JsonProtoSerializer.prototype.fromFilter = function (filter) {
	        var _this = this;
	        if (!filter) {
	            return [];
	        }
	        else if (filter.unaryFilter !== undefined) {
	            return [this.fromUnaryFilter(filter)];
	        }
	        else if (filter.fieldFilter !== undefined) {
	            return [this.fromRelationFilter(filter)];
	        }
	        else if (filter.compositeFilter !== undefined) {
	            return filter.compositeFilter
	                .filters.map(function (f) { return _this.fromFilter(f); })
	                .reduce(function (accum, current) { return accum.concat(current); });
	        }
	        else {
	            return fail('Unknown filter: ' + JSON.stringify(filter));
	        }
	    };
	    JsonProtoSerializer.prototype.toOrder = function (orderBys) {
	        var _this = this;
	        if (orderBys.length === 0)
	            return;
	        return orderBys.map(function (order) { return _this.toPropertyOrder(order); });
	    };
	    JsonProtoSerializer.prototype.fromOrder = function (orderBys) {
	        var _this = this;
	        return orderBys.map(function (order) { return _this.fromPropertyOrder(order); });
	    };
	    JsonProtoSerializer.prototype.toCursor = function (cursor) {
	        var _this = this;
	        return {
	            before: cursor.before,
	            values: cursor.position.map(function (component) { return _this.toValue(component); })
	        };
	    };
	    JsonProtoSerializer.prototype.fromCursor = function (cursor) {
	        var _this = this;
	        var before = !!cursor.before;
	        var position = cursor.values.map(function (component) { return _this.fromValue(component); });
	        return new Bound(position, before);
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.toDirection = function (dir) {
	        return DIRECTIONS[dir.name];
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.fromDirection = function (dir) {
	        switch (dir) {
	            case 'ASCENDING':
	                return Direction.ASCENDING;
	            case 'DESCENDING':
	                return Direction.DESCENDING;
	            default:
	                return undefined;
	        }
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.toOperatorName = function (op) {
	        return OPERATORS[op.name];
	    };
	    JsonProtoSerializer.prototype.fromOperatorName = function (op) {
	        switch (op) {
	            case 'EQUAL':
	                return RelationOp.EQUAL;
	            case 'GREATER_THAN':
	                return RelationOp.GREATER_THAN;
	            case 'GREATER_THAN_OR_EQUAL':
	                return RelationOp.GREATER_THAN_OR_EQUAL;
	            case 'LESS_THAN':
	                return RelationOp.LESS_THAN;
	            case 'LESS_THAN_OR_EQUAL':
	                return RelationOp.LESS_THAN_OR_EQUAL;
	            case 'ARRAY_CONTAINS':
	                return RelationOp.ARRAY_CONTAINS;
	            case 'OPERATOR_UNSPECIFIED':
	                return fail('Unspecified relation');
	            default:
	                return fail('Unknown relation');
	        }
	    };
	    JsonProtoSerializer.prototype.toFieldPathReference = function (path) {
	        return { fieldPath: path.canonicalString() };
	    };
	    JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {
	        return FieldPath.fromServerFormat(fieldReference.fieldPath);
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {
	        return {
	            field: this.toFieldPathReference(orderBy.field),
	            direction: this.toDirection(orderBy.dir)
	        };
	    };
	    JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {
	        return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.toRelationFilter = function (filter) {
	        if (filter instanceof RelationFilter) {
	            return {
	                fieldFilter: {
	                    field: this.toFieldPathReference(filter.field),
	                    op: this.toOperatorName(filter.op),
	                    value: this.toValue(filter.value)
	                }
	            };
	        }
	        else {
	            return fail('Unrecognized filter: ' + JSON.stringify(filter));
	        }
	    };
	    JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {
	        return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));
	    };
	    // visible for testing
	    JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {
	        if (filter instanceof NanFilter) {
	            return {
	                unaryFilter: {
	                    field: this.toFieldPathReference(filter.field),
	                    op: 'IS_NAN'
	                }
	            };
	        }
	        else if (filter instanceof NullFilter) {
	            return {
	                unaryFilter: {
	                    field: this.toFieldPathReference(filter.field),
	                    op: 'IS_NULL'
	                }
	            };
	        }
	        else {
	            return fail('Unrecognized filter: ' + JSON.stringify(filter));
	        }
	    };
	    JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {
	        switch (filter.unaryFilter.op) {
	            case 'IS_NAN':
	                var nanField = this.fromFieldPathReference(filter.unaryFilter.field);
	                return new NanFilter(nanField);
	            case 'IS_NULL':
	                var nullField = this.fromFieldPathReference(filter.unaryFilter.field);
	                return new NullFilter(nullField);
	            case 'OPERATOR_UNSPECIFIED':
	                return fail('Unspecified filter');
	            default:
	                return fail('Unknown filter');
	        }
	    };
	    JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {
	        return {
	            fieldPaths: fieldMask.fields.map(function (field) { return field.canonicalString(); })
	        };
	    };
	    JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {
	        var paths = proto.fieldPaths || [];
	        var fields = paths.map(function (path) { return FieldPath.fromServerFormat(path); });
	        return new FieldMask(fields);
	    };
	    return JsonProtoSerializer;
	}());
	/**
	 * Checks for a specific oneof tag in a protocol buffer message.
	 *
	 * This intentionally accommodates two distinct cases:
	 *
	 * 1) Messages containing a type tag: these are the format produced by GRPC in
	 * return values. These may contain default-value mappings for all tags in the
	 * oneof but the type tag specifies which one was actually set.
	 *
	 * 2) Messages that don't contain a type tag: these are the format required by
	 * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would
	 * choke claiming that the tags aren't fields in the Message.
	 *
	 * Allowing both formats here makes the serializer able to consume the outputs
	 * it produces: for all messages it supports, fromX(toX(value)) == value.
	 *
	 * Note that case 2 suffers from ambiguity: if multiple tags are present
	 * without a type tag then the callers are structured in such a way that the
	 * first invocation will win. Since we only parse in this mode when parsing
	 * the output of a serialize method this works, but it's not a general
	 * solution.
	 *
	 * Unfortunately there is no general solution here because proto3 makes it
	 * impossible to distinguish unset from explicitly set fields: both have the
	 * default value for the type. Without the type tag but multiple value tags
	 * it's possible to have default values for each tag in the oneof and not be
	 * able to know which was actually in effect.
	 */
	function hasTag(obj, type, tag) {
	    return type === tag || (!type && tag in obj);
	}

	/**
	 * Detect React Native.
	 *
	 * @return {boolean} True if ReactNative environment is detected.
	 */
	var isReactNative = function () {
	    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
	};

	var ERROR_NAME = 'FirebaseError';
	var captureStackTrace = Error
	    .captureStackTrace;
	var FirebaseError = /** @class */ (function () {
	    function FirebaseError(code, message) {
	        this.code = code;
	        this.message = message;
	        // We want the stack value, if implemented by Error
	        if (captureStackTrace) {
	            // Patches this.stack, omitted calls above ErrorFactory#create
	            captureStackTrace(this, ErrorFactory.prototype.create);
	        }
	        else {
	            try {
	                // In case of IE11, stack will be set only after error is raised.
	                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript
	                throw Error.apply(this, arguments);
	            }
	            catch (err) {
	                this.name = ERROR_NAME;
	                // Make non-enumerable getter for the property.
	                Object.defineProperty(this, 'stack', {
	                    get: function () {
	                        return err.stack;
	                    }
	                });
	            }
	        }
	    }
	    return FirebaseError;
	}());
	// Back-door inheritance
	FirebaseError.prototype = Object.create(Error.prototype);
	FirebaseError.prototype.constructor = FirebaseError;
	FirebaseError.prototype.name = ERROR_NAME;
	var ErrorFactory = /** @class */ (function () {
	    function ErrorFactory(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	        // Matches {$name}, by default.
	        this.pattern = /\{\$([^}]+)}/g;
	        // empty
	    }
	    ErrorFactory.prototype.create = function (code, data) {
	        if (data === undefined) {
	            data = {};
	        }
	        var template = this.errors[code];
	        var fullCode = this.service + '/' + code;
	        var message;
	        if (template === undefined) {
	            message = 'Error';
	        }
	        else {
	            message = template.replace(this.pattern, function (match, key) {
	                var value = data[key];
	                return value !== undefined ? value.toString() : '<' + key + '?>';
	            });
	        }
	        // Service: Error message (service/code).
	        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
	        var err = new FirebaseError(fullCode, message);
	        // Populate the Error object with message parts for programmatic
	        // accesses (e.g., e.file).
	        for (var prop in data) {
	            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
	                continue;
	            }
	            err[prop] = data[prop];
	        }
	        return err;
	    };
	    return ErrorFactory;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Copyright 2011 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	/**
	 * @fileoverview Abstract cryptographic hash interface.
	 *
	 * See Sha1 and Md5 for sample implementations.
	 *
	 */
	/**
	 * Create a cryptographic hash instance.
	 *
	 * @constructor
	 * @struct
	 */
	var Hash = /** @class */ (function () {
	    function Hash() {
	        /**
	         * The block size for the hasher.
	         * @type {number}
	         */
	        this.blockSize = -1;
	    }
	    return Hash;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview SHA-1 cryptographic hash.
	 * Variable names follow the notation in FIPS PUB 180-3:
	 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
	 *
	 * Usage:
	 *   var sha1 = new sha1();
	 *   sha1.update(bytes);
	 *   var hash = sha1.digest();
	 *
	 * Performance:
	 *   Chrome 23:   ~400 Mbit/s
	 *   Firefox 16:  ~250 Mbit/s
	 *
	 */
	/**
	 * SHA-1 cryptographic hash constructor.
	 *
	 * The properties declared here are discussed in the above algorithm document.
	 * @constructor
	 * @extends {Hash}
	 * @final
	 * @struct
	 */
	var Sha1 = /** @class */ (function (_super) {
	    tslib_1.__extends(Sha1, _super);
	    function Sha1() {
	        var _this = _super.call(this) || this;
	        /**
	         * Holds the previous values of accumulated variables a-e in the compress_
	         * function.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.chain_ = [];
	        /**
	         * A buffer holding the partially computed hash result.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.buf_ = [];
	        /**
	         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
	         * as the message schedule in the docs.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.W_ = [];
	        /**
	         * Contains data needed to pad messages less than 64 bytes.
	         * @type {!Array<number>}
	         * @private
	         */
	        _this.pad_ = [];
	        /**
	         * @private {number}
	         */
	        _this.inbuf_ = 0;
	        /**
	         * @private {number}
	         */
	        _this.total_ = 0;
	        _this.blockSize = 512 / 8;
	        _this.pad_[0] = 128;
	        for (var i = 1; i < _this.blockSize; ++i) {
	            _this.pad_[i] = 0;
	        }
	        _this.reset();
	        return _this;
	    }
	    Sha1.prototype.reset = function () {
	        this.chain_[0] = 0x67452301;
	        this.chain_[1] = 0xefcdab89;
	        this.chain_[2] = 0x98badcfe;
	        this.chain_[3] = 0x10325476;
	        this.chain_[4] = 0xc3d2e1f0;
	        this.inbuf_ = 0;
	        this.total_ = 0;
	    };
	    /**
	     * Internal compress helper function.
	     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.
	     * @param {number=} opt_offset Offset of the block in the buffer.
	     * @private
	     */
	    Sha1.prototype.compress_ = function (buf, opt_offset) {
	        if (!opt_offset) {
	            opt_offset = 0;
	        }
	        var W = this.W_;
	        // get 16 big endian words
	        if (typeof buf === 'string') {
	            for (var i = 0; i < 16; i++) {
	                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
	                // have a bug that turns the post-increment ++ operator into pre-increment
	                // during JIT compilation.  We have code that depends heavily on SHA-1 for
	                // correctness and which is affected by this bug, so I've removed all uses
	                // of post-increment ++ in which the result value is used.  We can revert
	                // this change once the Safari bug
	                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
	                // most clients have been updated.
	                W[i] =
	                    (buf.charCodeAt(opt_offset) << 24) |
	                        (buf.charCodeAt(opt_offset + 1) << 16) |
	                        (buf.charCodeAt(opt_offset + 2) << 8) |
	                        buf.charCodeAt(opt_offset + 3);
	                opt_offset += 4;
	            }
	        }
	        else {
	            for (var i = 0; i < 16; i++) {
	                W[i] =
	                    (buf[opt_offset] << 24) |
	                        (buf[opt_offset + 1] << 16) |
	                        (buf[opt_offset + 2] << 8) |
	                        buf[opt_offset + 3];
	                opt_offset += 4;
	            }
	        }
	        // expand to 80 words
	        for (var i = 16; i < 80; i++) {
	            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
	        }
	        var a = this.chain_[0];
	        var b = this.chain_[1];
	        var c = this.chain_[2];
	        var d = this.chain_[3];
	        var e = this.chain_[4];
	        var f, k;
	        // TODO(user): Try to unroll this loop to speed up the computation.
	        for (var i = 0; i < 80; i++) {
	            if (i < 40) {
	                if (i < 20) {
	                    f = d ^ (b & (c ^ d));
	                    k = 0x5a827999;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0x6ed9eba1;
	                }
	            }
	            else {
	                if (i < 60) {
	                    f = (b & c) | (d & (b | c));
	                    k = 0x8f1bbcdc;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0xca62c1d6;
	                }
	            }
	            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
	            e = d;
	            d = c;
	            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
	            b = a;
	            a = t;
	        }
	        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
	        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
	        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
	        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
	        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
	    };
	    Sha1.prototype.update = function (bytes, opt_length) {
	        // TODO(johnlenz): tighten the function signature and remove this check
	        if (bytes == null) {
	            return;
	        }
	        if (opt_length === undefined) {
	            opt_length = bytes.length;
	        }
	        var lengthMinusBlock = opt_length - this.blockSize;
	        var n = 0;
	        // Using local instead of member variables gives ~5% speedup on Firefox 16.
	        var buf = this.buf_;
	        var inbuf = this.inbuf_;
	        // The outer while loop should execute at most twice.
	        while (n < opt_length) {
	            // When we have no data in the block to top up, we can directly process the
	            // input buffer (assuming it contains sufficient data). This gives ~25%
	            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
	            // the data is provided in large chunks (or in multiples of 64 bytes).
	            if (inbuf == 0) {
	                while (n <= lengthMinusBlock) {
	                    this.compress_(bytes, n);
	                    n += this.blockSize;
	                }
	            }
	            if (typeof bytes === 'string') {
	                while (n < opt_length) {
	                    buf[inbuf] = bytes.charCodeAt(n);
	                    ++inbuf;
	                    ++n;
	                    if (inbuf == this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	            else {
	                while (n < opt_length) {
	                    buf[inbuf] = bytes[n];
	                    ++inbuf;
	                    ++n;
	                    if (inbuf == this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	        }
	        this.inbuf_ = inbuf;
	        this.total_ += opt_length;
	    };
	    /** @override */
	    Sha1.prototype.digest = function () {
	        var digest = [];
	        var totalBits = this.total_ * 8;
	        // Add pad 0x80 0x00*.
	        if (this.inbuf_ < 56) {
	            this.update(this.pad_, 56 - this.inbuf_);
	        }
	        else {
	            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
	        }
	        // Add # bits.
	        for (var i = this.blockSize - 1; i >= 56; i--) {
	            this.buf_[i] = totalBits & 255;
	            totalBits /= 256; // Don't use bit-shifting here!
	        }
	        this.compress_(this.buf_);
	        var n = 0;
	        for (var i = 0; i < 5; i++) {
	            for (var j = 24; j >= 0; j -= 8) {
	                digest[n] = (this.chain_[i] >> j) & 255;
	                ++n;
	            }
	        }
	        return digest;
	    };
	    return Sha1;
	}(Hash));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a simple helper class that implements the Stream interface to
	 * bridge to other implementations that are streams but do not implement the
	 * interface. The stream callbacks are invoked with the callOn... methods.
	 */
	var StreamBridge = /** @class */ (function () {
	    function StreamBridge(args) {
	        this.sendFn = args.sendFn;
	        this.closeFn = args.closeFn;
	    }
	    StreamBridge.prototype.onOpen = function (callback) {
	        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');
	        this.wrappedOnOpen = callback;
	    };
	    StreamBridge.prototype.onClose = function (callback) {
	        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');
	        this.wrappedOnClose = callback;
	    };
	    StreamBridge.prototype.onMessage = function (callback) {
	        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');
	        this.wrappedOnMessage = callback;
	    };
	    StreamBridge.prototype.close = function () {
	        this.closeFn();
	    };
	    StreamBridge.prototype.send = function (msg) {
	        this.sendFn(msg);
	    };
	    StreamBridge.prototype.callOnOpen = function () {
	        assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');
	        this.wrappedOnOpen();
	    };
	    StreamBridge.prototype.callOnClose = function (err) {
	        assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');
	        this.wrappedOnClose(err);
	    };
	    StreamBridge.prototype.callOnMessage = function (msg) {
	        assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');
	        this.wrappedOnMessage(msg);
	    };
	    return StreamBridge;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG = 'Connection';
	var RPC_STREAM_SERVICE = 'google.firestore.v1beta1.Firestore';
	var RPC_URL_VERSION = 'v1beta1';
	/** Maps RPC names to the corresponding REST endpoint name. */
	var RPC_NAME_REST_MAPPING = {
	    BatchGetDocuments: 'batchGet',
	    Commit: 'commit'
	};
	// TODO(b/38203344): The SDK_VERSION is set independently from Firebase because
	// we are doing out-of-band releases. Once we release as part of Firebase, we
	// should use the Firebase version instead.
	var X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;
	var XHR_TIMEOUT_SECS = 15;
	var WebChannelConnection = /** @class */ (function () {
	    function WebChannelConnection(info) {
	        this.databaseId = info.databaseId;
	        this.pool = new webchannelWrapper.XhrIoPool();
	        var proto = info.ssl ? 'https' : 'http';
	        this.baseUrl = proto + '://' + info.host;
	    }
	    /**
	     * Modifies the headers for a request, adding any authorization token if
	     * present and any additional headers for the request.
	     */
	    WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {
	        if (token) {
	            for (var header in token.authHeaders) {
	                if (token.authHeaders.hasOwnProperty(header)) {
	                    headers[header] = token.authHeaders[header];
	                }
	            }
	        }
	        headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;
	    };
	    WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {
	        var _this = this;
	        var url = this.makeUrl(rpcName);
	        return new Promise(function (resolve, reject) {
	            // tslint:disable-next-line:no-any XhrIoPool doesn't have TS typings.
	            _this.pool.getObject(function (xhr) {
	                xhr.listenOnce(webchannelWrapper.EventType.COMPLETE, function () {
	                    try {
	                        switch (xhr.getLastErrorCode()) {
	                            case webchannelWrapper.ErrorCode.NO_ERROR:
	                                var json = xhr.getResponseJson();
	                                debug(LOG_TAG, 'XHR received:', JSON.stringify(json));
	                                resolve(json);
	                                break;
	                            case webchannelWrapper.ErrorCode.TIMEOUT:
	                                debug(LOG_TAG, 'RPC "' + rpcName + '" timed out');
	                                reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));
	                                break;
	                            case webchannelWrapper.ErrorCode.HTTP_ERROR:
	                                var status_1 = xhr.getStatus();
	                                debug(LOG_TAG, 'RPC "' + rpcName + '" failed with status:', status_1, 'response text:', xhr.getResponseText());
	                                if (status_1 > 0) {
	                                    reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));
	                                }
	                                else {
	                                    // If we received an HTTP_ERROR but there's no status code,
	                                    // it's most probably a connection issue
	                                    debug(LOG_TAG, 'RPC "' + rpcName + '" failed');
	                                    reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));
	                                }
	                                break;
	                            default:
	                                fail('RPC "' +
	                                    rpcName +
	                                    '" failed with unanticipated ' +
	                                    'webchannel error ' +
	                                    xhr.getLastErrorCode() +
	                                    ': ' +
	                                    xhr.getLastError() +
	                                    ', giving up.');
	                        }
	                    }
	                    finally {
	                        debug(LOG_TAG, 'RPC "' + rpcName + '" completed.');
	                        _this.pool.releaseObject(xhr);
	                    }
	                });
	                var requestString = JSON.stringify(request);
	                debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString);
	                // Content-Type: text/plain will avoid preflight requests which might
	                // mess with CORS and redirects by proxies. If we add custom headers
	                // we will need to change this code to potentially use the
	                // $httpOverwrite parameter supported by ESF to avoid
	                // triggering preflight requests.
	                var headers = { 'Content-Type': 'text/plain' };
	                _this.modifyHeadersForRequest(headers, token);
	                xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);
	            });
	        });
	    };
	    WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {
	        // The REST API automatically aggregates all of the streamed results, so we
	        // can just use the normal invoke() method.
	        return this.invokeRPC(rpcName, request, token);
	    };
	    WebChannelConnection.prototype.openStream = function (rpcName, token) {
	        var urlParts = [
	            this.baseUrl,
	            '/',
	            RPC_STREAM_SERVICE,
	            '/',
	            rpcName,
	            '/channel'
	        ];
	        var webchannelTransport = webchannelWrapper.createWebChannelTransport();
	        var request = {
	            // Background channel test avoids the initial two test calls and decreases
	            // initial cold start time.
	            // TODO(dimond): wenboz@ mentioned this might affect use with proxies and
	            // we should monitor closely for any reports.
	            backgroundChannelTest: true,
	            // Required for backend stickiness, routing behavior is based on this
	            // parameter.
	            httpSessionIdParam: 'gsessionid',
	            initMessageHeaders: {},
	            messageUrlParams: {
	                // This param is used to improve routing and project isolation by the
	                // backend and must be included in every request.
	                database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
	            },
	            sendRawJson: true,
	            supportsCrossDomainXhr: true
	        };
	        this.modifyHeadersForRequest(request.initMessageHeaders, token);
	        // Sending the custom headers we just added to request.initMessageHeaders
	        // (Authorization, etc.) will trigger the browser to make a CORS preflight
	        // request because the XHR will no longer meet the criteria for a "simple"
	        // CORS request:
	        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
	        //
	        // Therefore to avoid the CORS preflight request (an extra network
	        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
	        // the headers should instead be encoded into a special "$httpHeaders" query
	        // parameter, which is recognized by the webchannel backend. This is
	        // formally defined here:
	        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
	        //
	        // But for some unclear reason (see
	        // https://github.com/firebase/firebase-js-sdk/issues/703), this breaks
	        // ReactNative and so we exclude it, which just means ReactNative may be
	        // subject to the extra network roundtrip for CORS preflight.
	        if (!isReactNative()) {
	            request['httpHeadersOverwriteParam'] = '$httpHeaders';
	        }
	        var url = urlParts.join('');
	        debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request);
	        // tslint:disable-next-line:no-any Because listen isn't defined on it.
	        var channel = webchannelTransport.createWebChannel(url, request);
	        // WebChannel supports sending the first message with the handshake - saving
	        // a network round trip. However, it will have to call send in the same
	        // JS event loop as open. In order to enforce this, we delay actually
	        // opening the WebChannel until send is called. Whether we have called
	        // open is tracked with this variable.
	        var opened = false;
	        // A flag to determine whether the stream was closed (by us or through an
	        // error/close event) to avoid delivering multiple close events or sending
	        // on a closed stream
	        var closed = false;
	        var streamBridge = new StreamBridge({
	            sendFn: function (msg) {
	                if (!closed) {
	                    if (!opened) {
	                        debug(LOG_TAG, 'Opening WebChannel transport.');
	                        channel.open();
	                        opened = true;
	                    }
	                    debug(LOG_TAG, 'WebChannel sending:', msg);
	                    channel.send(msg);
	                }
	                else {
	                    debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);
	                }
	            },
	            closeFn: function () { return channel.close(); }
	        });
	        // Closure events are guarded and exceptions are swallowed, so catch any
	        // exception and rethrow using a setTimeout so they become visible again.
	        // Note that eventually this function could go away if we are confident
	        // enough the code is exception free.
	        var unguardedEventListen = function (type, fn) {
	            // TODO(dimond): closure typing seems broken because WebChannel does
	            // not implement goog.events.Listenable
	            channel.listen(type, function (param) {
	                try {
	                    fn(param);
	                }
	                catch (e) {
	                    setTimeout(function () {
	                        throw e;
	                    }, 0);
	                }
	            });
	        };
	        unguardedEventListen(webchannelWrapper.WebChannel.EventType.OPEN, function () {
	            if (!closed) {
	                debug(LOG_TAG, 'WebChannel transport opened.');
	            }
	        });
	        unguardedEventListen(webchannelWrapper.WebChannel.EventType.CLOSE, function () {
	            if (!closed) {
	                closed = true;
	                debug(LOG_TAG, 'WebChannel transport closed');
	                streamBridge.callOnClose();
	            }
	        });
	        unguardedEventListen(webchannelWrapper.WebChannel.EventType.ERROR, function (err) {
	            if (!closed) {
	                closed = true;
	                debug(LOG_TAG, 'WebChannel transport errored:', err);
	                streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));
	            }
	        });
	        unguardedEventListen(webchannelWrapper.WebChannel.EventType.MESSAGE, function (msg) {
	            if (!closed) {
	                var msgData = msg.data[0];
	                assert(!!msgData, 'Got a webchannel message without data.');
	                // TODO(b/35143891): There is a bug in One Platform that caused errors
	                // (and only errors) to be wrapped in an extra array. To be forward
	                // compatible with the bug we need to check either condition. The latter
	                // can be removed once the fix has been rolled out.
	                var error$$1 = 
	                // tslint:disable-next-line:no-any msgData.error is not typed.
	                msgData.error || (msgData[0] && msgData[0].error);
	                if (error$$1) {
	                    debug(LOG_TAG, 'WebChannel received error:', error$$1);
	                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
	                    var status_2 = error$$1.status;
	                    var code = mapCodeFromRpcStatus(status_2);
	                    var message = error$$1.message;
	                    if (code === undefined) {
	                        code = Code.INTERNAL;
	                        message =
	                            'Unknown error status: ' +
	                                status_2 +
	                                ' with message ' +
	                                error$$1.message;
	                    }
	                    // Mark closed so no further events are propagated
	                    closed = true;
	                    streamBridge.callOnClose(new FirestoreError(code, message));
	                    channel.close();
	                }
	                else {
	                    debug(LOG_TAG, 'WebChannel received:', msgData);
	                    streamBridge.callOnMessage(msgData);
	                }
	            }
	        });
	        setTimeout(function () {
	            // Technically we could/should wait for the WebChannel opened event,
	            // but because we want to send the first message with the WebChannel
	            // handshake we pretend the channel opened here (asynchronously), and
	            // then delay the actual open until the first message is sent.
	            streamBridge.callOnOpen();
	        }, 0);
	        return streamBridge;
	    };
	    // visible for testing
	    WebChannelConnection.prototype.makeUrl = function (rpcName) {
	        var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];
	        assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);
	        var url = [this.baseUrl, '/', RPC_URL_VERSION];
	        url.push('/projects/');
	        url.push(this.databaseId.projectId);
	        url.push('/databases/');
	        url.push(this.databaseId.database);
	        url.push('/documents');
	        url.push(':');
	        url.push(urlRpcName);
	        return url.join('');
	    };
	    return WebChannelConnection;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var BrowserPlatform = /** @class */ (function () {
	    function BrowserPlatform() {
	        this.emptyByteString = '';
	        this.base64Available = typeof atob !== 'undefined';
	    }
	    Object.defineProperty(BrowserPlatform.prototype, "document", {
	        get: function () {
	            return typeof document !== 'undefined' ? document : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatform.prototype, "window", {
	        get: function () {
	            return typeof window !== 'undefined' ? window : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserPlatform.prototype.loadConnection = function (databaseInfo) {
	        return Promise.resolve(new WebChannelConnection(databaseInfo));
	    };
	    BrowserPlatform.prototype.newSerializer = function (databaseId) {
	        return new JsonProtoSerializer(databaseId, { useProto3Json: true });
	    };
	    BrowserPlatform.prototype.formatJSON = function (value) {
	        return JSON.stringify(value);
	    };
	    BrowserPlatform.prototype.atob = function (encoded) {
	        return atob(encoded);
	    };
	    BrowserPlatform.prototype.btoa = function (raw) {
	        return btoa(raw);
	    };
	    return BrowserPlatform;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This code needs to run before Firestore is used. This can be achieved in
	 * several ways:
	 *   1) Through the JSCompiler compiling this code and then (automatically)
	 *      executing it before exporting the Firestore symbols.
	 *   2) Through importing this module first in a Firestore main module
	 */
	PlatformSupport.setPlatform(new BrowserPlatform());

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
	 * exceed. All subsequent calls to next will return increasing values. If provided with a
	 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
	 * well as write out sequence numbers that it produces via `next()`.
	 */
	var ListenSequence = /** @class */ (function () {
	    function ListenSequence(previousValue, sequenceNumberSyncer) {
	        var _this = this;
	        this.previousValue = previousValue;
	        if (sequenceNumberSyncer) {
	            sequenceNumberSyncer.sequenceNumberHandler = function (sequenceNumber) {
	                return _this.setPreviousValue(sequenceNumber);
	            };
	            this.writeNewSequenceNumber = function (sequenceNumber) {
	                return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
	            };
	        }
	    }
	    ListenSequence.prototype.setPreviousValue = function (externalPreviousValue) {
	        this.previousValue = Math.max(externalPreviousValue, this.previousValue);
	        return this.previousValue;
	    };
	    ListenSequence.prototype.next = function () {
	        var nextValue = ++this.previousValue;
	        if (this.writeNewSequenceNumber) {
	            this.writeNewSequenceNumber(nextValue);
	        }
	        return nextValue;
	    };
	    ListenSequence.INVALID = -1;
	    return ListenSequence;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Deferred$1 = /** @class */ (function () {
	    function Deferred() {
	        var _this = this;
	        this.promise = new Promise(function (resolve, reject) {
	            _this.resolve = resolve;
	            _this.reject = reject;
	        });
	    }
	    return Deferred;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Wellknown "timer" IDs used when scheduling delayed operations on the
	 * AsyncQueue. These IDs can then be used from tests to check for the presence
	 * of operations or to run them early.
	 *
	 * The string values are used when encoding these timer IDs in JSON spec tests.
	 */
	var TimerId;
	(function (TimerId) {
	    /** All can be used with runDelayedOperationsEarly() to run all timers. */
	    TimerId["All"] = "all";
	    /**
	     * The following 4 timers are used in persistent_stream.ts for the listen and
	     * write streams. The "Idle" timer is used to close the stream due to
	     * inactivity. The "ConnectionBackoff" timer is used to restart a stream once
	     * the appropriate backoff delay has elapsed.
	     */
	    TimerId["ListenStreamIdle"] = "listen_stream_idle";
	    TimerId["ListenStreamConnectionBackoff"] = "listen_stream_connection_backoff";
	    TimerId["WriteStreamIdle"] = "write_stream_idle";
	    TimerId["WriteStreamConnectionBackoff"] = "write_stream_connection_backoff";
	    /**
	     * A timer used in online_state_tracker.ts to transition from
	     * OnlineState.Unknown to Offline after a set timeout, rather than waiting
	     * indefinitely for success or failure.
	     */
	    TimerId["OnlineStateTimeout"] = "online_state_timeout";
	    /**
	     * A timer used to update the client metadata in IndexedDb, which is used
	     * to determine the primary leaseholder.
	     */
	    TimerId["ClientMetadataRefresh"] = "client_metadata_refresh";
	})(TimerId || (TimerId = {}));
	/**
	 * Represents an operation scheduled to be run in the future on an AsyncQueue.
	 *
	 * It is created via DelayedOperation.createAndSchedule().
	 *
	 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
	 */
	var DelayedOperation = /** @class */ (function () {
	    function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
	        this.asyncQueue = asyncQueue;
	        this.timerId = timerId;
	        this.targetTimeMs = targetTimeMs;
	        this.op = op;
	        this.removalCallback = removalCallback;
	        this.deferred = new Deferred$1();
	        this.then = this.deferred.promise.then.bind(this.deferred.promise);
	        this.catch = this.deferred.promise.catch.bind(this.deferred.promise);
	        // It's normal for the deferred promise to be canceled (due to cancellation)
	        // and so we attach a dummy catch callback to avoid
	        // 'UnhandledPromiseRejectionWarning' log spam.
	        this.deferred.promise.catch(function (err) { });
	    }
	    /**
	     * Creates and returns a DelayedOperation that has been scheduled to be
	     * executed on the provided asyncQueue after the provided delayMs.
	     *
	     * @param asyncQueue The queue to schedule the operation on.
	     * @param id A Timer ID identifying the type of operation this is.
	     * @param delayMs The delay (ms) before the operation should be scheduled.
	     * @param op The operation to run.
	     * @param removalCallback A callback to be called synchronously once the
	     *   operation is executed or canceled, notifying the AsyncQueue to remove it
	     *   from its delayedOperations list.
	     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
	     *   the DelayedOperation class public.
	     */
	    DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {
	        var targetTime = Date.now() + delayMs;
	        var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);
	        delayedOp.start(delayMs);
	        return delayedOp;
	    };
	    /**
	     * Starts the timer. This is called immediately after construction by
	     * createAndSchedule().
	     */
	    DelayedOperation.prototype.start = function (delayMs) {
	        var _this = this;
	        this.timerHandle = setTimeout(function () { return _this.handleDelayElapsed(); }, delayMs);
	    };
	    /**
	     * Queues the operation to run immediately (if it hasn't already been run or
	     * canceled).
	     */
	    DelayedOperation.prototype.skipDelay = function () {
	        return this.handleDelayElapsed();
	    };
	    /**
	     * Cancels the operation if it hasn't already been executed or canceled. The
	     * promise will be rejected.
	     *
	     * As long as the operation has not yet been run, calling cancel() provides a
	     * guarantee that the operation will not be run.
	     */
	    DelayedOperation.prototype.cancel = function (reason) {
	        if (this.timerHandle !== null) {
	            this.clearTimeout();
	            this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));
	        }
	    };
	    DelayedOperation.prototype.handleDelayElapsed = function () {
	        var _this = this;
	        this.asyncQueue.enqueueAndForget(function () {
	            if (_this.timerHandle !== null) {
	                _this.clearTimeout();
	                return _this.op().then(function (result) {
	                    return _this.deferred.resolve(result);
	                });
	            }
	            else {
	                return Promise.resolve();
	            }
	        });
	    };
	    DelayedOperation.prototype.clearTimeout = function () {
	        if (this.timerHandle !== null) {
	            this.removalCallback(this);
	            clearTimeout(this.timerHandle);
	            this.timerHandle = null;
	        }
	    };
	    return DelayedOperation;
	}());
	var AsyncQueue = /** @class */ (function () {
	    function AsyncQueue() {
	        // The last promise in the queue.
	        this.tail = Promise.resolve();
	        // Operations scheduled to be queued in the future. Operations are
	        // automatically removed after they are run or canceled.
	        this.delayedOperations = [];
	        // Flag set while there's an outstanding AsyncQueue operation, used for
	        // assertion sanity-checks.
	        this.operationInProgress = false;
	    }
	    /**
	     * Adds a new operation to the queue without waiting for it to complete (i.e.
	     * we ignore the Promise result).
	     */
	    AsyncQueue.prototype.enqueueAndForget = function (op) {
	        // tslint:disable-next-line:no-floating-promises
	        this.enqueue(op);
	    };
	    /**
	     * Adds a new operation to the queue. Returns a promise that will be resolved
	     * when the promise returned by the new operation is (with its value).
	     */
	    AsyncQueue.prototype.enqueue = function (op) {
	        var _this = this;
	        this.verifyNotFailed();
	        var newTail = this.tail.then(function () {
	            _this.operationInProgress = true;
	            return op()
	                .catch(function (error$$1) {
	                _this.failure = error$$1;
	                _this.operationInProgress = false;
	                var message = error$$1.stack || error$$1.message || '';
	                error('INTERNAL UNHANDLED ERROR: ', message);
	                // Escape the promise chain and throw the error globally so that
	                // e.g. any global crash reporting library detects and reports it.
	                // (but not for simulated errors in our tests since this breaks mocha)
	                if (message.indexOf('Firestore Test Simulated Error') < 0) {
	                    setTimeout(function () {
	                        throw error$$1;
	                    }, 0);
	                }
	                // Re-throw the error so that this.tail becomes a rejected Promise and
	                // all further attempts to chain (via .then) will just short-circuit
	                // and return the rejected Promise.
	                throw error$$1;
	            })
	                .then(function (result) {
	                _this.operationInProgress = false;
	                return result;
	            });
	        });
	        this.tail = newTail;
	        return newTail;
	    };
	    /**
	     * Schedules an operation to be queued on the AsyncQueue once the specified
	     * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
	     * the operation prior to its running.
	     */
	    AsyncQueue.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {
	        var _this = this;
	        this.verifyNotFailed();
	        assert(delayMs >= 0, "Attempted to schedule an operation with a negative delay of " + delayMs);
	        // While not necessarily harmful, we currently don't expect to have multiple
	        // ops with the same timer id in the queue, so defensively reject them.
	        assert(!this.containsDelayedOperation(timerId), "Attempted to schedule multiple operations with timer id " + timerId + ".");
	        var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (op) { return _this.removeDelayedOperation(op); });
	        this.delayedOperations.push(delayedOp);
	        return delayedOp;
	    };
	    AsyncQueue.prototype.verifyNotFailed = function () {
	        if (this.failure) {
	            fail('AsyncQueue is already failed: ' +
	                (this.failure.stack || this.failure.message));
	        }
	    };
	    /**
	     * Verifies there's an operation currently in-progress on the AsyncQueue.
	     * Unfortunately we can't verify that the running code is in the promise chain
	     * of that operation, so this isn't a foolproof check, but it should be enough
	     * to catch some bugs.
	     */
	    AsyncQueue.prototype.verifyOperationInProgress = function () {
	        assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');
	    };
	    /**
	     * Waits until all currently queued tasks are finished executing. Delayed
	     * operations are not run.
	     */
	    AsyncQueue.prototype.drain = function () {
	        return this.enqueue(function () { return Promise.resolve(); });
	    };
	    /**
	     * For Tests: Determine if a delayed operation with a particular TimerId
	     * exists.
	     */
	    AsyncQueue.prototype.containsDelayedOperation = function (timerId) {
	        for (var _i = 0, _a = this.delayedOperations; _i < _a.length; _i++) {
	            var op = _a[_i];
	            if (op.timerId === timerId) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * For Tests: Runs some or all delayed operations early.
	     *
	     * @param lastTimerId Delayed operations up to and including this TimerId will
	     *  be drained. Throws if no such operation exists. Pass TimerId.All to run
	     *  all delayed operations.
	     * @returns a Promise that resolves once all operations have been run.
	     */
	    AsyncQueue.prototype.runDelayedOperationsEarly = function (lastTimerId) {
	        var _this = this;
	        // Note that draining may generate more delayed ops, so we do that first.
	        return this.drain().then(function () {
	            assert(lastTimerId === TimerId.All ||
	                _this.containsDelayedOperation(lastTimerId), "Attempted to drain to missing operation " + lastTimerId);
	            // Run ops in the same order they'd run if they ran naturally.
	            _this.delayedOperations.sort(function (a, b) { return a.targetTimeMs - b.targetTimeMs; });
	            for (var _i = 0, _a = _this.delayedOperations; _i < _a.length; _i++) {
	                var op = _a[_i];
	                op.skipDelay();
	                if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {
	                    break;
	                }
	            }
	            return _this.drain();
	        });
	    };
	    /** Called once a DelayedOperation is run or canceled. */
	    AsyncQueue.prototype.removeDelayedOperation = function (op) {
	        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
	        var index = this.delayedOperations.indexOf(op);
	        assert(index >= 0, 'Delayed operation not found.');
	        this.delayedOperations.splice(index, 1);
	    };
	    return AsyncQueue;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var escapeChar = '\u0001';
	var encodedSeparatorChar = '\u0001';
	var encodedNul = '\u0010';
	var encodedEscape = '\u0011';
	/**
	 * Encodes a resource path into a IndexedDb-compatible string form.
	 */
	function encode(path) {
	    var result = '';
	    for (var i = 0; i < path.length; i++) {
	        if (result.length > 0) {
	            result = encodeSeparator(result);
	        }
	        result = encodeSegment(path.get(i), result);
	    }
	    return encodeSeparator(result);
	}
	/** Encodes a single segment of a resource path into the given result */
	function encodeSegment(segment, resultBuf) {
	    var result = resultBuf;
	    var length = segment.length;
	    for (var i = 0; i < length; i++) {
	        var c = segment.charAt(i);
	        switch (c) {
	            case '\0':
	                result += escapeChar + encodedNul;
	                break;
	            case escapeChar:
	                result += escapeChar + encodedEscape;
	                break;
	            default:
	                result += c;
	        }
	    }
	    return result;
	}
	/** Encodes a path separator into the given result */
	function encodeSeparator(result) {
	    return result + escapeChar + encodedSeparatorChar;
	}
	/**
	 * Decodes the given IndexedDb-compatible string form of a resource path into
	 * a ResourcePath instance. Note that this method is not suitable for use with
	 * decoding resource names from the server; those are One Platform format
	 * strings.
	 */
	function decode$1(path) {
	    // Event the empty path must encode as a path of at least length 2. A path
	    // with exactly 2 must be the empty path.
	    var length = path.length;
	    assert(length >= 2, 'Invalid path ' + path);
	    if (length === 2) {
	        assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');
	        return ResourcePath.EMPTY_PATH;
	    }
	    // Escape characters cannot exist past the second-to-last position in the
	    // source value.
	    var lastReasonableEscapeIndex = length - 2;
	    var segments = [];
	    var segmentBuilder = '';
	    for (var start = 0; start < length;) {
	        // The last two characters of a valid encoded path must be a separator, so
	        // there must be an end to this segment.
	        var end = path.indexOf(escapeChar, start);
	        if (end < 0 || end > lastReasonableEscapeIndex) {
	            fail('Invalid encoded resource path: "' + path + '"');
	        }
	        var next = path.charAt(end + 1);
	        switch (next) {
	            case encodedSeparatorChar:
	                var currentPiece = path.substring(start, end);
	                var segment = void 0;
	                if (segmentBuilder.length === 0) {
	                    // Avoid copying for the common case of a segment that excludes \0
	                    // and \001
	                    segment = currentPiece;
	                }
	                else {
	                    segmentBuilder += currentPiece;
	                    segment = segmentBuilder;
	                    segmentBuilder = '';
	                }
	                segments.push(segment);
	                break;
	            case encodedNul:
	                segmentBuilder += path.substring(start, end);
	                segmentBuilder += '\0';
	                break;
	            case encodedEscape:
	                // The escape character can be used in the output to encode itself.
	                segmentBuilder += path.substring(start, end + 1);
	                break;
	            default:
	                fail('Invalid encoded resource path: "' + path + '"');
	        }
	        start = end + 2;
	    }
	    return new ResourcePath(segments);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var BATCHID_UNKNOWN = -1;
	/**
	 * A batch of mutations that will be sent as one unit to the backend.
	 */
	var MutationBatch = /** @class */ (function () {
	    function MutationBatch(batchId, localWriteTime, mutations) {
	        this.batchId = batchId;
	        this.localWriteTime = localWriteTime;
	        this.mutations = mutations;
	        assert(mutations.length > 0, 'Cannot create an empty mutation batch');
	    }
	    /**
	     * Applies all the mutations in this MutationBatch to the specified document
	     * to create a new remote document
	     *
	     * @param docKey The key of the document to apply mutations to.
	     * @param maybeDoc The document to apply mutations to.
	     * @param batchResult The result of applying the MutationBatch to the
	     * backend.
	     */
	    MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {
	        if (maybeDoc) {
	            assert(maybeDoc.key.isEqual(docKey), "applyToRemoteDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
	        }
	        var mutationResults = batchResult.mutationResults;
	        assert(mutationResults.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + mutationResults.length + ").");
	        for (var i = 0; i < this.mutations.length; i++) {
	            var mutation = this.mutations[i];
	            if (mutation.key.isEqual(docKey)) {
	                var mutationResult = mutationResults[i];
	                maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);
	            }
	        }
	        return maybeDoc;
	    };
	    /**
	     * Computes the local view of a document given all the mutations in this
	     * batch.
	     *
	     * @param docKey The key of the document to apply mutations to.
	     * @param maybeDoc The document to apply mutations to.
	     */
	    MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {
	        if (maybeDoc) {
	            assert(maybeDoc.key.isEqual(docKey), "applyToLocalDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
	        }
	        var baseDoc = maybeDoc;
	        for (var i = 0; i < this.mutations.length; i++) {
	            var mutation = this.mutations[i];
	            if (mutation.key.isEqual(docKey)) {
	                maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);
	            }
	        }
	        return maybeDoc;
	    };
	    MutationBatch.prototype.keys = function () {
	        var keySet = documentKeySet();
	        for (var _i = 0, _a = this.mutations; _i < _a.length; _i++) {
	            var mutation = _a[_i];
	            keySet = keySet.add(mutation.key);
	        }
	        return keySet;
	    };
	    MutationBatch.prototype.isEqual = function (other) {
	        return (this.batchId === other.batchId &&
	            arrayEquals(this.mutations, other.mutations));
	    };
	    return MutationBatch;
	}());
	/** The result of applying a mutation batch to the backend. */
	var MutationBatchResult = /** @class */ (function () {
	    function MutationBatchResult(batch, commitVersion, mutationResults, streamToken, 
	    /**
	     * A pre-computed mapping from each mutated document to the resulting
	     * version.
	     */
	    docVersions) {
	        this.batch = batch;
	        this.commitVersion = commitVersion;
	        this.mutationResults = mutationResults;
	        this.streamToken = streamToken;
	        this.docVersions = docVersions;
	    }
	    /**
	     * Creates a new MutationBatchResult for the given batch and results. There
	     * must be one result for each mutation in the batch. This static factory
	     * caches a document=>version mapping (docVersions).
	     */
	    MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {
	        assert(batch.mutations.length === results.length, 'Mutations sent ' +
	            batch.mutations.length +
	            ' must equal results received ' +
	            results.length);
	        var versionMap = documentVersionMap();
	        var mutations = batch.mutations;
	        for (var i = 0; i < mutations.length; i++) {
	            versionMap = versionMap.insert(mutations[i].key, results[i].version);
	        }
	        return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);
	    };
	    return MutationBatchResult;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var RESERVED_BITS = 1;
	var GeneratorIds;
	(function (GeneratorIds) {
	    GeneratorIds[GeneratorIds["QueryCache"] = 0] = "QueryCache";
	    GeneratorIds[GeneratorIds["SyncEngine"] = 1] = "SyncEngine"; // The target IDs for limbo detection are odd (end in 1).
	})(GeneratorIds || (GeneratorIds = {}));
	/**
	 * Generates monotonically increasing target IDs for sending targets to the
	 * watch stream.
	 *
	 * The client constructs two generators, one for the query cache (via
	 * forQueryCache()), and one for limbo documents (via forSyncEngine()). These
	 * two generators produce non-overlapping IDs (by using even and odd IDs
	 * respectively).
	 *
	 * By separating the target ID space, the query cache can generate target IDs
	 * that persist across client restarts, while sync engine can independently
	 * generate in-memory target IDs that are transient and can be reused after a
	 * restart.
	 */
	// TODO(mrschmidt): Explore removing this class in favor of generating these IDs
	// directly in SyncEngine and LocalStore.
	var TargetIdGenerator = /** @class */ (function () {
	    /**
	     * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
	     * will use the seed value as the next target ID.
	     */
	    function TargetIdGenerator(generatorId, seed) {
	        this.generatorId = generatorId;
	        assert((generatorId & RESERVED_BITS) === generatorId, "Generator ID " + generatorId + " contains more than " + RESERVED_BITS + " reserved bits");
	        this.seek(seed !== undefined ? seed : this.generatorId);
	    }
	    TargetIdGenerator.prototype.next = function () {
	        var nextId = this.nextId;
	        this.nextId += 1 << RESERVED_BITS;
	        return nextId;
	    };
	    /**
	     * Returns the ID that follows the given ID. Subsequent calls to `next()`
	     * use the newly returned target ID as their base.
	     */
	    // PORTING NOTE: Multi-tab only.
	    TargetIdGenerator.prototype.after = function (targetId) {
	        this.seek(targetId + (1 << RESERVED_BITS));
	        return this.next();
	    };
	    TargetIdGenerator.prototype.seek = function (targetId) {
	        assert((targetId & RESERVED_BITS) === this.generatorId, 'Cannot supply target ID from different generator ID');
	        this.nextId = targetId;
	    };
	    TargetIdGenerator.forQueryCache = function () {
	        // We seed the query cache generator to return '2' as its first ID, as there
	        // is no differentiation in the protocol layer between an unset number and
	        // the number '0'. If we were to sent a target with target ID '0', the
	        // backend would consider it unset and replace it with its own ID.
	        var targetIdGenerator = new TargetIdGenerator(GeneratorIds.QueryCache, 2);
	        return targetIdGenerator;
	    };
	    TargetIdGenerator.forSyncEngine = function () {
	        // Sync engine assigns target IDs for limbo document detection.
	        return new TargetIdGenerator(GeneratorIds.SyncEngine);
	    };
	    return TargetIdGenerator;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * PersistencePromise<> is essentially a re-implementation of Promise<> except
	 * it has a .next() method instead of .then() and .next() and .catch() callbacks
	 * are executed synchronously when a PersistencePromise resolves rather than
	 * asynchronously (Promise<> implementations use setImmediate() or similar).
	 *
	 * This is necessary to interoperate with IndexedDB which will automatically
	 * commit transactions if control is returned to the event loop without
	 * synchronously initiating another operation on the transaction.
	 *
	 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
	 * Promises.
	 */
	var PersistencePromise = /** @class */ (function () {
	    function PersistencePromise(callback) {
	        var _this = this;
	        // NOTE: next/catchCallback will always point to our own wrapper functions,
	        // not the user's raw next() or catch() callbacks.
	        // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.
	        this.nextCallback = null;
	        // tslint:disable-next-line:no-any Accept any result type for the error handler.
	        this.catchCallback = null;
	        // When the operation resolves, we'll set result or error and mark isDone.
	        this.result = undefined;
	        this.error = undefined;
	        this.isDone = false;
	        // Set to true when .then() or .catch() are called and prevents additional
	        // chaining.
	        this.callbackAttached = false;
	        callback(function (value) {
	            _this.isDone = true;
	            _this.result = value;
	            if (_this.nextCallback) {
	                // value should be defined unless T is Void, but we can't express
	                // that in the type system.
	                _this.nextCallback(value);
	            }
	        }, function (error) {
	            _this.isDone = true;
	            _this.error = error;
	            if (_this.catchCallback) {
	                _this.catchCallback(error);
	            }
	        });
	    }
	    PersistencePromise.prototype.catch = function (fn) {
	        return this.next(undefined, fn);
	    };
	    PersistencePromise.prototype.next = function (nextFn, catchFn) {
	        var _this = this;
	        if (this.callbackAttached) {
	            fail('Called next() or catch() twice for PersistencePromise');
	        }
	        this.callbackAttached = true;
	        if (this.isDone) {
	            if (!this.error) {
	                return this.wrapSuccess(nextFn, this.result);
	            }
	            else {
	                return this.wrapFailure(catchFn, this.error);
	            }
	        }
	        else {
	            return new PersistencePromise(function (resolve, reject) {
	                _this.nextCallback = function (value) {
	                    _this.wrapSuccess(nextFn, value).next(resolve, reject);
	                };
	                _this.catchCallback = function (error) {
	                    _this.wrapFailure(catchFn, error).next(resolve, reject);
	                };
	            });
	        }
	    };
	    PersistencePromise.prototype.toPromise = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this.next(resolve, reject);
	        });
	    };
	    PersistencePromise.prototype.wrapUserFunction = function (fn) {
	        try {
	            var result = fn();
	            if (result instanceof PersistencePromise) {
	                return result;
	            }
	            else {
	                return PersistencePromise.resolve(result);
	            }
	        }
	        catch (e) {
	            return PersistencePromise.reject(e);
	        }
	    };
	    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {
	        if (nextFn) {
	            return this.wrapUserFunction(function () { return nextFn(value); });
	        }
	        else {
	            // If there's no nextFn, then R must be the same as T but we
	            // can't express that in the type system.
	            // tslint:disable-next-line:no-any
	            return PersistencePromise.resolve(value);
	        }
	    };
	    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {
	        if (catchFn) {
	            return this.wrapUserFunction(function () { return catchFn(error); });
	        }
	        else {
	            return PersistencePromise.reject(error);
	        }
	    };
	    PersistencePromise.resolve = function (result) {
	        return new PersistencePromise(function (resolve, reject) {
	            resolve(result);
	        });
	    };
	    PersistencePromise.reject = function (error) {
	        return new PersistencePromise(function (resolve, reject) {
	            reject(error);
	        });
	    };
	    PersistencePromise.waitFor = function (
	    // tslint:disable-next-line:no-any Accept all Promise types in waitFor().
	    all) {
	        return new PersistencePromise(function (resolve, reject) {
	            var expectedCount = 0;
	            var resolvedCount = 0;
	            var done = false;
	            all.forEach(function (element) {
	                ++expectedCount;
	                element.next(function () {
	                    ++resolvedCount;
	                    if (done && resolvedCount === expectedCount) {
	                        resolve();
	                    }
	                }, function (err) { return reject(err); });
	            });
	            done = true;
	            if (resolvedCount === expectedCount) {
	                resolve();
	            }
	        });
	    };
	    /**
	     * Given an array of predicate functions that asynchronously evaluate to a
	     * boolean, implements a short-circuiting `or` between the results. Predicates
	     * will be evaluated until one of them returns `true`, then stop. The final
	     * result will be whether any of them returned `true`.
	     */
	    PersistencePromise.or = function (predicates) {
	        var p = PersistencePromise.resolve(false);
	        var _loop_1 = function (predicate) {
	            p = p.next(function (isTrue) {
	                if (isTrue) {
	                    return PersistencePromise.resolve(isTrue);
	                }
	                else {
	                    return predicate();
	                }
	            });
	        };
	        for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
	            var predicate = predicates_1[_i];
	            _loop_1(predicate);
	        }
	        return p;
	    };
	    /**
	     * Given an iterable, call the given function on each element in the
	     * collection and wait for all of the resulting concurrent PersistencePromises
	     * to resolve.
	     */
	    PersistencePromise.forEach = function (collection, f) {
	        var _this = this;
	        var promises = [];
	        collection.forEach(function (r, s) {
	            promises.push(f.call(_this, r, s));
	        });
	        return this.waitFor(promises);
	    };
	    return PersistencePromise;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$1 = 'SimpleDb';
	/**
	 * Provides a wrapper around IndexedDb with a simplified interface that uses
	 * Promise-like return values to chain operations. Real promises cannot be used
	 * since .then() continuations are executed asynchronously (e.g. via
	 * .setImmediate), which would cause IndexedDB to end the transaction.
	 * See PersistencePromise for more details.
	 */
	var SimpleDb = /** @class */ (function () {
	    function SimpleDb(db) {
	        this.db = db;
	    }
	    /** Opens the specified database, creating or upgrading it if necessary. */
	    SimpleDb.openOrCreate = function (name, version, schemaConverter) {
	        assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');
	        debug(LOG_TAG$1, 'Opening database:', name);
	        return new PersistencePromise(function (resolve, reject) {
	            // TODO(mikelehen): Investigate browser compatibility.
	            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
	            // suggests IE9 and older WebKit browsers handle upgrade
	            // differently. They expect setVersion, as described here:
	            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
	            var request = window.indexedDB.open(name, version);
	            request.onsuccess = function (event) {
	                var db = event.target.result;
	                resolve(new SimpleDb(db));
	            };
	            request.onblocked = function () {
	                reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Cannot upgrade IndexedDB schema while another tab is open. ' +
	                    'Close all tabs that access Firestore and reload this page to proceed.'));
	            };
	            request.onerror = function (event) {
	                reject(event.target.error);
	            };
	            request.onupgradeneeded = function (event) {
	                debug(LOG_TAG$1, 'Database "' + name + '" requires upgrade from version:', event.oldVersion);
	                var db = event.target.result;
	                // We are provided a version upgrade transaction from the request, so
	                // we wrap that in a SimpleDbTransaction to allow use of our friendlier
	                // API for schema migration operations.
	                var txn = new SimpleDbTransaction(request.transaction);
	                schemaConverter
	                    .createOrUpgrade(db, txn, event.oldVersion, SCHEMA_VERSION)
	                    .next(function () {
	                    debug(LOG_TAG$1, 'Database upgrade to version ' + SCHEMA_VERSION + ' complete');
	                });
	            };
	        }).toPromise();
	    };
	    /** Deletes the specified database. */
	    SimpleDb.delete = function (name) {
	        debug(LOG_TAG$1, 'Removing database:', name);
	        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();
	    };
	    /** Returns true if IndexedDB is available in the current environment. */
	    SimpleDb.isAvailable = function () {
	        if (typeof window === 'undefined' || window.indexedDB == null) {
	            return false;
	        }
	        // We extensively use indexed array values and compound keys,
	        // which IE and Edge do not support. However, they still have indexedDB
	        // defined on the window, so we need to check for them here and make sure
	        // to return that persistence is not enabled for those browsers.
	        // For tracking support of this feature, see here:
	        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
	        // If we are running in Node using the IndexedDBShim, `window` is defined,
	        // but `window.navigator` is not. In this case, we support IndexedDB and
	        // return `true`.
	        if (window.navigator === undefined) {
	            return process.env.USE_MOCK_PERSISTENCE === 'YES';
	        }
	        // Check the UA string to find out the browser.
	        // TODO(mikelehen): Move this logic into packages/util/environment.ts
	        var ua = window.navigator.userAgent;
	        // IE 10
	        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
	        // IE 11
	        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
	        // Edge
	        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
	        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
	        if (ua.indexOf('MSIE ') > 0 ||
	            ua.indexOf('Trident/') > 0 ||
	            ua.indexOf('Edge/') > 0) {
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    /** Helper to get a typed SimpleDbStore from a transaction. */
	    SimpleDb.getStore = function (txn, store) {
	        return txn.store(store);
	    };
	    SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {
	        var transaction = SimpleDbTransaction.open(this.db, mode, objectStores);
	        var transactionFnResult = transactionFn(transaction)
	            .catch(function (error$$1) {
	            // Abort the transaction if there was an error.
	            transaction.abort(error$$1);
	        })
	            .toPromise();
	        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
	        // fire), but still return the original transactionFnResult back to the
	        // caller.
	        return transaction.completionPromise.then(function () { return transactionFnResult; });
	    };
	    SimpleDb.prototype.close = function () {
	        this.db.close();
	    };
	    return SimpleDb;
	}());
	/**
	 * A controller for iterating over a key range or index. It allows an iterate
	 * callback to delete the currently-referenced object, or jump to a new key
	 * within the key range or index.
	 */
	var IterationController = /** @class */ (function () {
	    function IterationController(dbCursor) {
	        this.dbCursor = dbCursor;
	        this.shouldStop = false;
	        this.nextKey = null;
	    }
	    Object.defineProperty(IterationController.prototype, "isDone", {
	        get: function () {
	            return this.shouldStop;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IterationController.prototype, "skipToKey", {
	        get: function () {
	            return this.nextKey;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IterationController.prototype, "cursor", {
	        set: function (value) {
	            this.dbCursor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This function can be called to stop iteration at any point.
	     */
	    IterationController.prototype.done = function () {
	        this.shouldStop = true;
	    };
	    /**
	     * This function can be called to skip to that next key, which could be
	     * an index or a primary key.
	     */
	    IterationController.prototype.skip = function (key) {
	        this.nextKey = key;
	    };
	    /**
	     * Delete the current cursor value from the object store.
	     *
	     * NOTE: You CANNOT do this with a keysOnly query.
	     */
	    IterationController.prototype.delete = function () {
	        return wrapRequest(this.dbCursor.delete());
	    };
	    return IterationController;
	}());
	/**
	 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
	 * specific object store.
	 */
	var SimpleDbTransaction = /** @class */ (function () {
	    function SimpleDbTransaction(transaction) {
	        var _this = this;
	        this.transaction = transaction;
	        this.aborted = false;
	        /**
	         * A promise that resolves with the result of the IndexedDb transaction.
	         */
	        this.completionDeferred = new Deferred$1();
	        this.transaction.oncomplete = function () {
	            _this.completionDeferred.resolve();
	        };
	        this.transaction.onabort = function () {
	            if (transaction.error) {
	                _this.completionDeferred.reject(transaction.error);
	            }
	            else {
	                _this.completionDeferred.resolve();
	            }
	        };
	        this.transaction.onerror = function (event) {
	            _this.completionDeferred.reject(event.target.error);
	        };
	    }
	    SimpleDbTransaction.open = function (db, mode, objectStoreNames) {
	        return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));
	    };
	    Object.defineProperty(SimpleDbTransaction.prototype, "completionPromise", {
	        get: function () {
	            return this.completionDeferred.promise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SimpleDbTransaction.prototype.abort = function (error$$1) {
	        if (error$$1) {
	            this.completionDeferred.reject(error$$1);
	        }
	        if (!this.aborted) {
	            debug(LOG_TAG$1, 'Aborting transaction:', error$$1 ? error$$1.message : 'Client-initiated abort');
	            this.aborted = true;
	            this.transaction.abort();
	        }
	    };
	    /**
	     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
	     * operations performed on the SimpleDbStore happen within the context of this
	     * transaction and it cannot be used anymore once the transaction is
	     * completed.
	     *
	     * Note that we can't actually enforce that the KeyType and ValueType are
	     * correct, but they allow type safety through the rest of the consuming code.
	     */
	    SimpleDbTransaction.prototype.store = function (storeName) {
	        var store = this.transaction.objectStore(storeName);
	        assert(!!store, 'Object store not part of transaction: ' + storeName);
	        return new SimpleDbStore(store);
	    };
	    return SimpleDbTransaction;
	}());
	/**
	 * A wrapper around an IDBObjectStore providing an API that:
	 *
	 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
	 * methods for acting against the object store.
	 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
	 * method return a PersistencePromise instead.
	 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
	 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
	 */
	var SimpleDbStore = /** @class */ (function () {
	    function SimpleDbStore(store) {
	        this.store = store;
	    }
	    SimpleDbStore.prototype.put = function (keyOrValue, value) {
	        var request;
	        if (value !== undefined) {
	            debug(LOG_TAG$1, 'PUT', this.store.name, keyOrValue, value);
	            request = this.store.put(value, keyOrValue);
	        }
	        else {
	            debug(LOG_TAG$1, 'PUT', this.store.name, '<auto-key>', keyOrValue);
	            request = this.store.put(keyOrValue);
	        }
	        return wrapRequest(request);
	    };
	    /**
	     * Adds a new value into an Object Store and returns the new key. Similar to
	     * IndexedDb's `add()`, this method will fail on primary key collisions.
	     *
	     * @param value The object to write.
	     * @return The key of the value to add.
	     */
	    SimpleDbStore.prototype.add = function (value) {
	        debug(LOG_TAG$1, 'ADD', this.store.name, value, value);
	        var request = this.store.add(value);
	        return wrapRequest(request);
	    };
	    /**
	     * Gets the object with the specified key from the specified store, or null
	     * if no object exists with the specified key.
	     *
	     * @key The key of the object to get.
	     * @return The object with the specified key or null if no object exists.
	     */
	    SimpleDbStore.prototype.get = function (key) {
	        var _this = this;
	        var request = this.store.get(key);
	        // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.
	        return wrapRequest(request).next(function (result) {
	            // Normalize nonexistence to null.
	            if (result === undefined) {
	                result = null;
	            }
	            debug(LOG_TAG$1, 'GET', _this.store.name, key, result);
	            return result;
	        });
	    };
	    SimpleDbStore.prototype.delete = function (key) {
	        debug(LOG_TAG$1, 'DELETE', this.store.name, key);
	        var request = this.store.delete(key);
	        return wrapRequest(request);
	    };
	    /**
	     * If we ever need more of the count variants, we can add overloads. For now,
	     * all we need is to count everything in a store.
	     *
	     * Returns the number of rows in the store.
	     */
	    SimpleDbStore.prototype.count = function () {
	        debug(LOG_TAG$1, 'COUNT', this.store.name);
	        var request = this.store.count();
	        return wrapRequest(request);
	    };
	    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {
	        var cursor = this.cursor(this.options(indexOrRange, range));
	        var results = [];
	        return this.iterateCursor(cursor, function (key, value) {
	            results.push(value);
	        }).next(function () {
	            return results;
	        });
	    };
	    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {
	        debug(LOG_TAG$1, 'DELETE ALL', this.store.name);
	        var options = this.options(indexOrRange, range);
	        options.keysOnly = false;
	        var cursor = this.cursor(options);
	        return this.iterateCursor(cursor, function (key, value, control) {
	            // NOTE: Calling delete() on a cursor is documented as more efficient than
	            // calling delete() on an object store with a single key
	            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
	            // however, this requires us *not* to use a keysOnly cursor
	            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
	            // may want to compare the performance of each method.
	            return control.delete();
	        });
	    };
	    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {
	        var options;
	        if (!callback) {
	            options = {};
	            callback = optionsOrCallback;
	        }
	        else {
	            options = optionsOrCallback;
	        }
	        var cursor = this.cursor(options);
	        return this.iterateCursor(cursor, callback);
	    };
	    /**
	     * Iterates over a store, but waits for the given callback to complete for
	     * each entry before iterating the next entry. This allows the callback to do
	     * asynchronous work to determine if this iteration should continue.
	     *
	     * The provided callback should return `true` to continue iteration, and
	     * `false` otherwise.
	     */
	    SimpleDbStore.prototype.iterateSerial = function (callback) {
	        var cursorRequest = this.cursor({});
	        return new PersistencePromise(function (resolve, reject) {
	            cursorRequest.onerror = function (event) {
	                reject(event.target.error);
	            };
	            cursorRequest.onsuccess = function (event) {
	                var cursor = event.target.result;
	                if (!cursor) {
	                    resolve();
	                    return;
	                }
	                callback(cursor.primaryKey, cursor.value).next(function (shouldContinue) {
	                    if (shouldContinue) {
	                        cursor.continue();
	                    }
	                    else {
	                        resolve();
	                    }
	                });
	            };
	        });
	    };
	    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {
	        var results = [];
	        return new PersistencePromise(function (resolve, reject) {
	            cursorRequest.onerror = function (event) {
	                reject(event.target.error);
	            };
	            cursorRequest.onsuccess = function (event) {
	                var cursor = event.target.result;
	                if (!cursor) {
	                    resolve();
	                    return;
	                }
	                var controller = new IterationController(cursor);
	                var userResult = fn(cursor.primaryKey, cursor.value, controller);
	                if (userResult instanceof PersistencePromise) {
	                    var userPromise = userResult.catch(function (err) {
	                        controller.done();
	                        return PersistencePromise.reject(err);
	                    });
	                    results.push(userPromise);
	                }
	                if (controller.isDone) {
	                    resolve();
	                }
	                else if (controller.skipToKey === null) {
	                    cursor.continue();
	                }
	                else {
	                    cursor.continue(controller.skipToKey);
	                }
	            };
	        }).next(function () {
	            return PersistencePromise.waitFor(results);
	        });
	    };
	    SimpleDbStore.prototype.options = function (indexOrRange, range) {
	        var indexName = undefined;
	        if (indexOrRange !== undefined) {
	            if (typeof indexOrRange === 'string') {
	                indexName = indexOrRange;
	            }
	            else {
	                assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');
	                range = indexOrRange;
	            }
	        }
	        return { index: indexName, range: range };
	    };
	    SimpleDbStore.prototype.cursor = function (options) {
	        var direction = 'next';
	        if (options.reverse) {
	            direction = 'prev';
	        }
	        if (options.index) {
	            var index = this.store.index(options.index);
	            if (options.keysOnly) {
	                return index.openKeyCursor(options.range, direction);
	            }
	            else {
	                return index.openCursor(options.range, direction);
	            }
	        }
	        else {
	            return this.store.openCursor(options.range, direction);
	        }
	    };
	    return SimpleDbStore;
	}());
	/**
	 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
	 * handlers to resolve / reject the PersistencePromise as appropriate.
	 */
	function wrapRequest(request) {
	    return new PersistencePromise(function (resolve, reject) {
	        request.onsuccess = function (event) {
	            var result = event.target.result;
	            resolve(result);
	        };
	        request.onerror = function (event) {
	            reject(event.target.error);
	        };
	    });
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var IndexedDbQueryCache = /** @class */ (function () {
	    function IndexedDbQueryCache(referenceDelegate, serializer) {
	        this.referenceDelegate = referenceDelegate;
	        this.serializer = serializer;
	        // PORTING NOTE: We don't cache global metadata for the query cache, since
	        // some of it (in particular `highestTargetId`) can be modified by secondary
	        // tabs. We could perhaps be more granular (and e.g. still cache
	        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
	        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
	        // out to have a meaningful performance impact.
	        this.targetIdGenerator = TargetIdGenerator.forQueryCache();
	    }
	    IndexedDbQueryCache.prototype.allocateTargetId = function (transaction) {
	        var _this = this;
	        return this.retrieveMetadata(transaction).next(function (metadata) {
	            metadata.highestTargetId = _this.targetIdGenerator.after(metadata.highestTargetId);
	            return _this.saveMetadata(transaction, metadata).next(function () { return metadata.highestTargetId; });
	        });
	    };
	    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
	        return this.retrieveMetadata(transaction).next(function (metadata) {
	            return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));
	        });
	    };
	    IndexedDbQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
	        return getHighestListenSequenceNumber(transaction.simpleDbTransaction);
	    };
	    IndexedDbQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
	        var _this = this;
	        return this.retrieveMetadata(transaction).next(function (metadata) {
	            metadata.highestListenSequenceNumber = highestListenSequenceNumber;
	            if (lastRemoteSnapshotVersion) {
	                metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
	            }
	            if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {
	                metadata.highestListenSequenceNumber = highestListenSequenceNumber;
	            }
	            return _this.saveMetadata(transaction, metadata);
	        });
	    };
	    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {
	        var _this = this;
	        return this.saveQueryData(transaction, queryData).next(function () {
	            return _this.retrieveMetadata(transaction).next(function (metadata) {
	                metadata.targetCount += 1;
	                _this.updateMetadataFromQueryData(queryData, metadata);
	                return _this.saveMetadata(transaction, metadata);
	            });
	        });
	    };
	    IndexedDbQueryCache.prototype.updateQueryData = function (transaction, queryData) {
	        return this.saveQueryData(transaction, queryData);
	    };
	    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {
	        var _this = this;
	        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId)
	            .next(function () { return targetsStore(transaction).delete(queryData.targetId); })
	            .next(function () { return _this.retrieveMetadata(transaction); })
	            .next(function (metadata) {
	            assert(metadata.targetCount > 0, 'Removing from an empty query cache');
	            metadata.targetCount -= 1;
	            return _this.saveMetadata(transaction, metadata);
	        });
	    };
	    /**
	     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
	     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
	     * Returns the number of targets removed.
	     */
	    IndexedDbQueryCache.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
	        var _this = this;
	        var count = 0;
	        var promises = [];
	        return targetsStore(txn)
	            .iterate(function (key, value) {
	            var queryData = _this.serializer.fromDbTarget(value);
	            if (queryData.sequenceNumber <= upperBound &&
	                activeTargetIds[queryData.targetId] === undefined) {
	                count++;
	                promises.push(_this.removeQueryData(txn, queryData));
	            }
	        })
	            .next(function () { return PersistencePromise.waitFor(promises); })
	            .next(function () { return count; });
	    };
	    /**
	     * Call provided function with each `QueryData` that we have cached.
	     */
	    IndexedDbQueryCache.prototype.forEachTarget = function (txn, f) {
	        var _this = this;
	        return targetsStore(txn).iterate(function (key, value) {
	            var queryData = _this.serializer.fromDbTarget(value);
	            f(queryData);
	        });
	    };
	    IndexedDbQueryCache.prototype.retrieveMetadata = function (transaction) {
	        return retrieveMetadata(transaction.simpleDbTransaction);
	    };
	    IndexedDbQueryCache.prototype.saveMetadata = function (transaction, metadata) {
	        return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);
	    };
	    IndexedDbQueryCache.prototype.saveQueryData = function (transaction, queryData) {
	        return targetsStore(transaction).put(this.serializer.toDbTarget(queryData));
	    };
	    /**
	     * In-place updates the provided metadata to account for values in the given
	     * QueryData. Saving is done separately. Returns true if there were any
	     * changes to the metadata.
	     */
	    IndexedDbQueryCache.prototype.updateMetadataFromQueryData = function (queryData, metadata) {
	        var updated = false;
	        if (queryData.targetId > metadata.highestTargetId) {
	            metadata.highestTargetId = queryData.targetId;
	            updated = true;
	        }
	        if (queryData.sequenceNumber > metadata.highestListenSequenceNumber) {
	            metadata.highestListenSequenceNumber = queryData.sequenceNumber;
	            updated = true;
	        }
	        return updated;
	    };
	    IndexedDbQueryCache.prototype.getQueryCount = function (transaction) {
	        return this.retrieveMetadata(transaction).next(function (metadata) { return metadata.targetCount; });
	    };
	    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {
	        var _this = this;
	        // Iterating by the canonicalId may yield more than one result because
	        // canonicalId values are not required to be unique per target. This query
	        // depends on the queryTargets index to be efficient.
	        var canonicalId = query.canonicalId();
	        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);
	        var result = null;
	        return targetsStore(transaction)
	            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {
	            var found = _this.serializer.fromDbTarget(value);
	            // After finding a potential match, check that the query is
	            // actually equal to the requested query.
	            if (query.isEqual(found.query)) {
	                result = found;
	                control.done();
	            }
	        })
	            .next(function () { return result; });
	    };
	    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
	        var _this = this;
	        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
	        // IndexedDb.
	        var promises = [];
	        var store = documentTargetStore(txn);
	        keys.forEach(function (key) {
	            var path = encode(key.path);
	            promises.push(store.put(new DbTargetDocument(targetId, path)));
	            promises.push(_this.referenceDelegate.addReference(txn, key));
	        });
	        return PersistencePromise.waitFor(promises);
	    };
	    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
	        var _this = this;
	        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
	        // IndexedDb.
	        var store = documentTargetStore(txn);
	        return PersistencePromise.forEach(keys, function (key) {
	            var path = encode(key.path);
	            return PersistencePromise.waitFor([
	                store.delete([targetId, path]),
	                _this.referenceDelegate.removeReference(txn, key)
	            ]);
	        });
	    };
	    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
	        var store = documentTargetStore(txn);
	        var range = IDBKeyRange.bound([targetId], [targetId + 1], 
	        /*lowerOpen=*/ false, 
	        /*upperOpen=*/ true);
	        return store.delete(range);
	    };
	    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
	        var range = IDBKeyRange.bound([targetId], [targetId + 1], 
	        /*lowerOpen=*/ false, 
	        /*upperOpen=*/ true);
	        var store = documentTargetStore(txn);
	        var result = documentKeySet();
	        return store
	            .iterate({ range: range, keysOnly: true }, function (key, _, control) {
	            var path = decode$1(key[1]);
	            var docKey = new DocumentKey(path);
	            result = result.add(docKey);
	        })
	            .next(function () { return result; });
	    };
	    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {
	        var path = encode(key.path);
	        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], 
	        /*lowerOpen=*/ false, 
	        /*upperOpen=*/ true);
	        var count = 0;
	        return documentTargetStore(txn)
	            .iterate({
	            index: DbTargetDocument.documentTargetsIndex,
	            keysOnly: true,
	            range: range
	        }, function (_a, _, control) {
	            var targetId = _a[0], path = _a[1];
	            // Having a sentinel row for a document does not count as containing that document;
	            // For the query cache, containing the document means the document is part of some
	            // target.
	            if (targetId !== 0) {
	                count++;
	                control.done();
	            }
	        })
	            .next(function () { return count > 0; });
	    };
	    IndexedDbQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
	        var _this = this;
	        return targetsStore(transaction)
	            .get(targetId)
	            .next(function (found) {
	            if (found) {
	                return _this.serializer.fromDbTarget(found);
	            }
	            else {
	                return null;
	            }
	        });
	    };
	    return IndexedDbQueryCache;
	}());
	/**
	 * Helper to get a typed SimpleDbStore for the queries object store.
	 */
	function targetsStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbTarget.store);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the target globals object store.
	 */
	function globalTargetStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbTargetGlobal.store);
	}
	function retrieveMetadata(txn) {
	    var globalStore = SimpleDb.getStore(txn, DbTargetGlobal.store);
	    return globalStore.get(DbTargetGlobal.key).next(function (metadata) {
	        assert(metadata !== null, 'Missing metadata row.');
	        return metadata;
	    });
	}
	function getHighestListenSequenceNumber(txn) {
	    return retrieveMetadata(txn).next(function (targetGlobal) { return targetGlobal.highestListenSequenceNumber; });
	}
	/**
	 * Helper to get a typed SimpleDbStore for the document target object store.
	 */
	function documentTargetStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbTargetDocument.store);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A map implementation that uses objects as keys. Objects must implement the
	 * Equatable interface and must be immutable. Entries in the map are stored
	 * together with the key being produced from the mapKeyFn. This map
	 * automatically handles collisions of keys.
	 */
	var ObjectMap = /** @class */ (function () {
	    function ObjectMap(mapKeyFn) {
	        this.mapKeyFn = mapKeyFn;
	        /**
	         * The inner map for a key -> value pair. Due to the possibility of
	         * collisions we keep a list of entries that we do a linear search through
	         * to find an actual match. Note that collisions should be rare, so we still
	         * expect near constant time lookups in practice.
	         */
	        this.inner = {};
	    }
	    /** Get a value for this key, or undefined if it does not exist. */
	    ObjectMap.prototype.get = function (key) {
	        var id = this.mapKeyFn(key);
	        var matches = this.inner[id];
	        if (matches === undefined) {
	            return undefined;
	        }
	        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
	            var _a = matches_1[_i], otherKey = _a[0], value = _a[1];
	            if (otherKey.isEqual(key)) {
	                return value;
	            }
	        }
	        return undefined;
	    };
	    ObjectMap.prototype.has = function (key) {
	        return this.get(key) !== undefined;
	    };
	    /** Put this key and value in the map. */
	    ObjectMap.prototype.set = function (key, value) {
	        var id = this.mapKeyFn(key);
	        var matches = this.inner[id];
	        if (matches === undefined) {
	            this.inner[id] = [[key, value]];
	            return;
	        }
	        for (var i = 0; i < matches.length; i++) {
	            if (matches[i][0].isEqual(key)) {
	                matches[i] = [key, value];
	                return;
	            }
	        }
	        matches.push([key, value]);
	    };
	    /**
	     * Remove this key from the map. Returns a boolean if anything was deleted.
	     */
	    ObjectMap.prototype.delete = function (key) {
	        var id = this.mapKeyFn(key);
	        var matches = this.inner[id];
	        if (matches === undefined) {
	            return false;
	        }
	        for (var i = 0; i < matches.length; i++) {
	            if (matches[i][0].isEqual(key)) {
	                if (matches.length === 1) {
	                    delete this.inner[id];
	                }
	                else {
	                    matches.splice(i, 1);
	                }
	                return true;
	            }
	        }
	        return false;
	    };
	    ObjectMap.prototype.forEach = function (fn) {
	        forEach(this.inner, function (_, entries) {
	            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
	                var _a = entries_1[_i], k = _a[0], v = _a[1];
	                fn(k, v);
	            }
	        });
	    };
	    ObjectMap.prototype.isEmpty = function () {
	        return isEmpty(this.inner);
	    };
	    return ObjectMap;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
	 * It can be used to batch up a set of changes to be written to the cache, but
	 * additionally supports reading entries back with the `getEntry()` method,
	 * falling back to the underlying RemoteDocumentCache if no entry is
	 * buffered.
	 *
	 * Entries added to the cache *must* be read first. This is to facilitate
	 * calculating the size delta of the pending changes.
	 *
	 * PORTING NOTE: This class was implemented then removed from other platforms.
	 * If byte-counting ends up being needed on the other platforms, consider
	 * porting this class as part of that implementation work.
	 */
	var RemoteDocumentChangeBuffer = /** @class */ (function () {
	    function RemoteDocumentChangeBuffer() {
	        this.changes = maybeDocumentMap();
	        this.documentSizes = new ObjectMap(function (key) {
	            return key.toString();
	        });
	    }
	    /** Buffers a `RemoteDocumentCache.addEntry()` call. */
	    RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {
	        var changes = this.assertChanges();
	        this.changes = changes.insert(maybeDocument.key, maybeDocument);
	    };
	    // NOTE: removeEntry() is intentionally omitted. If it needs to be added in
	    // the future it must take byte counting into account.
	    /**
	     * Looks up an entry in the cache. The buffered changes will first be checked,
	     * and if no buffered change applies, this will forward to
	     * `RemoteDocumentCache.getEntry()`.
	     *
	     * @param transaction The transaction in which to perform any persistence
	     *     operations.
	     * @param documentKey The key of the entry to look up.
	     * @return The cached Document or NoDocument entry, or null if we have nothing
	     * cached.
	     */
	    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {
	        var _this = this;
	        var changes = this.assertChanges();
	        var bufferedEntry = changes.get(documentKey);
	        if (bufferedEntry) {
	            return PersistencePromise.resolve(bufferedEntry);
	        }
	        else {
	            // Record the size of everything we load from the cache so we can compute a delta later.
	            return this.getFromCache(transaction, documentKey).next(function (getResult) {
	                if (getResult === null) {
	                    _this.documentSizes.set(documentKey, 0);
	                    return null;
	                }
	                else {
	                    _this.documentSizes.set(documentKey, getResult.size);
	                    return getResult.maybeDocument;
	                }
	            });
	        }
	    };
	    /**
	     * Applies buffered changes to the underlying RemoteDocumentCache, using
	     * the provided transaction.
	     */
	    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {
	        var result = this.applyChanges(transaction);
	        // We should not buffer any more changes.
	        this.changes = null;
	        return result;
	    };
	    /** Helper to assert this.changes is not null and return it. */
	    RemoteDocumentChangeBuffer.prototype.assertChanges = function () {
	        assert(this.changes !== null, 'Changes have already been applied.');
	        return this.changes;
	    };
	    return RemoteDocumentChangeBuffer;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG = 'The remote document changelog no longer contains all changes for all ' +
	    'local query views. It may be necessary to rebuild these views.';
	var IndexedDbRemoteDocumentCache = /** @class */ (function () {
	    /**
	     * @param {LocalSerializer} serializer The document serializer.
	     * @param keepDocumentChangeLog Whether to keep a document change log in
	     * IndexedDb. This change log is required for Multi-Tab synchronization, but
	     * not needed in clients that don't share access to their remote document
	     * cache.
	     */
	    function IndexedDbRemoteDocumentCache(serializer, keepDocumentChangeLog) {
	        this.serializer = serializer;
	        this.keepDocumentChangeLog = keepDocumentChangeLog;
	        /** The last id read by `getNewDocumentChanges()`. */
	        this._lastProcessedDocumentChangeId = 0;
	    }
	    Object.defineProperty(IndexedDbRemoteDocumentCache.prototype, "lastProcessedDocumentChangeId", {
	        get: function () {
	            return this._lastProcessedDocumentChangeId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Starts up the remote document cache.
	     *
	     * Reads the ID of the last  document change from the documentChanges store.
	     * Existing changes will not be returned as part of
	     * `getNewDocumentChanges()`.
	     */
	    // PORTING NOTE: This is only used for multi-tab synchronization.
	    IndexedDbRemoteDocumentCache.prototype.start = function (transaction) {
	        var store = SimpleDb.getStore(transaction, DbRemoteDocumentChanges.store);
	        return this.synchronizeLastDocumentChangeId(store);
	    };
	    /**
	     * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
	     */
	    IndexedDbRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
	        var promises = [];
	        if (entries.length > 0) {
	            var documentStore = remoteDocumentsStore(transaction);
	            var changedKeys = documentKeySet();
	            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
	                var _a = entries_1[_i], key = _a.key, doc = _a.doc;
	                promises.push(documentStore.put(dbKey(key), doc));
	                changedKeys = changedKeys.add(key);
	            }
	            if (this.keepDocumentChangeLog) {
	                promises.push(documentChangesStore(transaction).put({
	                    changes: this.serializer.toDbResourcePaths(changedKeys)
	                }));
	            }
	            promises.push(this.updateSize(transaction, sizeDelta));
	        }
	        return PersistencePromise.waitFor(promises);
	    };
	    /**
	     * Removes a document from the cache. Note that this method does *not* do any
	     * size accounting. It is the responsibility of the caller to count the bytes removed
	     * and issue a final updateSize() call after removing documents.
	     *
	     * @param documentKey The key of the document to remove
	     * @return The size of the document that was removed.
	     */
	    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
	        // We don't need to keep changelog for these removals since `removeEntry` is
	        // only used for garbage collection.
	        var store = remoteDocumentsStore(transaction);
	        var key = dbKey(documentKey);
	        return store.get(key).next(function (document) {
	            if (document) {
	                return store.delete(key).next(function () { return dbDocumentSize(document); });
	            }
	            else {
	                return PersistencePromise.resolve(0);
	            }
	        });
	    };
	    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
	        var _this = this;
	        return remoteDocumentsStore(transaction)
	            .get(dbKey(documentKey))
	            .next(function (dbRemoteDoc) {
	            return dbRemoteDoc
	                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)
	                : null;
	        });
	    };
	    /**
	     * Looks up an entry in the cache.
	     *
	     * @param documentKey The key of the entry to look up.
	     * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
	     */
	    IndexedDbRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
	        var _this = this;
	        return remoteDocumentsStore(transaction)
	            .get(dbKey(documentKey))
	            .next(function (dbRemoteDoc) {
	            return dbRemoteDoc
	                ? {
	                    maybeDocument: _this.serializer.fromDbRemoteDocument(dbRemoteDoc),
	                    size: dbDocumentSize(dbRemoteDoc)
	                }
	                : null;
	        });
	    };
	    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
	        var _this = this;
	        var results = documentMap();
	        // Documents are ordered by key, so we can use a prefix scan to narrow down
	        // the documents we need to match the query against.
	        var startKey = query.path.toArray();
	        var range = IDBKeyRange.lowerBound(startKey);
	        return remoteDocumentsStore(transaction)
	            .iterate({ range: range }, function (key, dbRemoteDoc, control) {
	            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);
	            if (!query.path.isPrefixOf(maybeDoc.key.path)) {
	                control.done();
	            }
	            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {
	                results = results.insert(maybeDoc.key, maybeDoc);
	            }
	        })
	            .next(function () { return results; });
	    };
	    IndexedDbRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
	        var _this = this;
	        assert(this.keepDocumentChangeLog, 'Can only call getNewDocumentChanges() when document change log is enabled');
	        var changedKeys = documentKeySet();
	        var changedDocs = maybeDocumentMap();
	        var range = IDBKeyRange.lowerBound(this._lastProcessedDocumentChangeId + 1);
	        var firstIteration = true;
	        var changesStore = documentChangesStore(transaction);
	        return changesStore
	            .iterate({ range: range }, function (_, documentChange) {
	            if (firstIteration) {
	                firstIteration = false;
	                // If our client was throttled for more than 30 minutes, another
	                // client may have garbage collected the remote document changelog.
	                if (_this._lastProcessedDocumentChangeId + 1 !== documentChange.id) {
	                    // Reset the `lastProcessedDocumentChangeId` to allow further
	                    // invocations to successfully return the changes after this
	                    // rejection.
	                    return _this.synchronizeLastDocumentChangeId(changesStore).next(function () {
	                        return PersistencePromise.reject(new FirestoreError(Code.DATA_LOSS, REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG));
	                    });
	                }
	            }
	            changedKeys = changedKeys.unionWith(_this.serializer.fromDbResourcePaths(documentChange.changes));
	            _this._lastProcessedDocumentChangeId = documentChange.id;
	        })
	            .next(function () {
	            var documentPromises = [];
	            changedKeys.forEach(function (key) {
	                documentPromises.push(_this.getEntry(transaction, key).next(function (maybeDocument) {
	                    var doc = maybeDocument ||
	                        new NoDocument(key, SnapshotVersion.forDeletedDoc());
	                    changedDocs = changedDocs.insert(key, doc);
	                }));
	            });
	            return PersistencePromise.waitFor(documentPromises);
	        })
	            .next(function () { return changedDocs; });
	    };
	    /**
	     * Removes all changes in the remote document changelog through `changeId`
	     * (inclusive).
	     */
	    IndexedDbRemoteDocumentCache.prototype.removeDocumentChangesThroughChangeId = function (transaction, changeId) {
	        var range = IDBKeyRange.upperBound(changeId);
	        return documentChangesStore(transaction).delete(range);
	    };
	    IndexedDbRemoteDocumentCache.prototype.synchronizeLastDocumentChangeId = function (documentChangesStore) {
	        var _this = this;
	        // If there are no existing changes, we set `lastProcessedDocumentChangeId`
	        // to 0 since IndexedDb's auto-generated keys start at 1.
	        this._lastProcessedDocumentChangeId = 0;
	        return documentChangesStore.iterate({ keysOnly: true, reverse: true }, function (key, value, control) {
	            _this._lastProcessedDocumentChangeId = key;
	            control.done();
	        });
	    };
	    IndexedDbRemoteDocumentCache.prototype.newChangeBuffer = function () {
	        return new IndexedDbRemoteDocumentChangeBuffer(this);
	    };
	    IndexedDbRemoteDocumentCache.prototype.getSize = function (txn) {
	        return this.getMetadata(txn).next(function (metadata) { return metadata.byteSize; });
	    };
	    IndexedDbRemoteDocumentCache.prototype.getMetadata = function (txn) {
	        return documentGlobalStore(txn)
	            .get(DbRemoteDocumentGlobal.key)
	            .next(function (metadata) {
	            assert(!!metadata, 'Missing document cache metadata');
	            return metadata;
	        });
	    };
	    IndexedDbRemoteDocumentCache.prototype.setMetadata = function (txn, metadata) {
	        return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);
	    };
	    /**
	     * Adds the given delta to the cached current size. Callers to removeEntry *must* call this
	     * afterwards to update the size of the cache.
	     *
	     * @param sizeDelta
	     */
	    IndexedDbRemoteDocumentCache.prototype.updateSize = function (txn, sizeDelta) {
	        var _this = this;
	        return this.getMetadata(txn).next(function (metadata) {
	            metadata.byteSize += sizeDelta;
	            return _this.setMetadata(txn, metadata);
	        });
	    };
	    return IndexedDbRemoteDocumentCache;
	}());
	function documentGlobalStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbRemoteDocumentGlobal.store);
	}
	/**
	 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache
	 */
	var IndexedDbRemoteDocumentChangeBuffer = /** @class */ (function (_super) {
	    tslib_1.__extends(IndexedDbRemoteDocumentChangeBuffer, _super);
	    function IndexedDbRemoteDocumentChangeBuffer(documentCache) {
	        var _this = _super.call(this) || this;
	        _this.documentCache = documentCache;
	        return _this;
	    }
	    IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
	        var _this = this;
	        var changes = this.assertChanges();
	        var delta = 0;
	        var toApply = [];
	        changes.forEach(function (key, maybeDocument) {
	            var doc = _this.documentCache.serializer.toDbRemoteDocument(maybeDocument);
	            var previousSize = _this.documentSizes.get(key);
	            // NOTE: if we ever decide we need to support doing writes without
	            // reading first, this assert will need to change to do the read automatically.
	            assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");
	            var size = dbDocumentSize(doc);
	            delta += size - previousSize;
	            toApply.push({ key: key, doc: doc });
	        });
	        return this.documentCache.addEntries(transaction, toApply, delta);
	    };
	    IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
	        return this.documentCache.getSizedEntry(transaction, documentKey);
	    };
	    return IndexedDbRemoteDocumentChangeBuffer;
	}(RemoteDocumentChangeBuffer));
	function isDocumentChangeMissingError(err) {
	    return (err.code === Code.DATA_LOSS &&
	        err.message === REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
	 */
	function remoteDocumentsStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbRemoteDocument.store);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the remoteDocumentChanges object
	 * store.
	 */
	function documentChangesStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbRemoteDocumentChanges.store);
	}
	function dbKey(docKey) {
	    return docKey.path.toArray();
	}
	/**
	 * Retrusn an approximate size for the given document.
	 */
	function dbDocumentSize(doc) {
	    var value;
	    if (doc.document) {
	        value = doc.document;
	    }
	    else if (doc.unknownDocument) {
	        value = doc.unknownDocument;
	    }
	    else if (doc.noDocument) {
	        value = doc.noDocument;
	    }
	    else {
	        throw fail('Unknown remote document type');
	    }
	    return JSON.stringify(value).length;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Schema Version for the Web client:
	 * 1. Initial version including Mutation Queue, Query Cache, and Remote Document
	 *    Cache
	 * 2. Used to ensure a targetGlobal object exists and add targetCount to it. No
	 *    longer required because migration 3 unconditionally clears it.
	 * 3. Dropped and re-created Query Cache to deal with cache corruption related
	 *    to limbo resolution. Addresses
	 *    https://github.com/firebase/firebase-ios-sdk/issues/1548
	 * 4. Multi-Tab Support.
	 * 5. Removal of held write acks.
	 * 6. Create document global for tracking document cache size.
	 * 7. Ensure every cached document has a sentinel row with a sequence number.
	 */
	var SCHEMA_VERSION = 7;
	/** Performs database creation and schema upgrades. */
	var SchemaConverter = /** @class */ (function () {
	    function SchemaConverter(serializer) {
	        this.serializer = serializer;
	    }
	    /**
	     * Performs database creation and schema upgrades.
	     *
	     * Note that in production, this method is only ever used to upgrade the schema
	     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
	     * and local feature development.
	     */
	    SchemaConverter.prototype.createOrUpgrade = function (db, txn, fromVersion, toVersion) {
	        var _this = this;
	        assert(fromVersion < toVersion &&
	            fromVersion >= 0 &&
	            toVersion <= SCHEMA_VERSION, "Unexpected schema upgrade from v" + fromVersion + " to v{toVersion}.");
	        if (fromVersion < 1 && toVersion >= 1) {
	            createPrimaryClientStore(db);
	            createMutationQueue(db);
	            createQueryCache(db);
	            createRemoteDocumentCache(db);
	        }
	        // Migration 2 to populate the targetGlobal object no longer needed since
	        // migration 3 unconditionally clears it.
	        var p = PersistencePromise.resolve();
	        if (fromVersion < 3 && toVersion >= 3) {
	            // Brand new clients don't need to drop and recreate--only clients that
	            // potentially have corrupt data.
	            if (fromVersion !== 0) {
	                dropQueryCache(db);
	                createQueryCache(db);
	            }
	            p = p.next(function () { return writeEmptyTargetGlobalEntry(txn); });
	        }
	        if (fromVersion < 4 && toVersion >= 4) {
	            if (fromVersion !== 0) {
	                // Schema version 3 uses auto-generated keys to generate globally unique
	                // mutation batch IDs (this was previously ensured internally by the
	                // client). To migrate to the new schema, we have to read all mutations
	                // and write them back out. We preserve the existing batch IDs to guarantee
	                // consistency with other object stores. Any further mutation batch IDs will
	                // be auto-generated.
	                p = p.next(function () { return upgradeMutationBatchSchemaAndMigrateData(db, txn); });
	            }
	            p = p.next(function () {
	                createClientMetadataStore(db);
	                createRemoteDocumentChangesStore(db);
	            });
	        }
	        if (fromVersion < 5 && toVersion >= 5) {
	            p = p.next(function () { return _this.removeAcknowledgedMutations(txn); });
	        }
	        if (fromVersion < 6 && toVersion >= 6) {
	            p = p.next(function () {
	                createDocumentGlobalStore(db);
	                return _this.addDocumentGlobal(txn);
	            });
	        }
	        if (fromVersion < 7 && toVersion >= 7) {
	            p = p.next(function () { return _this.ensureSequenceNumbers(txn); });
	        }
	        return p;
	    };
	    SchemaConverter.prototype.addDocumentGlobal = function (txn) {
	        var byteCount = 0;
	        return txn
	            .store(DbRemoteDocument.store)
	            .iterate(function (_, doc) {
	            byteCount += dbDocumentSize(doc);
	        })
	            .next(function () {
	            var metadata = new DbRemoteDocumentGlobal(byteCount);
	            return txn
	                .store(DbRemoteDocumentGlobal.store)
	                .put(DbRemoteDocumentGlobal.key, metadata);
	        });
	    };
	    SchemaConverter.prototype.removeAcknowledgedMutations = function (txn) {
	        var _this = this;
	        var queuesStore = txn.store(DbMutationQueue.store);
	        var mutationsStore = txn.store(DbMutationBatch.store);
	        return queuesStore.loadAll().next(function (queues) {
	            return PersistencePromise.forEach(queues, function (queue) {
	                var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
	                return mutationsStore
	                    .loadAll(DbMutationBatch.userMutationsIndex, range)
	                    .next(function (dbBatches) {
	                    return PersistencePromise.forEach(dbBatches, function (dbBatch) {
	                        assert(dbBatch.userId === queue.userId, "Cannot process batch " + dbBatch.batchId + " from unexpected user");
	                        var batch = _this.serializer.fromDbMutationBatch(dbBatch);
	                        return removeMutationBatch(txn, queue.userId, batch).next(function () { });
	                    });
	                });
	            });
	        });
	    };
	    /**
	     * Ensures that every document in the remote document cache has a corresponding sentinel row
	     * with a sequence number. Missing rows are given the most recently used sequence number.
	     */
	    SchemaConverter.prototype.ensureSequenceNumbers = function (txn) {
	        var documentTargetStore$$1 = txn.store(DbTargetDocument.store);
	        var documentsStore = txn.store(DbRemoteDocument.store);
	        return getHighestListenSequenceNumber(txn).next(function (currentSequenceNumber) {
	            var writeSentinelKey = function (path) {
	                return documentTargetStore$$1.put(new DbTargetDocument(0, encode(path), currentSequenceNumber));
	            };
	            var promises = [];
	            return documentsStore
	                .iterate(function (key, doc) {
	                var path = new ResourcePath(key);
	                var docSentinelKey = sentinelKey(path);
	                promises.push(documentTargetStore$$1.get(docSentinelKey).next(function (maybeSentinel) {
	                    if (!maybeSentinel) {
	                        return writeSentinelKey(path);
	                    }
	                    else {
	                        return PersistencePromise.resolve();
	                    }
	                }));
	            })
	                .next(function () { return PersistencePromise.waitFor(promises); });
	        });
	    };
	    return SchemaConverter;
	}());
	function sentinelKey(path) {
	    return [0, encode(path)];
	}
	/**
	 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
	 */
	var DbTimestamp = /** @class */ (function () {
	    function DbTimestamp(seconds, nanoseconds) {
	        this.seconds = seconds;
	        this.nanoseconds = nanoseconds;
	    }
	    return DbTimestamp;
	}());
	/**
	 * A singleton object to be stored in the 'owner' store in IndexedDb.
	 *
	 * A given database can have a single primary tab assigned at a given time. That
	 * tab must validate that it is still holding the primary lease before every
	 * operation that requires locked access. The primary tab should regularly
	 * write an updated timestamp to this lease to prevent other tabs from
	 * "stealing" the primary lease
	 */
	var DbPrimaryClient = /** @class */ (function () {
	    function DbPrimaryClient(ownerId, 
	    /** Whether to allow shared access from multiple tabs. */
	    allowTabSynchronization, leaseTimestampMs) {
	        this.ownerId = ownerId;
	        this.allowTabSynchronization = allowTabSynchronization;
	        this.leaseTimestampMs = leaseTimestampMs;
	    }
	    /**
	     * Name of the IndexedDb object store.
	     *
	     * Note that the name 'owner' is chosen to ensure backwards compatibility with
	     * older clients that only supported single locked access to the persistence
	     * layer.
	     */
	    DbPrimaryClient.store = 'owner';
	    /**
	     * The key string used for the single object that exists in the
	     * DbPrimaryClient store.
	     */
	    DbPrimaryClient.key = 'owner';
	    return DbPrimaryClient;
	}());
	function createPrimaryClientStore(db) {
	    db.createObjectStore(DbPrimaryClient.store);
	}
	/**
	 * An object to be stored in the 'mutationQueues' store in IndexedDb.
	 *
	 * Each user gets a single queue of MutationBatches to apply to the server.
	 * DbMutationQueue tracks the metadata about the queue.
	 */
	var DbMutationQueue = /** @class */ (function () {
	    function DbMutationQueue(
	    /**
	     * The normalized user ID to which this queue belongs.
	     */
	    userId, 
	    /**
	     * An identifier for the highest numbered batch that has been acknowledged
	     * by the server. All MutationBatches in this queue with batchIds less
	     * than or equal to this value are considered to have been acknowledged by
	     * the server.
	     */
	    lastAcknowledgedBatchId, 
	    /**
	     * A stream token that was previously sent by the server.
	     *
	     * See StreamingWriteRequest in datastore.proto for more details about
	     * usage.
	     *
	     * After sending this token, earlier tokens may not be used anymore so
	     * only a single stream token is retained.
	     */
	    lastStreamToken) {
	        this.userId = userId;
	        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
	        this.lastStreamToken = lastStreamToken;
	    }
	    /** Name of the IndexedDb object store.  */
	    DbMutationQueue.store = 'mutationQueues';
	    /** Keys are automatically assigned via the userId property. */
	    DbMutationQueue.keyPath = 'userId';
	    return DbMutationQueue;
	}());
	/**
	 * An object to be stored in the 'mutations' store in IndexedDb.
	 *
	 * Represents a batch of user-level mutations intended to be sent to the server
	 * in a single write. Each user-level batch gets a separate DbMutationBatch
	 * with a new batchId.
	 */
	var DbMutationBatch = /** @class */ (function () {
	    function DbMutationBatch(
	    /**
	     * The normalized user ID to which this batch belongs.
	     */
	    userId, 
	    /**
	     * An identifier for this batch, allocated using an auto-generated key.
	     */
	    batchId, 
	    /**
	     * The local write time of the batch, stored as milliseconds since the
	     * epoch.
	     */
	    localWriteTimeMs, 
	    /**
	     * A list of mutations to apply. All mutations will be applied atomically.
	     *
	     * Mutations are serialized via JsonProtoSerializer.toMutation().
	     */
	    mutations) {
	        this.userId = userId;
	        this.batchId = batchId;
	        this.localWriteTimeMs = localWriteTimeMs;
	        this.mutations = mutations;
	    }
	    /** Name of the IndexedDb object store.  */
	    DbMutationBatch.store = 'mutations';
	    /** Keys are automatically assigned via the userId, batchId properties. */
	    DbMutationBatch.keyPath = 'batchId';
	    /** The index name for lookup of mutations by user. */
	    DbMutationBatch.userMutationsIndex = 'userMutationsIndex';
	    /** The user mutations index is keyed by [userId, batchId] pairs. */
	    DbMutationBatch.userMutationsKeyPath = ['userId', 'batchId'];
	    return DbMutationBatch;
	}());
	function createMutationQueue(db) {
	    db.createObjectStore(DbMutationQueue.store, {
	        keyPath: DbMutationQueue.keyPath
	    });
	    var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
	        keyPath: DbMutationBatch.keyPath,
	        autoIncrement: true
	    });
	    mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
	    db.createObjectStore(DbDocumentMutation.store);
	}
	/**
	 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
	 * and rewrites all data.
	 */
	function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
	    var v1MutationsStore = txn.store(DbMutationBatch.store);
	    return v1MutationsStore.loadAll().next(function (existingMutations) {
	        db.deleteObjectStore(DbMutationBatch.store);
	        var mutationsStore = db.createObjectStore(DbMutationBatch.store, {
	            keyPath: DbMutationBatch.keyPath,
	            autoIncrement: true
	        });
	        mutationsStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
	        var v3MutationsStore = txn.store(DbMutationBatch.store);
	        var writeAll = existingMutations.map(function (mutation) {
	            return v3MutationsStore.put(mutation);
	        });
	        return PersistencePromise.waitFor(writeAll);
	    });
	}
	/**
	 * An object to be stored in the 'documentMutations' store in IndexedDb.
	 *
	 * A manually maintained index of all the mutation batches that affect a given
	 * document key. The rows in this table are references based on the contents of
	 * DbMutationBatch.mutations.
	 */
	var DbDocumentMutation = /** @class */ (function () {
	    function DbDocumentMutation() {
	    }
	    /**
	     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
	     * over all of a user's document mutations.
	     */
	    DbDocumentMutation.prefixForUser = function (userId) {
	        return [userId];
	    };
	    /**
	     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
	     * index to iterate over all at document mutations for a given path or lower.
	     */
	    DbDocumentMutation.prefixForPath = function (userId, path) {
	        return [userId, encode(path)];
	    };
	    /**
	     * Creates a full index key of [userId, encodedPath, batchId] for inserting
	     * and deleting into the DbDocumentMutations index.
	     */
	    DbDocumentMutation.key = function (userId, path, batchId) {
	        return [userId, encode(path), batchId];
	    };
	    DbDocumentMutation.store = 'documentMutations';
	    /**
	     * Because we store all the useful information for this store in the key,
	     * there is no useful information to store as the value. The raw (unencoded)
	     * path cannot be stored because IndexedDb doesn't store prototype
	     * information.
	     */
	    DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
	    return DbDocumentMutation;
	}());
	function createRemoteDocumentCache(db) {
	    db.createObjectStore(DbRemoteDocument.store);
	}
	/**
	 * Represents the known absence of a document at a particular version.
	 * Stored in IndexedDb as part of a DbRemoteDocument object.
	 */
	var DbNoDocument = /** @class */ (function () {
	    function DbNoDocument(path, readTime) {
	        this.path = path;
	        this.readTime = readTime;
	    }
	    return DbNoDocument;
	}());
	/**
	 * Represents a document that is known to exist but whose data is unknown.
	 * Stored in IndexedDb as part of a DbRemoteDocument object.
	 */
	var DbUnknownDocument = /** @class */ (function () {
	    function DbUnknownDocument(path, version) {
	        this.path = path;
	        this.version = version;
	    }
	    return DbUnknownDocument;
	}());
	/**
	 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
	 * It represents either:
	 *
	 * - A complete document.
	 * - A "no document" representing a document that is known not to exist (at
	 * some version).
	 * - An "unknown document" representing a document that is known to exist (at
	 * some version) but whose contents are unknown.
	 *
	 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
	 * be made more general if necessary.
	 */
	var DbRemoteDocument = /** @class */ (function () {
	    function DbRemoteDocument(
	    /**
	     * Set to an instance of DbUnknownDocument if the data for a document is
	     * not known, but it is known that a document exists at the specified
	     * version (e.g. it had a successful update applied to it)
	     */
	    unknownDocument, 
	    /**
	     * Set to an instance of a DbNoDocument if it is known that no document
	     * exists.
	     */
	    noDocument, 
	    /**
	     * Set to an instance of a Document if there's a cached version of the
	     * document.
	     */
	    document, 
	    /**
	     * Documents that were written to the remote document store based on
	     * a write acknowledgment are marked with `hasCommittedMutations`. These
	     * documents are potentially inconsistent with the backend's copy and use
	     * the write's commit version as their document version.
	     */
	    hasCommittedMutations) {
	        this.unknownDocument = unknownDocument;
	        this.noDocument = noDocument;
	        this.document = document;
	        this.hasCommittedMutations = hasCommittedMutations;
	    }
	    DbRemoteDocument.store = 'remoteDocuments';
	    return DbRemoteDocument;
	}());
	/**
	 * Contains a single entry that has metadata about the remote document cache.
	 */
	var DbRemoteDocumentGlobal = /** @class */ (function () {
	    /**
	     * @param byteSize Approximately the total size in bytes of all the documents in the document
	     * cache.
	     */
	    function DbRemoteDocumentGlobal(byteSize) {
	        this.byteSize = byteSize;
	    }
	    DbRemoteDocumentGlobal.store = 'remoteDocumentGlobal';
	    DbRemoteDocumentGlobal.key = 'remoteDocumentGlobalKey';
	    return DbRemoteDocumentGlobal;
	}());
	function createDocumentGlobalStore(db) {
	    db.createObjectStore(DbRemoteDocumentGlobal.store);
	}
	/**
	 * An object to be stored in the 'targets' store in IndexedDb.
	 *
	 * This is based on and should be kept in sync with the proto used in the iOS
	 * client.
	 *
	 * Each query the client listens to against the server is tracked on disk so
	 * that the query can be efficiently resumed on restart.
	 */
	var DbTarget = /** @class */ (function () {
	    function DbTarget(
	    /**
	     * An auto-generated sequential numeric identifier for the query.
	     *
	     * Queries are stored using their canonicalId as the key, but these
	     * canonicalIds can be quite long so we additionally assign a unique
	     * queryId which can be used by referenced data structures (e.g.
	     * indexes) to minimize the on-disk cost.
	     */
	    targetId, 
	    /**
	     * The canonical string representing this query. This is not unique.
	     */
	    canonicalId, 
	    /**
	     * The last readTime received from the Watch Service for this query.
	     *
	     * This is the same value as TargetChange.read_time in the protos.
	     */
	    readTime, 
	    /**
	     * An opaque, server-assigned token that allows watching a query to be
	     * resumed after disconnecting without retransmitting all the data
	     * that matches the query. The resume token essentially identifies a
	     * point in time from which the server should resume sending results.
	     *
	     * This is related to the snapshotVersion in that the resumeToken
	     * effectively also encodes that value, but the resumeToken is opaque
	     * and sometimes encodes additional information.
	     *
	     * A consequence of this is that the resumeToken should be used when
	     * asking the server to reason about where this client is in the watch
	     * stream, but the client should use the snapshotVersion for its own
	     * purposes.
	     *
	     * This is the same value as TargetChange.resume_token in the protos.
	     */
	    resumeToken, 
	    /**
	     * A sequence number representing the last time this query was
	     * listened to, used for garbage collection purposes.
	     *
	     * Conventionally this would be a timestamp value, but device-local
	     * clocks are unreliable and they must be able to create new listens
	     * even while disconnected. Instead this should be a monotonically
	     * increasing number that's incremented on each listen call.
	     *
	     * This is different from the queryId since the queryId is an
	     * immutable identifier assigned to the Query on first use while
	     * lastListenSequenceNumber is updated every time the query is
	     * listened to.
	     */
	    lastListenSequenceNumber, 
	    /**
	     * The query for this target.
	     *
	     * Because canonical ids are not unique we must store the actual query. We
	     * use the proto to have an object we can persist without having to
	     * duplicate translation logic to and from a `Query` object.
	     */
	    query) {
	        this.targetId = targetId;
	        this.canonicalId = canonicalId;
	        this.readTime = readTime;
	        this.resumeToken = resumeToken;
	        this.lastListenSequenceNumber = lastListenSequenceNumber;
	        this.query = query;
	    }
	    DbTarget.store = 'targets';
	    /** Keys are automatically assigned via the targetId property. */
	    DbTarget.keyPath = 'targetId';
	    /** The name of the queryTargets index. */
	    DbTarget.queryTargetsIndexName = 'queryTargetsIndex';
	    /**
	     * The index of all canonicalIds to the targets that they match. This is not
	     * a unique mapping because canonicalId does not promise a unique name for all
	     * possible queries, so we append the targetId to make the mapping unique.
	     */
	    DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];
	    return DbTarget;
	}());
	/**
	 * An object representing an association between a target and a document, or a
	 * sentinel row marking the last sequence number at which a document was used.
	 * Each document cached must have a corresponding sentinel row before lru
	 * garbage collection is enabled.
	 *
	 * The target associations and sentinel rows are co-located so that orphaned
	 * documents and their sequence numbers can be identified efficiently via a scan
	 * of this store.
	 */
	var DbTargetDocument = /** @class */ (function () {
	    function DbTargetDocument(
	    /**
	     * The targetId identifying a target or 0 for a sentinel row.
	     */
	    targetId, 
	    /**
	     * The path to the document, as encoded in the key.
	     */
	    path, 
	    /**
	     * If this is a sentinel row, this should be the sequence number of the last
	     * time the document specified by `path` was used. Otherwise, it should be
	     * `undefined`.
	     */
	    sequenceNumber) {
	        this.targetId = targetId;
	        this.path = path;
	        this.sequenceNumber = sequenceNumber;
	        assert((targetId === 0) === (sequenceNumber !== undefined), 
	        // tslint:disable-next-line:max-line-length
	        'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number');
	    }
	    /** Name of the IndexedDb object store.  */
	    DbTargetDocument.store = 'targetDocuments';
	    /** Keys are automatically assigned via the targetId, path properties. */
	    DbTargetDocument.keyPath = ['targetId', 'path'];
	    /** The index name for the reverse index. */
	    DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';
	    /** We also need to create the reverse index for these properties. */
	    DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];
	    return DbTargetDocument;
	}());
	/**
	 * A record of global state tracked across all Targets, tracked separately
	 * to avoid the need for extra indexes.
	 *
	 * This should be kept in-sync with the proto used in the iOS client.
	 */
	var DbTargetGlobal = /** @class */ (function () {
	    function DbTargetGlobal(
	    /**
	     * The highest numbered target id across all targets.
	     *
	     * See DbTarget.targetId.
	     */
	    highestTargetId, 
	    /**
	     * The highest numbered lastListenSequenceNumber across all targets.
	     *
	     * See DbTarget.lastListenSequenceNumber.
	     */
	    highestListenSequenceNumber, 
	    /**
	     * A global snapshot version representing the last consistent snapshot we
	     * received from the backend. This is monotonically increasing and any
	     * snapshots received from the backend prior to this version (e.g. for
	     * targets resumed with a resumeToken) should be suppressed (buffered)
	     * until the backend has caught up to this snapshot version again. This
	     * prevents our cache from ever going backwards in time.
	     */
	    lastRemoteSnapshotVersion, 
	    /**
	     * The number of targets persisted.
	     */
	    targetCount) {
	        this.highestTargetId = highestTargetId;
	        this.highestListenSequenceNumber = highestListenSequenceNumber;
	        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
	        this.targetCount = targetCount;
	    }
	    /**
	     * The key string used for the single object that exists in the
	     * DbTargetGlobal store.
	     */
	    DbTargetGlobal.key = 'targetGlobalKey';
	    DbTargetGlobal.store = 'targetGlobal';
	    return DbTargetGlobal;
	}());
	function createQueryCache(db) {
	    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
	        keyPath: DbTargetDocument.keyPath
	    });
	    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });
	    var targetStore = db.createObjectStore(DbTarget.store, {
	        keyPath: DbTarget.keyPath
	    });
	    // NOTE: This is unique only because the TargetId is the suffix.
	    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });
	    db.createObjectStore(DbTargetGlobal.store);
	}
	function dropQueryCache(db) {
	    db.deleteObjectStore(DbTargetDocument.store);
	    db.deleteObjectStore(DbTarget.store);
	    db.deleteObjectStore(DbTargetGlobal.store);
	}
	/**
	 * Creates the target global singleton row.
	 *
	 * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
	 */
	function writeEmptyTargetGlobalEntry(txn) {
	    var globalStore = txn.store(DbTargetGlobal.store);
	    var metadata = new DbTargetGlobal(
	    /*highestTargetId=*/ 0, 
	    /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp(), 
	    /*targetCount=*/ 0);
	    return globalStore.put(DbTargetGlobal.key, metadata);
	}
	/**
	 * An object store to store the keys of changed documents. This is used to
	 * facilitate storing document changelogs in the Remote Document Cache.
	 *
	 * PORTING NOTE: This is used for change propagation during multi-tab syncing
	 * and not needed on iOS and Android.
	 */
	var DbRemoteDocumentChanges = /** @class */ (function () {
	    function DbRemoteDocumentChanges(
	    /** The keys of the changed documents. */
	    changes) {
	        this.changes = changes;
	    }
	    /** Name of the IndexedDb object store.  */
	    DbRemoteDocumentChanges.store = 'remoteDocumentChanges';
	    /** Keys are auto-generated via the `id` property. */
	    DbRemoteDocumentChanges.keyPath = 'id';
	    return DbRemoteDocumentChanges;
	}());
	function createRemoteDocumentChangesStore(db) {
	    db.createObjectStore(DbRemoteDocumentChanges.store, {
	        keyPath: 'id',
	        autoIncrement: true
	    });
	}
	/**
	 * A record of the metadata state of each client.
	 *
	 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
	 * to be ported to iOS or Android.
	 */
	var DbClientMetadata = /** @class */ (function () {
	    function DbClientMetadata(
	    /** The auto-generated client id assigned at client startup. */
	    clientId, 
	    /** The last time this state was updated. */
	    updateTimeMs, 
	    /** Whether the client's network connection is enabled. */
	    networkEnabled, 
	    /** Whether this client is running in a foreground tab. */
	    inForeground, 
	    /**
	     * The last change read from the DbRemoteDocumentChanges store.
	     * Can be undefined for backwards compatibility.
	     */
	    lastProcessedDocumentChangeId) {
	        this.clientId = clientId;
	        this.updateTimeMs = updateTimeMs;
	        this.networkEnabled = networkEnabled;
	        this.inForeground = inForeground;
	        this.lastProcessedDocumentChangeId = lastProcessedDocumentChangeId;
	    }
	    /** Name of the IndexedDb object store. */
	    DbClientMetadata.store = 'clientMetadata';
	    /** Keys are automatically assigned via the clientId properties. */
	    DbClientMetadata.keyPath = 'clientId';
	    return DbClientMetadata;
	}());
	function createClientMetadataStore(db) {
	    db.createObjectStore(DbClientMetadata.store, {
	        keyPath: DbClientMetadata.keyPath
	    });
	}
	// Visible for testing
	var V1_STORES = [
	    DbMutationQueue.store,
	    DbMutationBatch.store,
	    DbDocumentMutation.store,
	    DbRemoteDocument.store,
	    DbTarget.store,
	    DbPrimaryClient.store,
	    DbTargetGlobal.store,
	    DbTargetDocument.store
	];
	// V2 is no longer usable (see comment at top of file)
	// Visible for testing
	var V3_STORES = V1_STORES;
	// Visible for testing
	var V4_STORES = V3_STORES.concat([
	    DbClientMetadata.store,
	    DbRemoteDocumentChanges.store
	]);
	// V5 does not change the set of stores.
	var V6_STORES = V4_STORES.concat([DbRemoteDocumentGlobal.store]);
	/**
	 * The list of all default IndexedDB stores used throughout the SDK. This is
	 * used when creating transactions so that access across all stores is done
	 * atomically.
	 */
	var ALL_STORES = V6_STORES;

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** A mutation queue for a specific user, backed by IndexedDB. */
	var IndexedDbMutationQueue = /** @class */ (function () {
	    function IndexedDbMutationQueue(
	    /**
	     * The normalized userId (e.g. null UID => "" userId) used to store /
	     * retrieve mutations.
	     */
	    userId, serializer, referenceDelegate) {
	        this.userId = userId;
	        this.serializer = serializer;
	        this.referenceDelegate = referenceDelegate;
	        /**
	         * Caches the document keys for pending mutation batches. If the mutation
	         * has been removed from IndexedDb, the cached value may continue to
	         * be used to retrieve the batch's document keys. To remove a cached value
	         * locally, `removeCachedMutationKeys()` should be invoked either directly
	         * or through `removeMutationBatches()`.
	         *
	         * With multi-tab, when the primary client acknowledges or rejects a mutation,
	         * this cache is used by secondary clients to invalidate the local
	         * view of the documents that were previously affected by the mutation.
	         */
	        // PORTING NOTE: Multi-tab only.
	        this.documentKeysByBatchId = {};
	    }
	    /**
	     * Creates a new mutation queue for the given user.
	     * @param user The user for which to create a mutation queue.
	     * @param serializer The serializer to use when persisting to IndexedDb.
	     */
	    IndexedDbMutationQueue.forUser = function (user, serializer, referenceDelegate) {
	        // TODO(mcg): Figure out what constraints there are on userIDs
	        // In particular, are there any reserved characters? are empty ids allowed?
	        // For the moment store these together in the same mutations table assuming
	        // that empty userIDs aren't allowed.
	        assert(user.uid !== '', 'UserID must not be an empty string.');
	        var userId = user.isAuthenticated() ? user.uid : '';
	        return new IndexedDbMutationQueue(userId, serializer, referenceDelegate);
	    };
	    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {
	        var empty = true;
	        var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
	        return mutationsStore(transaction)
	            .iterate({ index: DbMutationBatch.userMutationsIndex, range: range }, function (key, value, control) {
	            empty = false;
	            control.done();
	        })
	            .next(function () { return empty; });
	    };
	    IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
	        return this.getMutationQueueMetadata(transaction).next(function (metadata) {
	            var batchId = batch.batchId;
	            assert(batchId > metadata.lastAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');
	            metadata.lastAcknowledgedBatchId = batchId;
	            metadata.lastStreamToken = convertStreamToken(streamToken);
	            return mutationQueuesStore(transaction).put(metadata);
	        });
	    };
	    IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {
	        return this.getMutationQueueMetadata(transaction).next(function (metadata) { return metadata.lastStreamToken; });
	    };
	    IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
	        return this.getMutationQueueMetadata(transaction).next(function (metadata) {
	            metadata.lastStreamToken = convertStreamToken(streamToken);
	            return mutationQueuesStore(transaction).put(metadata);
	        });
	    };
	    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {
	        var _this = this;
	        var documentStore = documentMutationsStore(transaction);
	        var mutationStore = mutationsStore(transaction);
	        // The IndexedDb implementation in Chrome (and Firefox) does not handle
	        // compound indices that include auto-generated keys correctly. To ensure
	        // that the index entry is added correctly in all browsers, we perform two
	        // writes: The first write is used to retrieve the next auto-generated Batch
	        // ID, and the second write populates the index and stores the actual
	        // mutation batch.
	        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
	        // tslint:disable-next-line:no-any We write an empty object to obtain key
	        return mutationStore.add({}).next(function (batchId) {
	            assert(typeof batchId === 'number', 'Auto-generated key is not a number');
	            var batch = new MutationBatch(batchId, localWriteTime, mutations);
	            var dbBatch = _this.serializer.toDbMutationBatch(_this.userId, batch);
	            _this.documentKeysByBatchId[batchId] = batch.keys();
	            var promises = [];
	            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
	                var mutation = mutations_1[_i];
	                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
	                promises.push(mutationStore.put(dbBatch));
	                promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
	            }
	            return PersistencePromise.waitFor(promises).next(function () { return batch; });
	        });
	    };
	    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
	        var _this = this;
	        return mutationsStore(transaction)
	            .get(batchId)
	            .next(function (dbBatch) {
	            if (dbBatch) {
	                assert(dbBatch.userId === _this.userId, "Unexpected user '" + dbBatch.userId + "' for mutation batch " + batchId);
	                return _this.serializer.fromDbMutationBatch(dbBatch);
	            }
	            return null;
	        });
	    };
	    IndexedDbMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
	        var _this = this;
	        if (this.documentKeysByBatchId[batchId]) {
	            return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
	        }
	        else {
	            return this.lookupMutationBatch(transaction, batchId).next(function (batch) {
	                if (batch) {
	                    var keys = batch.keys();
	                    _this.documentKeysByBatchId[batchId] = keys;
	                    return keys;
	                }
	                else {
	                    return null;
	                }
	            });
	        }
	    };
	    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
	        var _this = this;
	        return this.getMutationQueueMetadata(transaction).next(function (metadata) {
	            // All batches with batchId <= this.metadata.lastAcknowledgedBatchId have
	            // been acknowledged so the first unacknowledged batch after batchID will
	            // have a batchID larger than both of these values.
	            var nextBatchId = Math.max(batchId, metadata.lastAcknowledgedBatchId) + 1;
	            var range = IDBKeyRange.lowerBound([_this.userId, nextBatchId]);
	            var foundBatch = null;
	            return mutationsStore(transaction)
	                .iterate({ index: DbMutationBatch.userMutationsIndex, range: range }, function (key, dbBatch, control) {
	                if (dbBatch.userId === _this.userId) {
	                    assert(dbBatch.batchId >= nextBatchId, 'Should have found mutation after ' + nextBatchId);
	                    foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);
	                }
	                control.done();
	            })
	                .next(function () { return foundBatch; });
	        });
	    };
	    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {
	        var _this = this;
	        var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
	        return mutationsStore(transaction)
	            .loadAll(DbMutationBatch.userMutationsIndex, range)
	            .next(function (dbBatches) {
	            return dbBatches.map(function (dbBatch) { return _this.serializer.fromDbMutationBatch(dbBatch); });
	        });
	    };
	    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
	        var _this = this;
	        // Scan the document-mutation index starting with a prefix starting with
	        // the given documentKey.
	        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
	        var indexStart = IDBKeyRange.lowerBound(indexPrefix);
	        var results = [];
	        return documentMutationsStore(transaction)
	            .iterate({ range: indexStart }, function (indexKey, _, control) {
	            var userID = indexKey[0], encodedPath = indexKey[1], batchId = indexKey[2];
	            // Only consider rows matching exactly the specific key of
	            // interest. Note that because we order by path first, and we
	            // order terminators before path separators, we'll encounter all
	            // the index rows for documentKey contiguously. In particular, all
	            // the rows for documentKey will occur before any rows for
	            // documents nested in a subcollection beneath documentKey so we
	            // can stop as soon as we hit any such row.
	            var path = decode$1(encodedPath);
	            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
	                control.done();
	                return;
	            }
	            // Look up the mutation batch in the store.
	            return mutationsStore(transaction)
	                .get(batchId)
	                .next(function (mutation) {
	                if (!mutation) {
	                    throw fail('Dangling document-mutation reference found: ' +
	                        indexKey +
	                        ' which points to ' +
	                        batchId);
	                }
	                assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
	                results.push(_this.serializer.fromDbMutationBatch(mutation));
	            });
	        })
	            .next(function () { return results; });
	    };
	    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
	        var _this = this;
	        var uniqueBatchIDs = new SortedSet(primitiveComparator);
	        var promises = [];
	        documentKeys.forEach(function (documentKey) {
	            var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
	            var range = IDBKeyRange.lowerBound(indexStart);
	            var promise = documentMutationsStore(transaction).iterate({ range: range }, function (indexKey, _, control) {
	                var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
	                // Only consider rows matching exactly the specific key of
	                // interest. Note that because we order by path first, and we
	                // order terminators before path separators, we'll encounter all
	                // the index rows for documentKey contiguously. In particular, all
	                // the rows for documentKey will occur before any rows for
	                // documents nested in a subcollection beneath documentKey so we
	                // can stop as soon as we hit any such row.
	                var path = decode$1(encodedPath);
	                if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
	                    control.done();
	                    return;
	                }
	                uniqueBatchIDs = uniqueBatchIDs.add(batchID);
	            });
	            promises.push(promise);
	        });
	        return PersistencePromise.waitFor(promises).next(function () {
	            return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
	        });
	    };
	    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
	        var _this = this;
	        assert(!query.isDocumentQuery(), "Document queries shouldn't go down this path");
	        var queryPath = query.path;
	        var immediateChildrenLength = queryPath.length + 1;
	        // TODO(mcg): Actually implement a single-collection query
	        //
	        // This is actually executing an ancestor query, traversing the whole
	        // subtree below the collection which can be horrifically inefficient for
	        // some structures. The right way to solve this is to implement the full
	        // value index, but that's not in the cards in the near future so this is
	        // the best we can do for the moment.
	        //
	        // Since we don't yet index the actual properties in the mutations, our
	        // current approach is to just return all mutation batches that affect
	        // documents in the collection being queried.
	        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
	        var indexStart = IDBKeyRange.lowerBound(indexPrefix);
	        // Collect up unique batchIDs encountered during a scan of the index. Use a
	        // SortedSet to accumulate batch IDs so they can be traversed in order in a
	        // scan of the main table.
	        var uniqueBatchIDs = new SortedSet(primitiveComparator);
	        return documentMutationsStore(transaction)
	            .iterate({ range: indexStart }, function (indexKey, _, control) {
	            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
	            var path = decode$1(encodedPath);
	            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {
	                control.done();
	                return;
	            }
	            // Rows with document keys more than one segment longer than the
	            // query path can't be matches. For example, a query on 'rooms'
	            // can't match the document /rooms/abc/messages/xyx.
	            // TODO(mcg): we'll need a different scanner when we implement
	            // ancestor queries.
	            if (path.length !== immediateChildrenLength) {
	                return;
	            }
	            uniqueBatchIDs = uniqueBatchIDs.add(batchID);
	        })
	            .next(function () { return _this.lookupMutationBatches(transaction, uniqueBatchIDs); });
	    };
	    IndexedDbMutationQueue.prototype.lookupMutationBatches = function (transaction, batchIDs) {
	        var _this = this;
	        var results = [];
	        var promises = [];
	        // TODO(rockwood): Implement this using iterate.
	        batchIDs.forEach(function (batchId) {
	            promises.push(mutationsStore(transaction)
	                .get(batchId)
	                .next(function (mutation) {
	                if (mutation === null) {
	                    throw fail('Dangling document-mutation reference found, ' +
	                        'which points to ' +
	                        batchId);
	                }
	                assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
	                results.push(_this.serializer.fromDbMutationBatch(mutation));
	            }));
	        });
	        return PersistencePromise.waitFor(promises).next(function () { return results; });
	    };
	    IndexedDbMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
	        var _this = this;
	        return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function (removedDocuments) {
	            _this.removeCachedMutationKeys(batch.batchId);
	            return PersistencePromise.forEach(removedDocuments, function (key) {
	                return _this.referenceDelegate.removeMutationReference(transaction, key);
	            });
	        });
	    };
	    IndexedDbMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {
	        delete this.documentKeysByBatchId[batchId];
	    };
	    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {
	        var _this = this;
	        return this.checkEmpty(txn).next(function (empty) {
	            if (!empty) {
	                return PersistencePromise.resolve();
	            }
	            // Verify that there are no entries in the documentMutations index if
	            // the queue is empty.
	            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
	            var danglingMutationReferences = [];
	            return documentMutationsStore(txn)
	                .iterate({ range: startRange }, function (key, _, control) {
	                var userID = key[0];
	                if (userID !== _this.userId) {
	                    control.done();
	                    return;
	                }
	                else {
	                    var path = decode$1(key[1]);
	                    danglingMutationReferences.push(path);
	                }
	            })
	                .next(function () {
	                assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. ' +
	                    'Dangling keys: ' +
	                    danglingMutationReferences.map(function (p) { return p.canonicalString(); }));
	            });
	        });
	    };
	    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {
	        return mutationQueueContainsKey(txn, this.userId, key);
	    };
	    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
	    /** Returns the mutation queue's metadata from IndexedDb. */
	    IndexedDbMutationQueue.prototype.getMutationQueueMetadata = function (transaction) {
	        var _this = this;
	        return mutationQueuesStore(transaction)
	            .get(this.userId)
	            .next(function (metadata) {
	            return (metadata ||
	                new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, 
	                /*lastStreamToken=*/ ''));
	        });
	    };
	    return IndexedDbMutationQueue;
	}());
	/**
	 * @return true if the mutation queue for the given user contains a pending
	 *         mutation for the given key.
	 */
	function mutationQueueContainsKey(txn, userId, key) {
	    var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
	    var encodedPath = indexKey[1];
	    var startRange = IDBKeyRange.lowerBound(indexKey);
	    var containsKey = false;
	    return documentMutationsStore(txn)
	        .iterate({ range: startRange, keysOnly: true }, function (key, value, control) {
	        var userID = key[0], keyPath = key[1], /*batchID*/ _ = key[2];
	        if (userID === userId && keyPath === encodedPath) {
	            containsKey = true;
	        }
	        control.done();
	    })
	        .next(function () { return containsKey; });
	}
	/** Returns true if any mutation queue contains the given document. */
	function mutationQueuesContainKey(txn, docKey) {
	    var found = false;
	    return mutationQueuesStore(txn)
	        .iterateSerial(function (userId) {
	        return mutationQueueContainsKey(txn, userId, docKey).next(function (containsKey) {
	            if (containsKey) {
	                found = true;
	            }
	            return PersistencePromise.resolve(!containsKey);
	        });
	    })
	        .next(function () { return found; });
	}
	/**
	 * Delete a mutation batch and the associated document mutations.
	 * @return A PersistencePromise of the document mutations that were removed.
	 */
	function removeMutationBatch(txn, userId, batch) {
	    var mutationStore = txn.store(DbMutationBatch.store);
	    var indexTxn = txn.store(DbDocumentMutation.store);
	    var promises = [];
	    var range = IDBKeyRange.only(batch.batchId);
	    var numDeleted = 0;
	    var removePromise = mutationStore.iterate({ range: range }, function (key, value, control) {
	        numDeleted++;
	        return control.delete();
	    });
	    promises.push(removePromise.next(function () {
	        assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' +
	            batch.batchId);
	    }));
	    var removedDocuments = [];
	    for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {
	        var mutation = _a[_i];
	        var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
	        promises.push(indexTxn.delete(indexKey));
	        removedDocuments.push(mutation.key);
	    }
	    return PersistencePromise.waitFor(promises).next(function () { return removedDocuments; });
	}
	function convertStreamToken(token) {
	    if (token instanceof Uint8Array) {
	        // TODO(b/78771403): Convert tokens to strings during deserialization
	        assert(process.env.USE_MOCK_PERSISTENCE === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence.');
	        return token.toString();
	    }
	    else {
	        return token;
	    }
	}
	/**
	 * Helper to get a typed SimpleDbStore for the mutations object store.
	 */
	function mutationsStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbMutationBatch.store);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
	 */
	function documentMutationsStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbDocumentMutation.store);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
	 */
	function mutationQueuesStore(txn) {
	    return IndexedDbPersistence.getStore(txn, DbMutationQueue.store);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Serializer for values stored in the LocalStore. */
	var LocalSerializer = /** @class */ (function () {
	    function LocalSerializer(remoteSerializer) {
	        this.remoteSerializer = remoteSerializer;
	    }
	    /** Decodes a remote document from storage locally to a Document. */
	    LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {
	        if (remoteDoc.document) {
	            return this.remoteSerializer.fromDocument(remoteDoc.document, !!remoteDoc.hasCommittedMutations);
	        }
	        else if (remoteDoc.noDocument) {
	            var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
	            var version = this.fromDbTimestamp(remoteDoc.noDocument.readTime);
	            return new NoDocument(key, version, {
	                hasCommittedMutations: !!remoteDoc.hasCommittedMutations
	            });
	        }
	        else if (remoteDoc.unknownDocument) {
	            var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
	            var version = this.fromDbTimestamp(remoteDoc.unknownDocument.version);
	            return new UnknownDocument(key, version);
	        }
	        else {
	            return fail('Unexpected DbRemoteDocument');
	        }
	    };
	    /** Encodes a document for storage locally. */
	    LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {
	        if (maybeDoc instanceof Document) {
	            var doc = this.remoteSerializer.toDocument(maybeDoc);
	            var hasCommittedMutations = maybeDoc.hasCommittedMutations;
	            return new DbRemoteDocument(
	            /* unknownDocument= */ null, 
	            /* noDocument= */ null, doc, hasCommittedMutations);
	        }
	        else if (maybeDoc instanceof NoDocument) {
	            var path = maybeDoc.key.path.toArray();
	            var readTime = this.toDbTimestamp(maybeDoc.version);
	            var hasCommittedMutations = maybeDoc.hasCommittedMutations;
	            return new DbRemoteDocument(
	            /* unknownDocument= */ null, new DbNoDocument(path, readTime), 
	            /* document= */ null, hasCommittedMutations);
	        }
	        else if (maybeDoc instanceof UnknownDocument) {
	            var path = maybeDoc.key.path.toArray();
	            var readTime = this.toDbTimestamp(maybeDoc.version);
	            return new DbRemoteDocument(new DbUnknownDocument(path, readTime), 
	            /* noDocument= */ null, 
	            /* document= */ null, 
	            /* hasCommittedMutations= */ true);
	        }
	        else {
	            return fail('Unexpected MaybeDocumment');
	        }
	    };
	    LocalSerializer.prototype.toDbTimestamp = function (snapshotVersion) {
	        var timestamp = snapshotVersion.toTimestamp();
	        return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
	    };
	    LocalSerializer.prototype.fromDbTimestamp = function (dbTimestamp) {
	        var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
	        return SnapshotVersion.fromTimestamp(timestamp);
	    };
	    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
	    LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {
	        var _this = this;
	        var serializedMutations = batch.mutations.map(function (m) {
	            return _this.remoteSerializer.toMutation(m);
	        });
	        return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedMutations);
	    };
	    /** Decodes a DbMutationBatch into a MutationBatch */
	    LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {
	        var _this = this;
	        var mutations = dbBatch.mutations.map(function (m) {
	            return _this.remoteSerializer.fromMutation(m);
	        });
	        var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
	        return new MutationBatch(dbBatch.batchId, timestamp, mutations);
	    };
	    /*
	     * Encodes a set of document keys into an array of EncodedResourcePaths.
	     */
	    LocalSerializer.prototype.toDbResourcePaths = function (keys) {
	        var encodedKeys = [];
	        keys.forEach(function (key) {
	            encodedKeys.push(encode(key.path));
	        });
	        return encodedKeys;
	    };
	    /** Decodes an array of EncodedResourcePaths into a set of document keys. */
	    LocalSerializer.prototype.fromDbResourcePaths = function (encodedPaths) {
	        var keys = documentKeySet();
	        for (var _i = 0, encodedPaths_1 = encodedPaths; _i < encodedPaths_1.length; _i++) {
	            var documentKey = encodedPaths_1[_i];
	            keys = keys.add(new DocumentKey(decode$1(documentKey)));
	        }
	        return keys;
	    };
	    /** Decodes a DbTarget into QueryData */
	    LocalSerializer.prototype.fromDbTarget = function (dbTarget) {
	        var version = this.fromDbTimestamp(dbTarget.readTime);
	        var query;
	        if (isDocumentQuery(dbTarget.query)) {
	            query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);
	        }
	        else {
	            query = this.remoteSerializer.fromQueryTarget(dbTarget.query);
	        }
	        return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, dbTarget.lastListenSequenceNumber, version, dbTarget.resumeToken);
	    };
	    /** Encodes QueryData into a DbTarget for storage locally. */
	    LocalSerializer.prototype.toDbTarget = function (queryData) {
	        assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' +
	            QueryPurpose.Listen +
	            ' may be stored, got ' +
	            queryData.purpose);
	        var dbTimestamp = this.toDbTimestamp(queryData.snapshotVersion);
	        var queryProto;
	        if (queryData.query.isDocumentQuery()) {
	            queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);
	        }
	        else {
	            queryProto = this.remoteSerializer.toQueryTarget(queryData.query);
	        }
	        var resumeToken;
	        if (queryData.resumeToken instanceof Uint8Array) {
	            // TODO(b/78771403): Convert tokens to strings during deserialization
	            assert(process.env.USE_MOCK_PERSISTENCE === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence .');
	            resumeToken = queryData.resumeToken.toString();
	        }
	        else {
	            resumeToken = queryData.resumeToken;
	        }
	        // lastListenSequenceNumber is always 0 until we do real GC.
	        return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, queryData.sequenceNumber, queryProto);
	    };
	    return LocalSerializer;
	}());
	/**
	 * A helper function for figuring out what kind of query has been stored.
	 */
	function isDocumentQuery(dbQuery) {
	    return dbQuery.documents !== undefined;
	}

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function bufferEntryComparator(_a, _b) {
	    var aSequence = _a[0], aIndex = _a[1];
	    var bSequence = _b[0], bIndex = _b[1];
	    var seqCmp = primitiveComparator(aSequence, bSequence);
	    if (seqCmp === 0) {
	        // This order doesn't matter, but we can bias against churn by sorting
	        // entries created earlier as less than newer entries.
	        return primitiveComparator(aIndex, bIndex);
	    }
	    else {
	        return seqCmp;
	    }
	}
	/**
	 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
	 * lowest n values passed to `addElement`, and finally reports the largest of
	 * them in `maxValue`.
	 */
	var RollingSequenceNumberBuffer = /** @class */ (function () {
	    function RollingSequenceNumberBuffer(maxElements) {
	        this.maxElements = maxElements;
	        this.buffer = new SortedSet(bufferEntryComparator);
	        this.previousIndex = 0;
	    }
	    RollingSequenceNumberBuffer.prototype.nextIndex = function () {
	        return ++this.previousIndex;
	    };
	    RollingSequenceNumberBuffer.prototype.addElement = function (sequenceNumber) {
	        var entry = [sequenceNumber, this.nextIndex()];
	        if (this.buffer.size < this.maxElements) {
	            this.buffer = this.buffer.add(entry);
	        }
	        else {
	            var highestValue = this.buffer.last();
	            if (bufferEntryComparator(entry, highestValue) < 0) {
	                this.buffer = this.buffer.delete(highestValue).add(entry);
	            }
	        }
	    };
	    Object.defineProperty(RollingSequenceNumberBuffer.prototype, "maxValue", {
	        get: function () {
	            // Guaranteed to be non-empty. If we decide we are not collecting any
	            // sequence numbers, nthSequenceNumber below short-circuits. If we have
	            // decided that we are collecting n sequence numbers, it's because n is some
	            // percentage of the existing sequence numbers. That means we should never
	            // be in a situation where we are collecting sequence numbers but don't
	            // actually have any.
	            return this.buffer.last()[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RollingSequenceNumberBuffer;
	}());
	/** Implements the steps for LRU garbage collection. */
	var LruGarbageCollector = /** @class */ (function () {
	    function LruGarbageCollector(delegate) {
	        this.delegate = delegate;
	    }
	    /** Given a percentile of target to collect, returns the number of targets to collect. */
	    LruGarbageCollector.prototype.calculateTargetCount = function (txn, percentile) {
	        return this.delegate.getSequenceNumberCount(txn).next(function (targetCount) {
	            return Math.floor(percentile / 100.0 * targetCount);
	        });
	    };
	    /** Returns the nth sequence number, counting in order from the smallest. */
	    LruGarbageCollector.prototype.nthSequenceNumber = function (txn, n) {
	        var _this = this;
	        if (n === 0) {
	            return PersistencePromise.resolve(ListenSequence.INVALID);
	        }
	        var buffer = new RollingSequenceNumberBuffer(n);
	        return this.delegate
	            .forEachTarget(txn, function (target) { return buffer.addElement(target.sequenceNumber); })
	            .next(function () {
	            return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function (sequenceNumber) { return buffer.addElement(sequenceNumber); });
	        })
	            .next(function () { return buffer.maxValue; });
	    };
	    /**
	     * Removes targets with a sequence number equal to or less than the given upper bound, and removes
	     * document associations with those targets.
	     */
	    LruGarbageCollector.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
	        return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
	    };
	    /**
	     * Removes documents that have a sequence number equal to or less than the upper bound and are not
	     * otherwise pinned.
	     */
	    LruGarbageCollector.prototype.removeOrphanedDocuments = function (txn, upperBound) {
	        return this.delegate.removeOrphanedDocuments(txn, upperBound);
	    };
	    return LruGarbageCollector;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Opaque interface representing a persistence transaction.
	 *
	 * When you call Persistence.runTransaction(), it will create a transaction and
	 * pass it to your callback. You then pass it to any method that operates
	 * on persistence.
	 */
	var PersistenceTransaction = /** @class */ (function () {
	    function PersistenceTransaction() {
	    }
	    return PersistenceTransaction;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$2 = 'IndexedDbPersistence';
	/**
	 * Oldest acceptable age in milliseconds for client metadata before the client
	 * is considered inactive and its associated data (such as the remote document
	 * cache changelog) is garbage collected.
	 */
	var MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes
	/**
	 * Oldest acceptable metadata age for clients that may participate in the
	 * primary lease election. Clients that have not updated their client metadata
	 * within 5 seconds are not eligible to receive a primary lease.
	 */
	var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;
	/**
	 * The interval at which clients will update their metadata, including
	 * refreshing their primary lease if held or potentially trying to acquire it if
	 * not held.
	 *
	 * Primary clients may opportunistically refresh their metadata earlier
	 * if they're already performing an IndexedDB operation.
	 */
	var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;
	/** User-facing error when the primary lease is required but not available. */
	var PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' +
	    'It might be necessary to refresh the browser tab.';
	var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Another tab has exclusive access to the persistence layer. ' +
	    'To allow shared access, make sure to invoke ' +
	    '`enablePersistence()` with `experimentalTabSynchronization:true` in all tabs.';
	var UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' +
	    ' IndexedDB or is known to have an incomplete implementation. Offline' +
	    ' persistence has been disabled.';
	// The format of the LocalStorage key that stores zombied client is:
	//     firestore_zombie_<persistence_prefix>_<instance_key>
	var ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';
	var IndexedDbTransaction = /** @class */ (function (_super) {
	    tslib_1.__extends(IndexedDbTransaction, _super);
	    function IndexedDbTransaction(simpleDbTransaction, currentSequenceNumber) {
	        var _this = _super.call(this) || this;
	        _this.simpleDbTransaction = simpleDbTransaction;
	        _this.currentSequenceNumber = currentSequenceNumber;
	        return _this;
	    }
	    return IndexedDbTransaction;
	}(PersistenceTransaction));
	var IndexedDbPersistence = /** @class */ (function () {
	    // Note that `multiClientParams` must be present to enable multi-client support while multi-tab
	    // is still experimental. When multi-client is switched to always on, `multiClientParams` will
	    // no longer be optional.
	    function IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, multiClientParams) {
	        this.persistenceKey = persistenceKey;
	        this.clientId = clientId;
	        this.queue = queue;
	        this.multiClientParams = multiClientParams;
	        this._started = false;
	        this.isPrimary = false;
	        this.networkEnabled = true;
	        this.inForeground = false;
	        /** The last time we garbage collected the Remote Document Changelog. */
	        this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
	        /** A listener to notify on primary state changes. */
	        this.primaryStateListener = function (_) { return Promise.resolve(); };
	        if (!IndexedDbPersistence.isAvailable()) {
	            throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
	        }
	        this.referenceDelegate = new IndexedDbLruDelegate(this);
	        this.dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;
	        this.serializer = new LocalSerializer(serializer);
	        this.document = platform.document;
	        this.allowTabSynchronization = multiClientParams !== undefined;
	        this.queryCache = new IndexedDbQueryCache(this.referenceDelegate, this.serializer);
	        this.remoteDocumentCache = new IndexedDbRemoteDocumentCache(this.serializer, 
	        /*keepDocumentChangeLog=*/ this.allowTabSynchronization);
	        if (platform.window && platform.window.localStorage) {
	            this.window = platform.window;
	            this.webStorage = this.window.localStorage;
	        }
	        else {
	            throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
	        }
	    }
	    IndexedDbPersistence.getStore = function (txn, store) {
	        if (txn instanceof IndexedDbTransaction) {
	            return SimpleDb.getStore(txn.simpleDbTransaction, store);
	        }
	        else {
	            throw fail('IndexedDbPersistence must use instances of IndexedDbTransaction');
	        }
	    };
	    IndexedDbPersistence.createIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var persistence;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer);
	                        return [4 /*yield*/, persistence.start()];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, persistence];
	                }
	            });
	        });
	    };
	    IndexedDbPersistence.createMultiClientIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer, multiClientParams) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var persistence;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, multiClientParams);
	                        return [4 /*yield*/, persistence.start()];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, persistence];
	                }
	            });
	        });
	    };
	    /**
	     * Attempt to start IndexedDb persistence.
	     *
	     * @return {Promise<void>} Whether persistence was enabled.
	     */
	    IndexedDbPersistence.prototype.start = function () {
	        var _this = this;
	        assert(!this.started, 'IndexedDbPersistence double-started!');
	        assert(this.window !== null, "Expected 'window' to be defined");
	        return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer))
	            .then(function (db) {
	            _this.simpleDb = db;
	        })
	            .then(function () { return _this.startRemoteDocumentCache(); })
	            .then(function () {
	            _this.attachVisibilityHandler();
	            _this.attachWindowUnloadHook();
	            return _this.updateClientMetadataAndTryBecomePrimary().then(function () {
	                return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
	            });
	        })
	            .then(function () {
	            return _this.simpleDb.runTransaction('readonly', [DbTargetGlobal.store], function (txn) {
	                return getHighestListenSequenceNumber(txn).next(function (highestListenSequenceNumber) {
	                    var sequenceNumberSyncer = _this.multiClientParams
	                        ? _this.multiClientParams.sequenceNumberSyncer
	                        : undefined;
	                    _this.listenSequence = new ListenSequence(highestListenSequenceNumber, sequenceNumberSyncer);
	                });
	            });
	        })
	            .then(function () {
	            _this._started = true;
	        })
	            .catch(function (reason) {
	            _this.simpleDb && _this.simpleDb.close();
	            return Promise.reject(reason);
	        });
	    };
	    IndexedDbPersistence.prototype.startRemoteDocumentCache = function () {
	        var _this = this;
	        return this.simpleDb.runTransaction('readonly', ALL_STORES, function (txn) {
	            return _this.remoteDocumentCache.start(txn);
	        });
	    };
	    IndexedDbPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
	        var _this = this;
	        this.primaryStateListener = function (primaryState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (this.started) {
	                    return [2 /*return*/, primaryStateListener(primaryState)];
	                }
	                return [2 /*return*/];
	            });
	        }); };
	        return primaryStateListener(this.isPrimary);
	    };
	    IndexedDbPersistence.prototype.setNetworkEnabled = function (networkEnabled) {
	        var _this = this;
	        if (this.networkEnabled !== networkEnabled) {
	            this.networkEnabled = networkEnabled;
	            // Schedule a primary lease refresh for immediate execution. The eventual
	            // lease update will be propagated via `primaryStateListener`.
	            this.queue.enqueueAndForget(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                return tslib_1.__generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (!this.started) return [3 /*break*/, 2];
	                            return [4 /*yield*/, this.updateClientMetadataAndTryBecomePrimary()];
	                        case 1:
	                            _a.sent();
	                            _a.label = 2;
	                        case 2: return [2 /*return*/];
	                    }
	                });
	            }); });
	        }
	    };
	    /**
	     * Updates the client metadata in IndexedDb and attempts to either obtain or
	     * extend the primary lease for the local client. Asynchronously notifies the
	     * primary state listener if the client either newly obtained or released its
	     * primary lease.
	     */
	    IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary = function () {
	        var _this = this;
	        return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {
	            var metadataStore = clientMetadataStore(txn);
	            return metadataStore
	                .put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground, _this.remoteDocumentCache.lastProcessedDocumentChangeId))
	                .next(function () {
	                if (_this.isPrimary) {
	                    return _this.verifyPrimaryLease(txn).next(function (success) {
	                        if (!success) {
	                            _this.isPrimary = false;
	                            _this.queue.enqueueAndForget(function () {
	                                return _this.primaryStateListener(false);
	                            });
	                        }
	                    });
	                }
	            })
	                .next(function () { return _this.canActAsPrimary(txn); })
	                .next(function (canActAsPrimary) {
	                var wasPrimary = _this.isPrimary;
	                _this.isPrimary = canActAsPrimary;
	                if (wasPrimary !== _this.isPrimary) {
	                    _this.queue.enqueueAndForget(function () {
	                        return _this.primaryStateListener(_this.isPrimary);
	                    });
	                }
	                if (wasPrimary && !_this.isPrimary) {
	                    return _this.releasePrimaryLeaseIfHeld(txn);
	                }
	                else if (_this.isPrimary) {
	                    return _this.acquireOrExtendPrimaryLease(txn);
	                }
	            });
	        });
	    };
	    IndexedDbPersistence.prototype.verifyPrimaryLease = function (txn) {
	        var _this = this;
	        var store = primaryClientStore(txn);
	        return store.get(DbPrimaryClient.key).next(function (primaryClient) {
	            return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
	        });
	    };
	    IndexedDbPersistence.prototype.removeClientMetadata = function (txn) {
	        var metadataStore = clientMetadataStore(txn);
	        return metadataStore.delete(this.clientId);
	    };
	    /**
	     * If the garbage collection threshold has passed, prunes the
	     * RemoteDocumentChanges and the ClientMetadata store based on the last update
	     * time of all clients.
	     */
	    IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var activeClients_1, inactiveClients_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(this.isPrimary &&
	                            !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS))) return [3 /*break*/, 2];
	                        this.lastGarbageCollectionTime = Date.now();
	                        inactiveClients_1 = [];
	                        return [4 /*yield*/, this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', function (txn) {
	                                var metadataStore = IndexedDbPersistence.getStore(txn, DbClientMetadata.store);
	                                return metadataStore
	                                    .loadAll()
	                                    .next(function (existingClients) {
	                                    activeClients_1 = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
	                                    inactiveClients_1 = existingClients.filter(function (client) { return activeClients_1.indexOf(client) === -1; });
	                                })
	                                    .next(function () {
	                                    // Delete metadata for clients that are no longer considered active.
	                                    return PersistencePromise.forEach(inactiveClients_1, function (inactiveClient) {
	                                        return metadataStore.delete(inactiveClient.clientId);
	                                    });
	                                })
	                                    .next(function () {
	                                    // Retrieve the minimum change ID from the set of active clients.
	                                    // The primary client doesn't read from the document change log,
	                                    // and hence we exclude it when we determine the minimum
	                                    // `lastProcessedDocumentChangeId`.
	                                    activeClients_1 = activeClients_1.filter(function (client) { return client.clientId !== _this.clientId; });
	                                    if (activeClients_1.length > 0) {
	                                        var processedChangeIds = activeClients_1.map(function (client) { return client.lastProcessedDocumentChangeId || 0; });
	                                        var oldestChangeId = Math.min.apply(Math, processedChangeIds);
	                                        return _this.remoteDocumentCache.removeDocumentChangesThroughChangeId(txn, oldestChangeId);
	                                    }
	                                });
	                            })];
	                    case 1:
	                        _a.sent();
	                        // Delete potential leftover entries that may continue to mark the
	                        // inactive clients as zombied in LocalStorage.
	                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
	                        // the client atomically, but we can't. So we opt to delete the IndexedDb
	                        // entries first to avoid potentially reviving a zombied client.
	                        inactiveClients_1.forEach(function (inactiveClient) {
	                            _this.window.localStorage.removeItem(_this.zombiedClientLocalStorageKey(inactiveClient.clientId));
	                        });
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Schedules a recurring timer to update the client metadata and to either
	     * extend or acquire the primary lease if the client is eligible.
	     */
	    IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function () {
	        var _this = this;
	        this.clientMetadataRefresher = this.queue.enqueueAfterDelay(TimerId.ClientMetadataRefresh, CLIENT_METADATA_REFRESH_INTERVAL_MS, function () {
	            return _this.updateClientMetadataAndTryBecomePrimary()
	                .then(function () { return _this.maybeGarbageCollectMultiClientState(); })
	                .then(function () { return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes(); });
	        });
	    };
	    /** Checks whether `client` is the local client. */
	    IndexedDbPersistence.prototype.isLocalClient = function (client) {
	        return client ? client.ownerId === this.clientId : false;
	    };
	    /**
	     * Evaluate the state of all active clients and determine whether the local
	     * client is or can act as the holder of the primary lease. Returns whether
	     * the client is eligible for the lease, but does not actually acquire it.
	     * May return 'false' even if there is no active leaseholder and another
	     * (foreground) client should become leaseholder instead.
	     */
	    IndexedDbPersistence.prototype.canActAsPrimary = function (txn) {
	        var _this = this;
	        var store = primaryClientStore(txn);
	        return store
	            .get(DbPrimaryClient.key)
	            .next(function (currentPrimary) {
	            var currentLeaseIsValid = currentPrimary !== null &&
	                _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&
	                !_this.isClientZombied(currentPrimary.ownerId);
	            // A client is eligible for the primary lease if:
	            // - its network is enabled and the client's tab is in the foreground.
	            // - its network is enabled and no other client's tab is in the
	            //   foreground.
	            // - every clients network is disabled and the client's tab is in the
	            //   foreground.
	            // - every clients network is disabled and no other client's tab is in
	            //   the foreground.
	            if (currentLeaseIsValid) {
	                if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
	                    return true;
	                }
	                if (!_this.isLocalClient(currentPrimary)) {
	                    if (!currentPrimary.allowTabSynchronization) {
	                        // Fail the `canActAsPrimary` check if the current leaseholder has
	                        // not opted into multi-tab synchronization. If this happens at
	                        // client startup, we reject the Promise returned by
	                        // `enablePersistence()` and the user can continue to use Firestore
	                        // with in-memory persistence.
	                        // If this fails during a lease refresh, we will instead block the
	                        // AsyncQueue from executing further operations. Note that this is
	                        // acceptable since mixing & matching different `synchronizeTabs`
	                        // settings is not supported.
	                        //
	                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
	                        // no longer be turned off.
	                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
	                    }
	                    return false;
	                }
	            }
	            if (_this.networkEnabled && _this.inForeground) {
	                return true;
	            }
	            return clientMetadataStore(txn)
	                .loadAll()
	                .next(function (existingClients) {
	                // Process all existing clients and determine whether at least one of
	                // them is better suited to obtain the primary lease.
	                var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function (otherClient) {
	                    if (_this.clientId !== otherClient.clientId) {
	                        var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
	                        var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
	                        var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;
	                        if (otherClientHasBetterNetworkState ||
	                            (otherClientHasBetterVisibility &&
	                                otherClientHasSameNetworkState)) {
	                            return true;
	                        }
	                    }
	                    return false;
	                });
	                return preferredCandidate === undefined;
	            });
	        })
	            .next(function (canActAsPrimary) {
	            if (_this.isPrimary !== canActAsPrimary) {
	                debug(LOG_TAG$2, "Client " + (canActAsPrimary ? 'is' : 'is not') + " eligible for a primary lease.");
	            }
	            return canActAsPrimary;
	        });
	    };
	    IndexedDbPersistence.prototype.shutdown = function (deleteData) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        // The shutdown() operations are idempotent and can be called even when
	                        // start() aborted (e.g. because it couldn't acquire the persistence lease).
	                        this._started = false;
	                        this.markClientZombied();
	                        if (this.clientMetadataRefresher) {
	                            this.clientMetadataRefresher.cancel();
	                        }
	                        this.detachVisibilityHandler();
	                        this.detachWindowUnloadHook();
	                        return [4 /*yield*/, this.simpleDb.runTransaction('readwrite', [DbPrimaryClient.store, DbClientMetadata.store], function (txn) {
	                                return _this.releasePrimaryLeaseIfHeld(txn).next(function () {
	                                    return _this.removeClientMetadata(txn);
	                                });
	                            })];
	                    case 1:
	                        _a.sent();
	                        this.simpleDb.close();
	                        // Remove the entry marking the client as zombied from LocalStorage since
	                        // we successfully deleted its metadata from IndexedDb.
	                        this.removeClientZombiedEntry();
	                        if (!deleteData) return [3 /*break*/, 3];
	                        return [4 /*yield*/, SimpleDb.delete(this.dbName)];
	                    case 2:
	                        _a.sent();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Returns clients that are not zombied and have an updateTime within the
	     * provided threshold.
	     */
	    IndexedDbPersistence.prototype.filterActiveClients = function (clients, activityThresholdMs) {
	        var _this = this;
	        return clients.filter(function (client) {
	            return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&
	                !_this.isClientZombied(client.clientId);
	        });
	    };
	    IndexedDbPersistence.prototype.getActiveClients = function () {
	        var _this = this;
	        return this.simpleDb.runTransaction('readonly', [DbClientMetadata.store], function (txn) {
	            return clientMetadataStore(txn)
	                .loadAll()
	                .next(function (clients) {
	                return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function (clientMetadata) { return clientMetadata.clientId; });
	            });
	        });
	    };
	    Object.defineProperty(IndexedDbPersistence.prototype, "started", {
	        get: function () {
	            return this._started;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    IndexedDbPersistence.prototype.getMutationQueue = function (user) {
	        assert(this.started, 'Cannot initialize MutationQueue before persistence is started.');
	        return IndexedDbMutationQueue.forUser(user, this.serializer, this.referenceDelegate);
	    };
	    IndexedDbPersistence.prototype.getQueryCache = function () {
	        assert(this.started, 'Cannot initialize QueryCache before persistence is started.');
	        return this.queryCache;
	    };
	    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {
	        assert(this.started, 'Cannot initialize RemoteDocumentCache before persistence is started.');
	        return this.remoteDocumentCache;
	    };
	    IndexedDbPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
	        var _this = this;
	        debug(LOG_TAG$2, 'Starting transaction:', action);
	        // Do all transactions as readwrite against all object stores, since we
	        // are the only reader/writer.
	        return this.simpleDb.runTransaction(mode === 'readonly' ? 'readonly' : 'readwrite', ALL_STORES, function (simpleDbTxn) {
	            if (mode === 'readwrite-primary') {
	                // While we merely verify that we have (or can acquire) the lease
	                // immediately, we wait to extend the primary lease until after
	                // executing transactionOperation(). This ensures that even if the
	                // transactionOperation takes a long time, we'll use a recent
	                // leaseTimestampMs in the extended (or newly acquired) lease.
	                return _this.verifyPrimaryLease(simpleDbTxn)
	                    .next(function (success) {
	                    if (!success) {
	                        error("Failed to obtain primary lease for action '" + action + "'.");
	                        _this.isPrimary = false;
	                        _this.queue.enqueueAndForget(function () {
	                            return _this.primaryStateListener(false);
	                        });
	                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
	                    }
	                    return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
	                })
	                    .next(function (result) {
	                    return _this.acquireOrExtendPrimaryLease(simpleDbTxn).next(function () { return result; });
	                });
	            }
	            else {
	                return _this.verifyAllowTabSynchronization(simpleDbTxn).next(function () {
	                    return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
	                });
	            }
	        });
	    };
	    /**
	     * Verifies that the current tab is the primary leaseholder or alternatively
	     * that the leaseholder has opted into multi-tab synchronization.
	     */
	    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
	    // be turned off.
	    IndexedDbPersistence.prototype.verifyAllowTabSynchronization = function (txn) {
	        var _this = this;
	        var store = primaryClientStore(txn);
	        return store.get(DbPrimaryClient.key).next(function (currentPrimary) {
	            var currentLeaseIsValid = currentPrimary !== null &&
	                _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&
	                !_this.isClientZombied(currentPrimary.ownerId);
	            if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
	                if (!currentPrimary.allowTabSynchronization) {
	                    throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
	                }
	            }
	        });
	    };
	    /**
	     * Obtains or extends the new primary lease for the local client. This
	     * method does not verify that the client is eligible for this lease.
	     */
	    IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease = function (txn) {
	        var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
	        return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
	    };
	    IndexedDbPersistence.isAvailable = function () {
	        return SimpleDb.isAvailable();
	    };
	    /**
	     * Generates a string used as a prefix when storing data in IndexedDB and
	     * LocalStorage.
	     */
	    IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {
	        // Use two different prefix formats:
	        //
	        //   * firestore / persistenceKey / projectID . databaseID / ...
	        //   * firestore / persistenceKey / projectID / ...
	        //
	        // projectIDs are DNS-compatible names and cannot contain dots
	        // so there's no danger of collisions.
	        var database = databaseInfo.databaseId.projectId;
	        if (!databaseInfo.databaseId.isDefaultDatabase) {
	            database += '.' + databaseInfo.databaseId.database;
	        }
	        return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';
	    };
	    /** Checks the primary lease and removes it if we are the current primary. */
	    IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld = function (txn) {
	        var _this = this;
	        var store = primaryClientStore(txn);
	        return store.get(DbPrimaryClient.key).next(function (primaryClient) {
	            if (_this.isLocalClient(primaryClient)) {
	                debug(LOG_TAG$2, 'Releasing primary lease.');
	                return store.delete(DbPrimaryClient.key);
	            }
	            else {
	                return PersistencePromise.resolve();
	            }
	        });
	    };
	    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
	    IndexedDbPersistence.prototype.isWithinAge = function (updateTimeMs, maxAgeMs) {
	        var now = Date.now();
	        var minAcceptable = now - maxAgeMs;
	        var maxAcceptable = now;
	        if (updateTimeMs < minAcceptable) {
	            return false;
	        }
	        else if (updateTimeMs > maxAcceptable) {
	            error("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
	            return false;
	        }
	        return true;
	    };
	    IndexedDbPersistence.prototype.attachVisibilityHandler = function () {
	        var _this = this;
	        if (this.document !== null &&
	            typeof this.document.addEventListener === 'function') {
	            this.documentVisibilityHandler = function () {
	                _this.queue.enqueueAndForget(function () {
	                    _this.inForeground = _this.document.visibilityState === 'visible';
	                    return _this.updateClientMetadataAndTryBecomePrimary();
	                });
	            };
	            this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);
	            this.inForeground = this.document.visibilityState === 'visible';
	        }
	    };
	    IndexedDbPersistence.prototype.detachVisibilityHandler = function () {
	        if (this.documentVisibilityHandler) {
	            assert(this.document !== null &&
	                typeof this.document.addEventListener === 'function', "Expected 'document.addEventListener' to be a function");
	            this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);
	            this.documentVisibilityHandler = null;
	        }
	    };
	    /**
	     * Attaches a window.unload handler that will synchronously write our
	     * clientId to a "zombie client id" location in LocalStorage. This can be used
	     * by tabs trying to acquire the primary lease to determine that the lease
	     * is no longer valid even if the timestamp is recent. This is particularly
	     * important for the refresh case (so the tab correctly re-acquires the
	     * primary lease). LocalStorage is used for this rather than IndexedDb because
	     * it is a synchronous API and so can be used reliably from  an unload
	     * handler.
	     */
	    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {
	        var _this = this;
	        if (typeof this.window.addEventListener === 'function') {
	            this.windowUnloadHandler = function () {
	                // Note: In theory, this should be scheduled on the AsyncQueue since it
	                // accesses internal state. We execute this code directly during shutdown
	                // to make sure it gets a chance to run.
	                _this.markClientZombied();
	                _this.queue.enqueueAndForget(function () {
	                    // Attempt graceful shutdown (including releasing our primary lease),
	                    // but there's no guarantee it will complete.
	                    return _this.shutdown();
	                });
	            };
	            this.window.addEventListener('unload', this.windowUnloadHandler);
	        }
	    };
	    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {
	        if (this.windowUnloadHandler) {
	            assert(typeof this.window.removeEventListener === 'function', "Expected 'window.removeEventListener' to be a function");
	            this.window.removeEventListener('unload', this.windowUnloadHandler);
	            this.windowUnloadHandler = null;
	        }
	    };
	    /**
	     * Returns whether a client is "zombied" based on its LocalStorage entry.
	     * Clients become zombied when their tab closes without running all of the
	     * cleanup logic in `shutdown()`.
	     */
	    IndexedDbPersistence.prototype.isClientZombied = function (clientId) {
	        try {
	            var isZombied = this.webStorage.getItem(this.zombiedClientLocalStorageKey(clientId)) !==
	                null;
	            debug(LOG_TAG$2, "Client '" + clientId + "' " + (isZombied ? 'is' : 'is not') + " zombied in LocalStorage");
	            return isZombied;
	        }
	        catch (e) {
	            // Gracefully handle if LocalStorage isn't working.
	            error(LOG_TAG$2, 'Failed to get zombied client id.', e);
	            return false;
	        }
	    };
	    /**
	     * Record client as zombied (a client that had its tab closed). Zombied
	     * clients are ignored during primary tab selection.
	     */
	    IndexedDbPersistence.prototype.markClientZombied = function () {
	        try {
	            this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
	        }
	        catch (e) {
	            // Gracefully handle if LocalStorage isn't available / working.
	            error('Failed to set zombie client id.', e);
	        }
	    };
	    /** Removes the zombied client entry if it exists. */
	    IndexedDbPersistence.prototype.removeClientZombiedEntry = function () {
	        try {
	            this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
	        }
	        catch (e) {
	            // Ignore
	        }
	    };
	    IndexedDbPersistence.prototype.zombiedClientLocalStorageKey = function (clientId) {
	        return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
	    };
	    /**
	     * The name of the main (and currently only) IndexedDB database. this name is
	     * appended to the prefix provided to the IndexedDbPersistence constructor.
	     */
	    IndexedDbPersistence.MAIN_DATABASE = 'main';
	    return IndexedDbPersistence;
	}());
	function isPrimaryLeaseLostError(err) {
	    return (err.code === Code.FAILED_PRECONDITION &&
	        err.message === PRIMARY_LEASE_LOST_ERROR_MSG);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the primary client object store.
	 */
	function primaryClientStore(txn) {
	    return txn.store(DbPrimaryClient.store);
	}
	/**
	 * Helper to get a typed SimpleDbStore for the client metadata object store.
	 */
	function clientMetadataStore(txn) {
	    return txn.store(DbClientMetadata.store);
	}
	/** Provides LRU functionality for IndexedDB persistence. */
	var IndexedDbLruDelegate = /** @class */ (function () {
	    function IndexedDbLruDelegate(db) {
	        this.db = db;
	        this.garbageCollector = new LruGarbageCollector(this);
	    }
	    IndexedDbLruDelegate.prototype.getSequenceNumberCount = function (txn) {
	        var docCountPromise = this.orphanedDocmentCount(txn);
	        var targetCountPromise = this.db.getQueryCache().getQueryCount(txn);
	        return targetCountPromise.next(function (targetCount) {
	            return docCountPromise.next(function (docCount) { return targetCount + docCount; });
	        });
	    };
	    IndexedDbLruDelegate.prototype.orphanedDocmentCount = function (txn) {
	        var orphanedCount = 0;
	        return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
	            orphanedCount++;
	        }).next(function () { return orphanedCount; });
	    };
	    IndexedDbLruDelegate.prototype.forEachTarget = function (txn, f) {
	        return this.db.getQueryCache().forEachTarget(txn, f);
	    };
	    IndexedDbLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
	        return this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
	            return f(sequenceNumber);
	        });
	    };
	    IndexedDbLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
	        this.inMemoryPins = inMemoryPins;
	    };
	    IndexedDbLruDelegate.prototype.addReference = function (txn, key) {
	        return writeSentinelKey(txn, key);
	    };
	    IndexedDbLruDelegate.prototype.removeReference = function (txn, key) {
	        return writeSentinelKey(txn, key);
	    };
	    IndexedDbLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
	        return this.db
	            .getQueryCache()
	            .removeTargets(txn, upperBound, activeTargetIds);
	    };
	    IndexedDbLruDelegate.prototype.removeMutationReference = function (txn, key) {
	        return writeSentinelKey(txn, key);
	    };
	    /**
	     * Returns true if anything would prevent this document from being garbage
	     * collected, given that the document in question is not present in any
	     * targets and has a sequence number less than or equal to the upper bound for
	     * the collection run.
	     */
	    IndexedDbLruDelegate.prototype.isPinned = function (txn, docKey) {
	        if (this.inMemoryPins.containsKey(docKey)) {
	            return PersistencePromise.resolve(true);
	        }
	        else {
	            return mutationQueuesContainKey(txn, docKey);
	        }
	    };
	    IndexedDbLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
	        var _this = this;
	        var count = 0;
	        var bytesRemoved = 0;
	        var promises = [];
	        var iteration = this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
	            if (sequenceNumber <= upperBound) {
	                var p = _this.isPinned(txn, docKey).next(function (isPinned) {
	                    if (!isPinned) {
	                        count++;
	                        return _this.removeOrphanedDocument(txn, docKey).next(function (documentBytes) {
	                            bytesRemoved += documentBytes;
	                        });
	                    }
	                });
	                promises.push(p);
	            }
	        });
	        // Wait for iteration first to make sure we have a chance to add all of the
	        // removal promises to the array.
	        return iteration
	            .next(function () { return PersistencePromise.waitFor(promises); })
	            .next(function () {
	            return _this.db.getRemoteDocumentCache().updateSize(txn, -bytesRemoved);
	        })
	            .next(function () { return count; });
	    };
	    /**
	     * Clears a document from the cache. The document is assumed to be orphaned, so target-document
	     * associations are not queried. We remove it from the remote document cache, as well as remove
	     * its sentinel row.
	     */
	    IndexedDbLruDelegate.prototype.removeOrphanedDocument = function (txn, docKey) {
	        var totalBytesRemoved = 0;
	        var documentCache = this.db.getRemoteDocumentCache();
	        return PersistencePromise.waitFor([
	            documentTargetStore(txn).delete(sentinelKey$1(docKey)),
	            documentCache.removeEntry(txn, docKey).next(function (bytesRemoved) {
	                totalBytesRemoved += bytesRemoved;
	            })
	        ]).next(function () { return totalBytesRemoved; });
	    };
	    IndexedDbLruDelegate.prototype.removeTarget = function (txn, queryData) {
	        var updated = queryData.copy({
	            sequenceNumber: txn.currentSequenceNumber
	        });
	        return this.db.getQueryCache().updateQueryData(txn, updated);
	    };
	    IndexedDbLruDelegate.prototype.updateLimboDocument = function (txn, key) {
	        return writeSentinelKey(txn, key);
	    };
	    /**
	     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
	     * means not a part of any target, so the only entry in the target-document index for
	     * that document will be the sentinel row (targetId 0), which will also have the sequence
	     * number for the last time the document was accessed.
	     */
	    IndexedDbLruDelegate.prototype.forEachOrphanedDocument = function (txn, f) {
	        var store = documentTargetStore(txn);
	        var nextToReport = ListenSequence.INVALID;
	        var nextPath;
	        return store
	            .iterate({
	            index: DbTargetDocument.documentTargetsIndex
	        }, function (_a, _b) {
	            var targetId = _a[0], docKey = _a[1];
	            var path = _b.path, sequenceNumber = _b.sequenceNumber;
	            if (targetId === 0) {
	                // if nextToReport is valid, report it, this is a new key so the
	                // last one must not be a member of any targets.
	                if (nextToReport !== ListenSequence.INVALID) {
	                    f(new DocumentKey(decode$1(nextPath)), nextToReport);
	                }
	                // set nextToReport to be this sequence number. It's the next one we
	                // might report, if we don't find any targets for this document.
	                // Note that the sequence number must be defined when the targetId
	                // is 0.
	                nextToReport = sequenceNumber;
	                nextPath = path;
	            }
	            else {
	                // set nextToReport to be invalid, we know we don't need to report
	                // this one since we found a target for it.
	                nextToReport = ListenSequence.INVALID;
	            }
	        })
	            .next(function () {
	            // Since we report sequence numbers after getting to the next key, we
	            // need to check if the last key we iterated over was an orphaned
	            // document and report it.
	            if (nextToReport !== ListenSequence.INVALID) {
	                f(new DocumentKey(decode$1(nextPath)), nextToReport);
	            }
	        });
	    };
	    return IndexedDbLruDelegate;
	}());
	function sentinelKey$1(key) {
	    return [0, encode(key.path)];
	}
	/**
	 * @return A value suitable for writing a sentinel row in the target-document
	 * store.
	 */
	function sentinelRow(key, sequenceNumber) {
	    return new DbTargetDocument(0, encode(key.path), sequenceNumber);
	}
	function writeSentinelKey(txn, key) {
	    return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A readonly view of the local state of all documents we're tracking (i.e. we
	 * have a cached version in remoteDocumentCache or local mutations for the
	 * document). The view is computed by applying the mutations in the
	 * MutationQueue to the RemoteDocumentCache.
	 */
	var LocalDocumentsView = /** @class */ (function () {
	    function LocalDocumentsView(remoteDocumentCache, mutationQueue) {
	        this.remoteDocumentCache = remoteDocumentCache;
	        this.mutationQueue = mutationQueue;
	    }
	    /**
	     * Get the local view of the document identified by `key`.
	     *
	     * @return Local view of the document or null if we don't have any cached
	     * state for it.
	     */
	    LocalDocumentsView.prototype.getDocument = function (transaction, key) {
	        var _this = this;
	        return this.mutationQueue
	            .getAllMutationBatchesAffectingDocumentKey(transaction, key)
	            .next(function (batches) { return _this.getDocumentInternal(transaction, key, batches); });
	    };
	    /** Internal version of `getDocument` that allows reusing batches. */
	    LocalDocumentsView.prototype.getDocumentInternal = function (transaction, key, inBatches) {
	        return this.remoteDocumentCache.getEntry(transaction, key).next(function (doc) {
	            for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
	                var batch = inBatches_1[_i];
	                doc = batch.applyToLocalView(key, doc);
	            }
	            return doc;
	        });
	    };
	    /**
	     * Gets the local view of the documents identified by `keys`.
	     *
	     * If we don't have cached state for a document in `keys`, a NoDocument will
	     * be stored for that key in the resulting set.
	     */
	    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {
	        var _this = this;
	        return this.mutationQueue
	            .getAllMutationBatchesAffectingDocumentKeys(transaction, keys)
	            .next(function (batches) {
	            var promises = [];
	            var results = maybeDocumentMap();
	            keys.forEach(function (key) {
	                promises.push(_this.getDocumentInternal(transaction, key, batches).next(function (maybeDoc) {
	                    // TODO(http://b/32275378): Don't conflate missing / deleted.
	                    if (!maybeDoc) {
	                        maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());
	                    }
	                    results = results.insert(key, maybeDoc);
	                }));
	            });
	            return PersistencePromise.waitFor(promises).next(function () { return results; });
	        });
	    };
	    /** Performs a query against the local view of all documents. */
	    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {
	        if (DocumentKey.isDocumentKey(query.path)) {
	            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);
	        }
	        else {
	            return this.getDocumentsMatchingCollectionQuery(transaction, query);
	        }
	    };
	    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {
	        // Just do a simple document lookup.
	        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {
	            var result = documentMap();
	            if (maybeDoc instanceof Document) {
	                result = result.insert(maybeDoc.key, maybeDoc);
	            }
	            return result;
	        });
	    };
	    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {
	        var _this = this;
	        // Query the remote documents and overlay mutations.
	        var results;
	        return this.remoteDocumentCache
	            .getDocumentsMatchingQuery(transaction, query)
	            .next(function (queryResults) {
	            results = queryResults;
	            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);
	        })
	            .next(function (matchingMutationBatches) {
	            for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
	                var batch = matchingMutationBatches_1[_i];
	                for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
	                    var mutation = _b[_a];
	                    var key = mutation.key;
	                    // Only process documents belonging to the collection.
	                    if (!query.path.isImmediateParentOf(key.path)) {
	                        continue;
	                    }
	                    var baseDoc = results.get(key);
	                    var mutatedDoc = mutation.applyToLocalView(baseDoc, baseDoc, batch.localWriteTime);
	                    if (mutatedDoc instanceof Document) {
	                        results = results.insert(key, mutatedDoc);
	                    }
	                    else {
	                        results = results.remove(key);
	                    }
	                }
	            }
	        })
	            .next(function () {
	            // Finally, filter out any documents that don't actually match
	            // the query.
	            results.forEach(function (key, doc) {
	                if (!query.matches(doc)) {
	                    results = results.remove(key);
	                }
	            });
	            return results;
	        });
	    };
	    return LocalDocumentsView;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A collection of references to a document from some kind of numbered entity
	 * (either a target ID or batch ID). As references are added to or removed from
	 * the set corresponding events are emitted to a registered garbage collector.
	 *
	 * Each reference is represented by a DocumentReference object. Each of them
	 * contains enough information to uniquely identify the reference. They are all
	 * stored primarily in a set sorted by key. A document is considered garbage if
	 * there's no references in that set (this can be efficiently checked thanks to
	 * sorting by key).
	 *
	 * ReferenceSet also keeps a secondary set that contains references sorted by
	 * IDs. This one is used to efficiently implement removal of all references by
	 * some target ID.
	 */
	var ReferenceSet = /** @class */ (function () {
	    function ReferenceSet() {
	        // A set of outstanding references to a document sorted by key.
	        this.refsByKey = new SortedSet(DocReference.compareByKey);
	        // A set of outstanding references to a document sorted by target id.
	        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
	    }
	    /** Returns true if the reference set contains no references. */
	    ReferenceSet.prototype.isEmpty = function () {
	        return this.refsByKey.isEmpty();
	    };
	    /** Adds a reference to the given document key for the given ID. */
	    ReferenceSet.prototype.addReference = function (key, id) {
	        var ref = new DocReference(key, id);
	        this.refsByKey = this.refsByKey.add(ref);
	        this.refsByTarget = this.refsByTarget.add(ref);
	    };
	    /** Add references to the given document keys for the given ID. */
	    ReferenceSet.prototype.addReferences = function (keys, id) {
	        var _this = this;
	        keys.forEach(function (key) { return _this.addReference(key, id); });
	    };
	    /**
	     * Removes a reference to the given document key for the given
	     * ID.
	     */
	    ReferenceSet.prototype.removeReference = function (key, id) {
	        this.removeRef(new DocReference(key, id));
	    };
	    ReferenceSet.prototype.removeReferences = function (keys, id) {
	        var _this = this;
	        keys.forEach(function (key) { return _this.removeReference(key, id); });
	    };
	    /**
	     * Clears all references with a given ID. Calls removeRef() for each key
	     * removed.
	     */
	    ReferenceSet.prototype.removeReferencesForId = function (id) {
	        var _this = this;
	        var emptyKey = DocumentKey.EMPTY;
	        var startRef = new DocReference(emptyKey, id);
	        var endRef = new DocReference(emptyKey, id + 1);
	        var keys = [];
	        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
	            _this.removeRef(ref);
	            keys.push(ref.key);
	        });
	        return keys;
	    };
	    ReferenceSet.prototype.removeAllReferences = function () {
	        var _this = this;
	        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });
	    };
	    ReferenceSet.prototype.removeRef = function (ref) {
	        this.refsByKey = this.refsByKey.delete(ref);
	        this.refsByTarget = this.refsByTarget.delete(ref);
	    };
	    ReferenceSet.prototype.referencesForId = function (id) {
	        var emptyKey = DocumentKey.EMPTY;
	        var startRef = new DocReference(emptyKey, id);
	        var endRef = new DocReference(emptyKey, id + 1);
	        var keys = documentKeySet();
	        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
	            keys = keys.add(ref.key);
	        });
	        return keys;
	    };
	    ReferenceSet.prototype.containsKey = function (key) {
	        var ref = new DocReference(key, 0);
	        var firstRef = this.refsByKey.firstAfterOrEqual(ref);
	        return firstRef !== null && key.isEqual(firstRef.key);
	    };
	    return ReferenceSet;
	}());
	var DocReference = /** @class */ (function () {
	    function DocReference(key, targetOrBatchId) {
	        this.key = key;
	        this.targetOrBatchId = targetOrBatchId;
	    }
	    /** Compare by key then by ID */
	    DocReference.compareByKey = function (left, right) {
	        return (DocumentKey.comparator(left.key, right.key) ||
	            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));
	    };
	    /** Compare by ID then by key */
	    DocReference.compareByTargetId = function (left, right) {
	        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||
	            DocumentKey.comparator(left.key, right.key));
	    };
	    return DocReference;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$3 = 'LocalStore';
	/**
	 * Local storage in the Firestore client. Coordinates persistence components
	 * like the mutation queue and remote document cache to present a
	 * latency-compensated view of stored data.
	 *
	 * The LocalStore is responsible for accepting mutations from the Sync Engine.
	 * Writes from the client are put into a queue as provisional Mutations until
	 * they are processed by the RemoteStore and confirmed as having been written
	 * to the server.
	 *
	 * The local store provides the local version of documents that have been
	 * modified locally. It maintains the constraint:
	 *
	 *   LocalDocument = RemoteDocument + Active(LocalMutations)
	 *
	 * (Active mutations are those that are enqueued and have not been previously
	 * acknowledged or rejected).
	 *
	 * The RemoteDocument ("ground truth") state is provided via the
	 * applyChangeBatch method. It will be some version of a server-provided
	 * document OR will be a server-provided document PLUS acknowledged mutations:
	 *
	 *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)
	 *
	 * Note that this "dirty" version of a RemoteDocument will not be identical to a
	 * server base version, since it has LocalMutations added to it pending getting
	 * an authoritative copy from the server.
	 *
	 * Since LocalMutations can be rejected by the server, we have to be able to
	 * revert a LocalMutation that has already been applied to the LocalDocument
	 * (typically done by replaying all remaining LocalMutations to the
	 * RemoteDocument to re-apply).
	 *
	 * The LocalStore is responsible for the garbage collection of the documents it
	 * contains. For now, it every doc referenced by a view, the mutation queue, or
	 * the RemoteStore.
	 *
	 * It also maintains the persistence of mapping queries to resume tokens and
	 * target ids. It needs to know this data about queries to properly know what
	 * docs it would be allowed to garbage collect.
	 *
	 * The LocalStore must be able to efficiently execute queries against its local
	 * cache of the documents, to provide the initial set of results before any
	 * remote changes have been received.
	 *
	 * Note: In TypeScript, most methods return Promises since the implementation
	 * may rely on fetching data from IndexedDB which is async.
	 * These Promises will only be rejected on an I/O error or other internal
	 * (unexpected) failure (e.g. failed assert) and always represent an
	 * unrecoverable error (should be caught / reported by the async_queue).
	 */
	var LocalStore = /** @class */ (function () {
	    function LocalStore(
	    /** Manages our in-memory or durable persistence. */
	    persistence, initialUser) {
	        this.persistence = persistence;
	        /**
	         * The set of document references maintained by any local views.
	         */
	        this.localViewReferences = new ReferenceSet();
	        /** Maps a targetID to data about its query. */
	        this.queryDataByTarget = {};
	        assert(persistence.started, 'LocalStore was passed an unstarted persistence implementation');
	        this.persistence.referenceDelegate.setInMemoryPins(this.localViewReferences);
	        this.mutationQueue = persistence.getMutationQueue(initialUser);
	        this.remoteDocuments = persistence.getRemoteDocumentCache();
	        this.queryCache = persistence.getQueryCache();
	        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue);
	    }
	    /**
	     * Tells the LocalStore that the currently authenticated user has changed.
	     *
	     * In response the local store switches the mutation queue to the new user and
	     * returns any resulting document changes.
	     */
	    // PORTING NOTE: Android and iOS only return the documents affected by the
	    // change.
	    LocalStore.prototype.handleUserChange = function (user) {
	        var _this = this;
	        return this.persistence.runTransaction('Handle user change', 'readonly', function (txn) {
	            // Swap out the mutation queue, grabbing the pending mutation batches
	            // before and after.
	            var oldBatches;
	            return _this.mutationQueue
	                .getAllMutationBatches(txn)
	                .next(function (promisedOldBatches) {
	                oldBatches = promisedOldBatches;
	                _this.mutationQueue = _this.persistence.getMutationQueue(user);
	                // Recreate our LocalDocumentsView using the new
	                // MutationQueue.
	                _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue);
	                return _this.mutationQueue.getAllMutationBatches(txn);
	            })
	                .next(function (newBatches) {
	                var removedBatchIds = [];
	                var addedBatchIds = [];
	                // Union the old/new changed keys.
	                var changedKeys = documentKeySet();
	                for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
	                    var batch = oldBatches_1[_i];
	                    removedBatchIds.push(batch.batchId);
	                    for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
	                        var mutation = _b[_a];
	                        changedKeys = changedKeys.add(mutation.key);
	                    }
	                }
	                for (var _c = 0, newBatches_1 = newBatches; _c < newBatches_1.length; _c++) {
	                    var batch = newBatches_1[_c];
	                    addedBatchIds.push(batch.batchId);
	                    for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
	                        var mutation = _e[_d];
	                        changedKeys = changedKeys.add(mutation.key);
	                    }
	                }
	                // Return the set of all (potentially) changed documents and the list
	                // of mutation batch IDs that were affected by change.
	                return _this.localDocuments
	                    .getDocuments(txn, changedKeys)
	                    .next(function (affectedDocuments) {
	                    return {
	                        affectedDocuments: affectedDocuments,
	                        removedBatchIds: removedBatchIds,
	                        addedBatchIds: addedBatchIds
	                    };
	                });
	            });
	        });
	    };
	    /* Accept locally generated Mutations and commit them to storage. */
	    LocalStore.prototype.localWrite = function (mutations) {
	        var _this = this;
	        return this.persistence.runTransaction('Locally write mutations', 'readwrite', function (txn) {
	            var batch;
	            var localWriteTime = Timestamp.now();
	            return _this.mutationQueue
	                .addMutationBatch(txn, localWriteTime, mutations)
	                .next(function (promisedBatch) {
	                batch = promisedBatch;
	                // TODO(koss): This is doing an N^2 update by replaying ALL the
	                // mutations on each document (instead of just the ones added) in
	                // this batch.
	                var keys = batch.keys();
	                return _this.localDocuments.getDocuments(txn, keys);
	            })
	                .next(function (changedDocuments) {
	                return { batchId: batch.batchId, changes: changedDocuments };
	            });
	        });
	    };
	    /** Returns the local view of the documents affected by a mutation batch. */
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.lookupMutationDocuments = function (batchId) {
	        var _this = this;
	        return this.persistence.runTransaction('Lookup mutation documents', 'readonly', function (txn) {
	            return _this.mutationQueue
	                .lookupMutationKeys(txn, batchId)
	                .next(function (keys) {
	                if (keys) {
	                    return _this.localDocuments.getDocuments(txn, keys);
	                }
	                else {
	                    return PersistencePromise.resolve(null);
	                }
	            });
	        });
	    };
	    /**
	     * Acknowledge the given batch.
	     *
	     * On the happy path when a batch is acknowledged, the local store will
	     *
	     *  + remove the batch from the mutation queue;
	     *  + apply the changes to the remote document cache;
	     *  + recalculate the latency compensated view implied by those changes (there
	     *    may be mutations in the queue that affect the documents but haven't been
	     *    acknowledged yet); and
	     *  + give the changed documents back the sync engine
	     *
	     * @returns The resulting (modified) documents.
	     */
	    LocalStore.prototype.acknowledgeBatch = function (batchResult) {
	        var _this = this;
	        return this.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', function (txn) {
	            var affected = batchResult.batch.keys();
	            var documentBuffer = _this.remoteDocuments.newChangeBuffer();
	            return _this.mutationQueue
	                .acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken)
	                .next(function () {
	                return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);
	            })
	                .next(function () { return documentBuffer.apply(txn); })
	                .next(function () { return _this.mutationQueue.performConsistencyCheck(txn); })
	                .next(function () { return _this.localDocuments.getDocuments(txn, affected); });
	        });
	    };
	    /**
	     * Remove mutations from the MutationQueue for the specified batch;
	     * LocalDocuments will be recalculated.
	     *
	     * @returns The resulting modified documents.
	     */
	    LocalStore.prototype.rejectBatch = function (batchId) {
	        var _this = this;
	        return this.persistence.runTransaction('Reject batch', 'readwrite-primary', function (txn) {
	            var affectedKeys;
	            return _this.mutationQueue
	                .lookupMutationBatch(txn, batchId)
	                .next(function (batch) {
	                assert(batch !== null, 'Attempt to reject nonexistent batch!');
	                affectedKeys = batch.keys();
	                return _this.mutationQueue.removeMutationBatch(txn, batch);
	            })
	                .next(function () {
	                return _this.mutationQueue.performConsistencyCheck(txn);
	            })
	                .next(function () {
	                return _this.localDocuments.getDocuments(txn, affectedKeys);
	            });
	        });
	    };
	    /** Returns the last recorded stream token for the current user. */
	    LocalStore.prototype.getLastStreamToken = function () {
	        var _this = this;
	        return this.persistence.runTransaction('Get last stream token', 'readonly', function (txn) {
	            return _this.mutationQueue.getLastStreamToken(txn);
	        });
	    };
	    /**
	     * Sets the stream token for the current user without acknowledging any
	     * mutation batch. This is usually only useful after a stream handshake or in
	     * response to an error that requires clearing the stream token.
	     */
	    LocalStore.prototype.setLastStreamToken = function (streamToken) {
	        var _this = this;
	        return this.persistence.runTransaction('Set last stream token', 'readwrite-primary', function (txn) {
	            return _this.mutationQueue.setLastStreamToken(txn, streamToken);
	        });
	    };
	    /**
	     * Returns the last consistent snapshot processed (used by the RemoteStore to
	     * determine whether to buffer incoming snapshots from the backend).
	     */
	    LocalStore.prototype.getLastRemoteSnapshotVersion = function () {
	        var _this = this;
	        return this.persistence.runTransaction('Get last remote snapshot version', 'readonly', function (txn) { return _this.queryCache.getLastRemoteSnapshotVersion(txn); });
	    };
	    /**
	     * Update the "ground-state" (remote) documents. We assume that the remote
	     * event reflects any write batches that have been acknowledged or rejected
	     * (i.e. we do not re-apply local mutations to updates from this event).
	     *
	     * LocalDocuments are re-calculated if there are remaining mutations in the
	     * queue.
	     */
	    LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {
	        var _this = this;
	        var documentBuffer = this.remoteDocuments.newChangeBuffer();
	        return this.persistence.runTransaction('Apply remote event', 'readwrite-primary', function (txn) {
	            var promises = [];
	            var authoritativeUpdates = documentKeySet();
	            forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
	                // Do not ref/unref unassigned targetIds - it may lead to leaks.
	                var queryData = _this.queryDataByTarget[targetId];
	                if (!queryData)
	                    return;
	                // When a global snapshot contains updates (either add or modify) we
	                // can completely trust these updates as authoritative and blindly
	                // apply them to our cache (as a defensive measure to promote
	                // self-healing in the unfortunate case that our cache is ever somehow
	                // corrupted / out-of-sync).
	                //
	                // If the document is only updated while removing it from a target
	                // then watch isn't obligated to send the absolute latest version: it
	                // can send the first version that caused the document not to match.
	                change.addedDocuments.forEach(function (key) {
	                    authoritativeUpdates = authoritativeUpdates.add(key);
	                });
	                change.modifiedDocuments.forEach(function (key) {
	                    authoritativeUpdates = authoritativeUpdates.add(key);
	                });
	                promises.push(_this.queryCache
	                    .removeMatchingKeys(txn, change.removedDocuments, targetId)
	                    .next(function () {
	                    return _this.queryCache.addMatchingKeys(txn, change.addedDocuments, targetId);
	                }));
	                // Update the resume token if the change includes one. Don't clear
	                // any preexisting value.
	                var resumeToken = change.resumeToken;
	                if (resumeToken.length > 0) {
	                    var oldQueryData = queryData;
	                    queryData = queryData.copy({
	                        resumeToken: resumeToken,
	                        snapshotVersion: remoteEvent.snapshotVersion
	                    });
	                    _this.queryDataByTarget[targetId] = queryData;
	                    if (LocalStore.shouldPersistQueryData(oldQueryData, queryData, change)) {
	                        promises.push(_this.queryCache.updateQueryData(txn, queryData));
	                    }
	                }
	            });
	            var changedDocKeys = documentKeySet();
	            remoteEvent.documentUpdates.forEach(function (key, doc) {
	                changedDocKeys = changedDocKeys.add(key);
	                promises.push(documentBuffer.getEntry(txn, key).next(function (existingDoc) {
	                    // If a document update isn't authoritative, make sure we don't
	                    // apply an old document version to the remote cache. We make an
	                    // exception for SnapshotVersion.MIN which can happen for
	                    // manufactured events (e.g. in the case of a limbo document
	                    // resolution failing).
	                    if (existingDoc == null ||
	                        doc.version.isEqual(SnapshotVersion.MIN) ||
	                        (authoritativeUpdates.has(doc.key) &&
	                            !existingDoc.hasPendingWrites) ||
	                        doc.version.compareTo(existingDoc.version) >= 0) {
	                        documentBuffer.addEntry(doc);
	                    }
	                    else {
	                        debug(LOG_TAG$3, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);
	                    }
	                }));
	                if (remoteEvent.resolvedLimboDocuments.has(key)) {
	                    promises.push(_this.persistence.referenceDelegate.updateLimboDocument(txn, key));
	                }
	            });
	            // HACK: The only reason we allow a null snapshot version is so that we
	            // can synthesize remote events when we get permission denied errors while
	            // trying to resolve the state of a locally cached document that is in
	            // limbo.
	            var remoteVersion = remoteEvent.snapshotVersion;
	            if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {
	                var updateRemoteVersion = _this.queryCache
	                    .getLastRemoteSnapshotVersion(txn)
	                    .next(function (lastRemoteVersion) {
	                    assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' +
	                        remoteVersion +
	                        ' < ' +
	                        lastRemoteVersion);
	                    return _this.queryCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
	                });
	                promises.push(updateRemoteVersion);
	            }
	            return PersistencePromise.waitFor(promises)
	                .next(function () { return documentBuffer.apply(txn); })
	                .next(function () {
	                return _this.localDocuments.getDocuments(txn, changedDocKeys);
	            });
	        });
	    };
	    /**
	     * Returns true if the newQueryData should be persisted during an update of
	     * an active target. QueryData should always be persisted when a target is
	     * being released and should not call this function.
	     *
	     * While the target is active, QueryData updates can be omitted when nothing
	     * about the target has changed except metadata like the resume token or
	     * snapshot version. Occasionally it's worth the extra write to prevent these
	     * values from getting too stale after a crash, but this doesn't have to be
	     * too frequent.
	     */
	    LocalStore.shouldPersistQueryData = function (oldQueryData, newQueryData, change) {
	        // Avoid clearing any existing value
	        if (newQueryData.resumeToken.length === 0)
	            return false;
	        // Any resume token is interesting if there isn't one already.
	        if (oldQueryData.resumeToken.length === 0)
	            return true;
	        // Don't allow resume token changes to be buffered indefinitely. This
	        // allows us to be reasonably up-to-date after a crash and avoids needing
	        // to loop over all active queries on shutdown. Especially in the browser
	        // we may not get time to do anything interesting while the current tab is
	        // closing.
	        var timeDelta = newQueryData.snapshotVersion.toMicroseconds() -
	            oldQueryData.snapshotVersion.toMicroseconds();
	        if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS)
	            return true;
	        // Otherwise if the only thing that has changed about a target is its resume
	        // token it's not worth persisting. Note that the RemoteStore keeps an
	        // in-memory view of the currently active targets which includes the current
	        // resume token, so stream failure or user changes will still use an
	        // up-to-date resume token regardless of what we do here.
	        var changes = change.addedDocuments.size +
	            change.modifiedDocuments.size +
	            change.removedDocuments.size;
	        return changes > 0;
	    };
	    /**
	     * Notify local store of the changed views to locally pin documents.
	     */
	    LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {
	        var _this = this;
	        return this.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', function (txn) {
	            return PersistencePromise.forEach(viewChanges, function (viewChange) {
	                _this.localViewReferences.addReferences(viewChange.addedKeys, viewChange.targetId);
	                _this.localViewReferences.removeReferences(viewChange.removedKeys, viewChange.targetId);
	                return PersistencePromise.forEach(viewChange.removedKeys, function (key) {
	                    return _this.persistence.referenceDelegate.removeReference(txn, key);
	                });
	            });
	        });
	    };
	    /**
	     * Gets the mutation batch after the passed in batchId in the mutation queue
	     * or null if empty.
	     * @param afterBatchId If provided, the batch to search after.
	     * @returns The next mutation or null if there wasn't one.
	     */
	    LocalStore.prototype.nextMutationBatch = function (afterBatchId) {
	        var _this = this;
	        return this.persistence.runTransaction('Get next mutation batch', 'readonly', function (txn) {
	            if (afterBatchId === undefined) {
	                afterBatchId = BATCHID_UNKNOWN;
	            }
	            return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
	        });
	    };
	    /**
	     * Read the current value of a Document with a given key or null if not
	     * found - used for testing.
	     */
	    LocalStore.prototype.readDocument = function (key) {
	        var _this = this;
	        return this.persistence.runTransaction('read document', 'readonly', function (txn) {
	            return _this.localDocuments.getDocument(txn, key);
	        });
	    };
	    /**
	     * Assigns the given query an internal ID so that its results can be pinned so
	     * they don't get GC'd. A query must be allocated in the local store before
	     * the store can be used to manage its view.
	     */
	    LocalStore.prototype.allocateQuery = function (query) {
	        var _this = this;
	        return this.persistence.runTransaction('Allocate query', 'readwrite', function (txn) {
	            var queryData;
	            return _this.queryCache
	                .getQueryData(txn, query)
	                .next(function (cached) {
	                if (cached) {
	                    // This query has been listened to previously, so reuse the
	                    // previous targetID.
	                    // TODO(mcg): freshen last accessed date?
	                    queryData = cached;
	                    return PersistencePromise.resolve();
	                }
	                else {
	                    return _this.queryCache.allocateTargetId(txn).next(function (targetId) {
	                        queryData = new QueryData(query, targetId, QueryPurpose.Listen, txn.currentSequenceNumber);
	                        return _this.queryCache.addQueryData(txn, queryData);
	                    });
	                }
	            })
	                .next(function () {
	                assert(!_this.queryDataByTarget[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);
	                _this.queryDataByTarget[queryData.targetId] = queryData;
	                return queryData;
	            });
	        });
	    };
	    /**
	     * Unpin all the documents associated with the given query. If
	     * `keepPersistedQueryData` is set to false and Eager GC enabled, the method
	     * directly removes the associated query data from the query cache.
	     */
	    // PORTING NOTE: `keepPersistedQueryData` is multi-tab only.
	    LocalStore.prototype.releaseQuery = function (query, keepPersistedQueryData) {
	        var _this = this;
	        var mode = keepPersistedQueryData ? 'readwrite' : 'readwrite-primary';
	        return this.persistence.runTransaction('Release query', mode, function (txn) {
	            return _this.queryCache
	                .getQueryData(txn, query)
	                .next(function (queryData) {
	                assert(queryData != null, 'Tried to release nonexistent query: ' + query);
	                var targetId = queryData.targetId;
	                var cachedQueryData = _this.queryDataByTarget[targetId];
	                // References for documents sent via Watch are automatically removed when we delete a
	                // query's target data from the reference delegate. Since this does not remove references
	                // for locally mutated documents, we have to remove the target associations for these
	                // documents manually.
	                var removed = _this.localViewReferences.removeReferencesForId(targetId);
	                delete _this.queryDataByTarget[targetId];
	                if (!keepPersistedQueryData) {
	                    return PersistencePromise.forEach(removed, function (key) {
	                        return _this.persistence.referenceDelegate.removeReference(txn, key);
	                    }).next(function () {
	                        return _this.persistence.referenceDelegate.removeTarget(txn, cachedQueryData);
	                    });
	                }
	                else {
	                    return PersistencePromise.resolve();
	                }
	            });
	        });
	    };
	    /**
	     * Runs the specified query against all the documents in the local store and
	     * returns the results.
	     */
	    LocalStore.prototype.executeQuery = function (query) {
	        var _this = this;
	        return this.persistence.runTransaction('Execute query', 'readonly', function (txn) {
	            return _this.localDocuments.getDocumentsMatchingQuery(txn, query);
	        });
	    };
	    /**
	     * Returns the keys of the documents that are associated with the given
	     * target id in the remote table.
	     */
	    LocalStore.prototype.remoteDocumentKeys = function (targetId) {
	        var _this = this;
	        return this.persistence.runTransaction('Remote document keys', 'readonly', function (txn) {
	            return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);
	        });
	    };
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.getActiveClients = function () {
	        return this.persistence.getActiveClients();
	    };
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.removeCachedMutationBatchMetadata = function (batchId) {
	        this.mutationQueue.removeCachedMutationKeys(batchId);
	    };
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.setNetworkEnabled = function (networkEnabled) {
	        this.persistence.setNetworkEnabled(networkEnabled);
	    };
	    LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {
	        var _this = this;
	        var batch = batchResult.batch;
	        var docKeys = batch.keys();
	        var promiseChain = PersistencePromise.resolve();
	        docKeys.forEach(function (docKey) {
	            promiseChain = promiseChain
	                .next(function () {
	                return documentBuffer.getEntry(txn, docKey);
	            })
	                .next(function (remoteDoc) {
	                var doc = remoteDoc;
	                var ackVersion = batchResult.docVersions.get(docKey);
	                assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');
	                if (!doc || doc.version.compareTo(ackVersion) < 0) {
	                    doc = batch.applyToRemoteDocument(docKey, doc, batchResult);
	                    if (!doc) {
	                        assert(!remoteDoc, 'Mutation batch ' +
	                            batch +
	                            ' applied to document ' +
	                            remoteDoc +
	                            ' resulted in null');
	                    }
	                    else {
	                        documentBuffer.addEntry(doc);
	                    }
	                }
	            });
	        });
	        return promiseChain.next(function () {
	            return _this.mutationQueue.removeMutationBatch(txn, batch);
	        });
	    };
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.getQueryForTarget = function (targetId) {
	        var _this = this;
	        if (this.queryDataByTarget[targetId]) {
	            return Promise.resolve(this.queryDataByTarget[targetId].query);
	        }
	        else {
	            return this.persistence.runTransaction('Get query data', 'readonly', function (txn) {
	                return _this.queryCache
	                    .getQueryDataForTarget(txn, targetId)
	                    .next(function (queryData) { return (queryData ? queryData.query : null); });
	            });
	        }
	    };
	    // PORTING NOTE: Multi-tab only.
	    LocalStore.prototype.getNewDocumentChanges = function () {
	        var _this = this;
	        return this.persistence.runTransaction('Get new document changes', 'readonly', function (txn) {
	            return _this.remoteDocuments.getNewDocumentChanges(txn);
	        });
	    };
	    /**
	     * The maximum time to leave a resume token buffered without writing it out.
	     * This value is arbitrary: it's long enough to avoid several writes
	     * (possibly indefinitely if updates come more frequently than this) but
	     * short enough that restarting after crashing will still have a pretty
	     * recent resume token.
	     */
	    LocalStore.RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
	    return LocalStore;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var MemoryMutationQueue = /** @class */ (function () {
	    function MemoryMutationQueue(referenceDelegate) {
	        this.referenceDelegate = referenceDelegate;
	        /**
	         * The set of all mutations that have been sent but not yet been applied to
	         * the backend.
	         */
	        this.mutationQueue = [];
	        /** Next value to use when assigning sequential IDs to each mutation batch. */
	        this.nextBatchId = 1;
	        /** The highest acknowledged mutation in the queue. */
	        this.highestAcknowledgedBatchId = BATCHID_UNKNOWN;
	        /** The last received stream token from the server, used to acknowledge which
	         * responses the client has processed. Stream tokens are opaque checkpoint
	         * markers whose only real value is their inclusion in the next request.
	         */
	        this.lastStreamToken = emptyByteString();
	        /** An ordered mapping between documents and the mutations batch IDs. */
	        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
	    }
	    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {
	        return PersistencePromise.resolve(this.mutationQueue.length === 0);
	    };
	    MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
	        var batchId = batch.batchId;
	        assert(batchId > this.highestAcknowledgedBatchId, 'Mutation batchIDs must be acknowledged in order');
	        var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');
	        assert(batchIndex === 0, 'Can only acknowledge the first batch in the mutation queue');
	        // Verify that the batch in the queue is the one to be acknowledged.
	        var check = this.mutationQueue[batchIndex];
	        assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' +
	            batchId +
	            ', got batch ' +
	            check.batchId);
	        this.highestAcknowledgedBatchId = batchId;
	        this.lastStreamToken = streamToken;
	        return PersistencePromise.resolve();
	    };
	    MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {
	        return PersistencePromise.resolve(this.lastStreamToken);
	    };
	    MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
	        this.lastStreamToken = streamToken;
	        return PersistencePromise.resolve();
	    };
	    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, mutations) {
	        assert(mutations.length !== 0, 'Mutation batches should not be empty');
	        var batchId = this.nextBatchId;
	        this.nextBatchId++;
	        if (this.mutationQueue.length > 0) {
	            var prior = this.mutationQueue[this.mutationQueue.length - 1];
	            assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');
	        }
	        var batch = new MutationBatch(batchId, localWriteTime, mutations);
	        this.mutationQueue.push(batch);
	        // Track references by document key.
	        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
	            var mutation = mutations_1[_i];
	            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
	        }
	        return PersistencePromise.resolve(batch);
	    };
	    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
	        return PersistencePromise.resolve(this.findMutationBatch(batchId));
	    };
	    MemoryMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
	        var mutationBatch = this.findMutationBatch(batchId);
	        assert(mutationBatch != null, 'Failed to find local mutation batch.');
	        return PersistencePromise.resolve(mutationBatch.keys());
	    };
	    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
	        // All batches with batchId <= this.highestAcknowledgedBatchId have been
	        // acknowledged so the first unacknowledged batch after batchID will have a
	        // batchID larger than both of these values.
	        var nextBatchId = Math.max(batchId, this.highestAcknowledgedBatchId) + 1;
	        // The requested batchId may still be out of range so normalize it to the
	        // start of the queue.
	        var rawIndex = this.indexOfBatchId(nextBatchId);
	        var index = rawIndex < 0 ? 0 : rawIndex;
	        return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);
	    };
	    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {
	        return PersistencePromise.resolve(this.mutationQueue.slice());
	    };
	    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
	        var _this = this;
	        var start = new DocReference(documentKey, 0);
	        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
	        var result = [];
	        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
	            assert(documentKey.isEqual(ref.key), "Should only iterate over a single key's batches");
	            var batch = _this.findMutationBatch(ref.targetOrBatchId);
	            assert(batch !== null, 'Batches in the index must exist in the main table');
	            result.push(batch);
	        });
	        return PersistencePromise.resolve(result);
	    };
	    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
	        var _this = this;
	        var uniqueBatchIDs = new SortedSet(primitiveComparator);
	        documentKeys.forEach(function (documentKey) {
	            var start = new DocReference(documentKey, 0);
	            var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
	            _this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
	                assert(documentKey.isEqual(ref.key), "For each key, should only iterate over a single key's batches");
	                uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
	            });
	        });
	        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
	    };
	    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
	        // Use the query path as a prefix for testing if a document matches the
	        // query.
	        var prefix = query.path;
	        var immediateChildrenPathLength = prefix.length + 1;
	        // Construct a document reference for actually scanning the index. Unlike
	        // the prefix the document key in this reference must have an even number of
	        // segments. The empty segment can be used a suffix of the query path
	        // because it precedes all other segments in an ordered traversal.
	        var startPath = prefix;
	        if (!DocumentKey.isDocumentKey(startPath)) {
	            startPath = startPath.child('');
	        }
	        var start = new DocReference(new DocumentKey(startPath), 0);
	        // Find unique batchIDs referenced by all documents potentially matching the
	        // query.
	        var uniqueBatchIDs = new SortedSet(primitiveComparator);
	        this.batchesByDocumentKey.forEachWhile(function (ref) {
	            var rowKeyPath = ref.key.path;
	            if (!prefix.isPrefixOf(rowKeyPath)) {
	                return false;
	            }
	            else {
	                // Rows with document keys more than one segment longer than the query
	                // path can't be matches. For example, a query on 'rooms' can't match
	                // the document /rooms/abc/messages/xyx.
	                // TODO(mcg): we'll need a different scanner when we implement
	                // ancestor queries.
	                if (rowKeyPath.length === immediateChildrenPathLength) {
	                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
	                }
	                return true;
	            }
	        }, start);
	        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
	    };
	    MemoryMutationQueue.prototype.findMutationBatches = function (batchIDs) {
	        var _this = this;
	        // Construct an array of matching batches, sorted by batchID to ensure that
	        // multiple mutations affecting the same document key are applied in order.
	        var result = [];
	        batchIDs.forEach(function (batchId) {
	            var batch = _this.findMutationBatch(batchId);
	            if (batch !== null) {
	                result.push(batch);
	            }
	        });
	        return result;
	    };
	    MemoryMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
	        var _this = this;
	        // Find the position of the first batch for removal. This need not be the
	        // first entry in the queue.
	        var batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');
	        assert(batchIndex === 0, 'Can only remove the first entry of the mutation queue');
	        this.mutationQueue.shift();
	        var references = this.batchesByDocumentKey;
	        return PersistencePromise.forEach(batch.mutations, function (mutation) {
	            var ref = new DocReference(mutation.key, batch.batchId);
	            references = references.delete(ref);
	            return _this.referenceDelegate.removeMutationReference(transaction, mutation.key);
	        }).next(function () {
	            _this.batchesByDocumentKey = references;
	        });
	    };
	    MemoryMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {
	        // No-op since the memory mutation queue does not maintain a separate cache.
	    };
	    MemoryMutationQueue.prototype.containsKey = function (txn, key) {
	        var ref = new DocReference(key, 0);
	        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
	        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
	    };
	    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {
	        if (this.mutationQueue.length === 0) {
	            assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');
	        }
	        return PersistencePromise.resolve();
	    };
	    /**
	     * Finds the index of the given batchId in the mutation queue and asserts that
	     * the resulting index is within the bounds of the queue.
	     *
	     * @param batchId The batchId to search for
	     * @param action A description of what the caller is doing, phrased in passive
	     * form (e.g. "acknowledged" in a routine that acknowledges batches).
	     */
	    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {
	        var index = this.indexOfBatchId(batchId);
	        assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);
	        return index;
	    };
	    /**
	     * Finds the index of the given batchId in the mutation queue. This operation
	     * is O(1).
	     *
	     * @return The computed index of the batch with the given batchId, based on
	     * the state of the queue. Note this index can be negative if the requested
	     * batchId has already been remvoed from the queue or past the end of the
	     * queue if the batchId is larger than the last added batch.
	     */
	    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {
	        if (this.mutationQueue.length === 0) {
	            // As an index this is past the end of the queue
	            return 0;
	        }
	        // Examine the front of the queue to figure out the difference between the
	        // batchId and indexes in the array. Note that since the queue is ordered
	        // by batchId, if the first batch has a larger batchId then the requested
	        // batchId doesn't exist in the queue.
	        var firstBatchId = this.mutationQueue[0].batchId;
	        return batchId - firstBatchId;
	    };
	    /**
	     * A version of lookupMutationBatch that doesn't return a promise, this makes
	     * other functions that uses this code easier to read and more efficent.
	     */
	    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {
	        var index = this.indexOfBatchId(batchId);
	        if (index < 0 || index >= this.mutationQueue.length) {
	            return null;
	        }
	        var batch = this.mutationQueue[index];
	        assert(batch.batchId === batchId, 'If found batch must match');
	        return batch;
	    };
	    return MemoryMutationQueue;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var MemoryQueryCache = /** @class */ (function () {
	    function MemoryQueryCache(persistence) {
	        this.persistence = persistence;
	        /**
	         * Maps a query to the data about that query
	         */
	        this.queries = new ObjectMap(function (q) { return q.canonicalId(); });
	        /** The last received snapshot version. */
	        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;
	        /** The highest numbered target ID encountered. */
	        this.highestTargetId = 0;
	        /** The highest sequence number encountered. */
	        this.highestSequenceNumber = 0;
	        /**
	         * A ordered bidirectional mapping between documents and the remote target
	         * IDs.
	         */
	        this.references = new ReferenceSet();
	        this.targetCount = 0;
	        this.targetIdGenerator = TargetIdGenerator.forQueryCache();
	    }
	    MemoryQueryCache.prototype.getTargetCount = function (txn) {
	        return PersistencePromise.resolve(this.targetCount);
	    };
	    MemoryQueryCache.prototype.forEachTarget = function (txn, f) {
	        this.queries.forEach(function (_, queryData) { return f(queryData); });
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
	        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
	    };
	    MemoryQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
	        return PersistencePromise.resolve(this.highestSequenceNumber);
	    };
	    MemoryQueryCache.prototype.allocateTargetId = function (transaction) {
	        var nextTargetId = this.targetIdGenerator.after(this.highestTargetId);
	        this.highestTargetId = nextTargetId;
	        return PersistencePromise.resolve(nextTargetId);
	    };
	    MemoryQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
	        if (lastRemoteSnapshotVersion) {
	            this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
	        }
	        if (highestListenSequenceNumber > this.highestSequenceNumber) {
	            this.highestSequenceNumber = highestListenSequenceNumber;
	        }
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.saveQueryData = function (queryData) {
	        this.queries.set(queryData.query, queryData);
	        var targetId = queryData.targetId;
	        if (targetId > this.highestTargetId) {
	            this.highestTargetId = targetId;
	        }
	        if (queryData.sequenceNumber > this.highestSequenceNumber) {
	            this.highestSequenceNumber = queryData.sequenceNumber;
	        }
	    };
	    MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {
	        assert(!this.queries.has(queryData.query), 'Adding a query that already exists');
	        this.saveQueryData(queryData);
	        this.targetCount += 1;
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.updateQueryData = function (transaction, queryData) {
	        assert(this.queries.has(queryData.query), 'Updating a non-existent query');
	        this.saveQueryData(queryData);
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {
	        assert(this.targetCount > 0, 'Removing a target from an empty cache');
	        assert(this.queries.has(queryData.query), 'Removing a non-existent target from the cache');
	        this.queries.delete(queryData.query);
	        this.references.removeReferencesForId(queryData.targetId);
	        this.targetCount -= 1;
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.removeTargets = function (transaction, upperBound, activeTargetIds) {
	        var _this = this;
	        var count = 0;
	        var removals = [];
	        this.queries.forEach(function (key, queryData) {
	            if (queryData.sequenceNumber <= upperBound &&
	                !activeTargetIds[queryData.targetId]) {
	                _this.queries.delete(key);
	                removals.push(_this.removeMatchingKeysForTargetId(transaction, queryData.targetId));
	                count++;
	            }
	        });
	        return PersistencePromise.waitFor(removals).next(function () { return count; });
	    };
	    MemoryQueryCache.prototype.getQueryCount = function (transaction) {
	        return PersistencePromise.resolve(this.targetCount);
	    };
	    MemoryQueryCache.prototype.getQueryData = function (transaction, query) {
	        var queryData = this.queries.get(query) || null;
	        return PersistencePromise.resolve(queryData);
	    };
	    MemoryQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
	        // This method is only needed for multi-tab and we can't implement it
	        // efficiently without additional data structures.
	        return fail('Not yet implemented.');
	    };
	    MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
	        this.references.addReferences(keys, targetId);
	        var referenceDelegate = this.persistence.referenceDelegate;
	        var promises = [];
	        if (referenceDelegate) {
	            keys.forEach(function (key) {
	                promises.push(referenceDelegate.addReference(txn, key));
	            });
	        }
	        return PersistencePromise.waitFor(promises);
	    };
	    MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
	        this.references.removeReferences(keys, targetId);
	        var referenceDelegate = this.persistence.referenceDelegate;
	        var promises = [];
	        if (referenceDelegate) {
	            keys.forEach(function (key) {
	                promises.push(referenceDelegate.removeReference(txn, key));
	            });
	        }
	        return PersistencePromise.waitFor(promises);
	    };
	    MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
	        this.references.removeReferencesForId(targetId);
	        return PersistencePromise.resolve();
	    };
	    MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
	        var matchingKeys = this.references.referencesForId(targetId);
	        return PersistencePromise.resolve(matchingKeys);
	    };
	    MemoryQueryCache.prototype.containsKey = function (txn, key) {
	        return PersistencePromise.resolve(this.references.containsKey(key));
	    };
	    return MemoryQueryCache;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function documentSizeMap() {
	    return new SortedMap(DocumentKey.comparator);
	}
	var MemoryRemoteDocumentCache = /** @class */ (function () {
	    /**
	     * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
	     * return 0 to avoid unnecessarily doing the work of calculating the size.
	     */
	    function MemoryRemoteDocumentCache(sizer) {
	        this.sizer = sizer;
	        this.docs = documentSizeMap();
	        this.newDocumentChanges = documentKeySet();
	        this.size = 0;
	    }
	    /**
	     * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
	     */
	    MemoryRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
	        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
	            var entry = entries_1[_i];
	            var key = entry.maybeDocument.key;
	            this.docs = this.docs.insert(key, entry);
	            this.newDocumentChanges = this.newDocumentChanges.add(key);
	        }
	        this.size += sizeDelta;
	        return PersistencePromise.resolve();
	    };
	    /**
	     * Removes the specified entry from the cache and updates the size as appropriate.
	     */
	    MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
	        var entry = this.docs.get(documentKey);
	        if (entry) {
	            this.docs = this.docs.remove(documentKey);
	            this.size -= entry.size;
	            return PersistencePromise.resolve(entry.size);
	        }
	        else {
	            return PersistencePromise.resolve(0);
	        }
	    };
	    MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
	        var entry = this.docs.get(documentKey);
	        return PersistencePromise.resolve(entry ? entry.maybeDocument : null);
	    };
	    /**
	     * Looks up an entry in the cache.
	     *
	     * @param documentKey The key of the entry to look up.
	     * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
	     */
	    MemoryRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
	        return PersistencePromise.resolve(this.docs.get(documentKey));
	    };
	    MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
	        var results = documentMap();
	        // Documents are ordered by key, so we can use a prefix scan to narrow down
	        // the documents we need to match the query against.
	        var prefix = new DocumentKey(query.path.child(''));
	        var iterator = this.docs.getIteratorFrom(prefix);
	        while (iterator.hasNext()) {
	            var _a = iterator.getNext(), key = _a.key, maybeDocument = _a.value.maybeDocument;
	            if (!query.path.isPrefixOf(key.path)) {
	                break;
	            }
	            if (maybeDocument instanceof Document && query.matches(maybeDocument)) {
	                results = results.insert(maybeDocument.key, maybeDocument);
	            }
	        }
	        return PersistencePromise.resolve(results);
	    };
	    MemoryRemoteDocumentCache.prototype.forEachDocumentKey = function (transaction, f) {
	        return PersistencePromise.forEach(this.docs, function (key) { return f(key); });
	    };
	    MemoryRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
	        var _this = this;
	        var changedDocs = maybeDocumentMap();
	        this.newDocumentChanges.forEach(function (key) {
	            var entry = _this.docs.get(key);
	            var changedDoc = entry
	                ? entry.maybeDocument
	                : new NoDocument(key, SnapshotVersion.forDeletedDoc());
	            changedDocs = changedDocs.insert(key, changedDoc);
	        });
	        this.newDocumentChanges = documentKeySet();
	        return PersistencePromise.resolve(changedDocs);
	    };
	    MemoryRemoteDocumentCache.prototype.newChangeBuffer = function () {
	        return new MemoryRemoteDocumentChangeBuffer(this.sizer, this);
	    };
	    MemoryRemoteDocumentCache.prototype.getSize = function (txn) {
	        return PersistencePromise.resolve(this.size);
	    };
	    return MemoryRemoteDocumentCache;
	}());
	/**
	 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
	 */
	var MemoryRemoteDocumentChangeBuffer = /** @class */ (function (_super) {
	    tslib_1.__extends(MemoryRemoteDocumentChangeBuffer, _super);
	    function MemoryRemoteDocumentChangeBuffer(sizer, documentCache) {
	        var _this = _super.call(this) || this;
	        _this.sizer = sizer;
	        _this.documentCache = documentCache;
	        return _this;
	    }
	    MemoryRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
	        var _this = this;
	        var changes = this.assertChanges();
	        var delta = 0;
	        var docs = [];
	        changes.forEach(function (key, maybeDocument) {
	            var previousSize = _this.documentSizes.get(key);
	            assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");
	            var size = _this.sizer(maybeDocument);
	            delta += size - previousSize;
	            docs.push({ maybeDocument: maybeDocument, size: size });
	        });
	        return this.documentCache.addEntries(transaction, docs, delta);
	    };
	    MemoryRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
	        return this.documentCache.getSizedEntry(transaction, documentKey);
	    };
	    return MemoryRemoteDocumentChangeBuffer;
	}(RemoteDocumentChangeBuffer));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$4 = 'MemoryPersistence';
	/**
	 * A memory-backed instance of Persistence. Data is stored only in RAM and
	 * not persisted across sessions.
	 */
	var MemoryPersistence = /** @class */ (function () {
	    function MemoryPersistence(clientId, isEager, serializer) {
	        var _this = this;
	        this.clientId = clientId;
	        /**
	         * Note that these are retained here to make it easier to write tests
	         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests
	         * can create a new LocalStore wrapping this Persistence instance and this
	         * will make the in-memory persistence layer behave as if it were actually
	         * persisting values.
	         */
	        this.mutationQueues = {};
	        this.listenSequence = new ListenSequence(0);
	        this._started = false;
	        this._started = true;
	        if (isEager) {
	            this.referenceDelegate = new MemoryEagerDelegate(this);
	        }
	        else {
	            this.referenceDelegate = new MemoryLruDelegate(this, new LocalSerializer(serializer));
	        }
	        this.queryCache = new MemoryQueryCache(this);
	        var sizer = function (doc) {
	            return _this.referenceDelegate.documentSize(doc);
	        };
	        this.remoteDocumentCache = new MemoryRemoteDocumentCache(sizer);
	    }
	    MemoryPersistence.createLruPersistence = function (clientId, serializer) {
	        return new MemoryPersistence(clientId, /* isEager= */ false, serializer);
	    };
	    MemoryPersistence.createEagerPersistence = function (clientId, serializer) {
	        return new MemoryPersistence(clientId, /* isEager= */ true, serializer);
	    };
	    MemoryPersistence.prototype.shutdown = function (deleteData) {
	        // No durable state to ensure is closed on shutdown.
	        this._started = false;
	        return Promise.resolve();
	    };
	    Object.defineProperty(MemoryPersistence.prototype, "started", {
	        get: function () {
	            return this._started;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MemoryPersistence.prototype.getActiveClients = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, [this.clientId]];
	            });
	        });
	    };
	    MemoryPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
	        // All clients using memory persistence act as primary.
	        return primaryStateListener(true);
	    };
	    MemoryPersistence.prototype.setNetworkEnabled = function (networkEnabled) {
	        // No op.
	    };
	    MemoryPersistence.prototype.getMutationQueue = function (user) {
	        var queue = this.mutationQueues[user.toKey()];
	        if (!queue) {
	            queue = new MemoryMutationQueue(this.referenceDelegate);
	            this.mutationQueues[user.toKey()] = queue;
	        }
	        return queue;
	    };
	    MemoryPersistence.prototype.getQueryCache = function () {
	        return this.queryCache;
	    };
	    MemoryPersistence.prototype.getRemoteDocumentCache = function () {
	        return this.remoteDocumentCache;
	    };
	    MemoryPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
	        var _this = this;
	        debug(LOG_TAG$4, 'Starting transaction:', action);
	        var txn = new MemoryTransaction(this.listenSequence.next());
	        this.referenceDelegate.onTransactionStarted();
	        return transactionOperation(txn)
	            .next(function (result) {
	            return _this.referenceDelegate
	                .onTransactionCommitted(txn)
	                .next(function () { return result; });
	        })
	            .toPromise();
	    };
	    MemoryPersistence.prototype.mutationQueuesContainKey = function (transaction, key) {
	        return PersistencePromise.or(values(this.mutationQueues)
	            .map(function (queue) { return function () { return queue.containsKey(transaction, key); }; }));
	    };
	    return MemoryPersistence;
	}());
	/**
	 * Memory persistence is not actually transactional, but future implementations
	 * may have transaction-scoped state.
	 */
	var MemoryTransaction = /** @class */ (function () {
	    function MemoryTransaction(currentSequenceNumber) {
	        this.currentSequenceNumber = currentSequenceNumber;
	    }
	    return MemoryTransaction;
	}());
	var MemoryEagerDelegate = /** @class */ (function () {
	    function MemoryEagerDelegate(persistence) {
	        this.persistence = persistence;
	    }
	    MemoryEagerDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
	        this.inMemoryPins = inMemoryPins;
	    };
	    MemoryEagerDelegate.prototype.addReference = function (txn, key) {
	        this.orphanedDocuments.delete(key);
	        return PersistencePromise.resolve();
	    };
	    MemoryEagerDelegate.prototype.removeReference = function (txn, key) {
	        this.orphanedDocuments.add(key);
	        return PersistencePromise.resolve();
	    };
	    MemoryEagerDelegate.prototype.removeMutationReference = function (txn, key) {
	        this.orphanedDocuments.add(key);
	        return PersistencePromise.resolve();
	    };
	    MemoryEagerDelegate.prototype.removeTarget = function (txn, queryData) {
	        var _this = this;
	        var cache = this.persistence.getQueryCache();
	        return cache
	            .getMatchingKeysForTargetId(txn, queryData.targetId)
	            .next(function (keys) {
	            keys.forEach(function (key) { return _this.orphanedDocuments.add(key); });
	        })
	            .next(function () { return cache.removeQueryData(txn, queryData); });
	    };
	    MemoryEagerDelegate.prototype.onTransactionStarted = function () {
	        this.orphanedDocuments = new Set();
	    };
	    MemoryEagerDelegate.prototype.onTransactionCommitted = function (txn) {
	        var _this = this;
	        var cache = this.persistence.getRemoteDocumentCache();
	        return PersistencePromise.forEach(this.orphanedDocuments, function (key) {
	            return _this.isReferenced(txn, key).next(function (isReferenced) {
	                if (!isReferenced) {
	                    // Since this is the eager delegate and memory persistence,
	                    // we don't care about the size of documents. We don't track
	                    // the size of the cache for eager GC.
	                    return cache.removeEntry(txn, key).next(function () { });
	                }
	                return PersistencePromise.resolve();
	            });
	        });
	    };
	    MemoryEagerDelegate.prototype.updateLimboDocument = function (txn, key) {
	        var _this = this;
	        return this.isReferenced(txn, key).next(function (isReferenced) {
	            if (isReferenced) {
	                _this.orphanedDocuments.delete(key);
	            }
	            else {
	                _this.orphanedDocuments.add(key);
	            }
	        });
	    };
	    MemoryEagerDelegate.prototype.documentSize = function (doc) {
	        // For eager GC, we don't care about the document size, there are no size thresholds.
	        return 0;
	    };
	    MemoryEagerDelegate.prototype.isReferenced = function (txn, key) {
	        var _this = this;
	        return PersistencePromise.or([
	            function () { return _this.persistence.getQueryCache().containsKey(txn, key); },
	            function () { return _this.persistence.mutationQueuesContainKey(txn, key); },
	            function () { return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key)); }
	        ]);
	    };
	    return MemoryEagerDelegate;
	}());
	var MemoryLruDelegate = /** @class */ (function () {
	    function MemoryLruDelegate(persistence, serializer) {
	        this.persistence = persistence;
	        this.serializer = serializer;
	        this.orphanedSequenceNumbers = new ObjectMap(function (k) { return encode(k.path); });
	        this.garbageCollector = new LruGarbageCollector(this);
	    }
	    // No-ops, present so memory persistence doesn't have to care which delegate
	    // it has.
	    MemoryLruDelegate.prototype.onTransactionStarted = function () { };
	    MemoryLruDelegate.prototype.onTransactionCommitted = function (txn) {
	        return PersistencePromise.resolve();
	    };
	    MemoryLruDelegate.prototype.forEachTarget = function (txn, f) {
	        return this.persistence.getQueryCache().forEachTarget(txn, f);
	    };
	    MemoryLruDelegate.prototype.getSequenceNumberCount = function (txn) {
	        var docCountPromise = this.orphanedDocumentCount(txn);
	        var targetCountPromise = this.persistence
	            .getQueryCache()
	            .getTargetCount(txn);
	        return targetCountPromise.next(function (targetCount) {
	            return docCountPromise.next(function (docCount) { return targetCount + docCount; });
	        });
	    };
	    MemoryLruDelegate.prototype.orphanedDocumentCount = function (txn) {
	        var orphanedCount = 0;
	        return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
	            orphanedCount++;
	        }).next(function () { return orphanedCount; });
	    };
	    MemoryLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
	        var _this = this;
	        return PersistencePromise.forEach(this.orphanedSequenceNumbers, function (key, sequenceNumber) {
	            // Pass in the exact sequence number as the upper bound so we know it won't be pinned by
	            // being too recent.
	            return _this.isPinned(txn, key, sequenceNumber).next(function (isPinned) {
	                if (!isPinned) {
	                    return f(sequenceNumber);
	                }
	                else {
	                    return PersistencePromise.resolve();
	                }
	            });
	        });
	    };
	    MemoryLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
	        this.inMemoryPins = inMemoryPins;
	    };
	    MemoryLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
	        return this.persistence
	            .getQueryCache()
	            .removeTargets(txn, upperBound, activeTargetIds);
	    };
	    MemoryLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
	        var _this = this;
	        var count = 0;
	        var cache = this.persistence.getRemoteDocumentCache();
	        var p = cache.forEachDocumentKey(txn, function (key) {
	            return _this.isPinned(txn, key, upperBound).next(function (isPinned) {
	                if (isPinned) {
	                    return PersistencePromise.resolve();
	                }
	                else {
	                    count++;
	                    // The memory remote document cache does its own byte
	                    // accounting on removal. This is ok because updating the size
	                    // for memory persistence does not incur IO.
	                    return cache.removeEntry(txn, key).next();
	                }
	            });
	        });
	        return p.next(function () { return count; });
	    };
	    MemoryLruDelegate.prototype.removeMutationReference = function (txn, key) {
	        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
	        return PersistencePromise.resolve();
	    };
	    MemoryLruDelegate.prototype.removeTarget = function (txn, queryData) {
	        var updated = queryData.copy({
	            sequenceNumber: txn.currentSequenceNumber
	        });
	        return this.persistence.getQueryCache().updateQueryData(txn, updated);
	    };
	    MemoryLruDelegate.prototype.addReference = function (txn, key) {
	        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
	        return PersistencePromise.resolve();
	    };
	    MemoryLruDelegate.prototype.removeReference = function (txn, key) {
	        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
	        return PersistencePromise.resolve();
	    };
	    MemoryLruDelegate.prototype.updateLimboDocument = function (txn, key) {
	        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
	        return PersistencePromise.resolve();
	    };
	    MemoryLruDelegate.prototype.documentSize = function (maybeDoc) {
	        var remoteDocument = this.serializer.toDbRemoteDocument(maybeDoc);
	        var value;
	        if (remoteDocument.document) {
	            value = remoteDocument.document;
	        }
	        else if (remoteDocument.unknownDocument) {
	            value = remoteDocument.unknownDocument;
	        }
	        else if (remoteDocument.noDocument) {
	            value = remoteDocument.noDocument;
	        }
	        else {
	            throw fail('Unknown remote document type');
	        }
	        return JSON.stringify(value).length;
	    };
	    MemoryLruDelegate.prototype.isPinned = function (txn, key, upperBound) {
	        var _this = this;
	        return PersistencePromise.or([
	            function () { return _this.persistence.mutationQueuesContainKey(txn, key); },
	            function () { return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key)); },
	            function () { return _this.persistence.getQueryCache().containsKey(txn, key); },
	            function () {
	                var orphanedAt = _this.orphanedSequenceNumbers.get(key);
	                return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);
	            }
	        ]);
	    };
	    return MemoryLruDelegate;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$5 = 'ExponentialBackoff';
	/**
	 * A helper for running delayed tasks following an exponential backoff curve
	 * between attempts.
	 *
	 * Each delay is made up of a "base" delay which follows the exponential
	 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
	 * base delay. This prevents clients from accidentally synchronizing their
	 * delays causing spikes of load to the backend.
	 */
	var ExponentialBackoff = /** @class */ (function () {
	    function ExponentialBackoff(
	    /**
	     * The AsyncQueue to run backoff operations on.
	     */
	    queue, 
	    /**
	     * The ID to use when scheduling backoff operations on the AsyncQueue.
	     */
	    timerId, 
	    /**
	     * The initial delay (used as the base delay on the first retry attempt).
	     * Note that jitter will still be applied, so the actual delay could be as
	     * little as 0.5*initialDelayMs.
	     */
	    initialDelayMs, 
	    /**
	     * The multiplier to use to determine the extended base delay after each
	     * attempt.
	     */
	    backoffFactor, 
	    /**
	     * The maximum base delay after which no further backoff is performed.
	     * Note that jitter will still be applied, so the actual delay could be as
	     * much as 1.5*maxDelayMs.
	     */
	    maxDelayMs) {
	        this.queue = queue;
	        this.timerId = timerId;
	        this.initialDelayMs = initialDelayMs;
	        this.backoffFactor = backoffFactor;
	        this.maxDelayMs = maxDelayMs;
	        this.timerPromise = null;
	        /** The last backoff attempt, as epoch milliseconds. */
	        this.lastAttemptTime = Date.now();
	        this.reset();
	    }
	    /**
	     * Resets the backoff delay.
	     *
	     * The very next backoffAndWait() will have no delay. If it is called again
	     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
	     * subsequent ones will increase according to the backoffFactor.
	     */
	    ExponentialBackoff.prototype.reset = function () {
	        this.currentBaseMs = 0;
	    };
	    /**
	     * Resets the backoff delay to the maximum delay (e.g. for use after a
	     * RESOURCE_EXHAUSTED error).
	     */
	    ExponentialBackoff.prototype.resetToMax = function () {
	        this.currentBaseMs = this.maxDelayMs;
	    };
	    /**
	     * Returns a promise that resolves after currentDelayMs, and increases the
	     * delay for any subsequent attempts. If there was a pending backoff operation
	     * already, it will be canceled.
	     */
	    ExponentialBackoff.prototype.backoffAndRun = function (op) {
	        var _this = this;
	        // Cancel any pending backoff operation.
	        this.cancel();
	        // First schedule using the current base (which may be 0 and should be
	        // honored as such).
	        var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());
	        // Guard against lastAttemptTime being in the future due to a clock change.
	        var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);
	        // Guard against the backoff delay already being past.
	        var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);
	        if (this.currentBaseMs > 0) {
	            debug(LOG_TAG$5, "Backing off for " + remainingDelayMs + " ms " +
	                ("(base delay: " + this.currentBaseMs + " ms, ") +
	                ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") +
	                ("last attempt: " + delaySoFarMs + " ms ago)"));
	        }
	        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function () {
	            _this.lastAttemptTime = Date.now();
	            return op();
	        });
	        // Apply backoff factor to determine next delay and ensure it is within
	        // bounds.
	        this.currentBaseMs *= this.backoffFactor;
	        if (this.currentBaseMs < this.initialDelayMs) {
	            this.currentBaseMs = this.initialDelayMs;
	        }
	        if (this.currentBaseMs > this.maxDelayMs) {
	            this.currentBaseMs = this.maxDelayMs;
	        }
	    };
	    ExponentialBackoff.prototype.cancel = function () {
	        if (this.timerPromise !== null) {
	            this.timerPromise.cancel();
	            this.timerPromise = null;
	        }
	    };
	    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
	    ExponentialBackoff.prototype.jitterDelayMs = function () {
	        return (Math.random() - 0.5) * this.currentBaseMs;
	    };
	    return ExponentialBackoff;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$6 = 'PersistentStream';
	/**
	 * PersistentStream can be in one of 5 states (each described in detail below)
	 * based on the following state transition diagram:
	 *
	 *          start() called             auth & connection succeeded
	 * INITIAL ----------------> STARTING -----------------------------> OPEN
	 *                             ^  |                                   |
	 *                             |  |                    error occurred |
	 *                             |  \-----------------------------v-----/
	 *                             |                                |
	 *                    backoff  |                                |
	 *                    elapsed  |              start() called    |
	 *                             \--- BACKOFF <---------------- ERROR
	 *
	 * [any state] --------------------------> INITIAL
	 *               stop() called or
	 *               idle timer expired
	 */
	var PersistentStreamState;
	(function (PersistentStreamState) {
	    /**
	     * The streaming RPC is not yet running and there's no error condition.
	     * Calling start() will start the stream immediately without backoff.
	     * While in this state isStarted() will return false.
	     */
	    PersistentStreamState[PersistentStreamState["Initial"] = 0] = "Initial";
	    /**
	     * The stream is starting, either waiting for an auth token or for the stream
	     * to successfully open. While in this state, isStarted() will return true but
	     * isOpen() will return false.
	     */
	    PersistentStreamState[PersistentStreamState["Starting"] = 1] = "Starting";
	    /**
	     * The streaming RPC is up and running. Requests and responses can flow
	     * freely. Both isStarted() and isOpen() will return true.
	     */
	    PersistentStreamState[PersistentStreamState["Open"] = 2] = "Open";
	    /**
	     * The stream encountered an error. The next start attempt will back off.
	     * While in this state isStarted() will return false.
	     */
	    PersistentStreamState[PersistentStreamState["Error"] = 3] = "Error";
	    /**
	     * An in-between state after an error where the stream is waiting before
	     * re-starting. After waiting is complete, the stream will try to open.
	     * While in this state isStarted() will return true but isOpen() will return
	     * false.
	     */
	    PersistentStreamState[PersistentStreamState["Backoff"] = 4] = "Backoff";
	})(PersistentStreamState || (PersistentStreamState = {}));
	/**
	 * Initial backoff time in milliseconds after an error.
	 * Set to 1s according to https://cloud.google.com/apis/design/errors.
	 */
	var BACKOFF_INITIAL_DELAY_MS = 1000;
	/** Maximum backoff time in milliseconds */
	var BACKOFF_MAX_DELAY_MS = 60 * 1000;
	var BACKOFF_FACTOR = 1.5;
	/** The time a stream stays open after it is marked idle. */
	var IDLE_TIMEOUT_MS = 60 * 1000;
	/**
	 * A PersistentStream is an abstract base class that represents a streaming RPC
	 * to the Firestore backend. It's built on top of the connections own support
	 * for streaming RPCs, and adds several critical features for our clients:
	 *
	 *   - Exponential backoff on failure
	 *   - Authentication via CredentialsProvider
	 *   - Dispatching all callbacks into the shared worker queue
	 *   - Closing idle streams after 60 seconds of inactivity
	 *
	 * Subclasses of PersistentStream implement serialization of models to and
	 * from the JSON representation of the protocol buffers for a specific
	 * streaming RPC.
	 *
	 * ## Starting and Stopping
	 *
	 * Streaming RPCs are stateful and need to be start()ed before messages can
	 * be sent and received. The PersistentStream will call the onOpen() function
	 * of the listener once the stream is ready to accept requests.
	 *
	 * Should a start() fail, PersistentStream will call the registered onClose()
	 * listener with a FirestoreError indicating what went wrong.
	 *
	 * A PersistentStream can be started and stopped repeatedly.
	 *
	 * Generic types:
	 *  SendType: The type of the outgoing message of the underlying
	 *    connection stream
	 *  ReceiveType: The type of the incoming message of the underlying
	 *    connection stream
	 *  ListenerType: The type of the listener that will be used for callbacks
	 */
	var PersistentStream = /** @class */ (function () {
	    function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
	        this.queue = queue;
	        this.idleTimerId = idleTimerId;
	        this.connection = connection;
	        this.credentialsProvider = credentialsProvider;
	        this.listener = listener;
	        this.state = PersistentStreamState.Initial;
	        /**
	         * A close count that's incremented every time the stream is closed; used by
	         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
	         * close.
	         */
	        this.closeCount = 0;
	        this.idleTimer = null;
	        this.stream = null;
	        this.backoff = new ExponentialBackoff(queue, connectionTimerId, BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);
	    }
	    /**
	     * Returns true if start() has been called and no error has occurred. True
	     * indicates the stream is open or in the process of opening (which
	     * encompasses respecting backoff, getting auth tokens, and starting the
	     * actual RPC). Use isOpen() to determine if the stream is open and ready for
	     * outbound requests.
	     */
	    PersistentStream.prototype.isStarted = function () {
	        return (this.state === PersistentStreamState.Starting ||
	            this.state === PersistentStreamState.Open ||
	            this.state === PersistentStreamState.Backoff);
	    };
	    /**
	     * Returns true if the underlying RPC is open (the onOpen() listener has been
	     * called) and the stream is ready for outbound requests.
	     */
	    PersistentStream.prototype.isOpen = function () {
	        return this.state === PersistentStreamState.Open;
	    };
	    /**
	     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
	     * not immediately ready for use: onOpen() will be invoked when the RPC is
	     * ready for outbound requests, at which point isOpen() will return true.
	     *
	     * When start returns, isStarted() will return true.
	     */
	    PersistentStream.prototype.start = function () {
	        if (this.state === PersistentStreamState.Error) {
	            this.performBackoff();
	            return;
	        }
	        assert(this.state === PersistentStreamState.Initial, 'Already started');
	        this.auth();
	    };
	    /**
	     * Stops the RPC. This call is idempotent and allowed regardless of the
	     * current isStarted() state.
	     *
	     * When stop returns, isStarted() and isOpen() will both return false.
	     */
	    PersistentStream.prototype.stop = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.isStarted()) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.close(PersistentStreamState.Initial)];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * After an error the stream will usually back off on the next attempt to
	     * start it. If the error warrants an immediate restart of the stream, the
	     * sender can use this to indicate that the receiver should not back off.
	     *
	     * Each error will call the onClose() listener. That function can decide to
	     * inhibit backoff if required.
	     */
	    PersistentStream.prototype.inhibitBackoff = function () {
	        assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');
	        this.state = PersistentStreamState.Initial;
	        this.backoff.reset();
	    };
	    /**
	     * Marks this stream as idle. If no further actions are performed on the
	     * stream for one minute, the stream will automatically close itself and
	     * notify the stream's onClose() handler with Status.OK. The stream will then
	     * be in a !isStarted() state, requiring the caller to start the stream again
	     * before further use.
	     *
	     * Only streams that are in state 'Open' can be marked idle, as all other
	     * states imply pending network operations.
	     */
	    PersistentStream.prototype.markIdle = function () {
	        var _this = this;
	        // Starts the idle time if we are in state 'Open' and are not yet already
	        // running a timer (in which case the previous idle timeout still applies).
	        if (this.isOpen() && this.idleTimer === null) {
	            this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () { return _this.handleIdleCloseTimer(); });
	        }
	    };
	    /** Sends a message to the underlying stream. */
	    PersistentStream.prototype.sendRequest = function (msg) {
	        this.cancelIdleCheck();
	        this.stream.send(msg);
	    };
	    /** Called by the idle timer when the stream should close due to inactivity. */
	    PersistentStream.prototype.handleIdleCloseTimer = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (this.isOpen()) {
	                    // When timing out an idle stream there's no reason to force the stream into backoff when
	                    // it restarts so set the stream state to Initial instead of Error.
	                    return [2 /*return*/, this.close(PersistentStreamState.Initial)];
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    /** Marks the stream as active again. */
	    PersistentStream.prototype.cancelIdleCheck = function () {
	        if (this.idleTimer) {
	            this.idleTimer.cancel();
	            this.idleTimer = null;
	        }
	    };
	    /**
	     * Closes the stream and cleans up as necessary:
	     *
	     * * closes the underlying GRPC stream;
	     * * calls the onClose handler with the given 'error';
	     * * sets internal stream state to 'finalState';
	     * * adjusts the backoff timer based on the error
	     *
	     * A new stream can be opened by calling start().
	     *
	     * @param finalState the intended state of the stream after closing.
	     * @param error the error the connection was closed with.
	     */
	    PersistentStream.prototype.close = function (finalState, error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        assert(this.isStarted(), 'Only started streams should be closed.');
	                        assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error$$1), "Can't provide an error when not in an error state.");
	                        // Cancel any outstanding timers (they're guaranteed not to execute).
	                        this.cancelIdleCheck();
	                        this.backoff.cancel();
	                        // Invalidates any stream-related callbacks (e.g. from auth or the
	                        // underlying stream), guaranteeing they won't execute.
	                        this.closeCount++;
	                        if (finalState !== PersistentStreamState.Error) {
	                            // If this is an intentional close ensure we don't delay our next connection attempt.
	                            this.backoff.reset();
	                        }
	                        else if (error$$1 && error$$1.code === Code.RESOURCE_EXHAUSTED) {
	                            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
	                            error(error$$1.toString());
	                            error('Using maximum backoff delay to prevent overloading the backend.');
	                            this.backoff.resetToMax();
	                        }
	                        else if (error$$1 && error$$1.code === Code.UNAUTHENTICATED) {
	                            // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
	                            // just expired.
	                            this.credentialsProvider.invalidateToken();
	                        }
	                        // Clean up the underlying stream because we are no longer interested in events.
	                        if (this.stream !== null) {
	                            this.tearDown();
	                            this.stream.close();
	                            this.stream = null;
	                        }
	                        // This state must be assigned before calling onClose() to allow the callback to
	                        // inhibit backoff or otherwise manipulate the state in its non-started state.
	                        this.state = finalState;
	                        // Notify the listener that the stream closed.
	                        return [4 /*yield*/, this.listener.onClose(error$$1)];
	                    case 1:
	                        // Notify the listener that the stream closed.
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Can be overridden to perform additional cleanup before the stream is closed.
	     * Calling super.tearDown() is not required.
	     */
	    PersistentStream.prototype.tearDown = function () { };
	    PersistentStream.prototype.auth = function () {
	        var _this = this;
	        assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');
	        this.state = PersistentStreamState.Starting;
	        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
	        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
	        var closeCount = this.closeCount;
	        this.credentialsProvider.getToken().then(function (token) {
	            // Stream can be stopped while waiting for authentication.
	            // TODO(mikelehen): We really should just use dispatchIfNotClosed
	            // and let this dispatch onto the queue, but that opened a spec test can
	            // of worms that I don't want to deal with in this PR.
	            if (_this.closeCount === closeCount) {
	                // Normally we'd have to schedule the callback on the AsyncQueue.
	                // However, the following calls are safe to be called outside the
	                // AsyncQueue since they don't chain asynchronous calls
	                _this.startStream(token);
	            }
	        }, function (error$$1) {
	            dispatchIfNotClosed(function () {
	                var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error$$1.message);
	                return _this.handleStreamClose(rpcError);
	            });
	        });
	    };
	    PersistentStream.prototype.startStream = function (token) {
	        var _this = this;
	        assert(this.state === PersistentStreamState.Starting, 'Trying to start stream in a non-starting state');
	        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
	        this.stream = this.startRpc(token);
	        this.stream.onOpen(function () {
	            dispatchIfNotClosed(function () {
	                assert(_this.state === PersistentStreamState.Starting, 'Expected stream to be in state Starting, but was ' + _this.state);
	                _this.state = PersistentStreamState.Open;
	                return _this.listener.onOpen();
	            });
	        });
	        this.stream.onClose(function (error$$1) {
	            dispatchIfNotClosed(function () {
	                return _this.handleStreamClose(error$$1);
	            });
	        });
	        this.stream.onMessage(function (msg) {
	            dispatchIfNotClosed(function () {
	                return _this.onMessage(msg);
	            });
	        });
	    };
	    PersistentStream.prototype.performBackoff = function () {
	        var _this = this;
	        assert(this.state === PersistentStreamState.Error, 'Should only perform backoff when in Error state');
	        this.state = PersistentStreamState.Backoff;
	        this.backoff.backoffAndRun(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                assert(this.state === PersistentStreamState.Backoff, 'Backoff elapsed but state is now: ' + this.state);
	                this.state = PersistentStreamState.Initial;
	                this.start();
	                assert(this.isStarted(), 'PersistentStream should have started');
	                return [2 /*return*/];
	            });
	        }); });
	    };
	    // Visible for tests
	    PersistentStream.prototype.handleStreamClose = function (error$$1) {
	        assert(this.isStarted(), "Can't handle server close on non-started stream");
	        debug(LOG_TAG$6, "close with error: " + error$$1);
	        this.stream = null;
	        // In theory the stream could close cleanly, however, in our current model
	        // we never expect this to happen because if we stop a stream ourselves,
	        // this callback will never be called. To prevent cases where we retry
	        // without a backoff accidentally, we set the stream to error in all cases.
	        return this.close(PersistentStreamState.Error, error$$1);
	    };
	    /**
	     * Returns a "dispatcher" function that dispatches operations onto the
	     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
	     * us to turn auth / stream callbacks into no-ops if the stream is closed /
	     * re-opened, etc.
	     */
	    PersistentStream.prototype.getCloseGuardedDispatcher = function (startCloseCount) {
	        var _this = this;
	        return function (fn) {
	            _this.queue.enqueueAndForget(function () {
	                if (_this.closeCount === startCloseCount) {
	                    return fn();
	                }
	                else {
	                    debug(LOG_TAG$6, 'stream callback skipped by getCloseGuardedDispatcher.');
	                    return Promise.resolve();
	                }
	            });
	        };
	    };
	    return PersistentStream;
	}());
	/**
	 * A PersistentStream that implements the Listen RPC.
	 *
	 * Once the Listen stream has called the onOpen() listener, any number of
	 * listen() and unlisten() calls can be made to control what changes will be
	 * sent from the server for ListenResponses.
	 */
	var PersistentListenStream = /** @class */ (function (_super) {
	    tslib_1.__extends(PersistentListenStream, _super);
	    function PersistentListenStream(queue, connection, credentials, serializer, listener) {
	        var _this = _super.call(this, queue, TimerId.ListenStreamConnectionBackoff, TimerId.ListenStreamIdle, connection, credentials, listener) || this;
	        _this.serializer = serializer;
	        return _this;
	    }
	    PersistentListenStream.prototype.startRpc = function (token) {
	        return this.connection.openStream('Listen', token);
	    };
	    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {
	        // A successful response means the stream is healthy
	        this.backoff.reset();
	        var watchChange = this.serializer.fromWatchChange(watchChangeProto);
	        var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);
	        return this.listener.onWatchChange(watchChange, snapshot);
	    };
	    /**
	     * Registers interest in the results of the given query. If the query
	     * includes a resumeToken it will be included in the request. Results that
	     * affect the query will be streamed back as WatchChange messages that
	     * reference the targetId.
	     */
	    PersistentListenStream.prototype.watch = function (queryData) {
	        var request = {};
	        request.database = this.serializer.encodedDatabaseId;
	        request.addTarget = this.serializer.toTarget(queryData);
	        var labels = this.serializer.toListenRequestLabels(queryData);
	        if (labels) {
	            request.labels = labels;
	        }
	        this.sendRequest(request);
	    };
	    /**
	     * Unregisters interest in the results of the query associated with the
	     * given targetId.
	     */
	    PersistentListenStream.prototype.unwatch = function (targetId) {
	        var request = {};
	        request.database = this.serializer.encodedDatabaseId;
	        request.removeTarget = targetId;
	        this.sendRequest(request);
	    };
	    return PersistentListenStream;
	}(PersistentStream));
	/**
	 * A Stream that implements the Write RPC.
	 *
	 * The Write RPC requires the caller to maintain special streamToken
	 * state in between calls, to help the server understand which responses the
	 * client has processed by the time the next request is made. Every response
	 * will contain a streamToken; this value must be passed to the next
	 * request.
	 *
	 * After calling start() on this stream, the next request must be a handshake,
	 * containing whatever streamToken is on hand. Once a response to this
	 * request is received, all pending mutations may be submitted. When
	 * submitting multiple batches of mutations at the same time, it's
	 * okay to use the same streamToken for the calls to writeMutations.
	 *
	 * TODO(b/33271235): Use proto types
	 */
	var PersistentWriteStream = /** @class */ (function (_super) {
	    tslib_1.__extends(PersistentWriteStream, _super);
	    function PersistentWriteStream(queue, connection, credentials, serializer, listener) {
	        var _this = _super.call(this, queue, TimerId.WriteStreamConnectionBackoff, TimerId.WriteStreamIdle, connection, credentials, listener) || this;
	        _this.serializer = serializer;
	        _this.handshakeComplete_ = false;
	        return _this;
	    }
	    Object.defineProperty(PersistentWriteStream.prototype, "handshakeComplete", {
	        /**
	         * Tracks whether or not a handshake has been successfully exchanged and
	         * the stream is ready to accept mutations.
	         */
	        get: function () {
	            return this.handshakeComplete_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // Override of PersistentStream.start
	    PersistentWriteStream.prototype.start = function () {
	        this.handshakeComplete_ = false;
	        _super.prototype.start.call(this);
	    };
	    PersistentWriteStream.prototype.tearDown = function () {
	        if (this.handshakeComplete_) {
	            this.writeMutations([]);
	        }
	    };
	    PersistentWriteStream.prototype.startRpc = function (token) {
	        return this.connection.openStream('Write', token);
	    };
	    PersistentWriteStream.prototype.onMessage = function (responseProto) {
	        // Always capture the last stream token.
	        assert(!!responseProto.streamToken, 'Got a write response without a stream token');
	        this.lastStreamToken = responseProto.streamToken;
	        if (!this.handshakeComplete_) {
	            // The first response is always the handshake response
	            assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');
	            this.handshakeComplete_ = true;
	            return this.listener.onHandshakeComplete();
	        }
	        else {
	            // A successful first write response means the stream is healthy,
	            // Note, that we could consider a successful handshake healthy, however,
	            // the write itself might be causing an error we want to back off from.
	            this.backoff.reset();
	            var results = this.serializer.fromWriteResults(responseProto.writeResults, responseProto.commitTime);
	            var commitVersion = this.serializer.fromVersion(responseProto.commitTime);
	            return this.listener.onMutationResult(commitVersion, results);
	        }
	    };
	    /**
	     * Sends an initial streamToken to the server, performing the handshake
	     * required to make the StreamingWrite RPC work. Subsequent
	     * calls should wait until onHandshakeComplete was called.
	     */
	    PersistentWriteStream.prototype.writeHandshake = function () {
	        assert(this.isOpen(), 'Writing handshake requires an opened stream');
	        assert(!this.handshakeComplete_, 'Handshake already completed');
	        // TODO(dimond): Support stream resumption. We intentionally do not set the
	        // stream token on the handshake, ignoring any stream token we might have.
	        var request = {};
	        request.database = this.serializer.encodedDatabaseId;
	        this.sendRequest(request);
	    };
	    /** Sends a group of mutations to the Firestore backend to apply. */
	    PersistentWriteStream.prototype.writeMutations = function (mutations) {
	        var _this = this;
	        assert(this.isOpen(), 'Writing mutations requires an opened stream');
	        assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');
	        assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');
	        var request = {
	            // Protos are typed with string, but we support UInt8Array on Node
	            // tslint:disable-next-line:no-any
	            streamToken: this.lastStreamToken,
	            writes: mutations.map(function (mutation) { return _this.serializer.toMutation(mutation); })
	        };
	        this.sendRequest(request);
	    };
	    return PersistentWriteStream;
	}(PersistentStream));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Datastore is a wrapper around the external Google Cloud Datastore grpc API,
	 * which provides an interface that is more convenient for the rest of the
	 * client SDK architecture to consume.
	 */
	var Datastore = /** @class */ (function () {
	    function Datastore(queue, connection, credentials, serializer) {
	        this.queue = queue;
	        this.connection = connection;
	        this.credentials = credentials;
	        this.serializer = serializer;
	    }
	    Datastore.prototype.newPersistentWriteStream = function (listener) {
	        return new PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer, listener);
	    };
	    Datastore.prototype.newPersistentWatchStream = function (listener) {
	        return new PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer, listener);
	    };
	    Datastore.prototype.commit = function (mutations) {
	        var _this = this;
	        var params = {
	            database: this.serializer.encodedDatabaseId,
	            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })
	        };
	        return this.invokeRPC('Commit', params).then(function (response) {
	            return _this.serializer.fromWriteResults(response.writeResults, response.commitTime);
	        });
	    };
	    Datastore.prototype.lookup = function (keys) {
	        var _this = this;
	        var params = {
	            database: this.serializer.encodedDatabaseId,
	            documents: keys.map(function (k) { return _this.serializer.toName(k); })
	        };
	        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {
	            var docs = maybeDocumentMap();
	            response.forEach(function (proto) {
	                var doc = _this.serializer.fromMaybeDocument(proto);
	                docs = docs.insert(doc.key, doc);
	            });
	            var result = [];
	            keys.forEach(function (key) {
	                var doc = docs.get(key);
	                assert(!!doc, 'Missing entity in write response for ' + key);
	                result.push(doc);
	            });
	            return result;
	        });
	    };
	    /** Gets an auth token and invokes the provided RPC. */
	    Datastore.prototype.invokeRPC = function (rpcName, request) {
	        var _this = this;
	        return this.credentials
	            .getToken()
	            .then(function (token) {
	            return _this.connection.invokeRPC(rpcName, request, token);
	        })
	            .catch(function (error) {
	            if (error.code === Code.UNAUTHENTICATED) {
	                _this.credentials.invalidateToken();
	            }
	            throw error;
	        });
	    };
	    /** Gets an auth token and invokes the provided RPC with streamed results. */
	    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {
	        var _this = this;
	        return this.credentials
	            .getToken()
	            .then(function (token) {
	            return _this.connection.invokeStreamingRPC(rpcName, request, token);
	        })
	            .catch(function (error) {
	            if (error.code === Code.UNAUTHENTICATED) {
	                _this.credentials.invalidateToken();
	            }
	            throw error;
	        });
	    };
	    return Datastore;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Internal transaction object responsible for accumulating the mutations to
	 * perform and the base versions for any documents read.
	 */
	var Transaction = /** @class */ (function () {
	    function Transaction(datastore) {
	        this.datastore = datastore;
	        // The version of each document that was read during this transaction.
	        this.readVersions = documentVersionMap();
	        this.mutations = [];
	        this.committed = false;
	    }
	    Transaction.prototype.recordVersion = function (doc) {
	        var docVersion;
	        if (doc instanceof Document) {
	            docVersion = doc.version;
	        }
	        else if (doc instanceof NoDocument) {
	            // For deleted docs, we must use baseVersion 0 when we overwrite them.
	            docVersion = SnapshotVersion.forDeletedDoc();
	        }
	        else {
	            throw fail('Document in a transaction was a ' + doc.constructor.name);
	        }
	        var existingVersion = this.readVersions.get(doc.key);
	        if (existingVersion !== null) {
	            if (!docVersion.isEqual(existingVersion)) {
	                // This transaction will fail no matter what.
	                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');
	            }
	        }
	        else {
	            this.readVersions = this.readVersions.insert(doc.key, docVersion);
	        }
	    };
	    Transaction.prototype.lookup = function (keys) {
	        var _this = this;
	        if (this.committed) {
	            return Promise.reject('Transaction has already completed.');
	        }
	        if (this.mutations.length > 0) {
	            return Promise.reject('Transactions lookups are invalid after writes.');
	        }
	        return this.datastore.lookup(keys).then(function (docs) {
	            docs.forEach(function (doc) {
	                if (doc instanceof NoDocument || doc instanceof Document) {
	                    _this.recordVersion(doc);
	                }
	                else {
	                    fail('Document in a transaction was a ' + doc.constructor.name);
	                }
	            });
	            return docs;
	        });
	    };
	    Transaction.prototype.write = function (mutations) {
	        if (this.committed) {
	            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');
	        }
	        this.mutations = this.mutations.concat(mutations);
	    };
	    /**
	     * Returns the version of this document when it was read in this transaction,
	     * as a precondition, or no precondition if it was not read.
	     */
	    Transaction.prototype.precondition = function (key) {
	        var version = this.readVersions.get(key);
	        if (version) {
	            return Precondition.updateTime(version);
	        }
	        else {
	            return Precondition.NONE;
	        }
	    };
	    /**
	     * Returns the precondition for a document if the operation is an update.
	     */
	    Transaction.prototype.preconditionForUpdate = function (key) {
	        var version = this.readVersions.get(key);
	        if (version && version.isEqual(SnapshotVersion.forDeletedDoc())) {
	            // The document doesn't exist, so fail the transaction.
	            throw new FirestoreError(Code.FAILED_PRECONDITION, "Can't update a document that doesn't exist.");
	        }
	        else if (version) {
	            // Document exists, base precondition on document update time.
	            return Precondition.updateTime(version);
	        }
	        else {
	            // Document was not read, so we just use the preconditions for a blind
	            // update.
	            return Precondition.exists(true);
	        }
	    };
	    Transaction.prototype.set = function (key, data) {
	        this.write(data.toMutations(key, this.precondition(key)));
	    };
	    Transaction.prototype.update = function (key, data) {
	        this.write(data.toMutations(key, this.preconditionForUpdate(key)));
	    };
	    Transaction.prototype.delete = function (key) {
	        this.write([new DeleteMutation(key, this.precondition(key))]);
	        // Since the delete will be applied before all following writes, we need to
	        // ensure that the precondition for the next write will be exists: false.
	        this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());
	    };
	    Transaction.prototype.commit = function () {
	        var _this = this;
	        var unwritten = this.readVersions;
	        // For each mutation, note that the doc was written.
	        this.mutations.forEach(function (mutation) {
	            unwritten = unwritten.remove(mutation.key);
	        });
	        if (!unwritten.isEmpty()) {
	            return Promise.reject(Error('Every document read in a transaction must also be written.'));
	        }
	        return this.datastore.commit(this.mutations).then(function () {
	            _this.committed = true;
	        });
	    };
	    return Transaction;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Describes the online state of the Firestore client. Note that this does not
	 * indicate whether or not the remote store is trying to connect or not. This is
	 * primarily used by the View / EventManager code to change their behavior while
	 * offline (e.g. get() calls shouldn't wait for data from the server and
	 * snapshot events should set metadata.isFromCache=true).
	 */
	var OnlineState;
	(function (OnlineState) {
	    /**
	     * The Firestore client is in an unknown online state. This means the client
	     * is either not actively trying to establish a connection or it is currently
	     * trying to establish a connection, but it has not succeeded or failed yet.
	     * Higher-level components should not operate in offline mode.
	     */
	    OnlineState[OnlineState["Unknown"] = 0] = "Unknown";
	    /**
	     * The client is connected and the connections are healthy. This state is
	     * reached after a successful connection and there has been at least one
	     * successful message received from the backends.
	     */
	    OnlineState[OnlineState["Online"] = 1] = "Online";
	    /**
	     * The client is either trying to establish a connection but failing, or it
	     * has been explicitly marked offline via a call to disableNetwork().
	     * Higher-level components should operate in offline mode.
	     */
	    OnlineState[OnlineState["Offline"] = 2] = "Offline";
	})(OnlineState || (OnlineState = {}));
	/** The source of an online state event. */
	var OnlineStateSource;
	(function (OnlineStateSource) {
	    OnlineStateSource[OnlineStateSource["RemoteStore"] = 0] = "RemoteStore";
	    OnlineStateSource[OnlineStateSource["SharedClientState"] = 1] = "SharedClientState";
	})(OnlineStateSource || (OnlineStateSource = {}));

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$7 = 'OnlineStateTracker';
	// To deal with transient failures, we allow multiple stream attempts before
	// giving up and transitioning from OnlineState.Unknown to Offline.
	// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.
	// @jdimond thinks that bug is sufficiently fixed so that we can set this back
	// to 1. If that works okay, we could potentially remove this logic entirely.
	var MAX_WATCH_STREAM_FAILURES = 1;
	// To deal with stream attempts that don't succeed or fail in a timely manner,
	// we have a timeout for OnlineState to reach Online or Offline.
	// If the timeout is reached, we transition to Offline rather than waiting
	// indefinitely.
	var ONLINE_STATE_TIMEOUT_MS = 10 * 1000;
	/**
	 * A component used by the RemoteStore to track the OnlineState (that is,
	 * whether or not the client as a whole should be considered to be online or
	 * offline), implementing the appropriate heuristics.
	 *
	 * In particular, when the client is trying to connect to the backend, we
	 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
	 * a connection to succeed. If we have too many failures or the timeout elapses,
	 * then we set the OnlineState to Offline, and the client will behave as if
	 * it is offline (get()s will return cached data, etc.).
	 */
	var OnlineStateTracker = /** @class */ (function () {
	    function OnlineStateTracker(asyncQueue, onlineStateHandler) {
	        this.asyncQueue = asyncQueue;
	        this.onlineStateHandler = onlineStateHandler;
	        /** The current OnlineState. */
	        this.state = OnlineState.Unknown;
	        /**
	         * A count of consecutive failures to open the stream. If it reaches the
	         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
	         * Offline.
	         */
	        this.watchStreamFailures = 0;
	        /**
	         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
	         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
	         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
	         */
	        this.onlineStateTimer = null;
	        /**
	         * Whether the client should log a warning message if it fails to connect to
	         * the backend (initially true, cleared after a successful stream, or if we've
	         * logged the message already).
	         */
	        this.shouldWarnClientIsOffline = true;
	    }
	    /**
	     * Called by RemoteStore when a watch stream is started (including on each
	     * backoff attempt).
	     *
	     * If this is the first attempt, it sets the OnlineState to Unknown and starts
	     * the onlineStateTimer.
	     */
	    OnlineStateTracker.prototype.handleWatchStreamStart = function () {
	        var _this = this;
	        if (this.watchStreamFailures === 0) {
	            this.setAndBroadcast(OnlineState.Unknown);
	            assert(this.onlineStateTimer === null, "onlineStateTimer shouldn't be started yet");
	            this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(TimerId.OnlineStateTimeout, ONLINE_STATE_TIMEOUT_MS, function () {
	                _this.onlineStateTimer = null;
	                assert(_this.state === OnlineState.Unknown, 'Timer should be canceled if we transitioned to a different state.');
	                _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1000 + " " +
	                    "seconds.");
	                _this.setAndBroadcast(OnlineState.Offline);
	                // NOTE: handleWatchStreamFailure() will continue to increment
	                // watchStreamFailures even though we are already marked Offline,
	                // but this is non-harmful.
	                return Promise.resolve();
	            });
	        }
	    };
	    /**
	     * Updates our OnlineState as appropriate after the watch stream reports a
	     * failure. The first failure moves us to the 'Unknown' state. We then may
	     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
	     * actually transition to the 'Offline' state.
	     */
	    OnlineStateTracker.prototype.handleWatchStreamFailure = function (error$$1) {
	        if (this.state === OnlineState.Online) {
	            this.setAndBroadcast(OnlineState.Unknown);
	            // To get to OnlineState.Online, set() must have been called which would
	            // have reset our heuristics.
	            assert(this.watchStreamFailures === 0, 'watchStreamFailures must be 0');
	            assert(this.onlineStateTimer === null, 'onlineStateTimer must be null');
	        }
	        else {
	            this.watchStreamFailures++;
	            if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
	                this.clearOnlineStateTimer();
	                this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " +
	                    ("times. Most recent error: " + error$$1.toString()));
	                this.setAndBroadcast(OnlineState.Offline);
	            }
	        }
	    };
	    /**
	     * Explicitly sets the OnlineState to the specified state.
	     *
	     * Note that this resets our timers / failure counters, etc. used by our
	     * Offline heuristics, so must not be used in place of
	     * handleWatchStreamStart() and handleWatchStreamFailure().
	     */
	    OnlineStateTracker.prototype.set = function (newState) {
	        this.clearOnlineStateTimer();
	        this.watchStreamFailures = 0;
	        if (newState === OnlineState.Online) {
	            // We've connected to watch at least once. Don't warn the developer
	            // about being offline going forward.
	            this.shouldWarnClientIsOffline = false;
	        }
	        this.setAndBroadcast(newState);
	    };
	    OnlineStateTracker.prototype.setAndBroadcast = function (newState) {
	        if (newState !== this.state) {
	            this.state = newState;
	            this.onlineStateHandler(newState);
	        }
	    };
	    OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary = function (details) {
	        var message = "Could not reach Cloud Firestore backend. " + details + "\n" +
	            "This typically indicates that your device does not have a healthy " +
	            "Internet connection at the moment. The client will operate in offline " +
	            "mode until it is able to successfully connect to the backend.";
	        if (this.shouldWarnClientIsOffline) {
	            error(message);
	            this.shouldWarnClientIsOffline = false;
	        }
	        else {
	            debug(LOG_TAG$7, message);
	        }
	    };
	    OnlineStateTracker.prototype.clearOnlineStateTimer = function () {
	        if (this.onlineStateTimer !== null) {
	            this.onlineStateTimer.cancel();
	            this.onlineStateTimer = null;
	        }
	    };
	    return OnlineStateTracker;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$8 = 'RemoteStore';
	// TODO(b/35853402): Negotiate this with the stream.
	var MAX_PENDING_WRITES = 10;
	/**
	 * RemoteStore - An interface to remotely stored data, basically providing a
	 * wrapper around the Datastore that is more reliable for the rest of the
	 * system.
	 *
	 * RemoteStore is responsible for maintaining the connection to the server.
	 * - maintaining a list of active listens.
	 * - reconnecting when the connection is dropped.
	 * - resuming all the active listens on reconnect.
	 *
	 * RemoteStore handles all incoming events from the Datastore.
	 * - listening to the watch stream and repackaging the events as RemoteEvents
	 * - notifying SyncEngine of any changes to the active listens.
	 *
	 * RemoteStore takes writes from other components and handles them reliably.
	 * - pulling pending mutations from LocalStore and sending them to Datastore.
	 * - retrying mutations that failed because of network problems.
	 * - acking mutations to the SyncEngine once they are accepted or rejected.
	 */
	var RemoteStore = /** @class */ (function () {
	    function RemoteStore(
	    /**
	     * The local store, used to fill the write pipeline with outbound mutations.
	     */
	    localStore, 
	    /** The client-side proxy for interacting with the backend. */
	    datastore, asyncQueue, onlineStateHandler) {
	        this.localStore = localStore;
	        this.datastore = datastore;
	        /**
	         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
	         * LocalStore via fillWritePipeline() and have or will send to the write
	         * stream.
	         *
	         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
	         * restart the write stream. When the stream is established the writes in the
	         * pipeline will be sent in order.
	         *
	         * Writes remain in writePipeline until they are acknowledged by the backend
	         * and thus will automatically be re-sent if the stream is interrupted /
	         * restarted before they're acknowledged.
	         *
	         * Write responses from the backend are linked to their originating request
	         * purely based on order, and so we can just shift() writes from the front of
	         * the writePipeline as we receive responses.
	         */
	        this.writePipeline = [];
	        /**
	         * A mapping of watched targets that the client cares about tracking and the
	         * user has explicitly called a 'listen' for this target.
	         *
	         * These targets may or may not have been sent to or acknowledged by the
	         * server. On re-establishing the listen stream, these targets should be sent
	         * to the server. The targets removed with unlistens are removed eagerly
	         * without waiting for confirmation from the listen stream.
	         */
	        this.listenTargets = {};
	        this.watchChangeAggregator = null;
	        /**
	         * Set to true by enableNetwork() and false by disableNetwork() and indicates
	         * the user-preferred network state.
	         */
	        this.networkEnabled = false;
	        this.isPrimary = false;
	        this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);
	        // Create streams (but note they're not started yet).
	        this.watchStream = this.datastore.newPersistentWatchStream({
	            onOpen: this.onWatchStreamOpen.bind(this),
	            onClose: this.onWatchStreamClose.bind(this),
	            onWatchChange: this.onWatchStreamChange.bind(this)
	        });
	        this.writeStream = this.datastore.newPersistentWriteStream({
	            onOpen: this.onWriteStreamOpen.bind(this),
	            onClose: this.onWriteStreamClose.bind(this),
	            onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),
	            onMutationResult: this.onMutationResult.bind(this)
	        });
	    }
	    /**
	     * Starts up the remote store, creating streams, restoring state from
	     * LocalStore, etc.
	     */
	    RemoteStore.prototype.start = function () {
	        return this.enableNetwork();
	    };
	    /** Re-enables the network. Idempotent. */
	    RemoteStore.prototype.enableNetwork = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _a;
	            return tslib_1.__generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        this.networkEnabled = true;
	                        if (!this.canUseNetwork()) return [3 /*break*/, 3];
	                        _a = this.writeStream;
	                        return [4 /*yield*/, this.localStore.getLastStreamToken()];
	                    case 1:
	                        _a.lastStreamToken = _b.sent();
	                        if (this.shouldStartWatchStream()) {
	                            this.startWatchStream();
	                        }
	                        else {
	                            this.onlineStateTracker.set(OnlineState.Unknown);
	                        }
	                        // This will start the write stream if necessary.
	                        return [4 /*yield*/, this.fillWritePipeline()];
	                    case 2:
	                        // This will start the write stream if necessary.
	                        _b.sent();
	                        _b.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Temporarily disables the network. The network can be re-enabled using
	     * enableNetwork().
	     */
	    RemoteStore.prototype.disableNetwork = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.networkEnabled = false;
	                        return [4 /*yield*/, this.disableNetworkInternal()];
	                    case 1:
	                        _a.sent();
	                        // Set the OnlineState to Offline so get()s return from cache, etc.
	                        this.onlineStateTracker.set(OnlineState.Offline);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RemoteStore.prototype.disableNetworkInternal = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.writeStream.stop()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.watchStream.stop()];
	                    case 2:
	                        _a.sent();
	                        if (this.writePipeline.length > 0) {
	                            debug(LOG_TAG$8, "Stopping write stream with " + this.writePipeline.length + " pending writes");
	                            this.writePipeline = [];
	                        }
	                        this.cleanUpWatchStreamState();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RemoteStore.prototype.shutdown = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        debug(LOG_TAG$8, 'RemoteStore shutting down.');
	                        this.networkEnabled = false;
	                        return [4 /*yield*/, this.disableNetworkInternal()];
	                    case 1:
	                        _a.sent();
	                        // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
	                        // triggering spurious listener events with cached data, etc.
	                        this.onlineStateTracker.set(OnlineState.Unknown);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /** Starts new listen for the given query. Uses resume token if provided */
	    RemoteStore.prototype.listen = function (queryData) {
	        assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!');
	        // Mark this as something the client is currently listening for.
	        this.listenTargets[queryData.targetId] = queryData;
	        if (this.shouldStartWatchStream()) {
	            // The listen will be sent in onWatchStreamOpen
	            this.startWatchStream();
	        }
	        else if (this.watchStream.isOpen()) {
	            this.sendWatchRequest(queryData);
	        }
	    };
	    /** Removes the listen from server */
	    RemoteStore.prototype.unlisten = function (targetId) {
	        assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');
	        delete this.listenTargets[targetId];
	        if (this.watchStream.isOpen()) {
	            this.sendUnwatchRequest(targetId);
	        }
	        if (isEmpty(this.listenTargets)) {
	            if (this.watchStream.isOpen()) {
	                this.watchStream.markIdle();
	            }
	            else if (this.canUseNetwork()) {
	                // Revert to OnlineState.Unknown if the watch stream is not open and we
	                // have no listeners, since without any listens to send we cannot
	                // confirm if the stream is healthy and upgrade to OnlineState.Online.
	                this.onlineStateTracker.set(OnlineState.Unknown);
	            }
	        }
	    };
	    /** {@link TargetMetadataProvider.getQueryDataForTarget} */
	    RemoteStore.prototype.getQueryDataForTarget = function (targetId) {
	        return this.listenTargets[targetId] || null;
	    };
	    /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */
	    RemoteStore.prototype.getRemoteKeysForTarget = function (targetId) {
	        return this.syncEngine.getRemoteKeysForTarget(targetId);
	    };
	    /**
	     * We need to increment the the expected number of pending responses we're due
	     * from watch so we wait for the ack to process any messages from this target.
	     */
	    RemoteStore.prototype.sendWatchRequest = function (queryData) {
	        this.watchChangeAggregator.recordPendingTargetRequest(queryData.targetId);
	        this.watchStream.watch(queryData);
	    };
	    /**
	     * We need to increment the expected number of pending responses we're due
	     * from watch so we wait for the removal on the server before we process any
	     * messages from this target.
	     */
	    RemoteStore.prototype.sendUnwatchRequest = function (targetId) {
	        this.watchChangeAggregator.recordPendingTargetRequest(targetId);
	        this.watchStream.unwatch(targetId);
	    };
	    RemoteStore.prototype.startWatchStream = function () {
	        assert(this.shouldStartWatchStream(), 'startWatchStream() called when shouldStartWatchStream() is false.');
	        this.watchChangeAggregator = new WatchChangeAggregator(this);
	        this.watchStream.start();
	        this.onlineStateTracker.handleWatchStreamStart();
	    };
	    /**
	     * Returns whether the watch stream should be started because it's necessary
	     * and has not yet been started.
	     */
	    RemoteStore.prototype.shouldStartWatchStream = function () {
	        return (this.canUseNetwork() &&
	            !this.watchStream.isStarted() &&
	            !isEmpty(this.listenTargets));
	    };
	    RemoteStore.prototype.canUseNetwork = function () {
	        return this.isPrimary && this.networkEnabled;
	    };
	    RemoteStore.prototype.cleanUpWatchStreamState = function () {
	        this.watchChangeAggregator = null;
	    };
	    RemoteStore.prototype.onWatchStreamOpen = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                forEachNumber(this.listenTargets, function (targetId, queryData) {
	                    _this.sendWatchRequest(queryData);
	                });
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.onWatchStreamClose = function (error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (error$$1 === undefined) {
	                    // Graceful stop (due to stop() or idle timeout). Make sure that's
	                    // desirable.
	                    assert(!this.shouldStartWatchStream(), 'Watch stream was stopped gracefully while still needed.');
	                }
	                this.cleanUpWatchStreamState();
	                // If we still need the watch stream, retry the connection.
	                if (this.shouldStartWatchStream()) {
	                    this.onlineStateTracker.handleWatchStreamFailure(error$$1);
	                    this.startWatchStream();
	                }
	                else {
	                    // No need to restart watch stream because there are no active targets.
	                    // The online state is set to unknown because there is no active attempt
	                    // at establishing a connection
	                    this.onlineStateTracker.set(OnlineState.Unknown);
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var lastRemoteSnapshotVersion;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        // Mark the client as online since we got a message from the server
	                        this.onlineStateTracker.set(OnlineState.Online);
	                        if (watchChange instanceof WatchTargetChange &&
	                            watchChange.state === WatchTargetChangeState.Removed &&
	                            watchChange.cause) {
	                            // There was an error on a target, don't wait for a consistent snapshot
	                            // to raise events
	                            return [2 /*return*/, this.handleTargetError(watchChange)];
	                        }
	                        if (watchChange instanceof DocumentWatchChange) {
	                            this.watchChangeAggregator.handleDocumentChange(watchChange);
	                        }
	                        else if (watchChange instanceof ExistenceFilterChange) {
	                            this.watchChangeAggregator.handleExistenceFilter(watchChange);
	                        }
	                        else {
	                            assert(watchChange instanceof WatchTargetChange, 'Expected watchChange to be an instance of WatchTargetChange');
	                            this.watchChangeAggregator.handleTargetChange(watchChange);
	                        }
	                        if (!!snapshotVersion.isEqual(SnapshotVersion.MIN)) return [3 /*break*/, 3];
	                        return [4 /*yield*/, this.localStore.getLastRemoteSnapshotVersion()];
	                    case 1:
	                        lastRemoteSnapshotVersion = _a.sent();
	                        if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0)) return [3 /*break*/, 3];
	                        // We have received a target change with a global snapshot if the snapshot
	                        // version is not equal to SnapshotVersion.MIN.
	                        return [4 /*yield*/, this.raiseWatchSnapshot(snapshotVersion)];
	                    case 2:
	                        // We have received a target change with a global snapshot if the snapshot
	                        // version is not equal to SnapshotVersion.MIN.
	                        _a.sent();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Takes a batch of changes from the Datastore, repackages them as a
	     * RemoteEvent, and passes that on to the listener, which is typically the
	     * SyncEngine.
	     */
	    RemoteStore.prototype.raiseWatchSnapshot = function (snapshotVersion) {
	        var _this = this;
	        assert(!snapshotVersion.isEqual(SnapshotVersion.MIN), "Can't raise event for unknown SnapshotVersion");
	        var remoteEvent = this.watchChangeAggregator.createRemoteEvent(snapshotVersion);
	        // Update in-memory resume tokens. LocalStore will update the
	        // persistent view of these when applying the completed RemoteEvent.
	        forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
	            if (change.resumeToken.length > 0) {
	                var queryData = _this.listenTargets[targetId];
	                // A watched target might have been removed already.
	                if (queryData) {
	                    _this.listenTargets[targetId] = queryData.copy({
	                        resumeToken: change.resumeToken,
	                        snapshotVersion: snapshotVersion
	                    });
	                }
	            }
	        });
	        // Re-establish listens for the targets that have been invalidated by
	        // existence filter mismatches.
	        remoteEvent.targetMismatches.forEach(function (targetId) {
	            var queryData = _this.listenTargets[targetId];
	            if (!queryData) {
	                // A watched target might have been removed already.
	                return;
	            }
	            // Clear the resume token for the query, since we're in a known mismatch
	            // state.
	            _this.listenTargets[targetId] = queryData.copy({
	                resumeToken: emptyByteString()
	            });
	            // Cause a hard reset by unwatching and rewatching immediately, but
	            // deliberately don't send a resume token so that we get a full update.
	            _this.sendUnwatchRequest(targetId);
	            // Mark the query we send as being on behalf of an existence filter
	            // mismatch, but don't actually retain that in listenTargets. This ensures
	            // that we flag the first re-listen this way without impacting future
	            // listens of this target (that might happen e.g. on reconnect).
	            var requestQueryData = new QueryData(queryData.query, targetId, QueryPurpose.ExistenceFilterMismatch, queryData.sequenceNumber);
	            _this.sendWatchRequest(requestQueryData);
	        });
	        // Finally raise remote event
	        return this.syncEngine.applyRemoteEvent(remoteEvent);
	    };
	    /** Handles an error on a target */
	    RemoteStore.prototype.handleTargetError = function (watchChange) {
	        var _this = this;
	        assert(!!watchChange.cause, 'Handling target error without a cause');
	        var error$$1 = watchChange.cause;
	        var promiseChain = Promise.resolve();
	        watchChange.targetIds.forEach(function (targetId) {
	            promiseChain = promiseChain.then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                return tslib_1.__generator(this, function (_a) {
	                    // A watched target might have been removed already.
	                    if (contains(this.listenTargets, targetId)) {
	                        delete this.listenTargets[targetId];
	                        this.watchChangeAggregator.removeTarget(targetId);
	                        return [2 /*return*/, this.syncEngine.rejectListen(targetId, error$$1)];
	                    }
	                    return [2 /*return*/];
	                });
	            }); });
	        });
	        return promiseChain;
	    };
	    /**
	     * Attempts to fill our write pipeline with writes from the LocalStore.
	     *
	     * Called internally to bootstrap or refill the write pipeline and by
	     * SyncEngine whenever there are new mutations to process.
	     *
	     * Starts the write stream if necessary.
	     */
	    RemoteStore.prototype.fillWritePipeline = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var lastBatchIdRetrieved, batch;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.canAddToWritePipeline()) return [3 /*break*/, 4];
	                        lastBatchIdRetrieved = this.writePipeline.length > 0
	                            ? this.writePipeline[this.writePipeline.length - 1].batchId
	                            : BATCHID_UNKNOWN;
	                        return [4 /*yield*/, this.localStore.nextMutationBatch(lastBatchIdRetrieved)];
	                    case 1:
	                        batch = _a.sent();
	                        if (!(batch === null)) return [3 /*break*/, 2];
	                        if (this.writePipeline.length === 0) {
	                            this.writeStream.markIdle();
	                        }
	                        return [3 /*break*/, 4];
	                    case 2:
	                        this.addToWritePipeline(batch);
	                        return [4 /*yield*/, this.fillWritePipeline()];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4:
	                        if (this.shouldStartWriteStream()) {
	                            this.startWriteStream();
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Returns true if we can add to the write pipeline (i.e. the network is
	     * enabled and the write pipeline is not full).
	     */
	    RemoteStore.prototype.canAddToWritePipeline = function () {
	        return (this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES);
	    };
	    // For testing
	    RemoteStore.prototype.outstandingWrites = function () {
	        return this.writePipeline.length;
	    };
	    /**
	     * Queues additional writes to be sent to the write stream, sending them
	     * immediately if the write stream is established.
	     */
	    RemoteStore.prototype.addToWritePipeline = function (batch) {
	        assert(this.canAddToWritePipeline(), 'addToWritePipeline called when pipeline is full');
	        this.writePipeline.push(batch);
	        if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {
	            this.writeStream.writeMutations(batch.mutations);
	        }
	    };
	    RemoteStore.prototype.shouldStartWriteStream = function () {
	        return (this.canUseNetwork() &&
	            !this.writeStream.isStarted() &&
	            this.writePipeline.length > 0);
	    };
	    RemoteStore.prototype.startWriteStream = function () {
	        assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');
	        this.writeStream.start();
	    };
	    RemoteStore.prototype.onWriteStreamOpen = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                this.writeStream.writeHandshake();
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.onWriteHandshakeComplete = function () {
	        var _this = this;
	        // Record the stream token.
	        return this.localStore
	            .setLastStreamToken(this.writeStream.lastStreamToken)
	            .then(function () {
	            // Send the write pipeline now that the stream is established.
	            for (var _i = 0, _a = _this.writePipeline; _i < _a.length; _i++) {
	                var batch = _a[_i];
	                _this.writeStream.writeMutations(batch.mutations);
	            }
	        })
	            .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); });
	    };
	    /**
	     * Verifies the error thrown by an LocalStore operation. If a LocalStore
	     * operation fails because the primary lease has been taken by another client,
	     * we ignore the error. All other errors are re-thrown.
	     *
	     * @param err An error returned by a LocalStore operation.
	     * @return A Promise that resolves after we recovered, or the original error.
	     */
	    RemoteStore.prototype.ignoreIfPrimaryLeaseLoss = function (err) {
	        if (isPrimaryLeaseLostError(err)) {
	            debug(LOG_TAG$8, 'Unexpectedly lost primary lease');
	        }
	        else {
	            throw err;
	        }
	    };
	    RemoteStore.prototype.onMutationResult = function (commitVersion, results) {
	        var _this = this;
	        // This is a response to a write containing mutations and should be
	        // correlated to the first write in our write pipeline.
	        assert(this.writePipeline.length > 0, 'Got result for empty write pipeline');
	        var batch = this.writePipeline.shift();
	        var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);
	        return this.syncEngine.applySuccessfulWrite(success).then(function () {
	            // It's possible that with the completion of this mutation another
	            // slot has freed up.
	            return _this.fillWritePipeline();
	        });
	    };
	    RemoteStore.prototype.onWriteStreamClose = function (error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var errorHandling;
	            return tslib_1.__generator(this, function (_a) {
	                if (error$$1 === undefined) {
	                    // Graceful stop (due to stop() or idle timeout). Make sure that's
	                    // desirable.
	                    assert(!this.shouldStartWriteStream(), 'Write stream was stopped gracefully while still needed.');
	                }
	                // If the write stream closed due to an error, invoke the error callbacks if
	                // there are pending writes.
	                if (error$$1 && this.writePipeline.length > 0) {
	                    errorHandling = void 0;
	                    if (this.writeStream.handshakeComplete) {
	                        // This error affects the actual write.
	                        errorHandling = this.handleWriteError(error$$1);
	                    }
	                    else {
	                        // If there was an error before the handshake has finished, it's
	                        // possible that the server is unable to process the stream token
	                        // we're sending. (Perhaps it's too old?)
	                        errorHandling = this.handleHandshakeError(error$$1);
	                    }
	                    return [2 /*return*/, errorHandling.then(function () {
	                            // The write stream might have been started by refilling the write
	                            // pipeline for failed writes
	                            if (_this.shouldStartWriteStream()) {
	                                _this.startWriteStream();
	                            }
	                        })];
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.handleHandshakeError = function (error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                // Reset the token if it's a permanent error or the error code is
	                // ABORTED, signaling the write stream is no longer valid.
	                if (isPermanentError(error$$1.code) || error$$1.code === Code.ABORTED) {
	                    debug(LOG_TAG$8, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);
	                    this.writeStream.lastStreamToken = emptyByteString();
	                    return [2 /*return*/, this.localStore
	                            .setLastStreamToken(emptyByteString())
	                            .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); })];
	                }
	                else {
	                    // Some other error, don't reset stream token. Our stream logic will
	                    // just retry with exponential backoff.
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.handleWriteError = function (error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var batch;
	            return tslib_1.__generator(this, function (_a) {
	                if (isPermanentError(error$$1.code)) {
	                    batch = this.writePipeline.shift();
	                    // In this case it's also unlikely that the server itself is melting
	                    // down -- this was just a bad request so inhibit backoff on the next
	                    // restart.
	                    this.writeStream.inhibitBackoff();
	                    return [2 /*return*/, this.syncEngine
	                            .rejectFailedWrite(batch.batchId, error$$1)
	                            .then(function () {
	                            // It's possible that with the completion of this mutation
	                            // another slot has freed up.
	                            return _this.fillWritePipeline();
	                        })];
	                }
	                else {
	                    // Transient error, just let the retry logic kick in.
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    RemoteStore.prototype.createTransaction = function () {
	        return new Transaction(this.datastore);
	    };
	    RemoteStore.prototype.handleCredentialChange = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.canUseNetwork()) return [3 /*break*/, 3];
	                        // Tear down and re-create our network streams. This will ensure we get a fresh auth token
	                        // for the new user and re-fill the write pipeline with new mutations from the LocalStore
	                        // (since mutations are per-user).
	                        debug(LOG_TAG$8, 'RemoteStore restarting streams for new credential');
	                        this.networkEnabled = false;
	                        return [4 /*yield*/, this.disableNetworkInternal()];
	                    case 1:
	                        _a.sent();
	                        this.onlineStateTracker.set(OnlineState.Unknown);
	                        return [4 /*yield*/, this.enableNetwork()];
	                    case 2:
	                        _a.sent();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Toggles the network state when the client gains or loses its primary lease.
	     */
	    RemoteStore.prototype.applyPrimaryState = function (isPrimary) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.isPrimary = isPrimary;
	                        if (!(isPrimary && this.networkEnabled)) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.enableNetwork()];
	                    case 1:
	                        _a.sent();
	                        return [3 /*break*/, 4];
	                    case 2:
	                        if (!!isPrimary) return [3 /*break*/, 4];
	                        return [4 /*yield*/, this.disableNetworkInternal()];
	                    case 3:
	                        _a.sent();
	                        this.onlineStateTracker.set(OnlineState.Unknown);
	                        _a.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return RemoteStore;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Holds the listeners and the last received ViewSnapshot for a query being
	 * tracked by EventManager.
	 */
	var QueryListenersInfo = /** @class */ (function () {
	    function QueryListenersInfo() {
	        this.listeners = [];
	    }
	    return QueryListenersInfo;
	}());
	/**
	 * EventManager is responsible for mapping queries to query event emitters.
	 * It handles "fan-out". -- Identical queries will re-use the same watch on the
	 * backend.
	 */
	var EventManager = /** @class */ (function () {
	    function EventManager(syncEngine) {
	        this.syncEngine = syncEngine;
	        this.queries = new ObjectMap(function (q) {
	            return q.canonicalId();
	        });
	        this.onlineState = OnlineState.Unknown;
	        this.syncEngine.subscribe(this);
	    }
	    EventManager.prototype.listen = function (listener) {
	        var query = listener.query;
	        var firstListen = false;
	        var queryInfo = this.queries.get(query);
	        if (!queryInfo) {
	            firstListen = true;
	            queryInfo = new QueryListenersInfo();
	            this.queries.set(query, queryInfo);
	        }
	        queryInfo.listeners.push(listener);
	        listener.applyOnlineStateChange(this.onlineState);
	        if (queryInfo.viewSnap)
	            listener.onViewSnapshot(queryInfo.viewSnap);
	        if (firstListen) {
	            return this.syncEngine.listen(query).then(function (targetId) {
	                queryInfo.targetId = targetId;
	                return targetId;
	            });
	        }
	        else {
	            return Promise.resolve(queryInfo.targetId);
	        }
	    };
	    EventManager.prototype.unlisten = function (listener) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var query, lastListen, queryInfo, i;
	            return tslib_1.__generator(this, function (_a) {
	                query = listener.query;
	                lastListen = false;
	                queryInfo = this.queries.get(query);
	                if (queryInfo) {
	                    i = queryInfo.listeners.indexOf(listener);
	                    if (i >= 0) {
	                        queryInfo.listeners.splice(i, 1);
	                        lastListen = queryInfo.listeners.length === 0;
	                    }
	                }
	                if (lastListen) {
	                    this.queries.delete(query);
	                    return [2 /*return*/, this.syncEngine.unlisten(query)];
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    EventManager.prototype.onWatchChange = function (viewSnaps) {
	        for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
	            var viewSnap = viewSnaps_1[_i];
	            var query = viewSnap.query;
	            var queryInfo = this.queries.get(query);
	            if (queryInfo) {
	                for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {
	                    var listener = _b[_a];
	                    listener.onViewSnapshot(viewSnap);
	                }
	                queryInfo.viewSnap = viewSnap;
	            }
	        }
	    };
	    EventManager.prototype.onWatchError = function (query, error) {
	        var queryInfo = this.queries.get(query);
	        if (queryInfo) {
	            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
	                var listener = _a[_i];
	                listener.onError(error);
	            }
	        }
	        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
	        // after an error.
	        this.queries.delete(query);
	    };
	    EventManager.prototype.onOnlineStateChange = function (onlineState) {
	        this.onlineState = onlineState;
	        this.queries.forEach(function (_, queryInfo) {
	            for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
	                var listener = _a[_i];
	                listener.applyOnlineStateChange(onlineState);
	            }
	        });
	    };
	    return EventManager;
	}());
	/**
	 * QueryListener takes a series of internal view snapshots and determines
	 * when to raise the event.
	 *
	 * It uses an Observer to dispatch events.
	 */
	var QueryListener = /** @class */ (function () {
	    function QueryListener(query, queryObserver, options) {
	        this.query = query;
	        this.queryObserver = queryObserver;
	        /**
	         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
	         * observer. This flag is set to true once we've actually raised an event.
	         */
	        this.raisedInitialEvent = false;
	        this.onlineState = OnlineState.Unknown;
	        this.options = options || {};
	    }
	    QueryListener.prototype.onViewSnapshot = function (snap) {
	        assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');
	        if (!this.options.includeMetadataChanges) {
	            // Remove the metadata only changes.
	            var docChanges = [];
	            for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {
	                var docChange = _a[_i];
	                if (docChange.type !== ChangeType.Metadata) {
	                    docChanges.push(docChange);
	                }
	            }
	            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, 
	            /* excludesMetadataChanges= */ true);
	        }
	        if (!this.raisedInitialEvent) {
	            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
	                this.raiseInitialEvent(snap);
	            }
	        }
	        else if (this.shouldRaiseEvent(snap)) {
	            this.queryObserver.next(snap);
	        }
	        this.snap = snap;
	    };
	    QueryListener.prototype.onError = function (error) {
	        this.queryObserver.error(error);
	    };
	    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {
	        this.onlineState = onlineState;
	        if (this.snap &&
	            !this.raisedInitialEvent &&
	            this.shouldRaiseInitialEvent(this.snap, onlineState)) {
	            this.raiseInitialEvent(this.snap);
	        }
	    };
	    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {
	        assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event');
	        // Always raise the first event when we're synced
	        if (!snap.fromCache) {
	            return true;
	        }
	        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
	        // or Online if we wait long enough).
	        var maybeOnline = onlineState !== OnlineState.Offline;
	        // Don't raise the event if we're online, aren't synced yet (checked
	        // above) and are waiting for a sync.
	        if (this.options.waitForSyncWhenOnline && maybeOnline) {
	            assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');
	            return false;
	        }
	        // Raise data from cache if we have any documents or we are offline
	        return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;
	    };
	    QueryListener.prototype.shouldRaiseEvent = function (snap) {
	        // We don't need to handle includeDocumentMetadataChanges here because
	        // the Metadata only changes have already been stripped out if needed.
	        // At this point the only changes we will see are the ones we should
	        // propagate.
	        if (snap.docChanges.length > 0) {
	            return true;
	        }
	        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;
	        if (snap.syncStateChanged || hasPendingWritesChanged) {
	            return this.options.includeMetadataChanges === true;
	        }
	        // Generally we should have hit one of the cases above, but it's possible
	        // to get here if there were only metadata docChanges and they got
	        // stripped out.
	        return false;
	    };
	    QueryListener.prototype.raiseInitialEvent = function (snap) {
	        assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');
	        snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
	        this.raisedInitialEvent = true;
	        this.queryObserver.next(snap);
	    };
	    return QueryListener;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A set of changes to what documents are currently in view and out of view for
	 * a given query. These changes are sent to the LocalStore by the View (via
	 * the SyncEngine) and are used to pin / unpin documents as appropriate.
	 */
	var LocalViewChanges = /** @class */ (function () {
	    function LocalViewChanges(targetId, addedKeys, removedKeys) {
	        this.targetId = targetId;
	        this.addedKeys = addedKeys;
	        this.removedKeys = removedKeys;
	    }
	    LocalViewChanges.fromSnapshot = function (targetId, viewSnapshot) {
	        var addedKeys = documentKeySet();
	        var removedKeys = documentKeySet();
	        for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {
	            var docChange = _a[_i];
	            switch (docChange.type) {
	                case ChangeType.Added:
	                    addedKeys = addedKeys.add(docChange.doc.key);
	                    break;
	                case ChangeType.Removed:
	                    removedKeys = removedKeys.add(docChange.doc.key);
	                    break;
	                default:
	                // do nothing
	            }
	        }
	        return new LocalViewChanges(targetId, addedKeys, removedKeys);
	    };
	    return LocalViewChanges;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var AddedLimboDocument = /** @class */ (function () {
	    function AddedLimboDocument(key) {
	        this.key = key;
	    }
	    return AddedLimboDocument;
	}());
	var RemovedLimboDocument = /** @class */ (function () {
	    function RemovedLimboDocument(key) {
	        this.key = key;
	    }
	    return RemovedLimboDocument;
	}());
	/**
	 * View is responsible for computing the final merged truth of what docs are in
	 * a query. It gets notified of local and remote changes to docs, and applies
	 * the query filters and limits to determine the most correct possible results.
	 */
	var View = /** @class */ (function () {
	    function View(query, 
	    /** Documents included in the remote target */
	    _syncedDocuments) {
	        this.query = query;
	        this._syncedDocuments = _syncedDocuments;
	        this.syncState = null;
	        /**
	         * A flag whether the view is current with the backend. A view is considered
	         * current after it has seen the current flag from the backend and did not
	         * lose consistency within the watch stream (e.g. because of an existence
	         * filter mismatch).
	         */
	        this.current = false;
	        /** Documents in the view but not in the remote target */
	        this.limboDocuments = documentKeySet();
	        /** Document Keys that have local changes */
	        this.mutatedKeys = documentKeySet();
	        this.documentSet = new DocumentSet(query.docComparator.bind(query));
	    }
	    Object.defineProperty(View.prototype, "syncedDocuments", {
	        /**
	         * The set of remote documents that the server has told us belongs to the target associated with
	         * this view.
	         */
	        get: function () {
	            return this._syncedDocuments;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Iterates over a set of doc changes, applies the query limit, and computes
	     * what the new results should be, what the changes were, and whether we may
	     * need to go back to the local cache for more results. Does not make any
	     * changes to the view.
	     * @param docChanges The doc changes to apply to this view.
	     * @param previousChanges If this is being called with a refill, then start
	     *        with this set of docs and changes instead of the current view.
	     * @return a new set of docs, changes, and refill flag.
	     */
	    View.prototype.computeDocChanges = function (docChanges, previousChanges) {
	        var _this = this;
	        var changeSet = previousChanges
	            ? previousChanges.changeSet
	            : new DocumentChangeSet();
	        var oldDocumentSet = previousChanges
	            ? previousChanges.documentSet
	            : this.documentSet;
	        var newMutatedKeys = previousChanges
	            ? previousChanges.mutatedKeys
	            : this.mutatedKeys;
	        var newDocumentSet = oldDocumentSet;
	        var needsRefill = false;
	        // Track the last doc in a (full) limit. This is necessary, because some
	        // update (a delete, or an update moving a doc past the old limit) might
	        // mean there is some other document in the local cache that either should
	        // come (1) between the old last limit doc and the new last document, in the
	        // case of updates, or (2) after the new last document, in the case of
	        // deletes. So we keep this doc at the old limit to compare the updates to.
	        //
	        // Note that this should never get used in a refill (when previousChanges is
	        // set), because there will only be adds -- no deletes or updates.
	        var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit
	            ? oldDocumentSet.last()
	            : null;
	        docChanges.inorderTraversal(function (key, newMaybeDoc) {
	            var oldDoc = oldDocumentSet.get(key);
	            var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;
	            if (newDoc) {
	                assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' +
	                    key +
	                    ' != ' +
	                    newDoc.key);
	                newDoc = _this.query.matches(newDoc) ? newDoc : null;
	            }
	            var oldDocHadPendingMutations = oldDoc
	                ? _this.mutatedKeys.has(oldDoc.key)
	                : false;
	            var newDocHasPendingMutations = newDoc
	                ? newDoc.hasLocalMutations ||
	                    // We only consider committed mutations for documents that were
	                    // mutated during the lifetime of the view.
	                    (_this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)
	                : false;
	            var changeApplied = false;
	            // Calculate change
	            if (oldDoc && newDoc) {
	                var docsEqual = oldDoc.data.isEqual(newDoc.data);
	                if (!docsEqual) {
	                    if (!_this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {
	                        changeSet.track({
	                            type: ChangeType.Modified,
	                            doc: newDoc
	                        });
	                        changeApplied = true;
	                        if (lastDocInLimit &&
	                            _this.query.docComparator(newDoc, lastDocInLimit) > 0) {
	                            // This doc moved from inside the limit to after the limit.
	                            // That means there may be some doc in the local cache that's
	                            // actually less than this one.
	                            needsRefill = true;
	                        }
	                    }
	                }
	                else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
	                    changeSet.track({ type: ChangeType.Metadata, doc: newDoc });
	                    changeApplied = true;
	                }
	            }
	            else if (!oldDoc && newDoc) {
	                changeSet.track({ type: ChangeType.Added, doc: newDoc });
	                changeApplied = true;
	            }
	            else if (oldDoc && !newDoc) {
	                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });
	                changeApplied = true;
	                if (lastDocInLimit) {
	                    // A doc was removed from a full limit query. We'll need to
	                    // requery from the local cache to see if we know about some other
	                    // doc that should be in the results.
	                    needsRefill = true;
	                }
	            }
	            if (changeApplied) {
	                if (newDoc) {
	                    newDocumentSet = newDocumentSet.add(newDoc);
	                    if (newDocHasPendingMutations) {
	                        newMutatedKeys = newMutatedKeys.add(key);
	                    }
	                    else {
	                        newMutatedKeys = newMutatedKeys.delete(key);
	                    }
	                }
	                else {
	                    newDocumentSet = newDocumentSet.delete(key);
	                    newMutatedKeys = newMutatedKeys.delete(key);
	                }
	            }
	        });
	        if (this.query.hasLimit()) {
	            while (newDocumentSet.size > this.query.limit) {
	                var oldDoc = newDocumentSet.last();
	                newDocumentSet = newDocumentSet.delete(oldDoc.key);
	                newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
	                changeSet.track({ type: ChangeType.Removed, doc: oldDoc });
	            }
	        }
	        assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');
	        return {
	            documentSet: newDocumentSet,
	            changeSet: changeSet,
	            needsRefill: needsRefill,
	            mutatedKeys: newMutatedKeys
	        };
	    };
	    View.prototype.shouldWaitForSyncedDocument = function (oldDoc, newDoc) {
	        // We suppress the initial change event for documents that were modified as
	        // part of a write acknowledgment (e.g. when the value of a server transform
	        // is applied) as Watch will send us the same document again.
	        // By suppressing the event, we only raise two user visible events (one with
	        // `hasPendingWrites` and the final state of the document) instead of three
	        // (one with `hasPendingWrites`, the modified document with
	        // `hasPendingWrites` and the final state of the document).
	        return (oldDoc.hasLocalMutations &&
	            newDoc.hasCommittedMutations &&
	            !newDoc.hasLocalMutations);
	    };
	    /**
	     * Updates the view with the given ViewDocumentChanges and optionally updates
	     * limbo docs and sync state from the provided target change.
	     * @param docChanges The set of changes to make to the view's docs.
	     * @param updateLimboDocuments Whether to update limbo documents based on this
	     *        change.
	     * @param targetChange A target change to apply for computing limbo docs and
	     *        sync state.
	     * @return A new ViewChange with the given docs, changes, and sync state.
	     */
	    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
	    View.prototype.applyChanges = function (docChanges, updateLimboDocuments, targetChange) {
	        var _this = this;
	        assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');
	        var oldDocs = this.documentSet;
	        this.documentSet = docChanges.documentSet;
	        this.mutatedKeys = docChanges.mutatedKeys;
	        // Sort changes based on type and query comparator
	        var changes = docChanges.changeSet.getChanges();
	        changes.sort(function (c1, c2) {
	            return (compareChangeType(c1.type, c2.type) ||
	                _this.query.docComparator(c1.doc, c2.doc));
	        });
	        this.applyTargetChange(targetChange);
	        var limboChanges = updateLimboDocuments
	            ? this.updateLimboDocuments()
	            : [];
	        var synced = this.limboDocuments.size === 0 && this.current;
	        var newSyncState = synced ? SyncState.Synced : SyncState.Local;
	        var syncStateChanged = newSyncState !== this.syncState;
	        this.syncState = newSyncState;
	        if (changes.length === 0 && !syncStateChanged) {
	            // no changes
	            return { limboChanges: limboChanges };
	        }
	        else {
	            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === SyncState.Local, syncStateChanged, 
	            /* excludesMetadataChanges= */ false);
	            return {
	                snapshot: snap,
	                limboChanges: limboChanges
	            };
	        }
	    };
	    /**
	     * Applies an OnlineState change to the view, potentially generating a
	     * ViewChange if the view's syncState changes as a result.
	     */
	    View.prototype.applyOnlineStateChange = function (onlineState) {
	        if (this.current && onlineState === OnlineState.Offline) {
	            // If we're offline, set `current` to false and then call applyChanges()
	            // to refresh our syncState and generate a ViewChange as appropriate. We
	            // are guaranteed to get a new TargetChange that sets `current` back to
	            // true once the client is back online.
	            this.current = false;
	            return this.applyChanges({
	                documentSet: this.documentSet,
	                changeSet: new DocumentChangeSet(),
	                mutatedKeys: this.mutatedKeys,
	                needsRefill: false
	            }, 
	            /* updateLimboDocuments= */ false);
	        }
	        else {
	            // No effect, just return a no-op ViewChange.
	            return { limboChanges: [] };
	        }
	    };
	    /**
	     * Returns whether the doc for the given key should be in limbo.
	     */
	    View.prototype.shouldBeInLimbo = function (key) {
	        // If the remote end says it's part of this query, it's not in limbo.
	        if (this._syncedDocuments.has(key)) {
	            return false;
	        }
	        // The local store doesn't think it's a result, so it shouldn't be in limbo.
	        if (!this.documentSet.has(key)) {
	            return false;
	        }
	        // If there are local changes to the doc, they might explain why the server
	        // doesn't know that it's part of the query. So don't put it in limbo.
	        // TODO(klimt): Ideally, we would only consider changes that might actually
	        // affect this specific query.
	        if (this.documentSet.get(key).hasLocalMutations) {
	            return false;
	        }
	        // Everything else is in limbo.
	        return true;
	    };
	    /**
	     * Updates syncedDocuments, current, and limbo docs based on the given change.
	     * Returns the list of changes to which docs are in limbo.
	     */
	    View.prototype.applyTargetChange = function (targetChange) {
	        var _this = this;
	        if (targetChange) {
	            targetChange.addedDocuments.forEach(function (key) { return (_this._syncedDocuments = _this._syncedDocuments.add(key)); });
	            targetChange.modifiedDocuments.forEach(function (key) {
	                return assert(_this._syncedDocuments.has(key), "Modified document " + key + " not found in view.");
	            });
	            targetChange.removedDocuments.forEach(function (key) { return (_this._syncedDocuments = _this._syncedDocuments.delete(key)); });
	            this.current = targetChange.current;
	        }
	    };
	    View.prototype.updateLimboDocuments = function () {
	        var _this = this;
	        // We can only determine limbo documents when we're in-sync with the server.
	        if (!this.current) {
	            return [];
	        }
	        // TODO(klimt): Do this incrementally so that it's not quadratic when
	        // updating many documents.
	        var oldLimboDocuments = this.limboDocuments;
	        this.limboDocuments = documentKeySet();
	        this.documentSet.forEach(function (doc) {
	            if (_this.shouldBeInLimbo(doc.key)) {
	                _this.limboDocuments = _this.limboDocuments.add(doc.key);
	            }
	        });
	        // Diff the new limbo docs with the old limbo docs.
	        var changes = [];
	        oldLimboDocuments.forEach(function (key) {
	            if (!_this.limboDocuments.has(key)) {
	                changes.push(new RemovedLimboDocument(key));
	            }
	        });
	        this.limboDocuments.forEach(function (key) {
	            if (!oldLimboDocuments.has(key)) {
	                changes.push(new AddedLimboDocument(key));
	            }
	        });
	        return changes;
	    };
	    /**
	     * Update the in-memory state of the current view with the state read from
	     * persistence.
	     *
	     * We update the query view whenever a client's primary status changes:
	     * - When a client transitions from primary to secondary, it can miss
	     *   LocalStorage updates and its query views may temporarily not be
	     *   synchronized with the state on disk.
	     * - For secondary to primary transitions, the client needs to update the list
	     *   of `syncedDocuments` since secondary clients update their query views
	     *   based purely on synthesized RemoteEvents.
	     *
	     * @param localDocs - The documents that match the query according to the
	     * LocalStore.
	     * @param remoteKeys - The keys of the documents that match the query
	     * according to the backend.
	     *
	     * @return The ViewChange that resulted from this synchronization.
	     */
	    // PORTING NOTE: Multi-tab only.
	    View.prototype.synchronizeWithPersistedState = function (localDocs, remoteKeys) {
	        this._syncedDocuments = remoteKeys;
	        this.limboDocuments = documentKeySet();
	        var docChanges = this.computeDocChanges(localDocs);
	        return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);
	    };
	    /**
	     * Returns a view snapshot as if this query was just listened to. Contains
	     * a document add for every existing document and the `fromCache` and
	     * `hasPendingWrites` status of the already established view.
	     */
	    // PORTING NOTE: Multi-tab only.
	    View.prototype.computeInitialSnapshot = function () {
	        return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === SyncState.Local);
	    };
	    return View;
	}());
	function compareChangeType(c1, c2) {
	    var order = function (change) {
	        switch (change) {
	            case ChangeType.Added:
	                return 1;
	            case ChangeType.Modified:
	                return 2;
	            case ChangeType.Metadata:
	                // A metadata change is converted to a modified change at the public
	                // api layer.  Since we sort by document key and then change type,
	                // metadata and modified changes must be sorted equivalently.
	                return 2;
	            case ChangeType.Removed:
	                return 0;
	            default:
	                return fail('Unknown ChangeType: ' + change);
	        }
	    };
	    return order(c1) - order(c2);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$9 = 'SyncEngine';
	/**
	 * QueryView contains all of the data that SyncEngine needs to keep track of for
	 * a particular query.
	 */
	var QueryView = /** @class */ (function () {
	    function QueryView(
	    /**
	     * The query itself.
	     */
	    query, 
	    /**
	     * The target number created by the client that is used in the watch
	     * stream to identify this query.
	     */
	    targetId, 
	    /**
	     * The view is responsible for computing the final merged truth of what
	     * docs are in the query. It gets notified of local and remote changes,
	     * and applies the query filters and limits to determine the most correct
	     * possible results.
	     */
	    view) {
	        this.query = query;
	        this.targetId = targetId;
	        this.view = view;
	    }
	    return QueryView;
	}());
	/** Tracks a limbo resolution. */
	var LimboResolution = /** @class */ (function () {
	    function LimboResolution(key) {
	        this.key = key;
	    }
	    return LimboResolution;
	}());
	/**
	 * SyncEngine is the central controller in the client SDK architecture. It is
	 * the glue code between the EventManager, LocalStore, and RemoteStore. Some of
	 * SyncEngine's responsibilities include:
	 * 1. Coordinating client requests and remote events between the EventManager
	 *    and the local and remote data stores.
	 * 2. Managing a View object for each query, providing the unified view between
	 *    the local and remote data stores.
	 * 3. Notifying the RemoteStore when the LocalStore has new mutations in its
	 *    queue that need sending to the backend.
	 *
	 * The SyncEngine’s methods should only ever be called by methods running in the
	 * global async queue.
	 */
	var SyncEngine = /** @class */ (function () {
	    function SyncEngine(localStore, remoteStore, 
	    // PORTING NOTE: Manages state synchronization in multi-tab environments.
	    sharedClientState, currentUser) {
	        this.localStore = localStore;
	        this.remoteStore = remoteStore;
	        this.sharedClientState = sharedClientState;
	        this.currentUser = currentUser;
	        this.syncEngineListener = null;
	        this.queryViewsByQuery = new ObjectMap(function (q) {
	            return q.canonicalId();
	        });
	        this.queryViewsByTarget = {};
	        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
	        this.limboResolutionsByTarget = {};
	        this.limboDocumentRefs = new ReferenceSet();
	        /** Stores user completion handlers, indexed by User and BatchId. */
	        this.mutationUserCallbacks = {};
	        this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();
	        // The primary state is set to `true` or `false` immediately after Firestore
	        // startup. In the interim, a client should only be considered primary if
	        // `isPrimary` is true.
	        this.isPrimary = undefined;
	        this.onlineState = OnlineState.Unknown;
	    }
	    Object.defineProperty(SyncEngine.prototype, "isPrimaryClient", {
	        // Only used for testing.
	        get: function () {
	            return this.isPrimary === true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Subscribes to SyncEngine notifications. Has to be called exactly once. */
	    SyncEngine.prototype.subscribe = function (syncEngineListener) {
	        assert(syncEngineListener !== null, 'SyncEngine listener cannot be null');
	        assert(this.syncEngineListener === null, 'SyncEngine already has a subscriber.');
	        this.syncEngineListener = syncEngineListener;
	    };
	    /**
	     * Initiates the new listen, resolves promise when listen enqueued to the
	     * server. All the subsequent view snapshots or errors are sent to the
	     * subscribed handlers. Returns the targetId of the query.
	     */
	    SyncEngine.prototype.listen = function (query) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var targetId, viewSnapshot, queryView, queryData, status_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.assertSubscribed('listen()');
	                        queryView = this.queryViewsByQuery.get(query);
	                        if (!queryView) return [3 /*break*/, 1];
	                        // PORTING NOTE: With Mult-Tab Web, it is possible that a query view
	                        // already exists when EventManager calls us for the first time. This
	                        // happens when the primary tab is already listening to this query on
	                        // behalf of another tab and the user of the primary also starts listening
	                        // to the query. EventManager will not have an assigned target ID in this
	                        // case and calls `listen` to obtain this ID.
	                        targetId = queryView.targetId;
	                        this.sharedClientState.addLocalQueryTarget(targetId);
	                        viewSnapshot = queryView.view.computeInitialSnapshot();
	                        return [3 /*break*/, 4];
	                    case 1: return [4 /*yield*/, this.localStore.allocateQuery(query)];
	                    case 2:
	                        queryData = _a.sent();
	                        status_1 = this.sharedClientState.addLocalQueryTarget(queryData.targetId);
	                        targetId = queryData.targetId;
	                        return [4 /*yield*/, this.initializeViewAndComputeSnapshot(queryData, status_1 === 'current')];
	                    case 3:
	                        viewSnapshot = _a.sent();
	                        if (this.isPrimary) {
	                            this.remoteStore.listen(queryData);
	                        }
	                        _a.label = 4;
	                    case 4:
	                        this.syncEngineListener.onWatchChange([viewSnapshot]);
	                        return [2 /*return*/, targetId];
	                }
	            });
	        });
	    };
	    /**
	     * Registers a view for a previously unknown query and computes its initial
	     * snapshot.
	     */
	    SyncEngine.prototype.initializeViewAndComputeSnapshot = function (queryData, current) {
	        var _this = this;
	        var query = queryData.query;
	        return this.localStore.executeQuery(query).then(function (docs) {
	            return _this.localStore
	                .remoteDocumentKeys(queryData.targetId)
	                .then(function (remoteKeys) {
	                var view = new View(query, remoteKeys);
	                var viewDocChanges = view.computeDocChanges(docs);
	                // tslint:disable-next-line:max-line-length Prettier formats this exceed 100 characters.
	                var synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(queryData.targetId, current && _this.onlineState !== OnlineState.Offline);
	                var viewChange = view.applyChanges(viewDocChanges, 
	                /* updateLimboDocuments= */ _this.isPrimary === true, synthesizedTargetChange);
	                assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');
	                assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');
	                var data = new QueryView(query, queryData.targetId, view);
	                _this.queryViewsByQuery.set(query, data);
	                _this.queryViewsByTarget[queryData.targetId] = data;
	                return viewChange.snapshot;
	            });
	        });
	    };
	    /**
	     * Reconcile the list of synced documents in an existing view with those
	     * from persistence.
	     */
	    // PORTING NOTE: Multi-tab only.
	    SyncEngine.prototype.synchronizeViewAndComputeSnapshot = function (queryView) {
	        var _this = this;
	        return this.localStore.executeQuery(queryView.query).then(function (docs) {
	            return _this.localStore
	                .remoteDocumentKeys(queryView.targetId)
	                .then(function (remoteKeys) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                var viewSnapshot;
	                return tslib_1.__generator(this, function (_a) {
	                    viewSnapshot = queryView.view.synchronizeWithPersistedState(docs, remoteKeys);
	                    if (this.isPrimary) {
	                        this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);
	                    }
	                    return [2 /*return*/, viewSnapshot];
	                });
	            }); });
	        });
	    };
	    /** Stops listening to the query. */
	    SyncEngine.prototype.unlisten = function (query) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var queryView, targetRemainsActive;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.assertSubscribed('unlisten()');
	                        queryView = this.queryViewsByQuery.get(query);
	                        assert(!!queryView, 'Trying to unlisten on query not found:' + query);
	                        if (!this.isPrimary) return [3 /*break*/, 3];
	                        // We need to remove the local query target first to allow us to verify
	                        // whether any other client is still interested in this target.
	                        this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
	                        targetRemainsActive = this.sharedClientState.isActiveQueryTarget(queryView.targetId);
	                        if (!!targetRemainsActive) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.localStore
	                                .releaseQuery(query, /*keepPersistedQueryData=*/ false)
	                                .then(function () {
	                                _this.sharedClientState.clearQueryState(queryView.targetId);
	                                _this.remoteStore.unlisten(queryView.targetId);
	                                _this.removeAndCleanupQuery(queryView);
	                            })
	                                .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); })];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [3 /*break*/, 5];
	                    case 3:
	                        this.removeAndCleanupQuery(queryView);
	                        return [4 /*yield*/, this.localStore.releaseQuery(query, 
	                            /*keepPersistedQueryData=*/ true)];
	                    case 4:
	                        _a.sent();
	                        _a.label = 5;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Initiates the write of local mutation batch which involves adding the
	     * writes to the mutation queue, notifying the remote store about new
	     * mutations and raising events for any changes this write caused.
	     *
	     * The promise returned by this call is resolved when the above steps
	     * have completed, *not* when the write was acked by the backend. The
	     * userCallback is resolved once the write was acked/rejected by the
	     * backend (or failed locally for any other reason).
	     */
	    SyncEngine.prototype.write = function (batch, userCallback) {
	        var _this = this;
	        this.assertSubscribed('write()');
	        return this.localStore
	            .localWrite(batch)
	            .then(function (result) {
	            _this.sharedClientState.addPendingMutation(result.batchId);
	            _this.addMutationCallback(result.batchId, userCallback);
	            return _this.emitNewSnapsAndNotifyLocalStore(result.changes);
	        })
	            .then(function () {
	            return _this.remoteStore.fillWritePipeline();
	        });
	    };
	    // TODO(klimt): Wrap the given error in a standard Firestore error object.
	    SyncEngine.prototype.wrapUpdateFunctionError = function (error$$1) {
	        return error$$1;
	    };
	    /**
	     * Takes an updateFunction in which a set of reads and writes can be performed
	     * atomically. In the updateFunction, the client can read and write values
	     * using the supplied transaction object. After the updateFunction, all
	     * changes will be committed. If some other client has changed any of the data
	     * referenced, then the updateFunction will be called again. If the
	     * updateFunction still fails after the given number of retries, then the
	     * transaction will be rejection.
	     *
	     * The transaction object passed to the updateFunction contains methods for
	     * accessing documents and collections. Unlike other datastore access, data
	     * accessed with the transaction will not reflect local changes that have not
	     * been committed. For this reason, it is required that all reads are
	     * performed before any writes. Transactions must be performed while online.
	     *
	     * The promise returned is resolved when the transaction is fully committed.
	     */
	    SyncEngine.prototype.runTransaction = function (updateFunction, retries) {
	        var _this = this;
	        if (retries === void 0) { retries = 5; }
	        assert(retries >= 0, 'Got negative number of retries for transaction.');
	        var transaction = this.remoteStore.createTransaction();
	        var wrappedUpdateFunction = function () {
	            try {
	                var userPromise = updateFunction(transaction);
	                if (isNullOrUndefined(userPromise) ||
	                    !userPromise.catch ||
	                    !userPromise.then) {
	                    return Promise.reject(Error('Transaction callback must return a Promise'));
	                }
	                return userPromise.catch(function (e) {
	                    return Promise.reject(_this.wrapUpdateFunctionError(e));
	                });
	            }
	            catch (e) {
	                return Promise.reject(_this.wrapUpdateFunctionError(e));
	            }
	        };
	        return wrappedUpdateFunction().then(function (result) {
	            return transaction
	                .commit()
	                .then(function () {
	                return result;
	            })
	                .catch(function (error$$1) {
	                if (retries === 0) {
	                    return Promise.reject(error$$1);
	                }
	                // TODO(klimt): Put in a retry delay?
	                return _this.runTransaction(updateFunction, retries - 1);
	            });
	        });
	    };
	    SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {
	        var _this = this;
	        this.assertSubscribed('applyRemoteEvent()');
	        return this.localStore
	            .applyRemoteEvent(remoteEvent)
	            .then(function (changes) {
	            // Update `receivedDocument` as appropriate for any limbo targets.
	            forEach(remoteEvent.targetChanges, function (targetId, targetChange) {
	                var limboResolution = _this.limboResolutionsByTarget[targetId];
	                if (limboResolution) {
	                    // Since this is a limbo resolution lookup, it's for a single document
	                    // and it could be added, modified, or removed, but not a combination.
	                    assert(targetChange.addedDocuments.size +
	                        targetChange.modifiedDocuments.size +
	                        targetChange.removedDocuments.size <=
	                        1, 'Limbo resolution for single document contains multiple changes.');
	                    if (targetChange.addedDocuments.size > 0) {
	                        limboResolution.receivedDocument = true;
	                    }
	                    else if (targetChange.modifiedDocuments.size > 0) {
	                        assert(limboResolution.receivedDocument, 'Received change for limbo target document without add.');
	                    }
	                    else if (targetChange.removedDocuments.size > 0) {
	                        assert(limboResolution.receivedDocument, 'Received remove for limbo target document without add.');
	                        limboResolution.receivedDocument = false;
	                    }
	                    else {
	                        // This was probably just a CURRENT targetChange or similar.
	                    }
	                }
	            });
	            return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);
	        })
	            .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); });
	    };
	    /**
	     * Applies an OnlineState change to the sync engine and notifies any views of
	     * the change.
	     */
	    SyncEngine.prototype.applyOnlineStateChange = function (onlineState, source) {
	        // If we are the secondary client, we explicitly ignore the remote store's
	        // online state (the local client may go offline, even though the primary
	        // tab remains online) and only apply the primary tab's online state from
	        // SharedClientState.
	        if ((this.isPrimary && source === OnlineStateSource.RemoteStore) ||
	            (!this.isPrimary && source === OnlineStateSource.SharedClientState)) {
	            var newViewSnapshots_1 = [];
	            this.queryViewsByQuery.forEach(function (query, queryView) {
	                var viewChange = queryView.view.applyOnlineStateChange(onlineState);
	                assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');
	                if (viewChange.snapshot) {
	                    newViewSnapshots_1.push(viewChange.snapshot);
	                }
	            });
	            this.syncEngineListener.onOnlineStateChange(onlineState);
	            this.syncEngineListener.onWatchChange(newViewSnapshots_1);
	            this.onlineState = onlineState;
	            if (this.isPrimary) {
	                this.sharedClientState.setOnlineState(onlineState);
	            }
	        }
	    };
	    SyncEngine.prototype.rejectListen = function (targetId, err) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_1, queryView_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.assertSubscribed('rejectListens()');
	                        // PORTING NOTE: Multi-tab only.
	                        this.sharedClientState.updateQueryState(targetId, 'rejected', err);
	                        limboResolution = this.limboResolutionsByTarget[targetId];
	                        limboKey = limboResolution && limboResolution.key;
	                        if (!limboKey) return [3 /*break*/, 1];
	                        // Since this query failed, we won't want to manually unlisten to it.
	                        // So go ahead and remove it from bookkeeping.
	                        this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);
	                        delete this.limboResolutionsByTarget[targetId];
	                        documentUpdates = new SortedMap(DocumentKey.comparator);
	                        documentUpdates = documentUpdates.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));
	                        resolvedLimboDocuments = documentKeySet().add(limboKey);
	                        event_1 = new RemoteEvent(SnapshotVersion.MIN, 
	                        /* targetChanges= */ {}, 
	                        /* targetMismatches= */ new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
	                        return [2 /*return*/, this.applyRemoteEvent(event_1)];
	                    case 1:
	                        queryView_1 = this.queryViewsByTarget[targetId];
	                        assert(!!queryView_1, 'Unknown targetId: ' + targetId);
	                        return [4 /*yield*/, this.localStore
	                                .releaseQuery(queryView_1.query, /* keepPersistedQueryData */ false)
	                                .then(function () { return _this.removeAndCleanupQuery(queryView_1); })
	                                .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); })];
	                    case 2:
	                        _a.sent();
	                        this.syncEngineListener.onWatchError(queryView_1.query, err);
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // PORTING NOTE: Multi-tab only
	    SyncEngine.prototype.applyBatchState = function (batchId, batchState, error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var documents;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.assertSubscribed('applyBatchState()');
	                        return [4 /*yield*/, this.localStore.lookupMutationDocuments(batchId)];
	                    case 1:
	                        documents = _a.sent();
	                        if (documents === null) {
	                            // A throttled tab may not have seen the mutation before it was completed
	                            // and removed from the mutation queue, in which case we won't have cached
	                            // the affected documents. In this case we can safely ignore the update
	                            // since that means we didn't apply the mutation locally at all (if we
	                            // had, we would have cached the affected documents), and so we will just
	                            // see any resulting document changes via normal remote document updates
	                            // as applicable.
	                            debug(LOG_TAG$9, 'Cannot apply mutation batch with id: ' + batchId);
	                            return [2 /*return*/];
	                        }
	                        if (!(batchState === 'pending')) return [3 /*break*/, 3];
	                        // If we are the primary client, we need to send this write to the
	                        // backend. Secondary clients will ignore these writes since their remote
	                        // connection is disabled.
	                        return [4 /*yield*/, this.remoteStore.fillWritePipeline()];
	                    case 2:
	                        // If we are the primary client, we need to send this write to the
	                        // backend. Secondary clients will ignore these writes since their remote
	                        // connection is disabled.
	                        _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        if (batchState === 'acknowledged' || batchState === 'rejected') {
	                            // NOTE: Both these methods are no-ops for batches that originated from
	                            // other clients.
	                            this.processUserCallback(batchId, error$$1 ? error$$1 : null);
	                            this.localStore.removeCachedMutationBatchMetadata(batchId);
	                        }
	                        else {
	                            fail("Unknown batchState: " + batchState);
	                        }
	                        _a.label = 4;
	                    case 4: return [4 /*yield*/, this.emitNewSnapsAndNotifyLocalStore(documents)];
	                    case 5:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {
	        var _this = this;
	        this.assertSubscribed('applySuccessfulWrite()');
	        var batchId = mutationBatchResult.batch.batchId;
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught
	        // up), so we raise user callbacks first so that they consistently happen
	        // before listen events.
	        this.processUserCallback(batchId, /*error=*/ null);
	        return this.localStore
	            .acknowledgeBatch(mutationBatchResult)
	            .then(function (changes) {
	            _this.sharedClientState.updateMutationState(batchId, 'acknowledged');
	            return _this.emitNewSnapsAndNotifyLocalStore(changes);
	        })
	            .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); });
	    };
	    SyncEngine.prototype.rejectFailedWrite = function (batchId, error$$1) {
	        var _this = this;
	        this.assertSubscribed('rejectFailedWrite()');
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught up),
	        // so we raise user callbacks first so that they consistently happen before
	        // listen events.
	        this.processUserCallback(batchId, error$$1);
	        return this.localStore
	            .rejectBatch(batchId)
	            .then(function (changes) {
	            _this.sharedClientState.updateMutationState(batchId, 'rejected', error$$1);
	            return _this.emitNewSnapsAndNotifyLocalStore(changes);
	        })
	            .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); });
	    };
	    SyncEngine.prototype.addMutationCallback = function (batchId, callback) {
	        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];
	        if (!newCallbacks) {
	            newCallbacks = new SortedMap(primitiveComparator);
	        }
	        newCallbacks = newCallbacks.insert(batchId, callback);
	        this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
	    };
	    /**
	     * Resolves or rejects the user callback for the given batch and then discards
	     * it.
	     */
	    SyncEngine.prototype.processUserCallback = function (batchId, error$$1) {
	        var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];
	        // NOTE: Mutations restored from persistence won't have callbacks, so it's
	        // okay for there to be no callback for this ID.
	        if (newCallbacks) {
	            var callback = newCallbacks.get(batchId);
	            if (callback) {
	                assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');
	                if (error$$1) {
	                    callback.reject(error$$1);
	                }
	                else {
	                    callback.resolve();
	                }
	                newCallbacks = newCallbacks.remove(batchId);
	            }
	            this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
	        }
	    };
	    SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {
	        var _this = this;
	        this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
	        this.queryViewsByQuery.delete(queryView.query);
	        delete this.queryViewsByTarget[queryView.targetId];
	        if (this.isPrimary) {
	            var limboKeys = this.limboDocumentRefs.referencesForId(queryView.targetId);
	            this.limboDocumentRefs.removeReferencesForId(queryView.targetId);
	            limboKeys.forEach(function (limboKey) {
	                var isReferenced = _this.limboDocumentRefs.containsKey(limboKey);
	                if (!isReferenced) {
	                    // We removed the last reference for this key
	                    _this.removeLimboTarget(limboKey);
	                }
	            });
	        }
	    };
	    SyncEngine.prototype.removeLimboTarget = function (key) {
	        // It's possible that the target already got removed because the query failed. In that case,
	        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
	        var limboTargetId = this.limboTargetsByKey.get(key);
	        if (limboTargetId === null) {
	            // This target already got removed, because the query failed.
	            return;
	        }
	        this.remoteStore.unlisten(limboTargetId);
	        this.limboTargetsByKey = this.limboTargetsByKey.remove(key);
	        delete this.limboResolutionsByTarget[limboTargetId];
	    };
	    SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {
	        for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
	            var limboChange = limboChanges_1[_i];
	            if (limboChange instanceof AddedLimboDocument) {
	                this.limboDocumentRefs.addReference(limboChange.key, targetId);
	                this.trackLimboChange(limboChange);
	            }
	            else if (limboChange instanceof RemovedLimboDocument) {
	                debug(LOG_TAG$9, 'Document no longer in limbo: ' + limboChange.key);
	                this.limboDocumentRefs.removeReference(limboChange.key, targetId);
	                var isReferenced = this.limboDocumentRefs.containsKey(limboChange.key);
	                if (!isReferenced) {
	                    // We removed the last reference for this key
	                    this.removeLimboTarget(limboChange.key);
	                }
	            }
	            else {
	                fail('Unknown limbo change: ' + JSON.stringify(limboChange));
	            }
	        }
	    };
	    SyncEngine.prototype.trackLimboChange = function (limboChange) {
	        var key = limboChange.key;
	        if (!this.limboTargetsByKey.get(key)) {
	            debug(LOG_TAG$9, 'New document in limbo: ' + key);
	            var limboTargetId = this.limboTargetIdGenerator.next();
	            var query = Query.atPath(key.path);
	            this.limboResolutionsByTarget[limboTargetId] = new LimboResolution(key);
	            this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.LimboResolution, ListenSequence.INVALID));
	            this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);
	        }
	    };
	    // Visible for testing
	    SyncEngine.prototype.currentLimboDocs = function () {
	        return this.limboTargetsByKey;
	    };
	    SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var newSnaps, docChangesInAllViews, queriesProcessed;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        newSnaps = [];
	                        docChangesInAllViews = [];
	                        queriesProcessed = [];
	                        this.queryViewsByQuery.forEach(function (_, queryView) {
	                            queriesProcessed.push(Promise.resolve()
	                                .then(function () {
	                                var viewDocChanges = queryView.view.computeDocChanges(changes);
	                                if (!viewDocChanges.needsRefill) {
	                                    return viewDocChanges;
	                                }
	                                // The query has a limit and some docs were removed, so we need
	                                // to re-run the query against the local store to make sure we
	                                // didn't lose any good docs that had been past the limit.
	                                return _this.localStore.executeQuery(queryView.query).then(function (docs) {
	                                    return queryView.view.computeDocChanges(docs, viewDocChanges);
	                                });
	                            })
	                                .then(function (viewDocChanges) {
	                                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];
	                                var viewChange = queryView.view.applyChanges(viewDocChanges, 
	                                /* updateLimboDocuments= */ _this.isPrimary === true, targetChange);
	                                _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges);
	                                if (viewChange.snapshot) {
	                                    if (_this.isPrimary) {
	                                        _this.sharedClientState.updateQueryState(queryView.targetId, viewChange.snapshot.fromCache ? 'not-current' : 'current');
	                                    }
	                                    newSnaps.push(viewChange.snapshot);
	                                    var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewChange.snapshot);
	                                    docChangesInAllViews.push(docChanges);
	                                }
	                            }));
	                        });
	                        return [4 /*yield*/, Promise.all(queriesProcessed)];
	                    case 1:
	                        _a.sent();
	                        this.syncEngineListener.onWatchChange(newSnaps);
	                        return [4 /*yield*/, this.localStore.notifyLocalViewChanges(docChangesInAllViews)];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Verifies the error thrown by an LocalStore operation. If a LocalStore
	     * operation fails because the primary lease has been taken by another client,
	     * we ignore the error (the persistence layer will immediately call
	     * `applyPrimaryLease` to propagate the primary state change). All other
	     * errors are re-thrown.
	     *
	     * @param err An error returned by a LocalStore operation.
	     * @return A Promise that resolves after we recovered, or the original error.
	     */
	    SyncEngine.prototype.ignoreIfPrimaryLeaseLoss = function (err) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (isPrimaryLeaseLostError(err)) {
	                    debug(LOG_TAG$9, 'Unexpectedly lost primary lease');
	                }
	                else {
	                    throw err;
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    SyncEngine.prototype.assertSubscribed = function (fnName) {
	        assert(this.syncEngineListener !== null, 'Trying to call ' + fnName + ' before calling subscribe().');
	    };
	    SyncEngine.prototype.handleCredentialChange = function (user) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var userChanged, result;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        userChanged = !this.currentUser.isEqual(user);
	                        this.currentUser = user;
	                        if (!userChanged) return [3 /*break*/, 3];
	                        return [4 /*yield*/, this.localStore.handleUserChange(user)];
	                    case 1:
	                        result = _a.sent();
	                        // TODO(b/114226417): Consider calling this only in the primary tab.
	                        this.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);
	                        return [4 /*yield*/, this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments)];
	                    case 2:
	                        _a.sent();
	                        _a.label = 3;
	                    case 3: return [4 /*yield*/, this.remoteStore.handleCredentialChange()];
	                    case 4:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // PORTING NOTE: Multi-tab only
	    SyncEngine.prototype.applyPrimaryState = function (isPrimary) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var activeTargets, activeQueries, _i, activeQueries_1, queryData, activeTargets_1, p_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(isPrimary === true && this.isPrimary !== true)) return [3 /*break*/, 3];
	                        this.isPrimary = true;
	                        return [4 /*yield*/, this.remoteStore.applyPrimaryState(true)];
	                    case 1:
	                        _a.sent();
	                        activeTargets = this.sharedClientState.getAllActiveQueryTargets();
	                        return [4 /*yield*/, this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets.toArray())];
	                    case 2:
	                        activeQueries = _a.sent();
	                        for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
	                            queryData = activeQueries_1[_i];
	                            this.remoteStore.listen(queryData);
	                        }
	                        return [3 /*break*/, 7];
	                    case 3:
	                        if (!(isPrimary === false && this.isPrimary !== false)) return [3 /*break*/, 7];
	                        this.isPrimary = false;
	                        activeTargets_1 = [];
	                        p_1 = Promise.resolve();
	                        forEachNumber(this.queryViewsByTarget, function (targetId, queryView) {
	                            if (_this.sharedClientState.isLocalQueryTarget(targetId)) {
	                                activeTargets_1.push(targetId);
	                            }
	                            else {
	                                p_1 = p_1.then(function () { return _this.unlisten(queryView.query); });
	                            }
	                            _this.remoteStore.unlisten(queryView.targetId);
	                        });
	                        return [4 /*yield*/, p_1];
	                    case 4:
	                        _a.sent();
	                        return [4 /*yield*/, this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_1)];
	                    case 5:
	                        _a.sent();
	                        this.resetLimboDocuments();
	                        return [4 /*yield*/, this.remoteStore.applyPrimaryState(false)];
	                    case 6:
	                        _a.sent();
	                        _a.label = 7;
	                    case 7: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // PORTING NOTE: Multi-tab only.
	    SyncEngine.prototype.resetLimboDocuments = function () {
	        var _this = this;
	        forEachNumber(this.limboResolutionsByTarget, function (targetId) {
	            _this.remoteStore.unlisten(targetId);
	        });
	        this.limboDocumentRefs.removeAllReferences();
	        this.limboResolutionsByTarget = [];
	        this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
	    };
	    /**
	     * Reconcile the query views of the provided query targets with the state from
	     * persistence. Raises snapshots for any changes that affect the local
	     * client and returns the updated state of all target's query data.
	     */
	    // PORTING NOTE: Multi-tab only.
	    SyncEngine.prototype.synchronizeQueryViewsAndRaiseSnapshots = function (targets) {
	        var _this = this;
	        var p = Promise.resolve();
	        var activeQueries = [];
	        var newViewSnapshots = [];
	        var _loop_1 = function (targetId) {
	            p = p.then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                var queryData, queryView, viewChange, query;
	                return tslib_1.__generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            queryView = this.queryViewsByTarget[targetId];
	                            if (!queryView) return [3 /*break*/, 4];
	                            // For queries that have a local View, we need to update their state
	                            // in LocalStore (as the resume token and the snapshot version
	                            // might have changed) and reconcile their views with the persisted
	                            // state (the list of syncedDocuments may have gotten out of sync).
	                            return [4 /*yield*/, this.localStore.releaseQuery(queryView.query, 
	                                /*keepPersistedQueryData=*/ true)];
	                        case 1:
	                            // For queries that have a local View, we need to update their state
	                            // in LocalStore (as the resume token and the snapshot version
	                            // might have changed) and reconcile their views with the persisted
	                            // state (the list of syncedDocuments may have gotten out of sync).
	                            _a.sent();
	                            return [4 /*yield*/, this.localStore.allocateQuery(queryView.query)];
	                        case 2:
	                            queryData = _a.sent();
	                            return [4 /*yield*/, this.synchronizeViewAndComputeSnapshot(queryView)];
	                        case 3:
	                            viewChange = _a.sent();
	                            if (viewChange.snapshot) {
	                                newViewSnapshots.push(viewChange.snapshot);
	                            }
	                            return [3 /*break*/, 8];
	                        case 4:
	                            assert(this.isPrimary === true, 'A secondary tab should never have an active query without an active view.');
	                            return [4 /*yield*/, this.localStore.getQueryForTarget(targetId)];
	                        case 5:
	                            query = _a.sent();
	                            assert(!!query, "Query data for target " + targetId + " not found");
	                            return [4 /*yield*/, this.localStore.allocateQuery(query)];
	                        case 6:
	                            queryData = _a.sent();
	                            return [4 /*yield*/, this.initializeViewAndComputeSnapshot(queryData, 
	                                /*current=*/ false)];
	                        case 7:
	                            _a.sent();
	                            _a.label = 8;
	                        case 8:
	                            activeQueries.push(queryData);
	                            return [2 /*return*/];
	                    }
	                });
	            }); });
	        };
	        for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
	            var targetId = targets_1[_i];
	            _loop_1(targetId);
	        }
	        return p.then(function () {
	            _this.syncEngineListener.onWatchChange(newViewSnapshots);
	            return activeQueries;
	        });
	    };
	    // PORTING NOTE: Multi-tab only
	    SyncEngine.prototype.getActiveClients = function () {
	        return this.localStore.getActiveClients();
	    };
	    // PORTING NOTE: Multi-tab only
	    SyncEngine.prototype.applyTargetState = function (targetId, state, error$$1) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var _a, queryView;
	            return tslib_1.__generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (this.isPrimary) {
	                            // If we receive a target state notification via WebStorage, we are
	                            // either already secondary or another tab has taken the primary lease.
	                            debug(LOG_TAG$9, 'Ignoring unexpected query state notification.');
	                            return [2 /*return*/];
	                        }
	                        if (!this.queryViewsByTarget[targetId]) return [3 /*break*/, 5];
	                        _a = state;
	                        switch (_a) {
	                            case 'current': return [3 /*break*/, 1];
	                            case 'not-current': return [3 /*break*/, 1];
	                            case 'rejected': return [3 /*break*/, 2];
	                        }
	                        return [3 /*break*/, 4];
	                    case 1:
	                        {
	                            return [2 /*return*/, this.localStore.getNewDocumentChanges().then(function (changes) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                                    var synthesizedRemoteEvent;
	                                    return tslib_1.__generator(this, function (_a) {
	                                        switch (_a.label) {
	                                            case 0:
	                                                synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current');
	                                                return [4 /*yield*/, this.emitNewSnapsAndNotifyLocalStore(changes, synthesizedRemoteEvent)];
	                                            case 1:
	                                                _a.sent();
	                                                return [2 /*return*/];
	                                        }
	                                    });
	                                }); }, function (err) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                                    var activeTargets_2;
	                                    return tslib_1.__generator(this, function (_a) {
	                                        switch (_a.label) {
	                                            case 0:
	                                                if (!isDocumentChangeMissingError(err)) return [3 /*break*/, 2];
	                                                activeTargets_2 = [];
	                                                forEachNumber(this.queryViewsByTarget, function (target) {
	                                                    return activeTargets_2.push(target);
	                                                });
	                                                return [4 /*yield*/, this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_2)];
	                                            case 1:
	                                                _a.sent();
	                                                return [3 /*break*/, 3];
	                                            case 2: throw err;
	                                            case 3: return [2 /*return*/];
	                                        }
	                                    });
	                                }); })];
	                        }
	                        _b.label = 2;
	                    case 2:
	                        queryView = this.queryViewsByTarget[targetId];
	                        this.removeAndCleanupQuery(queryView);
	                        return [4 /*yield*/, this.localStore.releaseQuery(queryView.query, 
	                            /*keepPersistedQueryData=*/ true)];
	                    case 3:
	                        _b.sent();
	                        this.syncEngineListener.onWatchError(queryView.query, error$$1);
	                        return [3 /*break*/, 5];
	                    case 4:
	                        fail('Unexpected target state: ' + state);
	                        _b.label = 5;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // PORTING NOTE: Multi-tab only
	    SyncEngine.prototype.applyActiveTargetsChange = function (added, removed) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var _i, added_1, targetId, query, queryData, _loop_2, this_1, _a, removed_1, targetId;
	            return tslib_1.__generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (!this.isPrimary) {
	                            return [2 /*return*/];
	                        }
	                        _i = 0, added_1 = added;
	                        _b.label = 1;
	                    case 1:
	                        if (!(_i < added_1.length)) return [3 /*break*/, 6];
	                        targetId = added_1[_i];
	                        assert(!this.queryViewsByTarget[targetId], 'Trying to add an already active target');
	                        return [4 /*yield*/, this.localStore.getQueryForTarget(targetId)];
	                    case 2:
	                        query = _b.sent();
	                        assert(!!query, "Query data for active target " + targetId + " not found");
	                        return [4 /*yield*/, this.localStore.allocateQuery(query)];
	                    case 3:
	                        queryData = _b.sent();
	                        return [4 /*yield*/, this.initializeViewAndComputeSnapshot(queryData, 
	                            /*current=*/ false)];
	                    case 4:
	                        _b.sent();
	                        this.remoteStore.listen(queryData);
	                        _b.label = 5;
	                    case 5:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 6:
	                        _loop_2 = function (targetId) {
	                            var queryView;
	                            return tslib_1.__generator(this, function (_a) {
	                                switch (_a.label) {
	                                    case 0:
	                                        queryView = this_1.queryViewsByTarget[targetId];
	                                        if (!queryView) return [3 /*break*/, 2];
	                                        return [4 /*yield*/, this_1.localStore
	                                                .releaseQuery(queryView.query, /*keepPersistedQueryData=*/ false)
	                                                .then(function () {
	                                                _this.remoteStore.unlisten(targetId);
	                                                _this.removeAndCleanupQuery(queryView);
	                                            })
	                                                .catch(function (err) { return _this.ignoreIfPrimaryLeaseLoss(err); })];
	                                    case 1:
	                                        _a.sent();
	                                        _a.label = 2;
	                                    case 2: return [2 /*return*/];
	                                }
	                            });
	                        };
	                        this_1 = this;
	                        _a = 0, removed_1 = removed;
	                        _b.label = 7;
	                    case 7:
	                        if (!(_a < removed_1.length)) return [3 /*break*/, 10];
	                        targetId = removed_1[_a];
	                        return [5 /*yield**/, _loop_2(targetId)];
	                    case 8:
	                        _b.sent();
	                        _b.label = 9;
	                    case 9:
	                        _a++;
	                        return [3 /*break*/, 7];
	                    case 10: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
	    // the online state.
	    SyncEngine.prototype.enableNetwork = function () {
	        this.localStore.setNetworkEnabled(true);
	        return this.remoteStore.enableNetwork();
	    };
	    // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
	    // the online state.
	    SyncEngine.prototype.disableNetwork = function () {
	        this.localStore.setNetworkEnabled(false);
	        return this.remoteStore.disableNetwork();
	    };
	    SyncEngine.prototype.getRemoteKeysForTarget = function (targetId) {
	        var limboResolution = this.limboResolutionsByTarget[targetId];
	        if (limboResolution && limboResolution.receivedDocument) {
	            return documentKeySet().add(limboResolution.key);
	        }
	        else {
	            return this.queryViewsByTarget[targetId]
	                ? this.queryViewsByTarget[targetId].view.syncedDocuments
	                : documentKeySet();
	        }
	    };
	    return SyncEngine;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Simple wrapper around a nullable UID. Mostly exists to make code more
	 * readable.
	 */
	var User = /** @class */ (function () {
	    function User(uid) {
	        this.uid = uid;
	    }
	    User.prototype.isAuthenticated = function () {
	        return this.uid != null;
	    };
	    /**
	     * Returns a key representing this user, suitable for inclusion in a
	     * dictionary.
	     */
	    User.prototype.toKey = function () {
	        if (this.isAuthenticated()) {
	            return 'uid:' + this.uid;
	        }
	        else {
	            return 'anonymous-user';
	        }
	    };
	    User.prototype.isEqual = function (otherUser) {
	        return otherUser.uid === this.uid;
	    };
	    /** A user with a null UID. */
	    User.UNAUTHENTICATED = new User(null);
	    // TODO(mikelehen): Look into getting a proper uid-equivalent for
	    // non-FirebaseAuth providers.
	    User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');
	    User.FIRST_PARTY = new User('first-party-uid');
	    return User;
	}());

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$10 = 'SharedClientState';
	// The format of the LocalStorage key that stores the client state is:
	//     firestore_clients_<persistence_prefix>_<instance_key>
	var CLIENT_STATE_KEY_PREFIX = 'firestore_clients';
	// The format of the WebStorage key that stores the mutation state is:
	//     firestore_mutations_<persistence_prefix>_<batch_id>
	//     (for unauthenticated users)
	// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
	//
	// 'user_uid' is last to avoid needing to escape '_' characters that it might
	// contain.
	var MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';
	// The format of the WebStorage key that stores a query target's metadata is:
	//     firestore_targets_<persistence_prefix>_<target_id>
	var QUERY_TARGET_KEY_PREFIX = 'firestore_targets';
	// The WebStorage prefix that stores the primary tab's online state. The
	// format of the key is:
	//     firestore_online_state_<persistence_prefix>
	var ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';
	// The WebStorage key prefix for the key that stores the last sequence number allocated. The key
	// looks like 'firestore_sequence_number_<persistence_prefix>'.
	var SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';
	/**
	 * Holds the state of a mutation batch, including its user ID, batch ID and
	 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
	 */
	// Visible for testing
	var MutationMetadata = /** @class */ (function () {
	    function MutationMetadata(user, batchId, state, error$$1) {
	        this.user = user;
	        this.batchId = batchId;
	        this.state = state;
	        this.error = error$$1;
	        assert((error$$1 !== undefined) === (state === 'rejected'), "MutationMetadata must contain an error iff state is 'rejected'");
	    }
	    /**
	     * Parses a MutationMetadata from its JSON representation in WebStorage.
	     * Logs a warning and returns null if the format of the data is not valid.
	     */
	    MutationMetadata.fromWebStorageEntry = function (user, batchId, value) {
	        var mutationBatch = JSON.parse(value);
	        var validData = typeof mutationBatch === 'object' &&
	            ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==
	                -1 &&
	            (mutationBatch.error === undefined ||
	                typeof mutationBatch.error === 'object');
	        var firestoreError = undefined;
	        if (validData && mutationBatch.error) {
	            validData =
	                typeof mutationBatch.error.message === 'string' &&
	                    typeof mutationBatch.error.code === 'string';
	            if (validData) {
	                firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
	            }
	        }
	        if (validData) {
	            return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);
	        }
	        else {
	            error(LOG_TAG$10, "Failed to parse mutation state for ID '" + batchId + "': " + value);
	            return null;
	        }
	    };
	    MutationMetadata.prototype.toWebStorageJSON = function () {
	        var batchMetadata = {
	            state: this.state,
	            updateTimeMs: Date.now() // Modify the existing value to trigger update.
	        };
	        if (this.error) {
	            batchMetadata.error = {
	                code: this.error.code,
	                message: this.error.message
	            };
	        }
	        return JSON.stringify(batchMetadata);
	    };
	    return MutationMetadata;
	}());
	/**
	 * Holds the state of a query target, including its target ID and whether the
	 * target is 'not-current', 'current' or 'rejected'.
	 */
	// Visible for testing
	var QueryTargetMetadata = /** @class */ (function () {
	    function QueryTargetMetadata(targetId, state, error$$1) {
	        this.targetId = targetId;
	        this.state = state;
	        this.error = error$$1;
	        assert((error$$1 !== undefined) === (state === 'rejected'), "QueryTargetMetadata must contain an error iff state is 'rejected'");
	    }
	    /**
	     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
	     * Logs a warning and returns null if the format of the data is not valid.
	     */
	    QueryTargetMetadata.fromWebStorageEntry = function (targetId, value) {
	        var targetState = JSON.parse(value);
	        var validData = typeof targetState === 'object' &&
	            ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==
	                -1 &&
	            (targetState.error === undefined ||
	                typeof targetState.error === 'object');
	        var firestoreError = undefined;
	        if (validData && targetState.error) {
	            validData =
	                typeof targetState.error.message === 'string' &&
	                    typeof targetState.error.code === 'string';
	            if (validData) {
	                firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
	            }
	        }
	        if (validData) {
	            return new QueryTargetMetadata(targetId, targetState.state, firestoreError);
	        }
	        else {
	            error(LOG_TAG$10, "Failed to parse target state for ID '" + targetId + "': " + value);
	            return null;
	        }
	    };
	    QueryTargetMetadata.prototype.toWebStorageJSON = function () {
	        var targetState = {
	            state: this.state,
	            updateTimeMs: Date.now() // Modify the existing value to trigger update.
	        };
	        if (this.error) {
	            targetState.error = {
	                code: this.error.code,
	                message: this.error.message
	            };
	        }
	        return JSON.stringify(targetState);
	    };
	    return QueryTargetMetadata;
	}());
	/**
	 * This class represents the immutable ClientState for a client read from
	 * WebStorage, containing the list of active query targets.
	 */
	var RemoteClientState = /** @class */ (function () {
	    function RemoteClientState(clientId, activeTargetIds) {
	        this.clientId = clientId;
	        this.activeTargetIds = activeTargetIds;
	    }
	    /**
	     * Parses a RemoteClientState from the JSON representation in WebStorage.
	     * Logs a warning and returns null if the format of the data is not valid.
	     */
	    RemoteClientState.fromWebStorageEntry = function (clientId, value) {
	        var clientState = JSON.parse(value);
	        var validData = typeof clientState === 'object' &&
	            clientState.activeTargetIds instanceof Array;
	        var activeTargetIdsSet = targetIdSet();
	        for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
	            validData = isSafeInteger(clientState.activeTargetIds[i]);
	            activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
	        }
	        if (validData) {
	            return new RemoteClientState(clientId, activeTargetIdsSet);
	        }
	        else {
	            error(LOG_TAG$10, "Failed to parse client data for instance '" + clientId + "': " + value);
	            return null;
	        }
	    };
	    return RemoteClientState;
	}());
	/**
	 * This class represents the online state for all clients participating in
	 * multi-tab. The online state is only written to by the primary client, and
	 * used in secondary clients to update their query views.
	 */
	var SharedOnlineState = /** @class */ (function () {
	    function SharedOnlineState(clientId, onlineState) {
	        this.clientId = clientId;
	        this.onlineState = onlineState;
	    }
	    /**
	     * Parses a SharedOnlineState from its JSON representation in WebStorage.
	     * Logs a warning and returns null if the format of the data is not valid.
	     */
	    SharedOnlineState.fromWebStorageEntry = function (value) {
	        var onlineState = JSON.parse(value);
	        var validData = typeof onlineState === 'object' &&
	            OnlineState[onlineState.onlineState] !== undefined &&
	            typeof onlineState.clientId === 'string';
	        if (validData) {
	            return new SharedOnlineState(onlineState.clientId, OnlineState[onlineState.onlineState]);
	        }
	        else {
	            error(LOG_TAG$10, "Failed to parse online state: " + value);
	            return null;
	        }
	    };
	    return SharedOnlineState;
	}());
	/**
	 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
	 * mutable and keeps track of all pending mutations, which allows us to
	 * update the range of pending mutation batch IDs as new mutations are added or
	 * removed.
	 *
	 * The data in `LocalClientState` is not read from WebStorage and instead
	 * updated via its instance methods. The updated state can be serialized via
	 * `toWebStorageJSON()`.
	 */
	// Visible for testing.
	var LocalClientState = /** @class */ (function () {
	    function LocalClientState() {
	        this.activeTargetIds = targetIdSet();
	    }
	    LocalClientState.prototype.addQueryTarget = function (targetId) {
	        assert(!this.activeTargetIds.has(targetId), "Target with ID '" + targetId + "' already active.");
	        this.activeTargetIds = this.activeTargetIds.add(targetId);
	    };
	    LocalClientState.prototype.removeQueryTarget = function (targetId) {
	        this.activeTargetIds = this.activeTargetIds.delete(targetId);
	    };
	    /**
	     * Converts this entry into a JSON-encoded format we can use for WebStorage.
	     * Does not encode `clientId` as it is part of the key in WebStorage.
	     */
	    LocalClientState.prototype.toWebStorageJSON = function () {
	        var data = {
	            activeTargetIds: this.activeTargetIds.toArray(),
	            updateTimeMs: Date.now() // Modify the existing value to trigger update.
	        };
	        return JSON.stringify(data);
	    };
	    return LocalClientState;
	}());
	/**
	 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
	 * backing store for the SharedClientState. It keeps track of all active
	 * clients and supports modifications of the local client's data.
	 */
	var WebStorageSharedClientState = /** @class */ (function () {
	    function WebStorageSharedClientState(queue, platform, persistenceKey, localClientId, initialUser) {
	        this.queue = queue;
	        this.platform = platform;
	        this.persistenceKey = persistenceKey;
	        this.localClientId = localClientId;
	        this.syncEngine = null;
	        this.onlineStateHandler = null;
	        this.sequenceNumberHandler = null;
	        this.activeClients = {};
	        this.storageListener = this.handleWebStorageEvent.bind(this);
	        this.started = false;
	        /**
	         * Captures WebStorage events that occur before `start()` is called. These
	         * events are replayed once `WebStorageSharedClientState` is started.
	         */
	        this.earlyEvents = [];
	        if (!WebStorageSharedClientState.isAvailable(this.platform)) {
	            throw new FirestoreError(Code.UNIMPLEMENTED, 'LocalStorage is not available on this platform.');
	        }
	        // Escape the special characters mentioned here:
	        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
	        var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	        this.storage = this.platform.window.localStorage;
	        this.currentUser = initialUser;
	        this.localClientStorageKey = this.toWebStorageClientStateKey(this.localClientId);
	        this.sequenceNumberKey = SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
	        this.activeClients[this.localClientId] = new LocalClientState();
	        this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
	        this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
	        this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
	        this.onlineStateKey = ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey;
	        // Rather than adding the storage observer during start(), we add the
	        // storage observer during initialization. This ensures that we collect
	        // events before other components populate their initial state (during their
	        // respective start() calls). Otherwise, we might for example miss a
	        // mutation that is added after LocalStore's start() processed the existing
	        // mutations but before we observe WebStorage events.
	        this.platform.window.addEventListener('storage', this.storageListener);
	    }
	    /** Returns 'true' if WebStorage is available in the current environment. */
	    WebStorageSharedClientState.isAvailable = function (platform) {
	        return !!(platform.window && platform.window.localStorage != null);
	    };
	    WebStorageSharedClientState.prototype.start = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _a, _b, event_1;
	            return tslib_1.__generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        assert(!this.started, 'WebStorageSharedClientState already started');
	                        assert(this.syncEngine !== null, 'syncEngine property must be set before calling start()');
	                        assert(this.onlineStateHandler !== null, 'onlineStateHandler property must be set before calling start()');
	                        return [4 /*yield*/, this.syncEngine.getActiveClients()];
	                    case 1:
	                        existingClients = _c.sent();
	                        for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
	                            clientId = existingClients_1[_i];
	                            if (clientId === this.localClientId) {
	                                continue;
	                            }
	                            storageItem = this.getItem(this.toWebStorageClientStateKey(clientId));
	                            if (storageItem) {
	                                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);
	                                if (clientState) {
	                                    this.activeClients[clientState.clientId] = clientState;
	                                }
	                            }
	                        }
	                        this.persistClientState();
	                        onlineStateJSON = this.storage.getItem(this.onlineStateKey);
	                        if (onlineStateJSON) {
	                            onlineState = this.fromWebStorageOnlineState(onlineStateJSON);
	                            if (onlineState) {
	                                this.handleOnlineStateEvent(onlineState);
	                            }
	                        }
	                        for (_a = 0, _b = this.earlyEvents; _a < _b.length; _a++) {
	                            event_1 = _b[_a];
	                            this.handleWebStorageEvent(event_1);
	                        }
	                        this.earlyEvents = [];
	                        // Register a window unload hook to remove the client metadata entry from
	                        // WebStorage even if `shutdown()` was not called.
	                        this.platform.window.addEventListener('unload', function () { return _this.shutdown(); });
	                        this.started = true;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    WebStorageSharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {
	        this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
	    };
	    WebStorageSharedClientState.prototype.getAllActiveQueryTargets = function () {
	        var activeTargets = targetIdSet();
	        forEach(this.activeClients, function (key, value) {
	            activeTargets = activeTargets.unionWith(value.activeTargetIds);
	        });
	        return activeTargets;
	    };
	    WebStorageSharedClientState.prototype.isActiveQueryTarget = function (targetId) {
	        // This is not using `obj.forEach` since `forEach` doesn't support early
	        // return.
	        for (var clientId in this.activeClients) {
	            if (this.activeClients.hasOwnProperty(clientId)) {
	                if (this.activeClients[clientId].activeTargetIds.has(targetId)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    WebStorageSharedClientState.prototype.addPendingMutation = function (batchId) {
	        this.persistMutationState(batchId, 'pending');
	    };
	    WebStorageSharedClientState.prototype.updateMutationState = function (batchId, state, error$$1) {
	        this.persistMutationState(batchId, state, error$$1);
	        // Once a final mutation result is observed by other clients, they no longer
	        // access the mutation's metadata entry. Since WebStorage replays events
	        // in order, it is safe to delete the entry right after updating it.
	        this.removeMutationState(batchId);
	    };
	    WebStorageSharedClientState.prototype.addLocalQueryTarget = function (targetId) {
	        var queryState = 'not-current';
	        // Lookup an existing query state if the target ID was already registered
	        // by another tab
	        if (this.isActiveQueryTarget(targetId)) {
	            var storageItem = this.storage.getItem(this.toWebStorageQueryTargetMetadataKey(targetId));
	            if (storageItem) {
	                var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);
	                if (metadata) {
	                    queryState = metadata.state;
	                }
	            }
	        }
	        this.localClientState.addQueryTarget(targetId);
	        this.persistClientState();
	        return queryState;
	    };
	    WebStorageSharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
	        this.localClientState.removeQueryTarget(targetId);
	        this.persistClientState();
	    };
	    WebStorageSharedClientState.prototype.isLocalQueryTarget = function (targetId) {
	        return this.localClientState.activeTargetIds.has(targetId);
	    };
	    WebStorageSharedClientState.prototype.clearQueryState = function (targetId) {
	        this.removeItem(this.toWebStorageQueryTargetMetadataKey(targetId));
	    };
	    WebStorageSharedClientState.prototype.updateQueryState = function (targetId, state, error$$1) {
	        this.persistQueryTargetState(targetId, state, error$$1);
	    };
	    WebStorageSharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {
	        var _this = this;
	        removedBatchIds.forEach(function (batchId) {
	            _this.removeMutationState(batchId);
	        });
	        this.currentUser = user;
	        addedBatchIds.forEach(function (batchId) {
	            _this.addPendingMutation(batchId);
	        });
	    };
	    WebStorageSharedClientState.prototype.setOnlineState = function (onlineState) {
	        this.persistOnlineState(onlineState);
	    };
	    WebStorageSharedClientState.prototype.shutdown = function () {
	        if (this.started) {
	            this.platform.window.removeEventListener('storage', this.storageListener);
	            this.removeItem(this.localClientStorageKey);
	            this.started = false;
	        }
	    };
	    WebStorageSharedClientState.prototype.getItem = function (key) {
	        var value = this.storage.getItem(key);
	        debug(LOG_TAG$10, 'READ', key, value);
	        return value;
	    };
	    WebStorageSharedClientState.prototype.setItem = function (key, value) {
	        debug(LOG_TAG$10, 'SET', key, value);
	        this.storage.setItem(key, value);
	    };
	    WebStorageSharedClientState.prototype.removeItem = function (key) {
	        debug(LOG_TAG$10, 'REMOVE', key);
	        this.storage.removeItem(key);
	    };
	    WebStorageSharedClientState.prototype.handleWebStorageEvent = function (event) {
	        var _this = this;
	        if (event.storageArea === this.storage) {
	            debug(LOG_TAG$10, 'EVENT', event.key, event.newValue);
	            if (event.key === this.localClientStorageKey) {
	                error('Received WebStorage notification for local change. Another client might have ' +
	                    'garbage-collected our state');
	                return;
	            }
	            this.queue.enqueueAndForget(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
	                return tslib_1.__generator(this, function (_a) {
	                    if (!this.started) {
	                        this.earlyEvents.push(event);
	                        return [2 /*return*/];
	                    }
	                    if (event.key === null) {
	                        return [2 /*return*/];
	                    }
	                    if (this.clientStateKeyRe.test(event.key)) {
	                        if (event.newValue != null) {
	                            clientState = this.fromWebStorageClientState(event.key, event.newValue);
	                            if (clientState) {
	                                return [2 /*return*/, this.handleClientStateEvent(clientState.clientId, clientState)];
	                            }
	                        }
	                        else {
	                            clientId = this.fromWebStorageClientStateKey(event.key);
	                            return [2 /*return*/, this.handleClientStateEvent(clientId, null)];
	                        }
	                    }
	                    else if (this.mutationBatchKeyRe.test(event.key)) {
	                        if (event.newValue !== null) {
	                            mutationMetadata = this.fromWebStorageMutationMetadata(event.key, event.newValue);
	                            if (mutationMetadata) {
	                                return [2 /*return*/, this.handleMutationBatchEvent(mutationMetadata)];
	                            }
	                        }
	                    }
	                    else if (this.queryTargetKeyRe.test(event.key)) {
	                        if (event.newValue !== null) {
	                            queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(event.key, event.newValue);
	                            if (queryTargetMetadata) {
	                                return [2 /*return*/, this.handleQueryTargetEvent(queryTargetMetadata)];
	                            }
	                        }
	                    }
	                    else if (event.key === this.onlineStateKey) {
	                        if (event.newValue !== null) {
	                            onlineState = this.fromWebStorageOnlineState(event.newValue);
	                            if (onlineState) {
	                                return [2 /*return*/, this.handleOnlineStateEvent(onlineState)];
	                            }
	                        }
	                    }
	                    else if (event.key === this.sequenceNumberKey) {
	                        assert(!!this.sequenceNumberHandler, 'Missing sequenceNumberHandler');
	                        sequenceNumber = fromWebStorageSequenceNumber(event.newValue);
	                        if (sequenceNumber !== ListenSequence.INVALID) {
	                            this.sequenceNumberHandler(sequenceNumber);
	                        }
	                    }
	                    return [2 /*return*/];
	                });
	            }); });
	        }
	    };
	    Object.defineProperty(WebStorageSharedClientState.prototype, "localClientState", {
	        get: function () {
	            return this.activeClients[this.localClientId];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WebStorageSharedClientState.prototype.persistClientState = function () {
	        this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
	    };
	    WebStorageSharedClientState.prototype.persistMutationState = function (batchId, state, error$$1) {
	        var mutationState = new MutationMetadata(this.currentUser, batchId, state, error$$1);
	        var mutationKey = this.toWebStorageMutationBatchKey(batchId);
	        this.setItem(mutationKey, mutationState.toWebStorageJSON());
	    };
	    WebStorageSharedClientState.prototype.removeMutationState = function (batchId) {
	        var mutationKey = this.toWebStorageMutationBatchKey(batchId);
	        this.removeItem(mutationKey);
	    };
	    WebStorageSharedClientState.prototype.persistOnlineState = function (onlineState) {
	        var entry = {
	            clientId: this.localClientId,
	            onlineState: OnlineState[onlineState]
	        };
	        this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
	    };
	    WebStorageSharedClientState.prototype.persistQueryTargetState = function (targetId, state, error$$1) {
	        var targetKey = this.toWebStorageQueryTargetMetadataKey(targetId);
	        var targetMetadata = new QueryTargetMetadata(targetId, state, error$$1);
	        this.setItem(targetKey, targetMetadata.toWebStorageJSON());
	    };
	    /** Assembles the key for a client state in WebStorage */
	    WebStorageSharedClientState.prototype.toWebStorageClientStateKey = function (clientId) {
	        assert(clientId.indexOf('_') === -1, "Client key cannot contain '_', but was '" + clientId + "'");
	        return CLIENT_STATE_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
	    };
	    /** Assembles the key for a query state in WebStorage */
	    WebStorageSharedClientState.prototype.toWebStorageQueryTargetMetadataKey = function (targetId) {
	        return QUERY_TARGET_KEY_PREFIX + "_" + this.persistenceKey + "_" + targetId;
	    };
	    /** Assembles the key for a mutation batch in WebStorage */
	    WebStorageSharedClientState.prototype.toWebStorageMutationBatchKey = function (batchId) {
	        var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + this.persistenceKey + "_" + batchId;
	        if (this.currentUser.isAuthenticated()) {
	            mutationKey += "_" + this.currentUser.uid;
	        }
	        return mutationKey;
	    };
	    /**
	     * Parses a client state key in WebStorage. Returns null if the key does not
	     * match the expected key format.
	     */
	    WebStorageSharedClientState.prototype.fromWebStorageClientStateKey = function (key) {
	        var match = this.clientStateKeyRe.exec(key);
	        return match ? match[1] : null;
	    };
	    /**
	     * Parses a client state in WebStorage. Returns 'null' if the value could not
	     * be parsed.
	     */
	    WebStorageSharedClientState.prototype.fromWebStorageClientState = function (key, value) {
	        var clientId = this.fromWebStorageClientStateKey(key);
	        assert(clientId !== null, "Cannot parse client state key '" + key + "'");
	        return RemoteClientState.fromWebStorageEntry(clientId, value);
	    };
	    /**
	     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
	     * could not be parsed.
	     */
	    WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata = function (key, value) {
	        var match = this.mutationBatchKeyRe.exec(key);
	        assert(match !== null, "Cannot parse mutation batch key '" + key + "'");
	        var batchId = Number(match[1]);
	        var userId = match[2] !== undefined ? match[2] : null;
	        return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
	    };
	    /**
	     * Parses a query target state from WebStorage. Returns 'null' if the value
	     * could not be parsed.
	     */
	    WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata = function (key, value) {
	        var match = this.queryTargetKeyRe.exec(key);
	        assert(match !== null, "Cannot parse query target key '" + key + "'");
	        var targetId = Number(match[1]);
	        return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
	    };
	    /**
	     * Parses an online state from WebStorage. Returns 'null' if the value
	     * could not be parsed.
	     */
	    WebStorageSharedClientState.prototype.fromWebStorageOnlineState = function (value) {
	        return SharedOnlineState.fromWebStorageEntry(value);
	    };
	    WebStorageSharedClientState.prototype.handleMutationBatchEvent = function (mutationBatch) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (mutationBatch.user.uid !== this.currentUser.uid) {
	                    debug(LOG_TAG$10, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
	                    return [2 /*return*/];
	                }
	                return [2 /*return*/, this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
	            });
	        });
	    };
	    WebStorageSharedClientState.prototype.handleQueryTargetEvent = function (targetMetadata) {
	        return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
	    };
	    WebStorageSharedClientState.prototype.handleClientStateEvent = function (clientId, clientState) {
	        var _this = this;
	        var existingTargets = this.getAllActiveQueryTargets();
	        if (clientState) {
	            this.activeClients[clientId] = clientState;
	        }
	        else {
	            delete this.activeClients[clientId];
	        }
	        var newTargets = this.getAllActiveQueryTargets();
	        var addedTargets = [];
	        var removedTargets = [];
	        newTargets.forEach(function (targetId) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (!existingTargets.has(targetId)) {
	                    addedTargets.push(targetId);
	                }
	                return [2 /*return*/];
	            });
	        }); });
	        existingTargets.forEach(function (targetId) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (!newTargets.has(targetId)) {
	                    removedTargets.push(targetId);
	                }
	                return [2 /*return*/];
	            });
	        }); });
	        return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets);
	    };
	    WebStorageSharedClientState.prototype.handleOnlineStateEvent = function (onlineState) {
	        // We check whether the client that wrote this online state is still active
	        // by comparing its client ID to the list of clients kept active in
	        // IndexedDb. If a client does not update their IndexedDb client state
	        // within 5 seconds, it is considered inactive and we don't emit an online
	        // state event.
	        if (this.activeClients[onlineState.clientId]) {
	            this.onlineStateHandler(onlineState.onlineState);
	        }
	    };
	    return WebStorageSharedClientState;
	}());
	function fromWebStorageSequenceNumber(seqString) {
	    var sequenceNumber = ListenSequence.INVALID;
	    if (seqString != null) {
	        try {
	            var parsed = JSON.parse(seqString);
	            assert(typeof parsed === 'number', 'Found non-numeric sequence number');
	            sequenceNumber = parsed;
	        }
	        catch (e) {
	            error(LOG_TAG$10, 'Failed to read sequence number from WebStorage', e);
	        }
	    }
	    return sequenceNumber;
	}
	/**
	 * `MemorySharedClientState` is a simple implementation of SharedClientState for
	 * clients using memory persistence. The state in this class remains fully
	 * isolated and no synchronization is performed.
	 */
	var MemorySharedClientState = /** @class */ (function () {
	    function MemorySharedClientState() {
	        this.localState = new LocalClientState();
	        this.queryState = {};
	        this.syncEngine = null;
	        this.onlineStateHandler = null;
	        this.sequenceNumberHandler = null;
	    }
	    MemorySharedClientState.prototype.addPendingMutation = function (batchId) {
	        // No op.
	    };
	    MemorySharedClientState.prototype.updateMutationState = function (batchId, state, error$$1) {
	        // No op.
	    };
	    MemorySharedClientState.prototype.addLocalQueryTarget = function (targetId) {
	        this.localState.addQueryTarget(targetId);
	        return this.queryState[targetId] || 'not-current';
	    };
	    MemorySharedClientState.prototype.updateQueryState = function (targetId, state, error$$1) {
	        this.queryState[targetId] = state;
	    };
	    MemorySharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
	        this.localState.removeQueryTarget(targetId);
	    };
	    MemorySharedClientState.prototype.isLocalQueryTarget = function (targetId) {
	        return this.localState.activeTargetIds.has(targetId);
	    };
	    MemorySharedClientState.prototype.clearQueryState = function (targetId) {
	        delete this.queryState[targetId];
	    };
	    MemorySharedClientState.prototype.getAllActiveQueryTargets = function () {
	        return this.localState.activeTargetIds;
	    };
	    MemorySharedClientState.prototype.isActiveQueryTarget = function (targetId) {
	        return this.localState.activeTargetIds.has(targetId);
	    };
	    MemorySharedClientState.prototype.start = function () {
	        this.localState = new LocalClientState();
	        return Promise.resolve();
	    };
	    MemorySharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {
	        // No op.
	    };
	    MemorySharedClientState.prototype.setOnlineState = function (onlineState) {
	        // No op.
	    };
	    MemorySharedClientState.prototype.shutdown = function () { };
	    MemorySharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) { };
	    return MemorySharedClientState;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_TAG$11 = 'FirestoreClient';
	/** The DOMException code for an aborted operation. */
	var DOM_EXCEPTION_ABORTED = 20;
	/** The DOMException code for quota exceeded. */
	var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;
	/**
	 * FirestoreClient is a top-level class that constructs and owns all of the
	 * pieces of the client SDK architecture. It is responsible for creating the
	 * async queue that is shared by all of the other components in the system.
	 */
	var FirestoreClient = /** @class */ (function () {
	    function FirestoreClient(platform, databaseInfo, credentials, 
	    /**
	     * Asynchronous queue responsible for all of our internal processing. When
	     * we get incoming work from the user (via public API) or the network
	     * (incoming GRPC messages), we should always schedule onto this queue.
	     * This ensures all of our work is properly serialized (e.g. we don't
	     * start processing a new operation while the previous one is waiting for
	     * an async I/O to complete).
	     */
	    asyncQueue) {
	        this.platform = platform;
	        this.databaseInfo = databaseInfo;
	        this.credentials = credentials;
	        this.asyncQueue = asyncQueue;
	        this.clientId = AutoId.newId();
	    }
	    /**
	     * Starts up the FirestoreClient, returning only whether or not enabling
	     * persistence succeeded.
	     *
	     * The intent here is to "do the right thing" as far as users are concerned.
	     * Namely, in cases where offline persistence is requested and possible,
	     * enable it, but otherwise fall back to persistence disabled. For the most
	     * part we expect this to succeed one way or the other so we don't expect our
	     * users to actually wait on the firestore.enablePersistence Promise since
	     * they generally won't care.
	     *
	     * Of course some users actually do care about whether or not persistence
	     * was successfully enabled, so the Promise returned from this method
	     * indicates this outcome.
	     *
	     * This presents a problem though: even before enablePersistence resolves or
	     * rejects, users may have made calls to e.g. firestore.collection() which
	     * means that the FirestoreClient in there will be available and will be
	     * enqueuing actions on the async queue.
	     *
	     * Meanwhile any failure of an operation on the async queue causes it to
	     * panic and reject any further work, on the premise that unhandled errors
	     * are fatal.
	     *
	     * Consequently the fallback is handled internally here in start, and if the
	     * fallback succeeds we signal success to the async queue even though the
	     * start() itself signals failure.
	     *
	     * @param persistenceSettings Settings object to configure offline
	     *     persistence.
	     * @returns A deferred result indicating the user-visible result of enabling
	     *     offline persistence. This method will reject this if IndexedDB fails to
	     *     start for any reason. If usePersistence is false this is
	     *     unconditionally resolved.
	     */
	    FirestoreClient.prototype.start = function (persistenceSettings) {
	        var _this = this;
	        // We defer our initialization until we get the current user from
	        // setChangeListener(). We block the async queue until we got the initial
	        // user and the initialization is completed. This will prevent any scheduled
	        // work from happening before initialization is completed.
	        //
	        // If initializationDone resolved then the FirestoreClient is in a usable
	        // state.
	        var initializationDone = new Deferred$1();
	        // If usePersistence is true, certain classes of errors while starting are
	        // recoverable but only by falling back to persistence disabled.
	        //
	        // If there's an error in the first case but not in recovery we cannot
	        // reject the promise blocking the async queue because this will cause the
	        // async queue to panic.
	        var persistenceResult = new Deferred$1();
	        var initialized = false;
	        this.credentials.setChangeListener(function (user) {
	            if (!initialized) {
	                initialized = true;
	                _this.initializePersistence(persistenceSettings, persistenceResult, user)
	                    .then(function () { return _this.initializeRest(user); })
	                    .then(initializationDone.resolve, initializationDone.reject);
	            }
	            else {
	                _this.asyncQueue.enqueueAndForget(function () {
	                    return _this.handleCredentialChange(user);
	                });
	            }
	        });
	        // Block the async queue until initialization is done
	        this.asyncQueue.enqueueAndForget(function () {
	            return initializationDone.promise;
	        });
	        // Return only the result of enabling persistence. Note that this does not
	        // need to await the completion of initializationDone because the result of
	        // this method should not reflect any other kind of failure to start.
	        return persistenceResult.promise;
	    };
	    /** Enables the network connection and requeues all pending operations. */
	    FirestoreClient.prototype.enableNetwork = function () {
	        var _this = this;
	        return this.asyncQueue.enqueue(function () {
	            return _this.syncEngine.enableNetwork();
	        });
	    };
	    /**
	     * Initializes persistent storage, attempting to use IndexedDB if
	     * usePersistence is true or memory-only if false.
	     *
	     * If IndexedDB fails because it's already open in another tab or because the
	     * platform can't possibly support our implementation then this method rejects
	     * the persistenceResult and falls back on memory-only persistence.
	     *
	     * @param persistenceSettings Settings object to configure offline persistence
	     * @param persistenceResult A deferred result indicating the user-visible
	     *     result of enabling offline persistence. This method will reject this if
	     *     IndexedDB fails to start for any reason. If usePersistence is false
	     *     this is unconditionally resolved.
	     * @returns a Promise indicating whether or not initialization should
	     *     continue, i.e. that one of the persistence implementations actually
	     *     succeeded.
	     */
	    FirestoreClient.prototype.initializePersistence = function (persistenceSettings, persistenceResult, user) {
	        var _this = this;
	        if (persistenceSettings.enabled) {
	            return this.startIndexedDbPersistence(user, persistenceSettings)
	                .then(persistenceResult.resolve)
	                .catch(function (error$$1) {
	                // Regardless of whether or not the retry succeeds, from an user
	                // perspective, offline persistence has failed.
	                persistenceResult.reject(error$$1);
	                // An unknown failure on the first stage shuts everything down.
	                if (!_this.canFallback(error$$1)) {
	                    return Promise.reject(error$$1);
	                }
	                console.warn('Error enabling offline storage. Falling back to' +
	                    ' storage disabled: ' +
	                    error$$1);
	                return _this.startMemoryPersistence();
	            });
	        }
	        else {
	            // When usePersistence == false, enabling offline persistence is defined
	            // to unconditionally succeed. This allows start() to have the same
	            // signature for both cases, despite the fact that the returned promise
	            // is only used in the enablePersistence call.
	            persistenceResult.resolve();
	            return this.startMemoryPersistence();
	        }
	    };
	    /**
	     * Decides whether the provided error allows us to gracefully disable
	     * persistence (as opposed to crashing the client).
	     */
	    FirestoreClient.prototype.canFallback = function (error$$1) {
	        if (error$$1 instanceof FirestoreError) {
	            return (error$$1.code === Code.FAILED_PRECONDITION ||
	                error$$1.code === Code.UNIMPLEMENTED);
	        }
	        else if (typeof DOMException !== 'undefined' &&
	            error$$1 instanceof DOMException) {
	            // We fall back to memory persistence if we cannot write the primary
	            // lease. This can happen can during a schema migration, or if we run out
	            // of quota when we try to write the primary lease.
	            // For both the `QuotaExceededError` and the  `AbortError`, it is safe to
	            // fall back to memory persistence since all modifications to IndexedDb
	            // failed to commit.
	            return (error$$1.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||
	                error$$1.code === DOM_EXCEPTION_ABORTED);
	        }
	        return true;
	    };
	    /**
	     * Starts IndexedDB-based persistence.
	     *
	     * @returns A promise indicating success or failure.
	     */
	    FirestoreClient.prototype.startIndexedDbPersistence = function (user, settings) {
	        var _this = this;
	        assert(settings.enabled, 'Should only start IndexedDb persitence with offline persistence enabled.');
	        // TODO(http://b/33384523): For now we just disable garbage collection
	        // when persistence is enabled.
	        var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo);
	        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.
	        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {
	            useProto3Json: true
	        });
	        return Promise.resolve().then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var _a, _b;
	            return tslib_1.__generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        if (settings.experimentalTabSynchronization &&
	                            !WebStorageSharedClientState.isAvailable(this.platform)) {
	                            throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
	                        }
	                        if (!settings.experimentalTabSynchronization) return [3 /*break*/, 2];
	                        this.sharedClientState = new WebStorageSharedClientState(this.asyncQueue, this.platform, storagePrefix, this.clientId, user);
	                        _a = this;
	                        return [4 /*yield*/, IndexedDbPersistence.createMultiClientIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer, { sequenceNumberSyncer: this.sharedClientState })];
	                    case 1:
	                        _a.persistence = _c.sent();
	                        return [3 /*break*/, 4];
	                    case 2:
	                        this.sharedClientState = new MemorySharedClientState();
	                        _b = this;
	                        return [4 /*yield*/, IndexedDbPersistence.createIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer)];
	                    case 3:
	                        _b.persistence = _c.sent();
	                        _c.label = 4;
	                    case 4: return [2 /*return*/];
	                }
	            });
	        }); });
	    };
	    /**
	     * Starts Memory-backed persistence. In practice this cannot fail.
	     *
	     * @returns A promise that will successfully resolve.
	     */
	    FirestoreClient.prototype.startMemoryPersistence = function () {
	        // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.
	        var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {
	            useProto3Json: true
	        });
	        this.persistence = MemoryPersistence.createEagerPersistence(this.clientId, serializer);
	        this.sharedClientState = new MemorySharedClientState();
	        return Promise.resolve();
	    };
	    /**
	     * Initializes the rest of the FirestoreClient, assuming the initial user
	     * has been obtained from the credential provider and some persistence
	     * implementation is available in this.persistence.
	     */
	    FirestoreClient.prototype.initializeRest = function (user) {
	        var _this = this;
	        debug(LOG_TAG$11, 'Initializing. user=', user.uid);
	        return this.platform
	            .loadConnection(this.databaseInfo)
	            .then(function (connection) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var _this = this;
	            var serializer, datastore, remoteStoreOnlineStateChangedHandler, sharedClientStateOnlineStateChangedHandler;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.localStore = new LocalStore(this.persistence, user);
	                        serializer = this.platform.newSerializer(this.databaseInfo.databaseId);
	                        datastore = new Datastore(this.asyncQueue, connection, this.credentials, serializer);
	                        remoteStoreOnlineStateChangedHandler = function (onlineState) {
	                            return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.RemoteStore);
	                        };
	                        sharedClientStateOnlineStateChangedHandler = function (onlineState) {
	                            return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.SharedClientState);
	                        };
	                        this.remoteStore = new RemoteStore(this.localStore, datastore, this.asyncQueue, remoteStoreOnlineStateChangedHandler);
	                        this.syncEngine = new SyncEngine(this.localStore, this.remoteStore, this.sharedClientState, user);
	                        this.sharedClientState.onlineStateHandler = sharedClientStateOnlineStateChangedHandler;
	                        // Set up wiring between sync engine and other components
	                        this.remoteStore.syncEngine = this.syncEngine;
	                        this.sharedClientState.syncEngine = this.syncEngine;
	                        this.eventMgr = new EventManager(this.syncEngine);
	                        // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
	                        return [4 /*yield*/, this.sharedClientState.start()];
	                    case 1:
	                        // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
	                        _a.sent();
	                        return [4 /*yield*/, this.remoteStore.start()];
	                    case 2:
	                        _a.sent();
	                        // NOTE: This will immediately call the listener, so we make sure to
	                        // set it after localStore / remoteStore are started.
	                        return [4 /*yield*/, this.persistence.setPrimaryStateListener(function (isPrimary) {
	                                return _this.syncEngine.applyPrimaryState(isPrimary);
	                            })];
	                    case 3:
	                        // NOTE: This will immediately call the listener, so we make sure to
	                        // set it after localStore / remoteStore are started.
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        }); });
	    };
	    FirestoreClient.prototype.handleCredentialChange = function (user) {
	        this.asyncQueue.verifyOperationInProgress();
	        debug(LOG_TAG$11, 'Credential Changed. Current user: ' + user.uid);
	        return this.syncEngine.handleCredentialChange(user);
	    };
	    /** Disables the network connection. Pending operations will not complete. */
	    FirestoreClient.prototype.disableNetwork = function () {
	        var _this = this;
	        return this.asyncQueue.enqueue(function () {
	            return _this.syncEngine.disableNetwork();
	        });
	    };
	    FirestoreClient.prototype.shutdown = function (options) {
	        var _this = this;
	        return this.asyncQueue.enqueue(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: 
	                    // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
	                    return [4 /*yield*/, this.remoteStore.shutdown()];
	                    case 1:
	                        // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
	                        _a.sent();
	                        return [4 /*yield*/, this.sharedClientState.shutdown()];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.persistence.shutdown(options && options.purgePersistenceWithDataLoss)];
	                    case 3:
	                        _a.sent();
	                        // `removeChangeListener` must be called after shutting down the
	                        // RemoteStore as it will prevent the RemoteStore from retrieving
	                        // auth tokens.
	                        this.credentials.removeChangeListener();
	                        return [2 /*return*/];
	                }
	            });
	        }); });
	    };
	    FirestoreClient.prototype.listen = function (query, observer, options) {
	        var _this = this;
	        var listener = new QueryListener(query, observer, options);
	        this.asyncQueue.enqueueAndForget(function () {
	            return _this.eventMgr.listen(listener);
	        });
	        return listener;
	    };
	    FirestoreClient.prototype.unlisten = function (listener) {
	        var _this = this;
	        this.asyncQueue.enqueueAndForget(function () {
	            return _this.eventMgr.unlisten(listener);
	        });
	    };
	    FirestoreClient.prototype.getDocumentFromLocalCache = function (docKey) {
	        var _this = this;
	        return this.asyncQueue
	            .enqueue(function () {
	            return _this.localStore.readDocument(docKey);
	        })
	            .then(function (maybeDoc) {
	            if (maybeDoc instanceof Document) {
	                return maybeDoc;
	            }
	            else if (maybeDoc instanceof NoDocument) {
	                return null;
	            }
	            else {
	                throw new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' +
	                    "exist on the server. Run again without setting 'source' in " +
	                    'the GetOptions to attempt to retrieve the document from the ' +
	                    'server.)');
	            }
	        });
	    };
	    FirestoreClient.prototype.getDocumentsFromLocalCache = function (query) {
	        var _this = this;
	        return this.asyncQueue
	            .enqueue(function () {
	            return _this.localStore.executeQuery(query);
	        })
	            .then(function (docs) {
	            var remoteKeys = documentKeySet();
	            var view = new View(query, remoteKeys);
	            var viewDocChanges = view.computeDocChanges(docs);
	            return view.applyChanges(viewDocChanges, 
	            /* updateLimboDocuments= */ false).snapshot;
	        });
	    };
	    FirestoreClient.prototype.write = function (mutations) {
	        var _this = this;
	        var deferred = new Deferred$1();
	        this.asyncQueue.enqueueAndForget(function () {
	            return _this.syncEngine.write(mutations, deferred);
	        });
	        return deferred.promise;
	    };
	    FirestoreClient.prototype.databaseId = function () {
	        return this.databaseInfo.databaseId;
	    };
	    FirestoreClient.prototype.transaction = function (updateFunction) {
	        var _this = this;
	        // We have to wait for the async queue to be sure syncEngine is initialized.
	        return this.asyncQueue
	            .enqueue(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
	            return [2 /*return*/];
	        }); }); })
	            .then(function () { return _this.syncEngine.runTransaction(updateFunction); });
	    };
	    return FirestoreClient;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/*
	 * A wrapper implementation of Observer<T> that will dispatch events
	 * asynchronously. To allow immediate silencing, a mute call is added which
	 * causes events scheduled to no longer be raised.
	 */
	var AsyncObserver = /** @class */ (function () {
	    function AsyncObserver(observer) {
	        this.observer = observer;
	        /**
	         * When set to true, will not raise future events. Necessary to deal with
	         * async detachment of listener.
	         */
	        this.muted = false;
	    }
	    AsyncObserver.prototype.next = function (value) {
	        this.scheduleEvent(this.observer.next, value);
	    };
	    AsyncObserver.prototype.error = function (error) {
	        this.scheduleEvent(this.observer.error, error);
	    };
	    AsyncObserver.prototype.mute = function () {
	        this.muted = true;
	    };
	    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {
	        var _this = this;
	        if (!this.muted) {
	            setTimeout(function () {
	                if (!_this.muted) {
	                    eventHandler(event);
	                }
	            }, 0);
	        }
	    };
	    return AsyncObserver;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// The objects that are a part of this API are exposed to third-parties as
	// compiled javascript so we want to flag our private members with a leading
	// underscore to discourage their use.
	// tslint:disable:strip-private-property-underscore
	/**
	 * A FieldPath refers to a field in a document. The path may consist of a single
	 * field name (referring to a top-level field in the document), or a list of
	 * field names (referring to a nested field in the document).
	 */
	var FieldPath$1 = /** @class */ (function () {
	    /**
	     * Creates a FieldPath from the provided field names. If more than one field
	     * name is provided, the path will point to a nested field in a document.
	     *
	     * @param fieldNames A list of field names.
	     */
	    function FieldPath$$1() {
	        var fieldNames = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            fieldNames[_i] = arguments[_i];
	        }
	        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);
	        for (var i = 0; i < fieldNames.length; ++i) {
	            validateArgType('FieldPath', 'string', i, fieldNames[i]);
	            if (fieldNames[i].length === 0) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). " +
	                    'Field names must not be empty.');
	            }
	        }
	        this._internalPath = new FieldPath(fieldNames);
	    }
	    FieldPath$$1.documentId = function () {
	        return FieldPath$$1._DOCUMENT_ID;
	    };
	    FieldPath$$1.prototype.isEqual = function (other) {
	        if (!(other instanceof FieldPath$$1)) {
	            throw invalidClassError('isEqual', 'FieldPath', 1, other);
	        }
	        return this._internalPath.isEqual(other._internalPath);
	    };
	    /**
	     * Internal Note: The backend doesn't technically support querying by
	     * document ID. Instead it queries by the entire document name (full path
	     * included), but in the cases we currently support documentId(), the net
	     * effect is the same.
	     */
	    FieldPath$$1._DOCUMENT_ID = new FieldPath$$1(FieldPath.keyField().canonicalString());
	    return FieldPath$$1;
	}());
	/**
	 * Matches any characters in a field path string that are reserved.
	 */
	var RESERVED = new RegExp('[~\\*/\\[\\]]');
	/**
	 * Parses a field path string into a FieldPath, treating dots as separators.
	 */
	function fromDotSeparatedString(path) {
	    var found = path.search(RESERVED);
	    if (found >= 0) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not contain " +
	            "'~', '*', '/', '[', or ']'");
	    }
	    try {
	        return new (FieldPath$1.bind.apply(FieldPath$1, [void 0].concat(path.split('.'))))();
	    }
	    catch (e) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, " +
	            "begin with '.', end with '.', or contain '..'");
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var OAuthToken = /** @class */ (function () {
	    function OAuthToken(value, user) {
	        this.user = user;
	        this.type = 'OAuth';
	        this.authHeaders = { Authorization: "Bearer " + value };
	    }
	    return OAuthToken;
	}());
	/** A CredentialsProvider that always yields an empty token. */
	var EmptyCredentialsProvider = /** @class */ (function () {
	    function EmptyCredentialsProvider() {
	        /**
	         * Stores the listener registered with setChangeListener()
	         * This isn't actually necessary since the UID never changes, but we use this
	         * to verify the listen contract is adhered to in tests.
	         */
	        this.changeListener = null;
	    }
	    EmptyCredentialsProvider.prototype.getToken = function () {
	        return Promise.resolve(null);
	    };
	    EmptyCredentialsProvider.prototype.invalidateToken = function () { };
	    EmptyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
	        assert(!this.changeListener, 'Can only call setChangeListener() once.');
	        this.changeListener = changeListener;
	        // Fire with initial user.
	        changeListener(User.UNAUTHENTICATED);
	    };
	    EmptyCredentialsProvider.prototype.removeChangeListener = function () {
	        assert(this.changeListener !== null, 'removeChangeListener() when no listener registered');
	        this.changeListener = null;
	    };
	    return EmptyCredentialsProvider;
	}());
	var FirebaseCredentialsProvider = /** @class */ (function () {
	    function FirebaseCredentialsProvider(app) {
	        var _this = this;
	        this.app = app;
	        /**
	         * The auth token listener registered with FirebaseApp, retained here so we
	         * can unregister it.
	         */
	        this.tokenListener = null;
	        /**
	         * Counter used to detect if the token changed while a getToken request was
	         * outstanding.
	         */
	        this.tokenCounter = 0;
	        /** The listener registered with setChangeListener(). */
	        this.changeListener = null;
	        this.forceRefresh = false;
	        this.tokenListener = function () {
	            _this.tokenCounter++;
	            _this.currentUser = _this.getUser();
	            if (_this.changeListener) {
	                _this.changeListener(_this.currentUser);
	            }
	        };
	        this.tokenCounter = 0;
	        // Will fire at least once where we set this.currentUser
	        this.app.INTERNAL.addAuthTokenListener(this.tokenListener);
	    }
	    FirebaseCredentialsProvider.prototype.getToken = function () {
	        var _this = this;
	        assert(this.tokenListener != null, 'getToken cannot be called after listener removed.');
	        // Take note of the current value of the tokenCounter so that this method
	        // can fail (with an ABORTED error) if there is a token change while the
	        // request is outstanding.
	        var initialTokenCounter = this.tokenCounter;
	        var forceRefresh = this.forceRefresh;
	        this.forceRefresh = false;
	        return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {
	            // Cancel the request since the token changed while the request was
	            // outstanding so the response is potentially for a previous user (which
	            // user, we can't be sure).
	            if (_this.tokenCounter !== initialTokenCounter) {
	                throw new FirestoreError(Code.ABORTED, 'getToken aborted due to token change.');
	            }
	            else {
	                if (tokenData) {
	                    assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);
	                    return new OAuthToken(tokenData.accessToken, _this.currentUser);
	                }
	                else {
	                    return null;
	                }
	            }
	        });
	    };
	    FirebaseCredentialsProvider.prototype.invalidateToken = function () {
	        this.forceRefresh = true;
	    };
	    FirebaseCredentialsProvider.prototype.setChangeListener = function (changeListener) {
	        assert(!this.changeListener, 'Can only call setChangeListener() once.');
	        this.changeListener = changeListener;
	        // Fire the initial event, but only if we received the initial user
	        if (this.currentUser) {
	            changeListener(this.currentUser);
	        }
	    };
	    FirebaseCredentialsProvider.prototype.removeChangeListener = function () {
	        assert(this.tokenListener != null, 'removeChangeListener() called twice');
	        assert(this.changeListener !== null, 'removeChangeListener() called when no listener registered');
	        this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);
	        this.tokenListener = null;
	        this.changeListener = null;
	    };
	    FirebaseCredentialsProvider.prototype.getUser = function () {
	        var currentUid = this.app.INTERNAL.getUid();
	        assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);
	        return new User(currentUid);
	    };
	    return FirebaseCredentialsProvider;
	}());
	/*
	 * FirstPartyToken provides a fresh token each time its value
	 * is requested, because if the token is too old, requests will be rejected.
	 * TODO(b/33147818) this implementation violates the current assumption that
	 * tokens are immutable.  We need to either revisit this assumption or come
	 * up with some way for FPA to use the listen/unlisten interface.
	 */
	var FirstPartyToken = /** @class */ (function () {
	    function FirstPartyToken(gapi, sessionIndex) {
	        this.gapi = gapi;
	        this.sessionIndex = sessionIndex;
	        this.type = 'FirstParty';
	        this.user = User.FIRST_PARTY;
	        assert(this.gapi &&
	            this.gapi['auth'] &&
	            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');
	    }
	    Object.defineProperty(FirstPartyToken.prototype, "authHeaders", {
	        get: function () {
	            return {
	                Authorization: this.gapi['auth']['getAuthHeaderValueForFirstParty']([]),
	                'X-Goog-AuthUser': this.sessionIndex
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return FirstPartyToken;
	}());
	/*
	 * Provides user credentials required for the Firestore JavaScript SDK
	 * to authenticate the user, using technique that is only available
	 * to applications hosted by Google.
	 */
	var FirstPartyCredentialsProvider = /** @class */ (function () {
	    function FirstPartyCredentialsProvider(gapi, sessionIndex) {
	        this.gapi = gapi;
	        this.sessionIndex = sessionIndex;
	        assert(this.gapi &&
	            this.gapi['auth'] &&
	            this.gapi['auth']['getAuthHeaderValueForFirstParty'], 'unexpected gapi interface');
	    }
	    FirstPartyCredentialsProvider.prototype.getToken = function () {
	        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));
	    };
	    // TODO(33108925): can someone switch users w/o a page refresh?
	    // TODO(33110621): need to understand token/session lifecycle
	    FirstPartyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
	        // Fire with initial uid.
	        changeListener(User.FIRST_PARTY);
	    };
	    FirstPartyCredentialsProvider.prototype.removeChangeListener = function () { };
	    FirstPartyCredentialsProvider.prototype.invalidateToken = function () { };
	    return FirstPartyCredentialsProvider;
	}());
	/**
	 * Builds a CredentialsProvider depending on the type of
	 * the credentials passed in.
	 */
	function makeCredentialsProvider(credentials) {
	    if (!credentials) {
	        return new EmptyCredentialsProvider();
	    }
	    switch (credentials.type) {
	        case 'gapi':
	            return new FirstPartyCredentialsProvider(credentials.client, credentials.sessionIndex || '0');
	        case 'provider':
	            return credentials.client;
	        default:
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function isPartialObserver(obj) {
	    return implementsAnyMethods$1(obj, ['next', 'error', 'complete']);
	}
	/**
	 * Returns true if obj is an object and contains at least one of the specified
	 * methods.
	 */
	function implementsAnyMethods$1(obj, methods) {
	    if (typeof obj !== 'object' || obj === null) {
	        return false;
	    }
	    var object = obj;
	    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	        var method = methods_1[_i];
	        if (method in object && typeof object[method] === 'function') {
	            return true;
	        }
	    }
	    return false;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An opaque base class for FieldValue sentinel objects in our public API,
	 * with public static methods for creating said sentinel objects.
	 */
	// tslint:disable-next-line:class-as-namespace  We use this as a base class.
	var FieldValueImpl = /** @class */ (function () {
	    function FieldValueImpl(_methodName) {
	        this._methodName = _methodName;
	    }
	    FieldValueImpl.delete = function () {
	        return DeleteFieldValueImpl.instance;
	    };
	    FieldValueImpl.serverTimestamp = function () {
	        return ServerTimestampFieldValueImpl.instance;
	    };
	    FieldValueImpl.arrayUnion = function () {
	        var elements = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            elements[_i] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1);
	        // NOTE: We don't actually parse the data until it's used in set() or
	        // update() since we need access to the Firestore instance.
	        return new ArrayUnionFieldValueImpl(elements);
	    };
	    FieldValueImpl.arrayRemove = function () {
	        var elements = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            elements[_i] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1);
	        // NOTE: We don't actually parse the data until it's used in set() or
	        // update() since we need access to the Firestore instance.
	        return new ArrayRemoveFieldValueImpl(elements);
	    };
	    FieldValueImpl.prototype.isEqual = function (other) {
	        return this === other;
	    };
	    return FieldValueImpl;
	}());
	var DeleteFieldValueImpl = /** @class */ (function (_super) {
	    tslib_1.__extends(DeleteFieldValueImpl, _super);
	    function DeleteFieldValueImpl() {
	        return _super.call(this, 'FieldValue.delete') || this;
	    }
	    /** Singleton instance. */
	    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();
	    return DeleteFieldValueImpl;
	}(FieldValueImpl));
	var ServerTimestampFieldValueImpl = /** @class */ (function (_super) {
	    tslib_1.__extends(ServerTimestampFieldValueImpl, _super);
	    function ServerTimestampFieldValueImpl() {
	        return _super.call(this, 'FieldValue.serverTimestamp') || this;
	    }
	    /** Singleton instance. */
	    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();
	    return ServerTimestampFieldValueImpl;
	}(FieldValueImpl));
	var ArrayUnionFieldValueImpl = /** @class */ (function (_super) {
	    tslib_1.__extends(ArrayUnionFieldValueImpl, _super);
	    function ArrayUnionFieldValueImpl(_elements) {
	        var _this = _super.call(this, 'FieldValue.arrayUnion') || this;
	        _this._elements = _elements;
	        return _this;
	    }
	    return ArrayUnionFieldValueImpl;
	}(FieldValueImpl));
	var ArrayRemoveFieldValueImpl = /** @class */ (function (_super) {
	    tslib_1.__extends(ArrayRemoveFieldValueImpl, _super);
	    function ArrayRemoveFieldValueImpl(_elements) {
	        var _this = _super.call(this, 'FieldValue.arrayRemove') || this;
	        _this._elements = _elements;
	        return _this;
	    }
	    return ArrayRemoveFieldValueImpl;
	}(FieldValueImpl));
	// Public instance that disallows construction at runtime. This constructor is
	// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will
	// be called FieldValue publicly. Internally we still use FieldValueImpl which
	// has a type-checked private constructor. Note that FieldValueImpl and
	// PublicFieldValue can be used interchangeably in instanceof checks.
	// For our internal TypeScript code PublicFieldValue doesn't exist as a type,
	// and so we need to use FieldValueImpl as type and export it too.
	// tslint:disable-next-line:variable-name  We treat this as a class name.
	var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var RESERVED_FIELD_REGEX = /^__.*__$/;
	/** The result of parsing document data (e.g. for a setData call). */
	var ParsedSetData = /** @class */ (function () {
	    function ParsedSetData(data, fieldMask, fieldTransforms) {
	        this.data = data;
	        this.fieldMask = fieldMask;
	        this.fieldTransforms = fieldTransforms;
	    }
	    ParsedSetData.prototype.toMutations = function (key, precondition) {
	        var mutations = [];
	        if (this.fieldMask !== null) {
	            mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));
	        }
	        else {
	            mutations.push(new SetMutation(key, this.data, precondition));
	        }
	        if (this.fieldTransforms.length > 0) {
	            mutations.push(new TransformMutation(key, this.fieldTransforms));
	        }
	        return mutations;
	    };
	    return ParsedSetData;
	}());
	/** The result of parsing "update" data (i.e. for an updateData call). */
	var ParsedUpdateData = /** @class */ (function () {
	    function ParsedUpdateData(data, fieldMask, fieldTransforms) {
	        this.data = data;
	        this.fieldMask = fieldMask;
	        this.fieldTransforms = fieldTransforms;
	    }
	    ParsedUpdateData.prototype.toMutations = function (key, precondition) {
	        var mutations = [
	            new PatchMutation(key, this.data, this.fieldMask, precondition)
	        ];
	        if (this.fieldTransforms.length > 0) {
	            mutations.push(new TransformMutation(key, this.fieldTransforms));
	        }
	        return mutations;
	    };
	    return ParsedUpdateData;
	}());
	/*
	 * Represents what type of API method provided the data being parsed; useful
	 * for determining which error conditions apply during parsing and providing
	 * better error messages.
	 */
	var UserDataSource;
	(function (UserDataSource) {
	    UserDataSource[UserDataSource["Set"] = 0] = "Set";
	    UserDataSource[UserDataSource["Update"] = 1] = "Update";
	    UserDataSource[UserDataSource["MergeSet"] = 2] = "MergeSet";
	    /**
	     * Indicates the source is a where clause, cursor bound, arrayUnion()
	     * element, etc. Of note, isWrite(source) will return false.
	     */
	    UserDataSource[UserDataSource["Argument"] = 3] = "Argument";
	})(UserDataSource || (UserDataSource = {}));
	function isWrite(dataSource) {
	    switch (dataSource) {
	        case UserDataSource.Set: // fall through
	        case UserDataSource.MergeSet: // fall through
	        case UserDataSource.Update:
	            return true;
	        case UserDataSource.Argument:
	            return false;
	        default:
	            throw fail("Unexpected case for UserDataSource: " + dataSource);
	    }
	}
	/** A "context" object passed around while parsing user data. */
	var ParseContext = /** @class */ (function () {
	    /**
	     * Initializes a ParseContext with the given source and path.
	     *
	     * @param dataSource Indicates what kind of API method this data came from.
	     * @param methodName The name of the method the user called to create this
	     *     ParseContext.
	     * @param path A path within the object being parsed. This could be an empty
	     *     path (in which case the context represents the root of the data being
	     *     parsed), or a nonempty path (indicating the context represents a nested
	     *     location within the data).
	     * @param arrayElement Whether or not this context corresponds to an element
	     *     of an array.
	     * @param fieldTransforms A mutable list of field transforms encountered while
	     *     parsing the data.
	     * @param fieldMask A mutable list of field paths encountered while parsing
	     *     the data.
	     *
	     * TODO(b/34871131): We don't support array paths right now, so path can be
	     * null to indicate the context represents any location within an array (in
	     * which case certain features will not work and errors will be somewhat
	     * compromised).
	     */
	    function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {
	        this.dataSource = dataSource;
	        this.methodName = methodName;
	        this.path = path;
	        this.arrayElement = arrayElement;
	        // Minor hack: If fieldTransforms is undefined, we assume this is an
	        // external call and we need to validate the entire path.
	        if (fieldTransforms === undefined) {
	            this.validatePath();
	        }
	        this.arrayElement = arrayElement !== undefined ? arrayElement : false;
	        this.fieldTransforms = fieldTransforms || [];
	        this.fieldMask = fieldMask || [];
	    }
	    ParseContext.prototype.childContextForField = function (field) {
	        var childPath = this.path == null ? null : this.path.child(field);
	        var context = new ParseContext(this.dataSource, this.methodName, childPath, 
	        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);
	        context.validatePathSegment(field);
	        return context;
	    };
	    ParseContext.prototype.childContextForFieldPath = function (field) {
	        var childPath = this.path == null ? null : this.path.child(field);
	        var context = new ParseContext(this.dataSource, this.methodName, childPath, 
	        /*arrayElement=*/ false, this.fieldTransforms, this.fieldMask);
	        context.validatePath();
	        return context;
	    };
	    ParseContext.prototype.childContextForArray = function (index) {
	        // TODO(b/34871131): We don't support array paths right now; so make path
	        // null.
	        return new ParseContext(this.dataSource, this.methodName, 
	        /*path=*/ null, 
	        /*arrayElement=*/ true, this.fieldTransforms, this.fieldMask);
	    };
	    ParseContext.prototype.createError = function (reason) {
	        var fieldDescription = this.path === null || this.path.isEmpty()
	            ? ''
	            : " (found in field " + this.path.toString() + ")";
	        return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " +
	            reason +
	            fieldDescription);
	    };
	    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
	    ParseContext.prototype.contains = function (fieldPath) {
	        return (this.fieldMask.find(function (field) { return fieldPath.isPrefixOf(field); }) !== undefined ||
	            this.fieldTransforms.find(function (transform) {
	                return fieldPath.isPrefixOf(transform.field);
	            }) !== undefined);
	    };
	    ParseContext.prototype.validatePath = function () {
	        // TODO(b/34871131): Remove null check once we have proper paths for fields
	        // within arrays.
	        if (this.path === null) {
	            return;
	        }
	        for (var i = 0; i < this.path.length; i++) {
	            this.validatePathSegment(this.path.get(i));
	        }
	    };
	    ParseContext.prototype.validatePathSegment = function (segment) {
	        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
	            throw this.createError('Document fields cannot begin and end with __');
	        }
	    };
	    return ParseContext;
	}());
	/**
	 * A placeholder object for DocumentReferences in this file, in order to
	 * avoid a circular dependency. See the comments for `DataPreConverter` for
	 * the full context.
	 */
	var DocumentKeyReference = /** @class */ (function () {
	    function DocumentKeyReference(databaseId, key) {
	        this.databaseId = databaseId;
	        this.key = key;
	    }
	    return DocumentKeyReference;
	}());
	/**
	 * Helper for parsing raw user input (provided via the API) into internal model
	 * classes.
	 */
	var UserDataConverter = /** @class */ (function () {
	    function UserDataConverter(preConverter) {
	        this.preConverter = preConverter;
	    }
	    /** Parse document data from a non-merge set() call. */
	    UserDataConverter.prototype.parseSetData = function (methodName, input) {
	        var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);
	        validatePlainObject('Data must be an object, but it was:', context, input);
	        var updateData = this.parseData(input, context);
	        return new ParsedSetData(updateData, 
	        /* fieldMask= */ null, context.fieldTransforms);
	    };
	    /** Parse document data from a set() call with '{merge:true}'. */
	    UserDataConverter.prototype.parseMergeData = function (methodName, input, fieldPaths) {
	        var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);
	        validatePlainObject('Data must be an object, but it was:', context, input);
	        var updateData = this.parseData(input, context);
	        var fieldMask;
	        var fieldTransforms;
	        if (!fieldPaths) {
	            fieldMask = new FieldMask(context.fieldMask);
	            fieldTransforms = context.fieldTransforms;
	        }
	        else {
	            var validatedFieldPaths = [];
	            for (var _i = 0, fieldPaths_1 = fieldPaths; _i < fieldPaths_1.length; _i++) {
	                var stringOrFieldPath = fieldPaths_1[_i];
	                var fieldPath = void 0;
	                if (stringOrFieldPath instanceof FieldPath$1) {
	                    fieldPath = stringOrFieldPath._internalPath;
	                }
	                else if (typeof stringOrFieldPath === 'string') {
	                    fieldPath = fieldPathFromDotSeparatedString(methodName, stringOrFieldPath);
	                }
	                else {
	                    throw fail('Expected stringOrFieldPath to be a string or a FieldPath');
	                }
	                if (!context.contains(fieldPath)) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
	                }
	                validatedFieldPaths.push(fieldPath);
	            }
	            fieldMask = new FieldMask(validatedFieldPaths);
	            fieldTransforms = context.fieldTransforms.filter(function (transform) {
	                return fieldMask.covers(transform.field);
	            });
	        }
	        return new ParsedSetData(updateData, fieldMask, fieldTransforms);
	    };
	    /** Parse update data from an update() call. */
	    UserDataConverter.prototype.parseUpdateData = function (methodName, input) {
	        var _this = this;
	        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
	        validatePlainObject('Data must be an object, but it was:', context, input);
	        var fieldMaskPaths = [];
	        var updateData = ObjectValue.EMPTY;
	        forEach(input, function (key, value) {
	            var path = fieldPathFromDotSeparatedString(methodName, key);
	            var childContext = context.childContextForFieldPath(path);
	            value = _this.runPreConverter(value, childContext);
	            if (value instanceof DeleteFieldValueImpl) {
	                // Add it to the field mask, but don't add anything to updateData.
	                fieldMaskPaths.push(path);
	            }
	            else {
	                var parsedValue = _this.parseData(value, childContext);
	                if (parsedValue != null) {
	                    fieldMaskPaths.push(path);
	                    updateData = updateData.set(path, parsedValue);
	                }
	            }
	        });
	        var mask = new FieldMask(fieldMaskPaths);
	        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
	    };
	    /** Parse update data from a list of field/value arguments. */
	    UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {
	        var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
	        var keys = [fieldPathFromArgument(methodName, field)];
	        var values$$1 = [value];
	        if (moreFieldsAndValues.length % 2 !== 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number " +
	                'of arguments that alternate between field names and values.');
	        }
	        for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
	            keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));
	            values$$1.push(moreFieldsAndValues[i + 1]);
	        }
	        var fieldMaskPaths = [];
	        var updateData = ObjectValue.EMPTY;
	        for (var i = 0; i < keys.length; ++i) {
	            var path = keys[i];
	            var childContext = context.childContextForFieldPath(path);
	            var value_1 = this.runPreConverter(values$$1[i], childContext);
	            if (value_1 instanceof DeleteFieldValueImpl) {
	                // Add it to the field mask, but don't add anything to updateData.
	                fieldMaskPaths.push(path);
	            }
	            else {
	                var parsedValue = this.parseData(value_1, childContext);
	                if (parsedValue != null) {
	                    fieldMaskPaths.push(path);
	                    updateData = updateData.set(path, parsedValue);
	                }
	            }
	        }
	        var mask = new FieldMask(fieldMaskPaths);
	        return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
	    };
	    /**
	     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
	     * bound).
	     */
	    UserDataConverter.prototype.parseQueryValue = function (methodName, input) {
	        var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
	        var parsed = this.parseData(input, context);
	        assert(parsed != null, 'Parsed data should not be null.');
	        assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');
	        return parsed;
	    };
	    /** Sends data through this.preConverter, handling any thrown errors. */
	    UserDataConverter.prototype.runPreConverter = function (input, context) {
	        try {
	            return this.preConverter(input);
	        }
	        catch (e) {
	            var message = errorMessage(e);
	            throw context.createError(message);
	        }
	    };
	    /**
	     * Internal helper for parsing user data.
	     *
	     * @param input Data to be parsed.
	     * @param context A context object representing the current path being parsed,
	     * the source of the data being parsed, etc.
	     * @return The parsed value, or null if the value was a FieldValue sentinel
	     * that should not be included in the resulting parsed data.
	     */
	    UserDataConverter.prototype.parseData = function (input, context) {
	        input = this.runPreConverter(input, context);
	        if (looksLikeJsonObject(input)) {
	            validatePlainObject('Unsupported field value:', context, input);
	            return this.parseObject(input, context);
	        }
	        else if (input instanceof FieldValueImpl) {
	            // FieldValues usually parse into transforms (except FieldValue.delete())
	            // in which case we do not want to include this field in our parsed data
	            // (as doing so will overwrite the field directly prior to the transform
	            // trying to transform it). So we don't add this location to
	            // context.fieldMask and we return null as our parsing result.
	            this.parseSentinelFieldValue(input, context);
	            return null;
	        }
	        else {
	            // If context.path is null we are inside an array and we don't support
	            // field mask paths more granular than the top-level array.
	            if (context.path) {
	                context.fieldMask.push(context.path);
	            }
	            if (input instanceof Array) {
	                // TODO(b/34871131): Include the path containing the array in the error
	                // message.
	                if (context.arrayElement) {
	                    throw context.createError('Nested arrays are not supported');
	                }
	                return this.parseArray(input, context);
	            }
	            else {
	                return this.parseScalarValue(input, context);
	            }
	        }
	    };
	    UserDataConverter.prototype.parseObject = function (obj, context) {
	        var _this = this;
	        var result = new SortedMap(primitiveComparator);
	        if (isEmpty(obj)) {
	            // If we encounter an empty object, we explicitly add it to the update
	            // mask to ensure that the server creates a map entry.
	            if (context.path && context.path.length > 0) {
	                context.fieldMask.push(context.path);
	            }
	        }
	        else {
	            forEach(obj, function (key, val) {
	                var parsedValue = _this.parseData(val, context.childContextForField(key));
	                if (parsedValue != null) {
	                    result = result.insert(key, parsedValue);
	                }
	            });
	        }
	        return new ObjectValue(result);
	    };
	    UserDataConverter.prototype.parseArray = function (array, context) {
	        var result = [];
	        var entryIndex = 0;
	        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
	            var entry = array_1[_i];
	            var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));
	            if (parsedEntry == null) {
	                // Just include nulls in the array for fields being replaced with a
	                // sentinel.
	                parsedEntry = NullValue.INSTANCE;
	            }
	            result.push(parsedEntry);
	            entryIndex++;
	        }
	        return new ArrayValue(result);
	    };
	    /**
	     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
	     * context.fieldTransforms.
	     */
	    UserDataConverter.prototype.parseSentinelFieldValue = function (value, context) {
	        // Sentinels are only supported with writes, and not within arrays.
	        if (!isWrite(context.dataSource)) {
	            throw context.createError(value._methodName + "() can only be used with update() and set()");
	        }
	        if (context.path === null) {
	            throw context.createError(value._methodName + "() is not currently supported inside arrays");
	        }
	        if (value instanceof DeleteFieldValueImpl) {
	            if (context.dataSource === UserDataSource.MergeSet) {
	                // No transform to add for a delete, but we need to add it to our
	                // fieldMask so it gets deleted.
	                context.fieldMask.push(context.path);
	            }
	            else if (context.dataSource === UserDataSource.Update) {
	                assert(context.path.length > 0, 'FieldValue.delete() at the top level should have already' +
	                    ' been handled.');
	                throw context.createError('FieldValue.delete() can only appear at the top level ' +
	                    'of your update data');
	            }
	            else {
	                // We shouldn't encounter delete sentinels for queries or non-merge set() calls.
	                throw context.createError('FieldValue.delete() cannot be used with set() unless you pass ' +
	                    '{merge:true}');
	            }
	        }
	        else if (value instanceof ServerTimestampFieldValueImpl) {
	            context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));
	        }
	        else if (value instanceof ArrayUnionFieldValueImpl) {
	            var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
	            var arrayUnion = new ArrayUnionTransformOperation(parsedElements);
	            context.fieldTransforms.push(new FieldTransform(context.path, arrayUnion));
	        }
	        else if (value instanceof ArrayRemoveFieldValueImpl) {
	            var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
	            var arrayRemove = new ArrayRemoveTransformOperation(parsedElements);
	            context.fieldTransforms.push(new FieldTransform(context.path, arrayRemove));
	        }
	        else {
	            fail('Unknown FieldValue type: ' + value);
	        }
	    };
	    /**
	     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
	     *
	     * @return The parsed value
	     */
	    UserDataConverter.prototype.parseScalarValue = function (value, context) {
	        if (value === null) {
	            return NullValue.INSTANCE;
	        }
	        else if (typeof value === 'number') {
	            if (isSafeInteger(value)) {
	                return new IntegerValue(value);
	            }
	            else {
	                return new DoubleValue(value);
	            }
	        }
	        else if (typeof value === 'boolean') {
	            return BooleanValue.of(value);
	        }
	        else if (typeof value === 'string') {
	            return new StringValue(value);
	        }
	        else if (value instanceof Date) {
	            return new TimestampValue(Timestamp.fromDate(value));
	        }
	        else if (value instanceof Timestamp) {
	            // Firestore backend truncates precision down to microseconds. To ensure
	            // offline mode works the same with regards to truncation, perform the
	            // truncation immediately without waiting for the backend to do that.
	            return new TimestampValue(new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000));
	        }
	        else if (value instanceof GeoPoint) {
	            return new GeoPointValue(value);
	        }
	        else if (value instanceof Blob) {
	            return new BlobValue(value);
	        }
	        else if (value instanceof DocumentKeyReference) {
	            return new RefValue(value.databaseId, value.key);
	        }
	        else {
	            throw context.createError("Unsupported field value: " + valueDescription(value));
	        }
	    };
	    UserDataConverter.prototype.parseArrayTransformElements = function (methodName, elements) {
	        var _this = this;
	        return elements.map(function (element, i) {
	            // Although array transforms are used with writes, the actual elements
	            // being unioned or removed are not considered writes since they cannot
	            // contain any FieldValue sentinels, etc.
	            var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
	            return _this.parseData(element, context.childContextForArray(i));
	        });
	    };
	    return UserDataConverter;
	}());
	/**
	 * Checks whether an object looks like a JSON object that should be converted
	 * into a struct. Normal class/prototype instances are considered to look like
	 * JSON objects since they should be converted to a struct value. Arrays, Dates,
	 * GeoPoints, etc. are not considered to look like JSON objects since they map
	 * to specific FieldValue types other than ObjectValue.
	 */
	function looksLikeJsonObject(input) {
	    return (typeof input === 'object' &&
	        input !== null &&
	        !(input instanceof Array) &&
	        !(input instanceof Date) &&
	        !(input instanceof Timestamp) &&
	        !(input instanceof GeoPoint) &&
	        !(input instanceof Blob) &&
	        !(input instanceof DocumentKeyReference) &&
	        !(input instanceof FieldValueImpl));
	}
	function validatePlainObject(message, context, input) {
	    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
	        var description = valueDescription(input);
	        if (description === 'an object') {
	            // Massage the error if it was an object.
	            throw context.createError(message + ' a custom object');
	        }
	        else {
	            throw context.createError(message + ' ' + description);
	        }
	    }
	}
	/**
	 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
	 */
	function fieldPathFromArgument(methodName, path) {
	    if (path instanceof FieldPath$1) {
	        return path._internalPath;
	    }
	    else if (typeof path === 'string') {
	        return fieldPathFromDotSeparatedString(methodName, path);
	    }
	    else {
	        var message = 'Field path arguments must be of type string or FieldPath.';
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
	    }
	}
	/**
	 * Wraps fromDotSeparatedString with an error message about the method that
	 * was thrown.
	 * @param methodName The publicly visible method name
	 * @param path The dot-separated string form of a field path which will be split
	 * on dots.
	 */
	function fieldPathFromDotSeparatedString(methodName, path) {
	    try {
	        return fromDotSeparatedString(path)._internalPath;
	    }
	    catch (e) {
	        var message = errorMessage(e);
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
	    }
	}
	/**
	 * Extracts the message from a caught exception, which should be an Error object
	 * though JS doesn't guarantee that.
	 */
	function errorMessage(error) {
	    return error instanceof Error ? error.message : error.toString();
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// The objects that are a part of this API are exposed to third-parties as
	// compiled javascript so we want to flag our private members with a leading
	// underscore to discourage their use.
	// tslint:disable:strip-private-property-underscore
	// settings() defaults:
	var DEFAULT_HOST = 'firestore.googleapis.com';
	var DEFAULT_SSL = true;
	var DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = false;
	// enablePersistence() defaults:
	var DEFAULT_SYNCHRONIZE_TABS = false;
	/**
	 * A concrete type describing all the values that can be applied via a
	 * user-supplied firestore.Settings object. This is a separate type so that
	 * defaults can be supplied and the value can be checked for equality.
	 */
	var FirestoreSettings = /** @class */ (function () {
	    function FirestoreSettings(settings) {
	        if (settings.host === undefined) {
	            if (settings.ssl !== undefined) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
	            }
	            this.host = DEFAULT_HOST;
	            this.ssl = DEFAULT_SSL;
	        }
	        else {
	            validateNamedType('settings', 'non-empty string', 'host', settings.host);
	            this.host = settings.host;
	            validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);
	            this.ssl = defaulted(settings.ssl, DEFAULT_SSL);
	        }
	        validateOptionNames('settings', settings, [
	            'host',
	            'ssl',
	            'credentials',
	            'timestampsInSnapshots'
	        ]);
	        validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);
	        this.credentials = settings.credentials;
	        validateNamedOptionalType('settings', 'boolean', 'timestampsInSnapshots', settings.timestampsInSnapshots);
	        this.timestampsInSnapshots = defaulted(settings.timestampsInSnapshots, DEFAULT_TIMESTAMPS_IN_SNAPSHOTS);
	    }
	    FirestoreSettings.prototype.isEqual = function (other) {
	        return (this.host === other.host &&
	            this.ssl === other.ssl &&
	            this.timestampsInSnapshots === other.timestampsInSnapshots &&
	            this.credentials === other.credentials);
	    };
	    return FirestoreSettings;
	}());
	var FirestoreConfig = /** @class */ (function () {
	    function FirestoreConfig() {
	    }
	    return FirestoreConfig;
	}());
	/**
	 * Encapsulates the settings that can be used to configure Firestore
	 * persistence.
	 */
	var PersistenceSettings = /** @class */ (function () {
	    function PersistenceSettings(enabled, settings) {
	        this.enabled = enabled;
	        assert(enabled || !settings, 'Can only provide PersistenceSettings with persistence enabled');
	        settings = settings || {};
	        this.experimentalTabSynchronization = defaulted(settings.experimentalTabSynchronization, DEFAULT_SYNCHRONIZE_TABS);
	    }
	    PersistenceSettings.prototype.isEqual = function (other) {
	        return (this.enabled === other.enabled &&
	            this.experimentalTabSynchronization ===
	                other.experimentalTabSynchronization);
	    };
	    return PersistenceSettings;
	}());
	/**
	 * The root reference to the database.
	 */
	var Firestore = /** @class */ (function () {
	    function Firestore(databaseIdOrApp) {
	        var _this = this;
	        // Public for use in tests.
	        // TODO(mikelehen): Use modularized initialization instead.
	        this._queue = new AsyncQueue();
	        this.INTERNAL = {
	            delete: function (options) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                return tslib_1.__generator(this, function (_a) {
	                    if (this._firestoreClient) {
	                        return [2 /*return*/, this._firestoreClient.shutdown(options)];
	                    }
	                    return [2 /*return*/];
	                });
	            }); }
	        };
	        var config = new FirestoreConfig();
	        if (typeof databaseIdOrApp.options === 'object') {
	            // This is very likely a Firebase app object
	            // TODO(b/34177605): Can we somehow use instanceof?
	            var app = databaseIdOrApp;
	            config.firebaseApp = app;
	            config.databaseId = Firestore.databaseIdFromApp(app);
	            config.persistenceKey = config.firebaseApp.name;
	            config.credentials = new FirebaseCredentialsProvider(app);
	        }
	        else {
	            var external_1 = databaseIdOrApp;
	            if (!external_1.projectId) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');
	            }
	            config.databaseId = new DatabaseId(external_1.projectId, external_1.database);
	            // Use a default persistenceKey that lines up with FirebaseApp.
	            config.persistenceKey = '[DEFAULT]';
	            config.credentials = new EmptyCredentialsProvider();
	        }
	        config.settings = new FirestoreSettings({});
	        this._config = config;
	        this._databaseId = config.databaseId;
	    }
	    Firestore.prototype.settings = function (settingsLiteral) {
	        validateExactNumberOfArgs('Firestore.settings', arguments, 1);
	        validateArgType('Firestore.settings', 'object', 1, settingsLiteral);
	        if (contains(settingsLiteral, 'persistence')) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to ' +
	                'firestore.enablePersistence().');
	        }
	        var newSettings = new FirestoreSettings(settingsLiteral);
	        if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {
	            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +
	                'be changed. You can only call settings() before calling any other ' +
	                'methods on a Firestore object.');
	        }
	        this._config.settings = newSettings;
	        if (newSettings.credentials !== undefined) {
	            this._config.credentials = makeCredentialsProvider(newSettings.credentials);
	        }
	    };
	    Firestore.prototype.enableNetwork = function () {
	        this.ensureClientConfigured();
	        return this._firestoreClient.enableNetwork();
	    };
	    Firestore.prototype.disableNetwork = function () {
	        this.ensureClientConfigured();
	        return this._firestoreClient.disableNetwork();
	    };
	    Firestore.prototype.enablePersistence = function (settings) {
	        if (this._firestoreClient) {
	            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' +
	                'be enabled. You can only call enablePersistence() before calling ' +
	                'any other methods on a Firestore object.');
	        }
	        return this.configureClient(new PersistenceSettings(/* enabled= */ true, settings));
	    };
	    Firestore.prototype.ensureClientConfigured = function () {
	        if (!this._firestoreClient) {
	            // Kick off starting the client but don't actually wait for it.
	            // tslint:disable-next-line:no-floating-promises
	            this.configureClient(new PersistenceSettings(/* enabled= */ false));
	        }
	        return this._firestoreClient;
	    };
	    Firestore.prototype.configureClient = function (persistenceSettings) {
	        var _this = this;
	        assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');
	        if (!this._config.settings.timestampsInSnapshots) {
	            error("\nThe behavior for Date objects stored in Firestore is going to change\nAND YOUR APP MAY BREAK.\nTo hide this warning and ensure your app does not break, you need to add the\nfollowing code to your app before calling any other Cloud Firestore methods:\n\n  const firestore = firebase.firestore();\n  const settings = {/* your settings... */ timestampsInSnapshots: true};\n  firestore.settings(settings);\n\nWith this change, timestamps stored in Cloud Firestore will be read back as\nFirebase Timestamp objects instead of as system Date objects. So you will also\nneed to update code expecting a Date to instead expect a Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at');\n  const date = timestamp.toDate();\n\nPlease audit all existing usages of Date when you enable the new behavior. In a\nfuture release, the behavior will change to the new behavior, so if you do not\nfollow these steps, YOUR APP MAY BREAK.");
	        }
	        assert(!this._firestoreClient, 'configureClient() called multiple times');
	        var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);
	        var preConverter = function (value) {
	            if (value instanceof DocumentReference) {
	                var thisDb = _this._config.databaseId;
	                var otherDb = value.firestore._config.databaseId;
	                if (!otherDb.isEqual(thisDb)) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' +
	                        (otherDb.projectId + "/" + otherDb.database + " but should be ") +
	                        ("for database " + thisDb.projectId + "/" + thisDb.database));
	                }
	                return new DocumentKeyReference(_this._config.databaseId, value._key);
	            }
	            else {
	                return value;
	            }
	        };
	        this._dataConverter = new UserDataConverter(preConverter);
	        this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);
	        return this._firestoreClient.start(persistenceSettings);
	    };
	    Firestore.databaseIdFromApp = function (app) {
	        var options = app.options;
	        if (!contains(options, 'projectId')) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
	        }
	        var projectId = options['projectId'];
	        if (!projectId || typeof projectId !== 'string') {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');
	        }
	        return new DatabaseId(projectId);
	    };
	    Object.defineProperty(Firestore.prototype, "app", {
	        get: function () {
	            if (!this._config.firebaseApp) {
	                throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is " +
	                    'not available');
	            }
	            return this._config.firebaseApp;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Firestore.prototype.collection = function (pathString) {
	        validateExactNumberOfArgs('Firestore.collection', arguments, 1);
	        validateArgType('Firestore.collection', 'non-empty string', 1, pathString);
	        if (!pathString) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection path to collection()');
	        }
	        this.ensureClientConfigured();
	        return new CollectionReference(ResourcePath.fromString(pathString), this);
	    };
	    Firestore.prototype.doc = function (pathString) {
	        validateExactNumberOfArgs('Firestore.doc', arguments, 1);
	        validateArgType('Firestore.doc', 'non-empty string', 1, pathString);
	        if (!pathString) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty document path to doc()');
	        }
	        this.ensureClientConfigured();
	        return DocumentReference.forPath(ResourcePath.fromString(pathString), this);
	    };
	    Firestore.prototype.runTransaction = function (updateFunction) {
	        var _this = this;
	        validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);
	        validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);
	        return this.ensureClientConfigured().transaction(function (transaction) {
	            return updateFunction(new Transaction$1(_this, transaction));
	        });
	    };
	    Firestore.prototype.batch = function () {
	        this.ensureClientConfigured();
	        return new WriteBatch(this);
	    };
	    Object.defineProperty(Firestore, "logLevel", {
	        get: function () {
	            switch (getLogLevel()) {
	                case LogLevel.DEBUG:
	                    return 'debug';
	                case LogLevel.ERROR:
	                    return 'error';
	                case LogLevel.SILENT:
	                    return 'silent';
	                default:
	                    return fail('Unknown log level: ' + getLogLevel());
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Firestore.setLogLevel = function (level) {
	        validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);
	        validateArgType('Firestore.setLogLevel', 'non-empty string', 1, level);
	        switch (level) {
	            case 'debug':
	                setLogLevel(LogLevel.DEBUG);
	                break;
	            case 'error':
	                setLogLevel(LogLevel.ERROR);
	                break;
	            case 'silent':
	                setLogLevel(LogLevel.SILENT);
	                break;
	            default:
	                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);
	        }
	    };
	    // Note: this is not a property because the minifier can't work correctly with
	    // the way TypeScript compiler outputs properties.
	    Firestore.prototype._areTimestampsInSnapshotsEnabled = function () {
	        return this._config.settings.timestampsInSnapshots;
	    };
	    return Firestore;
	}());
	/**
	 * A reference to a transaction.
	 */
	var Transaction$1 = /** @class */ (function () {
	    function Transaction(_firestore, _transaction) {
	        this._firestore = _firestore;
	        this._transaction = _transaction;
	    }
	    Transaction.prototype.get = function (documentRef) {
	        var _this = this;
	        validateExactNumberOfArgs('Transaction.get', arguments, 1);
	        var ref = validateReference('Transaction.get', documentRef, this._firestore);
	        return this._transaction
	            .lookup([ref._key])
	            .then(function (docs) {
	            if (!docs || docs.length !== 1) {
	                return fail('Mismatch in docs returned from document lookup.');
	            }
	            var doc = docs[0];
	            if (doc instanceof NoDocument) {
	                return new DocumentSnapshot(_this._firestore, ref._key, null, 
	                /* fromCache= */ false, 
	                /* hasPendingWrites= */ false);
	            }
	            else if (doc instanceof Document) {
	                return new DocumentSnapshot(_this._firestore, ref._key, doc, 
	                /* fromCache= */ false, 
	                /* hasPendingWrites= */ false);
	            }
	            else {
	                throw fail("BatchGetDocumentsRequest returned unexpected document type: " + doc.constructor.name);
	            }
	        });
	    };
	    Transaction.prototype.set = function (documentRef, value, options) {
	        validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);
	        var ref = validateReference('Transaction.set', documentRef, this._firestore);
	        options = validateSetOptions('Transaction.set', options);
	        var parsed = options.merge || options.mergeFields
	            ? this._firestore._dataConverter.parseMergeData('Transaction.set', value, options.mergeFields)
	            : this._firestore._dataConverter.parseSetData('Transaction.set', value);
	        this._transaction.set(ref._key, parsed);
	        return this;
	    };
	    Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {
	        var moreFieldsAndValues = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            moreFieldsAndValues[_i - 3] = arguments[_i];
	        }
	        var ref;
	        var parsed;
	        if (typeof fieldOrUpdateData === 'string' ||
	            fieldOrUpdateData instanceof FieldPath$1) {
	            validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);
	            ref = validateReference('Transaction.update', documentRef, this._firestore);
	            parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);
	        }
	        else {
	            validateExactNumberOfArgs('Transaction.update', arguments, 2);
	            ref = validateReference('Transaction.update', documentRef, this._firestore);
	            parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);
	        }
	        this._transaction.update(ref._key, parsed);
	        return this;
	    };
	    Transaction.prototype.delete = function (documentRef) {
	        validateExactNumberOfArgs('Transaction.delete', arguments, 1);
	        var ref = validateReference('Transaction.delete', documentRef, this._firestore);
	        this._transaction.delete(ref._key);
	        return this;
	    };
	    return Transaction;
	}());
	var WriteBatch = /** @class */ (function () {
	    function WriteBatch(_firestore) {
	        this._firestore = _firestore;
	        this._mutations = [];
	        this._committed = false;
	    }
	    WriteBatch.prototype.set = function (documentRef, value, options) {
	        validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);
	        this.verifyNotCommitted();
	        var ref = validateReference('WriteBatch.set', documentRef, this._firestore);
	        options = validateSetOptions('WriteBatch.set', options);
	        var parsed = options.merge || options.mergeFields
	            ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value, options.mergeFields)
	            : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);
	        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));
	        return this;
	    };
	    WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {
	        var moreFieldsAndValues = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            moreFieldsAndValues[_i - 3] = arguments[_i];
	        }
	        this.verifyNotCommitted();
	        var ref;
	        var parsed;
	        if (typeof fieldOrUpdateData === 'string' ||
	            fieldOrUpdateData instanceof FieldPath$1) {
	            validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);
	            ref = validateReference('WriteBatch.update', documentRef, this._firestore);
	            parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);
	        }
	        else {
	            validateExactNumberOfArgs('WriteBatch.update', arguments, 2);
	            ref = validateReference('WriteBatch.update', documentRef, this._firestore);
	            parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);
	        }
	        this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));
	        return this;
	    };
	    WriteBatch.prototype.delete = function (documentRef) {
	        validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);
	        this.verifyNotCommitted();
	        var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);
	        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));
	        return this;
	    };
	    WriteBatch.prototype.commit = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                this.verifyNotCommitted();
	                this._committed = true;
	                if (this._mutations.length > 0) {
	                    return [2 /*return*/, this._firestore.ensureClientConfigured().write(this._mutations)];
	                }
	                return [2 /*return*/];
	            });
	        });
	    };
	    WriteBatch.prototype.verifyNotCommitted = function () {
	        if (this._committed) {
	            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +
	                'has been called.');
	        }
	    };
	    return WriteBatch;
	}());
	/**
	 * A reference to a particular document in a collection in the database.
	 */
	var DocumentReference = /** @class */ (function () {
	    function DocumentReference(_key, firestore) {
	        this._key = _key;
	        this.firestore = firestore;
	        this._firestoreClient = this.firestore.ensureClientConfigured();
	    }
	    DocumentReference.forPath = function (path, firestore) {
	        if (path.length % 2 !== 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +
	                'references must have an even number of segments, but ' +
	                (path.canonicalString() + " has " + path.length));
	        }
	        return new DocumentReference(new DocumentKey(path), firestore);
	    };
	    Object.defineProperty(DocumentReference.prototype, "id", {
	        get: function () {
	            return this._key.path.lastSegment();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DocumentReference.prototype, "parent", {
	        get: function () {
	            return new CollectionReference(this._key.path.popLast(), this.firestore);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DocumentReference.prototype, "path", {
	        get: function () {
	            return this._key.path.canonicalString();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DocumentReference.prototype.collection = function (pathString) {
	        validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);
	        validateArgType('DocumentReference.collection', 'non-empty string', 1, pathString);
	        if (!pathString) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');
	        }
	        var path = ResourcePath.fromString(pathString);
	        return new CollectionReference(this._key.path.child(path), this.firestore);
	    };
	    DocumentReference.prototype.isEqual = function (other) {
	        if (!(other instanceof DocumentReference)) {
	            throw invalidClassError('isEqual', 'DocumentReference', 1, other);
	        }
	        return this.firestore === other.firestore && this._key.isEqual(other._key);
	    };
	    DocumentReference.prototype.set = function (value, options) {
	        validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);
	        options = validateSetOptions('DocumentReference.set', options);
	        var parsed = options.merge || options.mergeFields
	            ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value, options.mergeFields)
	            : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);
	        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));
	    };
	    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {
	        var moreFieldsAndValues = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            moreFieldsAndValues[_i - 2] = arguments[_i];
	        }
	        var parsed;
	        if (typeof fieldOrUpdateData === 'string' ||
	            fieldOrUpdateData instanceof FieldPath$1) {
	            validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);
	            parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);
	        }
	        else {
	            validateExactNumberOfArgs('DocumentReference.update', arguments, 1);
	            parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);
	        }
	        return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));
	    };
	    DocumentReference.prototype.delete = function () {
	        validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);
	        return this._firestoreClient.write([
	            new DeleteMutation(this._key, Precondition.NONE)
	        ]);
	    };
	    DocumentReference.prototype.onSnapshot = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);
	        var options = {
	            includeMetadataChanges: false
	        };
	        var observer;
	        var currArg = 0;
	        if (typeof args[currArg] === 'object' &&
	            !isPartialObserver(args[currArg])) {
	            options = args[currArg];
	            validateOptionNames('DocumentReference.onSnapshot', options, [
	                'includeMetadataChanges'
	            ]);
	            validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
	            currArg++;
	        }
	        var internalOptions = {
	            includeMetadataChanges: options.includeMetadataChanges
	        };
	        if (isPartialObserver(args[currArg])) {
	            observer = args[currArg];
	        }
	        else {
	            validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);
	            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
	            validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
	            observer = {
	                next: args[currArg],
	                error: args[currArg + 1],
	                complete: args[currArg + 2]
	            };
	        }
	        return this.onSnapshotInternal(internalOptions, observer);
	    };
	    DocumentReference.prototype.onSnapshotInternal = function (options, observer) {
	        var _this = this;
	        var errHandler = function (err) {
	            console.error('Uncaught Error in onSnapshot:', err);
	        };
	        if (observer.error) {
	            errHandler = observer.error.bind(observer);
	        }
	        var asyncObserver = new AsyncObserver({
	            next: function (snapshot) {
	                if (observer.next) {
	                    assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');
	                    var doc = snapshot.docs.get(_this._key);
	                    observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache, snapshot.hasPendingWrites));
	                }
	            },
	            error: errHandler
	        });
	        var internalListener = this._firestoreClient.listen(Query.atPath(this._key.path), asyncObserver, options);
	        return function () {
	            asyncObserver.mute();
	            _this._firestoreClient.unlisten(internalListener);
	        };
	    };
	    DocumentReference.prototype.get = function (options) {
	        var _this = this;
	        validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);
	        validateGetOptions('DocumentReference.get', options);
	        return new Promise(function (resolve, reject) {
	            if (options && options.source === 'cache') {
	                _this.firestore
	                    .ensureClientConfigured()
	                    .getDocumentFromLocalCache(_this._key)
	                    .then(function (doc) {
	                    resolve(new DocumentSnapshot(_this.firestore, _this._key, doc, 
	                    /*fromCache=*/ true, doc instanceof Document ? doc.hasLocalMutations : false));
	                }, reject);
	            }
	            else {
	                _this.getViaSnapshotListener(resolve, reject, options);
	            }
	        });
	    };
	    DocumentReference.prototype.getViaSnapshotListener = function (resolve, reject, options) {
	        var unlisten = this.onSnapshotInternal({
	            includeMetadataChanges: true,
	            waitForSyncWhenOnline: true
	        }, {
	            next: function (snap) {
	                // Remove query first before passing event to user to avoid
	                // user actions affecting the now stale query.
	                unlisten();
	                if (!snap.exists && snap.metadata.fromCache) {
	                    // TODO(dimond): If we're online and the document doesn't
	                    // exist then we resolve with a doc.exists set to false. If
	                    // we're offline however, we reject the Promise in this
	                    // case. Two options: 1) Cache the negative response from
	                    // the server so we can deliver that even when you're
	                    // offline 2) Actually reject the Promise in the online case
	                    // if the document doesn't exist.
	                    reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is ' + 'offline.'));
	                }
	                else if (snap.exists &&
	                    snap.metadata.fromCache &&
	                    options &&
	                    options.source === 'server') {
	                    reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' +
	                        'document does exist in the local cache. Run again ' +
	                        'without setting source to "server" to ' +
	                        'retrieve the cached document.)'));
	                }
	                else {
	                    resolve(snap);
	                }
	            },
	            error: reject
	        });
	    };
	    return DocumentReference;
	}());
	var SnapshotMetadata = /** @class */ (function () {
	    function SnapshotMetadata(hasPendingWrites, fromCache) {
	        this.hasPendingWrites = hasPendingWrites;
	        this.fromCache = fromCache;
	    }
	    SnapshotMetadata.prototype.isEqual = function (other) {
	        return (this.hasPendingWrites === other.hasPendingWrites &&
	            this.fromCache === other.fromCache);
	    };
	    return SnapshotMetadata;
	}());
	var DocumentSnapshot = /** @class */ (function () {
	    function DocumentSnapshot(_firestore, _key, _document, _fromCache, _hasPendingWrites) {
	        this._firestore = _firestore;
	        this._key = _key;
	        this._document = _document;
	        this._fromCache = _fromCache;
	        this._hasPendingWrites = _hasPendingWrites;
	    }
	    DocumentSnapshot.prototype.data = function (options) {
	        validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);
	        options = validateSnapshotOptions('DocumentSnapshot.data', options);
	        return !this._document
	            ? undefined
	            : this.convertObject(this._document.data, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
	    };
	    DocumentSnapshot.prototype.get = function (fieldPath, options) {
	        validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);
	        options = validateSnapshotOptions('DocumentSnapshot.get', options);
	        if (this._document) {
	            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));
	            if (value !== undefined) {
	                return this.convertValue(value, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
	            }
	        }
	        return undefined;
	    };
	    Object.defineProperty(DocumentSnapshot.prototype, "id", {
	        get: function () {
	            return this._key.path.lastSegment();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DocumentSnapshot.prototype, "ref", {
	        get: function () {
	            return new DocumentReference(this._key, this._firestore);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DocumentSnapshot.prototype, "exists", {
	        get: function () {
	            return this._document !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DocumentSnapshot.prototype, "metadata", {
	        get: function () {
	            return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DocumentSnapshot.prototype.isEqual = function (other) {
	        if (!(other instanceof DocumentSnapshot)) {
	            throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);
	        }
	        return (this._firestore === other._firestore &&
	            this._fromCache === other._fromCache &&
	            this._key.isEqual(other._key) &&
	            (this._document === null
	                ? other._document === null
	                : this._document.isEqual(other._document)));
	    };
	    DocumentSnapshot.prototype.convertObject = function (data, options) {
	        var _this = this;
	        var result = {};
	        data.forEach(function (key, value) {
	            result[key] = _this.convertValue(value, options);
	        });
	        return result;
	    };
	    DocumentSnapshot.prototype.convertValue = function (value, options) {
	        if (value instanceof ObjectValue) {
	            return this.convertObject(value, options);
	        }
	        else if (value instanceof ArrayValue) {
	            return this.convertArray(value, options);
	        }
	        else if (value instanceof RefValue) {
	            var key = value.value(options);
	            var database = this._firestore.ensureClientConfigured().databaseId();
	            if (!value.databaseId.isEqual(database)) {
	                // TODO(b/64130202): Somehow support foreign references.
	                error("Document " + this._key.path + " contains a document " +
	                    "reference within a different database (" +
	                    (value.databaseId.projectId + "/" + value.databaseId.database + ") which is not ") +
	                    "supported. It will be treated as a reference in the current " +
	                    ("database (" + database.projectId + "/" + database.database + ") ") +
	                    "instead.");
	            }
	            return new DocumentReference(key, this._firestore);
	        }
	        else {
	            return value.value(options);
	        }
	    };
	    DocumentSnapshot.prototype.convertArray = function (data, options) {
	        var _this = this;
	        return data.internalValue.map(function (value) {
	            return _this.convertValue(value, options);
	        });
	    };
	    return DocumentSnapshot;
	}());
	var QueryDocumentSnapshot = /** @class */ (function (_super) {
	    tslib_1.__extends(QueryDocumentSnapshot, _super);
	    function QueryDocumentSnapshot(firestore, key, document, fromCache, hasPendingWrites) {
	        return _super.call(this, firestore, key, document, fromCache, hasPendingWrites) || this;
	    }
	    QueryDocumentSnapshot.prototype.data = function (options) {
	        var data = _super.prototype.data.call(this, options);
	        assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');
	        return data;
	    };
	    return QueryDocumentSnapshot;
	}(DocumentSnapshot));
	var Query$1 = /** @class */ (function () {
	    function Query$$1(_query, firestore) {
	        this._query = _query;
	        this.firestore = firestore;
	    }
	    Query$$1.prototype.where = function (field, opStr, value) {
	        validateExactNumberOfArgs('Query.where', arguments, 3);
	        validateArgType('Query.where', 'non-empty string', 2, opStr);
	        validateDefined('Query.where', 3, value);
	        var fieldValue;
	        var fieldPath = fieldPathFromArgument('Query.where', field);
	        var relationOp = RelationOp.fromString(opStr);
	        if (fieldPath.isKeyField()) {
	            if (relationOp === RelationOp.ARRAY_CONTAINS) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform array-contains queries on " +
	                    'FieldPath.documentId() since document IDs are not arrays.');
	            }
	            if (typeof value === 'string') {
	                if (value.indexOf('/') !== -1) {
	                    // TODO(dimond): Allow slashes once ancestor queries are supported
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +
	                        'valid document ID if the first parameter is ' +
	                        'FieldPath.documentId(), but it contains a slash.');
	                }
	                if (value === '') {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' +
	                        'valid document ID if the first parameter is ' +
	                        'FieldPath.documentId(), but it was an empty string.');
	                }
	                var path = this._query.path.child(new ResourcePath([value]));
	                assert(path.length % 2 === 0, 'Path should be a document key');
	                fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));
	            }
	            else if (value instanceof DocumentReference) {
	                var ref = value;
	                fieldValue = new RefValue(this.firestore._databaseId, ref._key);
	            }
	            else {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.where() requires its third parameter to be a " +
	                    "string or a DocumentReference if the first parameter is " +
	                    "FieldPath.documentId(), but it was: " +
	                    (valueDescription(value) + "."));
	            }
	        }
	        else {
	            fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);
	        }
	        var filter = Filter.create(fieldPath, relationOp, fieldValue);
	        this.validateNewFilter(filter);
	        return new Query$$1(this._query.addFilter(filter), this.firestore);
	    };
	    Query$$1.prototype.orderBy = function (field, directionStr) {
	        validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);
	        validateOptionalArgType('Query.orderBy', 'non-empty string', 2, directionStr);
	        var direction;
	        if (directionStr === undefined || directionStr === 'asc') {
	            direction = Direction.ASCENDING;
	        }
	        else if (directionStr === 'desc') {
	            direction = Direction.DESCENDING;
	        }
	        else {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + directionStr + "', " +
	                "expected 'asc' or 'desc'.");
	        }
	        if (this._query.startAt !== null) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' +
	                'Query.startAfter() before calling Query.orderBy().');
	        }
	        if (this._query.endAt !== null) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' +
	                'Query.endBefore() before calling Query.orderBy().');
	        }
	        var fieldPath = fieldPathFromArgument('Query.orderBy', field);
	        var orderBy = new OrderBy(fieldPath, direction);
	        this.validateNewOrderBy(orderBy);
	        return new Query$$1(this._query.addOrderBy(orderBy), this.firestore);
	    };
	    Query$$1.prototype.limit = function (n) {
	        validateExactNumberOfArgs('Query.limit', arguments, 1);
	        validateArgType('Query.limit', 'number', 1, n);
	        if (n <= 0) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. Query limit (" + n + ") is invalid. Limit must be " +
	                'positive.');
	        }
	        return new Query$$1(this._query.withLimit(n), this.firestore);
	    };
	    Query$$1.prototype.startAt = function (docOrField) {
	        var fields = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            fields[_i - 1] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);
	        var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields, 
	        /*before=*/ true);
	        return new Query$$1(this._query.withStartAt(bound), this.firestore);
	    };
	    Query$$1.prototype.startAfter = function (docOrField) {
	        var fields = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            fields[_i - 1] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);
	        var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields, 
	        /*before=*/ false);
	        return new Query$$1(this._query.withStartAt(bound), this.firestore);
	    };
	    Query$$1.prototype.endBefore = function (docOrField) {
	        var fields = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            fields[_i - 1] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);
	        var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields, 
	        /*before=*/ true);
	        return new Query$$1(this._query.withEndAt(bound), this.firestore);
	    };
	    Query$$1.prototype.endAt = function (docOrField) {
	        var fields = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            fields[_i - 1] = arguments[_i];
	        }
	        validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);
	        var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields, 
	        /*before=*/ false);
	        return new Query$$1(this._query.withEndAt(bound), this.firestore);
	    };
	    Query$$1.prototype.isEqual = function (other) {
	        if (!(other instanceof Query$$1)) {
	            throw invalidClassError('isEqual', 'Query', 1, other);
	        }
	        return (this.firestore === other.firestore && this._query.isEqual(other._query));
	    };
	    /** Helper function to create a bound from a document or fields */
	    Query$$1.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {
	        validateDefined(methodName, 1, docOrField);
	        if (docOrField instanceof DocumentSnapshot) {
	            if (fields.length > 0) {
	                throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "().");
	            }
	            var snap = docOrField;
	            if (!snap.exists) {
	                throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " +
	                    (methodName + "()."));
	            }
	            return this.boundFromDocument(methodName, snap._document, before);
	        }
	        else {
	            var allFields = [docOrField].concat(fields);
	            return this.boundFromFields(methodName, allFields, before);
	        }
	    };
	    /**
	     * Create a Bound from a query and a document.
	     *
	     * Note that the Bound will always include the key of the document
	     * and so only the provided document will compare equal to the returned
	     * position.
	     *
	     * Will throw if the document does not contain all fields of the order by
	     * of the query.
	     */
	    Query$$1.prototype.boundFromDocument = function (methodName, doc, before) {
	        var components = [];
	        // Because people expect to continue/end a query at the exact document
	        // provided, we need to use the implicit sort order rather than the explicit
	        // sort order, because it's guaranteed to contain the document key. That way
	        // the position becomes unambiguous and the query continues/ends exactly at
	        // the provided document. Without the key (by using the explicit sort
	        // orders), multiple documents could match the position, yielding duplicate
	        // results.
	        for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {
	            var orderBy = _a[_i];
	            if (orderBy.field.isKeyField()) {
	                components.push(new RefValue(this.firestore._databaseId, doc.key));
	            }
	            else {
	                var value = doc.field(orderBy.field);
	                if (value !== undefined) {
	                    components.push(value);
	                }
	                else {
	                    var field = orderBy.field.canonicalString();
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " +
	                        ("document for which the field '" + field + "' (used as the ") +
	                        "orderBy) does not exist.");
	                }
	            }
	        }
	        return new Bound(components, before);
	    };
	    /**
	     * Converts a list of field values to a Bound for the given query.
	     */
	    Query$$1.prototype.boundFromFields = function (methodName, values$$1, before) {
	        // Use explicit order by's because it has to match the query the user made
	        var orderBy = this._query.explicitOrderBy;
	        if (values$$1.length > orderBy.length) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). " +
	                "The number of arguments must be less than or equal to the " +
	                "number of Query.orderBy() clauses");
	        }
	        var components = [];
	        for (var i = 0; i < values$$1.length; i++) {
	            var rawValue = values$$1[i];
	            var orderByComponent = orderBy[i];
	            if (orderByComponent.field.isKeyField()) {
	                if (typeof rawValue !== 'string') {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " +
	                        (methodName + "(), but got a " + typeof rawValue));
	                }
	                if (rawValue.indexOf('/') !== -1) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Document ID '" + rawValue + "' contains a slash in " +
	                        (methodName + "()"));
	                }
	                var key = new DocumentKey(this._query.path.child(rawValue));
	                components.push(new RefValue(this.firestore._databaseId, key));
	            }
	            else {
	                var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);
	                components.push(wrapped);
	            }
	        }
	        return new Bound(components, before);
	    };
	    Query$$1.prototype.onSnapshot = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);
	        var options = {};
	        var observer;
	        var currArg = 0;
	        if (typeof args[currArg] === 'object' &&
	            !isPartialObserver(args[currArg])) {
	            options = args[currArg];
	            validateOptionNames('Query.onSnapshot', options, [
	                'includeMetadataChanges'
	            ]);
	            validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
	            currArg++;
	        }
	        if (isPartialObserver(args[currArg])) {
	            observer = args[currArg];
	        }
	        else {
	            validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);
	            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
	            validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
	            observer = {
	                next: args[currArg],
	                error: args[currArg + 1],
	                complete: args[currArg + 2]
	            };
	        }
	        return this.onSnapshotInternal(options, observer);
	    };
	    Query$$1.prototype.onSnapshotInternal = function (options, observer) {
	        var _this = this;
	        var errHandler = function (err) {
	            console.error('Uncaught Error in onSnapshot:', err);
	        };
	        if (observer.error) {
	            errHandler = observer.error.bind(observer);
	        }
	        var asyncObserver = new AsyncObserver({
	            next: function (result) {
	                if (observer.next) {
	                    observer.next(new QuerySnapshot(_this.firestore, _this._query, result));
	                }
	            },
	            error: errHandler
	        });
	        var firestoreClient = this.firestore.ensureClientConfigured();
	        var internalListener = firestoreClient.listen(this._query, asyncObserver, options);
	        return function () {
	            asyncObserver.mute();
	            firestoreClient.unlisten(internalListener);
	        };
	    };
	    Query$$1.prototype.get = function (options) {
	        var _this = this;
	        validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);
	        validateGetOptions('Query.get', options);
	        return new Promise(function (resolve, reject) {
	            if (options && options.source === 'cache') {
	                _this.firestore
	                    .ensureClientConfigured()
	                    .getDocumentsFromLocalCache(_this._query)
	                    .then(function (viewSnap) {
	                    resolve(new QuerySnapshot(_this.firestore, _this._query, viewSnap));
	                }, reject);
	            }
	            else {
	                _this.getViaSnapshotListener(resolve, reject, options);
	            }
	        });
	    };
	    Query$$1.prototype.getViaSnapshotListener = function (resolve, reject, options) {
	        var unlisten = this.onSnapshotInternal({
	            includeMetadataChanges: true,
	            waitForSyncWhenOnline: true
	        }, {
	            next: function (result) {
	                // Remove query first before passing event to user to avoid
	                // user actions affecting the now stale query.
	                unlisten();
	                if (result.metadata.fromCache &&
	                    options &&
	                    options.source === 'server') {
	                    reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' +
	                        'documents may exist in the local cache. Run again ' +
	                        'without setting source to "server" to ' +
	                        'retrieve the cached documents.)'));
	                }
	                else {
	                    resolve(result);
	                }
	            },
	            error: reject
	        });
	    };
	    Query$$1.prototype.validateNewFilter = function (filter) {
	        if (filter instanceof RelationFilter) {
	            if (filter.isInequality()) {
	                var existingField = this._query.getInequalityFilterField();
	                if (existingField !== null && !existingField.isEqual(filter.field)) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +
	                        ' (<, <=, >, or >=) must be on the same field. But you have' +
	                        (" inequality filters on '" + existingField.toString() + "'") +
	                        (" and '" + filter.field.toString() + "'"));
	                }
	                var firstOrderByField = this._query.getFirstOrderByField();
	                if (firstOrderByField !== null) {
	                    this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);
	                }
	            }
	            else if (filter.op === RelationOp.ARRAY_CONTAINS) {
	                if (this._query.hasArrayContainsFilter()) {
	                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. Queries only support a single array-contains ' +
	                        'filter.');
	                }
	            }
	        }
	    };
	    Query$$1.prototype.validateNewOrderBy = function (orderBy) {
	        if (this._query.getFirstOrderByField() === null) {
	            // This is the first order by. It must match any inequality.
	            var inequalityField = this._query.getInequalityFilterField();
	            if (inequalityField !== null) {
	                this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);
	            }
	        }
	    };
	    Query$$1.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {
	        if (!orderBy.isEqual(inequality)) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " +
	                ("(<, <=, >, or >=) on field '" + inequality.toString() + "' ") +
	                ("and so you must also use '" + inequality.toString() + "' ") +
	                "as your first Query.orderBy(), but your first Query.orderBy() " +
	                ("is on field '" + orderBy.toString() + "' instead."));
	        }
	    };
	    return Query$$1;
	}());
	var QuerySnapshot = /** @class */ (function () {
	    function QuerySnapshot(_firestore, _originalQuery, _snapshot) {
	        this._firestore = _firestore;
	        this._originalQuery = _originalQuery;
	        this._snapshot = _snapshot;
	        this._cachedChanges = null;
	        this._cachedChangesIncludeMetadataChanges = null;
	        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
	    }
	    Object.defineProperty(QuerySnapshot.prototype, "docs", {
	        get: function () {
	            var result = [];
	            this.forEach(function (doc) { return result.push(doc); });
	            return result;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuerySnapshot.prototype, "empty", {
	        get: function () {
	            return this._snapshot.docs.isEmpty();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QuerySnapshot.prototype, "size", {
	        get: function () {
	            return this._snapshot.docs.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    QuerySnapshot.prototype.forEach = function (callback, thisArg) {
	        var _this = this;
	        validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);
	        validateArgType('QuerySnapshot.forEach', 'function', 1, callback);
	        this._snapshot.docs.forEach(function (doc) {
	            callback.call(thisArg, _this.convertToDocumentImpl(doc));
	        });
	    };
	    Object.defineProperty(QuerySnapshot.prototype, "query", {
	        get: function () {
	            return new Query$1(this._originalQuery, this._firestore);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    QuerySnapshot.prototype.docChanges = function (options) {
	        if (options) {
	            validateOptionNames('QuerySnapshot.docChanges', options, [
	                'includeMetadataChanges'
	            ]);
	            validateNamedOptionalType('QuerySnapshot.docChanges', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
	        }
	        var includeMetadataChanges = !!(options && options.includeMetadataChanges);
	        if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' +
	                'also pass { includeMetadataChanges:true } to onSnapshot().');
	        }
	        if (!this._cachedChanges ||
	            this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
	            this._cachedChanges = changesFromSnapshot(this._firestore, includeMetadataChanges, this._snapshot);
	            this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
	        }
	        return this._cachedChanges;
	    };
	    /** Check the equality. The call can be very expensive. */
	    QuerySnapshot.prototype.isEqual = function (other) {
	        if (!(other instanceof QuerySnapshot)) {
	            throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);
	        }
	        return (this._firestore === other._firestore &&
	            this._originalQuery.isEqual(other._originalQuery) &&
	            this._snapshot.isEqual(other._snapshot));
	    };
	    QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {
	        return new QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache, this._snapshot.mutatedKeys.has(doc.key));
	    };
	    return QuerySnapshot;
	}());
	// TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
	// into a method. Because this is a runtime breaking change and somewhat subtle
	// (both Array and Function have a .length, etc.), we'll replace commonly-used
	// properties (including Symbol.iterator) to throw a custom error message. In
	// ~6 months we can delete the custom error as most folks will have hopefully
	// migrated.
	function throwDocChangesMethodError() {
	    throw new FirestoreError(Code.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a ' +
	        'method, so usages like "querySnapshot.docChanges" should become ' +
	        '"querySnapshot.docChanges()"');
	}
	var docChangesPropertiesToOverride = [
	    'length',
	    'forEach',
	    'map'
	].concat((typeof Symbol !== 'undefined' ? [Symbol.iterator] : []));
	docChangesPropertiesToOverride.forEach(function (property) {
	    /**
	     * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
	     * is a Function. This could fail, in particular in the case of 'length' which
	     * already exists on Function.prototype and on IE11 is improperly defined with
	     * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
	     * still have a functional SDK.
	     */
	    try {
	        Object.defineProperty(QuerySnapshot.prototype.docChanges, property, {
	            get: function () { return throwDocChangesMethodError(); }
	        });
	    }
	    catch (err) { } // Ignore this failure intentionally
	});
	var CollectionReference = /** @class */ (function (_super) {
	    tslib_1.__extends(CollectionReference, _super);
	    function CollectionReference(path, firestore) {
	        var _this = _super.call(this, Query.atPath(path), firestore) || this;
	        if (path.length % 2 !== 1) {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' +
	                'references must have an odd number of segments, but ' +
	                (path.canonicalString() + " has " + path.length));
	        }
	        return _this;
	    }
	    Object.defineProperty(CollectionReference.prototype, "id", {
	        get: function () {
	            return this._query.path.lastSegment();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CollectionReference.prototype, "parent", {
	        get: function () {
	            var parentPath = this._query.path.popLast();
	            if (parentPath.isEmpty()) {
	                return null;
	            }
	            else {
	                return new DocumentReference(new DocumentKey(parentPath), this.firestore);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CollectionReference.prototype, "path", {
	        get: function () {
	            return this._query.path.canonicalString();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CollectionReference.prototype.doc = function (pathString) {
	        validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1);
	        // We allow omission of 'pathString' but explicitly prohibit passing in both
	        // 'undefined' and 'null'.
	        if (arguments.length === 0) {
	            pathString = AutoId.newId();
	        }
	        validateArgType('CollectionReference.doc', 'non-empty string', 1, pathString);
	        if (pathString === '') {
	            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');
	        }
	        var path = ResourcePath.fromString(pathString);
	        return DocumentReference.forPath(this._query.path.child(path), this.firestore);
	    };
	    CollectionReference.prototype.add = function (value) {
	        validateExactNumberOfArgs('CollectionReference.add', arguments, 1);
	        validateArgType('CollectionReference.add', 'object', 1, value);
	        var docRef = this.doc();
	        return docRef.set(value).then(function () { return docRef; });
	    };
	    return CollectionReference;
	}(Query$1));
	function validateSetOptions(methodName, options) {
	    if (options === undefined) {
	        return {
	            merge: false
	        };
	    }
	    validateOptionNames(methodName, options, ['merge', 'mergeFields']);
	    validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);
	    validateOptionalArrayElements(methodName, 'mergeFields', 'a string or a FieldPath', options.mergeFields, function (element) {
	        return typeof element === 'string' || element instanceof FieldPath$1;
	    });
	    if (options.mergeFields !== undefined && options.merge !== undefined) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid options passed to function " + methodName + "(): You cannot specify both \"merge\" " +
	            "and \"mergeFields\".");
	    }
	    return options;
	}
	function validateSnapshotOptions(methodName, options) {
	    if (options === undefined) {
	        return {};
	    }
	    validateOptionNames(methodName, options, ['serverTimestamps']);
	    validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);
	    return options;
	}
	function validateGetOptions(methodName, options) {
	    validateOptionalArgType(methodName, 'object', 1, options);
	    if (options) {
	        validateOptionNames(methodName, options, ['source']);
	        validateNamedOptionalPropertyEquals(methodName, 'options', 'source', options.source, ['default', 'server', 'cache']);
	    }
	}
	function validateReference(methodName, documentRef, firestore) {
	    if (!(documentRef instanceof DocumentReference)) {
	        throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);
	    }
	    else if (documentRef.firestore !== firestore) {
	        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');
	    }
	    else {
	        return documentRef;
	    }
	}
	/**
	 * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
	 *
	 * Exported for testing.
	 */
	function changesFromSnapshot(firestore, includeMetadataChanges, snapshot) {
	    if (snapshot.oldDocs.isEmpty()) {
	        // Special case the first snapshot because index calculation is easy and
	        // fast
	        var lastDoc_1;
	        var index_1 = 0;
	        return snapshot.docChanges.map(function (change) {
	            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
	            assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');
	            assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');
	            lastDoc_1 = change.doc;
	            return {
	                type: 'added',
	                doc: doc,
	                oldIndex: -1,
	                newIndex: index_1++
	            };
	        });
	    }
	    else {
	        // A DocumentSet that is updated incrementally as changes are applied to use
	        // to lookup the index of a document.
	        var indexTracker_1 = snapshot.oldDocs;
	        return snapshot.docChanges
	            .filter(function (change) { return includeMetadataChanges || change.type !== ChangeType.Metadata; })
	            .map(function (change) {
	            var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
	            var oldIndex = -1;
	            var newIndex = -1;
	            if (change.type !== ChangeType.Added) {
	                oldIndex = indexTracker_1.indexOf(change.doc.key);
	                assert(oldIndex >= 0, 'Index for document not found');
	                indexTracker_1 = indexTracker_1.delete(change.doc.key);
	            }
	            if (change.type !== ChangeType.Removed) {
	                indexTracker_1 = indexTracker_1.add(change.doc);
	                newIndex = indexTracker_1.indexOf(change.doc.key);
	            }
	            return { type: resultChangeType(change.type), doc: doc, oldIndex: oldIndex, newIndex: newIndex };
	        });
	    }
	}
	function resultChangeType(type) {
	    switch (type) {
	        case ChangeType.Added:
	            return 'added';
	        case ChangeType.Modified:
	        case ChangeType.Metadata:
	            return 'modified';
	        case ChangeType.Removed:
	            return 'removed';
	        default:
	            return fail('Unknown change type: ' + type);
	    }
	}
	// Export the classes with a private constructor (it will fail if invoked
	// at runtime). Note that this still allows instanceof checks.
	// We're treating the variables as class names, so disable checking for lower
	// case variable names.
	// tslint:disable:variable-name
	var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');
	var PublicTransaction = makeConstructorPrivate(Transaction$1, 'Use firebase.firestore().runTransaction() instead.');
	var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');
	var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');
	var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);
	var PublicQueryDocumentSnapshot = makeConstructorPrivate(QueryDocumentSnapshot);
	var PublicQuery = makeConstructorPrivate(Query$1);
	var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);
	var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.');
	// tslint:enable:variable-name

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var firestoreNamespace = {
	    Firestore: PublicFirestore,
	    GeoPoint: GeoPoint,
	    Timestamp: Timestamp,
	    Blob: PublicBlob,
	    Transaction: PublicTransaction,
	    WriteBatch: PublicWriteBatch,
	    DocumentReference: PublicDocumentReference,
	    DocumentSnapshot: PublicDocumentSnapshot,
	    Query: PublicQuery,
	    QueryDocumentSnapshot: PublicQueryDocumentSnapshot,
	    QuerySnapshot: PublicQuerySnapshot,
	    CollectionReference: PublicCollectionReference,
	    FieldPath: FieldPath$1,
	    FieldValue: PublicFieldValue,
	    setLogLevel: Firestore.setLogLevel
	};
	/**
	 * Configures Firestore as part of the Firebase SDK by calling registerService.
	 */
	function configureForFirebase(firebase$$1) {
	    firebase$$1.INTERNAL.registerService('firestore', function (app) { return new Firestore(app); }, shallowCopy(firestoreNamespace));
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerFirestore(instance) {
	    configureForFirebase(instance);
	}
	registerFirestore(firebase);

	exports.registerFirestore = registerFirestore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function() {'use strict';var e,goog=goog||{},h=this;function l(a){return"string"==typeof a}function m(a,b){a=a.split(".");b=b||h;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function aa(){}
	function ba(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function n(a){return"array"==ba(a)}function ca(a){var b=ba(a);return"array"==b||"object"==b&&"number"==typeof a.length}function q(a){return"function"==ba(a)}function r(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var t="closure_uid_"+(1E9*Math.random()>>>0),da=0;function ea(a,b,c){return a.call.apply(a.bind,arguments)}
	function fa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function u(a,b,c){u=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ea:fa;return u.apply(null,arguments)}
	function v(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var w=Date.now||function(){return+new Date};function x(a,b){function c(){}c.prototype=b.prototype;a.L=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.mh=function(a,c,g){for(var d=Array(arguments.length-2),f=2;f<arguments.length;f++)d[f-2]=arguments[f];return b.prototype[c].apply(a,d)}};function y(a){if(Error.captureStackTrace)Error.captureStackTrace(this,y);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}x(y,Error);y.prototype.name="CustomError";function ha(a,b){a=a.split("%s");for(var c="",d=a.length-1,f=0;f<d;f++)c+=a[f]+(f<b.length?b[f]:"%s");y.call(this,c+a[d])}x(ha,y);ha.prototype.name="AssertionError";function ia(a,b){throw new ha("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};function z(){0!=ja&&(ka[this[t]||(this[t]=++da)]=this);this.Ka=this.Ka;this.Qa=this.Qa}var ja=0,ka={};z.prototype.Ka=!1;z.prototype.bb=function(){if(!this.Ka&&(this.Ka=!0,this.F(),0!=ja)){var a=this[t]||(this[t]=++da);if(0!=ja&&this.Qa&&0<this.Qa.length)throw Error(this+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete ka[a]}};z.prototype.F=function(){if(this.Qa)for(;this.Qa.length;)this.Qa.shift()()};var la=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(l(a))return l(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ma=Array.prototype.lastIndexOf?function(a,b){return Array.prototype.lastIndexOf.call(a,b,a.length-1)}:function(a,b){var c=a.length-1;0>c&&(c=Math.max(0,a.length+c));if(l(a))return l(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1},na=
	Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,f=l(a)?a.split(""):a,g=0;g<d;g++)g in f&&b.call(c,f[g],g,a)},oa=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=l(a)?a.split(""):a,f=0;f<c;f++)if(f in d&&b.call(void 0,d[f],f,a))return!0;return!1};
	function pa(a){a:{var b=qa;for(var c=a.length,d=l(a)?a.split(""):a,f=0;f<c;f++)if(f in d&&b.call(void 0,d[f],f,a)){b=f;break a}b=-1}return 0>b?null:l(a)?a.charAt(b):a[b]}function ra(a){if(!n(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0}function sa(a,b){b=la(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function ta(a){return Array.prototype.concat.apply([],arguments)}function ua(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};function va(a){return/^[\s\xa0]*$/.test(a)}var wa=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function xa(a,b){return a<b?-1:a>b?1:0};var A;a:{var ya=h.navigator;if(ya){var za=ya.userAgent;if(za){A=za;break a}}A=""}function B(a){return-1!=A.indexOf(a)};function Aa(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function Ba(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function Ca(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function Da(a){var b={},c;for(c in a)b[c]=a[c];return b}var Ea="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function Fa(a,b){for(var c,d,f=1;f<arguments.length;f++){d=arguments[f];for(c in d)a[c]=d[c];for(var g=0;g<Ea.length;g++)c=Ea[g],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Ga(a){Ga[" "](a);return a}Ga[" "]=aa;function Ha(a,b){var c=Ia;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Ja=B("Opera"),C=B("Trident")||B("MSIE"),Ka=B("Edge"),La=Ka||C,Ma=B("Gecko")&&!(-1!=A.toLowerCase().indexOf("webkit")&&!B("Edge"))&&!(B("Trident")||B("MSIE"))&&!B("Edge"),Na=-1!=A.toLowerCase().indexOf("webkit")&&!B("Edge");function Oa(){var a=h.document;return a?a.documentMode:void 0}var Pa;
	a:{var Qa="",Ra=function(){var a=A;if(Ma)return/rv:([^\);]+)(\)|;)/.exec(a);if(Ka)return/Edge\/([\d\.]+)/.exec(a);if(C)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Na)return/WebKit\/(\S+)/.exec(a);if(Ja)return/(?:Version)[ \/]?(\S+)/.exec(a)}();Ra&&(Qa=Ra?Ra[1]:"");if(C){var Sa=Oa();if(null!=Sa&&Sa>parseFloat(Qa)){Pa=String(Sa);break a}}Pa=Qa}var Ia={};
	function Ta(a){return Ha(a,function(){for(var b=0,c=wa(String(Pa)).split("."),d=wa(String(a)).split("."),f=Math.max(c.length,d.length),g=0;0==b&&g<f;g++){var k=c[g]||"",p=d[g]||"";do{k=/(\d*)(\D*)(.*)/.exec(k)||["","","",""];p=/(\d*)(\D*)(.*)/.exec(p)||["","","",""];if(0==k[0].length&&0==p[0].length)break;b=xa(0==k[1].length?0:parseInt(k[1],10),0==p[1].length?0:parseInt(p[1],10))||xa(0==k[2].length,0==p[2].length)||xa(k[2],p[2]);k=k[3];p=p[3]}while(0==b)}return 0<=b})}var Ua;var Va=h.document;
	Ua=Va&&C?Oa()||("CSS1Compat"==Va.compatMode?parseInt(Pa,10):5):void 0;var Wa=Object.freeze||function(a){return a};var Xa=!C||9<=Number(Ua),Ya=C&&!Ta("9"),Za=function(){if(!h.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{h.addEventListener("test",aa,b),h.removeEventListener("test",aa,b)}catch(c){}return a}();function D(a,b){this.type=a;this.currentTarget=this.target=b;this.defaultPrevented=this.Ea=!1;this.Be=!0}D.prototype.stopPropagation=function(){this.Ea=!0};D.prototype.preventDefault=function(){this.defaultPrevented=!0;this.Be=!1};function E(a,b){D.call(this,a?a.type:"");this.relatedTarget=this.currentTarget=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=this.offsetY=this.offsetX=0;this.key="";this.charCode=this.keyCode=0;this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.pointerId=0;this.pointerType="";this.fb=null;a&&this.Kf(a,b)}x(E,D);var $a=Wa({2:"touch",3:"pen",4:"mouse"});
	E.prototype.Kf=function(a,b){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.currentTarget=b;if(b=a.relatedTarget){if(Ma){a:{try{Ga(b.nodeName);var f=!0;break a}catch(g){}f=!1}f||(b=null)}}else"mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.offsetX=Na||void 0!==a.offsetX?a.offsetX:a.layerX,this.offsetY=Na||void 0!==a.offsetY?a.offsetY:a.layerY,this.clientX=void 0!==a.clientX?a.clientX:a.pageX,
	this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.keyCode=a.keyCode||0;this.key=a.key||"";this.charCode=a.charCode||("keypress"==c?a.keyCode:0);this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=
	l(a.pointerType)?a.pointerType:$a[a.pointerType]||"";this.state=a.state;this.fb=a;a.defaultPrevented&&this.preventDefault()};E.prototype.stopPropagation=function(){E.L.stopPropagation.call(this);this.fb.stopPropagation?this.fb.stopPropagation():this.fb.cancelBubble=!0};E.prototype.preventDefault=function(){E.L.preventDefault.call(this);var a=this.fb;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Ya)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var ab="closure_listenable_"+(1E6*Math.random()|0);function F(a){return!(!a||!a[ab])}var bb=0;function cb(a,b,c,d,f){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Ob=f;this.key=++bb;this.Sa=this.Eb=!1}cb.prototype.Vb=function(){this.Sa=!0;this.Ob=this.src=this.proxy=this.listener=null};function db(a){this.src=a;this.J={};this.xb=0}e=db.prototype;e.add=function(a,b,c,d,f){var g=a.toString();a=this.J[g];a||(a=this.J[g]=[],this.xb++);var k=eb(a,b,d,f);-1<k?(b=a[k],c||(b.Eb=!1)):(b=new cb(b,this.src,g,!!d,f),b.Eb=c,a.push(b));return b};e.remove=function(a,b,c,d){a=a.toString();if(!(a in this.J))return!1;var f=this.J[a];b=eb(f,b,c,d);return-1<b?(f[b].Vb(),Array.prototype.splice.call(f,b,1),0==f.length&&(delete this.J[a],this.xb--),!0):!1};
	e.ye=function(a){var b=a.type;b in this.J&&sa(this.J[b],a)&&(a.Vb(),0==this.J[b].length&&(delete this.J[b],this.xb--))};e.pb=function(a){a=a&&a.toString();var b=0,c;for(c in this.J)if(!a||c==a){for(var d=this.J[c],f=0;f<d.length;f++)++b,d[f].Vb();delete this.J[c];this.xb--}};e.jb=function(a,b,c,d){a=this.J[a.toString()];var f=-1;a&&(f=eb(a,b,c,d));return-1<f?a[f]:null};function eb(a,b,c,d){for(var f=0;f<a.length;++f){var g=a[f];if(!g.Sa&&g.listener==b&&g.capture==!!c&&g.Ob==d)return f}return-1};var fb="closure_lm_"+(1E6*Math.random()|0),gb={},hb=0;function ib(a,b,c,d,f){if(d&&d.once)return jb(a,b,c,d,f);if(n(b)){for(var g=0;g<b.length;g++)ib(a,b[g],c,d,f);return null}c=kb(c);return F(a)?a.nb(b,c,r(d)?!!d.capture:!!d,f):lb(a,b,c,!1,d,f)}
	function lb(a,b,c,d,f,g){if(!b)throw Error("Invalid event type");var k=r(f)?!!f.capture:!!f,p=G(a);p||(a[fb]=p=new db(a));c=p.add(b,c,d,k,g);if(c.proxy)return c;d=mb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Za||(f=k),void 0===f&&(f=!1),a.addEventListener(b.toString(),d,f);else if(a.attachEvent)a.attachEvent(nb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");hb++;return c}
	function mb(){var a=ob,b=Xa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function jb(a,b,c,d,f){if(n(b)){for(var g=0;g<b.length;g++)jb(a,b[g],c,d,f);return null}c=kb(c);return F(a)?a.Oc(b,c,r(d)?!!d.capture:!!d,f):lb(a,b,c,!0,d,f)}function pb(a,b,c,d,f){if(n(b))for(var g=0;g<b.length;g++)pb(a,b[g],c,d,f);else d=r(d)?!!d.capture:!!d,c=kb(c),F(a)?a.ed(b,c,d,f):a&&(a=G(a))&&(b=a.jb(b,c,d,f))&&qb(b)}
	function qb(a){if("number"!=typeof a&&a&&!a.Sa){var b=a.src;if(F(b))b.Le(a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(nb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);hb--;(c=G(b))?(c.ye(a),0==c.xb&&(c.src=null,b[fb]=null)):a.Vb()}}}function nb(a){return a in gb?gb[a]:gb[a]="on"+a}
	function rb(a,b,c,d){var f=!0;if(a=G(a))if(b=a.J[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var g=b[a];g&&g.capture==c&&!g.Sa&&(g=sb(g,d),f=f&&!1!==g)}return f}function sb(a,b){var c=a.listener,d=a.Ob||a.src;a.Eb&&qb(a);return c.call(d,b)}
	function ob(a,b){if(a.Sa)return!0;if(!Xa){var c=b||m("window.event");b=new E(c,this);var d=!0;if(!(0>c.keyCode||void 0!=c.returnValue)){a:{var f=!1;if(0==c.keyCode)try{c.keyCode=-1;break a}catch(k){f=!0}if(f||void 0==c.returnValue)c.returnValue=!0}c=[];for(f=b.currentTarget;f;f=f.parentNode)c.push(f);a=a.type;for(f=c.length-1;!b.Ea&&0<=f;f--){b.currentTarget=c[f];var g=rb(c[f],a,!0,b);d=d&&g}for(f=0;!b.Ea&&f<c.length;f++)b.currentTarget=c[f],g=rb(c[f],a,!1,b),d=d&&g}return d}return sb(a,new E(b,this))}
	function G(a){a=a[fb];return a instanceof db?a:null}var tb="__closure_events_fn_"+(1E9*Math.random()>>>0);function kb(a){if(q(a))return a;a[tb]||(a[tb]=function(b){return a.handleEvent(b)});return a[tb]};function H(){z.call(this);this.ka=new db(this);this.Pe=this;this.Uc=null}x(H,z);H.prototype[ab]=!0;e=H.prototype;e.addEventListener=function(a,b,c,d){ib(this,a,b,c,d)};e.removeEventListener=function(a,b,c,d){pb(this,a,b,c,d)};
	e.dispatchEvent=function(a){var b,c=this.Uc;if(c)for(b=[];c;c=c.Uc)b.push(c);c=this.Pe;var d=a.type||a;if(l(a))a=new D(a,c);else if(a instanceof D)a.target=a.target||c;else{var f=a;a=new D(d,c);Fa(a,f)}f=!0;if(b)for(var g=b.length-1;!a.Ea&&0<=g;g--){var k=a.currentTarget=b[g];f=k.Lb(d,!0,a)&&f}a.Ea||(k=a.currentTarget=c,f=k.Lb(d,!0,a)&&f,a.Ea||(f=k.Lb(d,!1,a)&&f));if(b)for(g=0;!a.Ea&&g<b.length;g++)k=a.currentTarget=b[g],f=k.Lb(d,!1,a)&&f;return f};
	e.F=function(){H.L.F.call(this);this.pg();this.Uc=null};e.nb=function(a,b,c,d){return this.ka.add(String(a),b,!1,c,d)};e.Oc=function(a,b,c,d){return this.ka.add(String(a),b,!0,c,d)};e.ed=function(a,b,c,d){this.ka.remove(String(a),b,c,d)};e.Le=function(a){this.ka.ye(a)};e.pg=function(){this.ka&&this.ka.pb(void 0)};
	e.Lb=function(a,b,c){a=this.ka.J[String(a)];if(!a)return!0;a=a.concat();for(var d=!0,f=0;f<a.length;++f){var g=a[f];if(g&&!g.Sa&&g.capture==b){var k=g.listener,p=g.Ob||g.src;g.Eb&&this.Le(g);d=!1!==k.call(p,c)&&d}}return d&&0!=c.Be};e.jb=function(a,b,c,d){return this.ka.jb(String(a),b,c,d)};var ub=h.JSON.stringify;function vb(a,b){this.Sf=100;this.ef=a;this.ug=b;this.Zb=0;this.Pb=null}vb.prototype.get=function(){if(0<this.Zb){this.Zb--;var a=this.Pb;this.Pb=a.next;a.next=null}else a=this.ef();return a};vb.prototype.put=function(a){this.ug(a);this.Zb<this.Sf&&(this.Zb++,a.next=this.Pb,this.Pb=a)};function I(){this.lc=this.Va=null}var xb=new vb(function(){return new wb},function(a){a.reset()});I.prototype.add=function(a,b){var c=this.Af();c.set(a,b);this.lc?this.lc.next=c:this.Va=c;this.lc=c};I.prototype.remove=function(){var a=null;this.Va&&(a=this.Va,this.Va=this.Va.next,this.Va||(this.lc=null),a.next=null);return a};I.prototype.wg=function(a){xb.put(a)};I.prototype.Af=function(){return xb.get()};function wb(){this.next=this.scope=this.Gc=null}
	wb.prototype.set=function(a,b){this.Gc=a;this.scope=b;this.next=null};wb.prototype.reset=function(){this.next=this.scope=this.Gc=null};function yb(a){h.setTimeout(function(){throw a;},0)}var zb;
	function Ab(){var a=h.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!B("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+"//"+b.location.host;a=u(function(a){if(("*"==d||a.origin==d)&&a.data==
	c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!B("Trident")&&!B("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.rd;c.rd=null;a()}};return function(a){d.next={rd:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");
	b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){h.setTimeout(a,0)}};var Bb;function Cb(){if(h.Promise&&h.Promise.resolve){var a=h.Promise.resolve(void 0);Bb=function(){a.then(Db)}}else Bb=function(){var a=Db;!q(h.setImmediate)||h.Window&&h.Window.prototype&&!B("Edge")&&h.Window.prototype.setImmediate==h.setImmediate?(zb||(zb=Ab()),zb(a)):h.setImmediate(a)}}var Eb=!1,Fb=new I;function Db(){for(var a;a=Fb.remove();){try{a.Gc.call(a.scope)}catch(b){yb(b)}Fb.wg(a)}Eb=!1};function Gb(a,b){H.call(this);this.Na=a||1;this.wb=b||h;this.nd=u(this.Rg,this);this.ie=w()}x(Gb,H);e=Gb.prototype;e.enabled=!1;e.B=null;e.setInterval=function(a){this.Na=a;this.B&&this.enabled?(this.stop(),this.start()):this.B&&this.stop()};e.Rg=function(){if(this.enabled){var a=w()-this.ie;0<a&&a<.8*this.Na?this.B=this.wb.setTimeout(this.nd,this.Na-a):(this.B&&(this.wb.clearTimeout(this.B),this.B=null),this.ff(),this.enabled&&(this.stop(),this.start()))}};e.ff=function(){this.dispatchEvent("tick")};
	e.start=function(){this.enabled=!0;this.B||(this.B=this.wb.setTimeout(this.nd,this.Na),this.ie=w())};e.stop=function(){this.enabled=!1;this.B&&(this.wb.clearTimeout(this.B),this.B=null)};e.F=function(){Gb.L.F.call(this);this.stop();delete this.wb};function Hb(a,b,c){if(q(a))c&&(a=u(a,c));else if(a&&"function"==typeof a.handleEvent)a=u(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:h.setTimeout(a,b||0)};function Ib(a,b,c){z.call(this);this.Uf=null!=c?u(a,c):a;this.Na=b;this.Xe=u(this.fg,this);this.qc=[]}x(Ib,z);e=Ib.prototype;e.Ta=!1;e.ob=0;e.B=null;e.mf=function(a){this.qc=arguments;this.B||this.ob?this.Ta=!0:this.Cc()};e.stop=function(){this.B&&(h.clearTimeout(this.B),this.B=null,this.Ta=!1,this.qc=[])};e.pause=function(){this.ob++};e.resume=function(){this.ob--;this.ob||!this.Ta||this.B||(this.Ta=!1,this.Cc())};e.F=function(){Ib.L.F.call(this);this.stop()};
	e.fg=function(){this.B=null;this.Ta&&!this.ob&&(this.Ta=!1,this.Cc())};e.Cc=function(){this.B=Hb(this.Xe,this.Na);this.Uf.apply(null,this.qc)};function Jb(a){z.call(this);this.i=a;this.o={}}x(Jb,z);var Kb=[];e=Jb.prototype;e.nb=function(a,b,c,d){return this.Tf(a,b,c,d)};e.Tf=function(a,b,c,d){n(b)||(b&&(Kb[0]=b.toString()),b=Kb);for(var f=0;f<b.length;f++){var g=ib(a,b[f],c||this.handleEvent,d||!1,this.i||this);if(!g)break;this.o[g.key]=g}return this};e.Oc=function(a,b,c,d){return this.je(a,b,c,d)};
	e.je=function(a,b,c,d,f){if(n(b))for(var g=0;g<b.length;g++)this.je(a,b[g],c,d,f);else{a=jb(a,b,c||this.handleEvent,d,f||this.i||this);if(!a)return this;this.o[a.key]=a}return this};e.ed=function(a,b,c,d,f){if(n(b))for(var g=0;g<b.length;g++)this.ed(a,b[g],c,d,f);else c=c||this.handleEvent,d=r(d)?!!d.capture:!!d,f=f||this.i||this,c=kb(c),d=!!d,b=F(a)?a.jb(b,c,d,f):a?(a=G(a))?a.jb(b,c,d,f):null:null,b&&(qb(b),delete this.o[b.key])};
	e.pb=function(){Aa(this.o,function(a,b){this.o.hasOwnProperty(b)&&qb(a)},this);this.o={}};e.F=function(){Jb.L.F.call(this);this.pb()};e.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function J(a,b,c){this.reset(a,b,c,void 0,void 0)}J.prototype.Md=null;var Lb=0;J.prototype.reset=function(a,b,c,d,f){"number"==typeof f||Lb++;d||w();this.mb=a;delete this.Md};J.prototype.Bg=function(a){this.Md=a};J.prototype.Ge=function(a){this.mb=a};function Mb(a){this.pe=a;this.Zd=this.uc=this.mb=this.$b=null}function K(a,b){this.name=a;this.value=b}K.prototype.toString=function(){return this.name};var Nb=new K("SEVERE",1E3),Ob=new K("WARNING",900),Pb=new K("INFO",800),Qb=new K("CONFIG",700),Rb=new K("FINE",500);e=Mb.prototype;e.getName=function(){return this.pe};e.getParent=function(){return this.$b};e.pf=function(){this.uc||(this.uc={});return this.uc};e.Ge=function(a){this.mb=a};
	e.Qd=function(){if(this.mb)return this.mb;if(this.$b)return this.$b.Qd();ia("Root logger has no level set.");return null};e.Pf=function(a){return a.value>=this.Qd().value};e.log=function(a,b,c){this.Pf(a)&&(q(b)&&(b=b()),this.gf(this.uf(a,b,c)))};e.uf=function(a,b,c){a=new J(a,String(b),this.pe);c&&a.Bg(c);return a};e.ca=function(a,b){this.log(Nb,a,b)};e.T=function(a,b){this.log(Ob,a,b)};e.info=function(a,b){this.log(Pb,a,b)};e.lf=function(a){this.log(Rb,a,void 0)};
	e.gf=function(a){for(var b=this;b;)b.We(a),b=b.getParent()};e.We=function(a){if(this.Zd)for(var b=0,c;c=this.Zd[b];b++)c(a)};e.Fg=function(a){this.$b=a};e.Qe=function(a,b){this.pf()[a]=b};var Sb={},Tb=null;function Vb(a){Tb||(Tb=new Mb(""),Sb[""]=Tb,Tb.Ge(Qb));var b;if(!(b=Sb[a])){b=new Mb(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Vb(a.substr(0,c));c.Qe(d,b);b.Fg(c);Sb[a]=b}return b};function Wb(a,b){a&&a.info(b,void 0)}function L(a,b){a&&a.lf(b)};function Xb(){this.s=Vb("goog.labs.net.webChannel.WebChannelDebug");this.Wc=!0}e=Xb.prototype;e.Id=function(){this.Wc=!1};e.Tg=function(a,b,c,d,f){var g=this;this.info(function(){return"XMLHTTP REQ ("+c+") [attempt "+d+"]: "+a+"\n"+b+"\n"+g.Xf(f)})};e.Ug=function(a,b,c,d,f,g){this.info(function(){return"XMLHTTP RESP ("+c+") [ attempt "+d+"]: "+a+"\n"+b+"\n"+f+" "+g})};e.Wa=function(a,b,c){var d=this;this.info(function(){return"XMLHTTP TEXT ("+a+"): "+d.ng(b)+(c?" "+c:"")})};
	e.Sg=function(a){this.info(function(){return"TIMEOUT: "+a})};e.debug=function(a){L(this.s,a)};e.cb=function(a,b){var c=this.s;c&&c.ca(b||"Exception",a)};e.info=function(a){Wb(this.s,a)};e.T=function(a){var b=this.s;b&&b.T(a,void 0)};e.ca=function(a){var b=this.s;b&&b.ca(a,void 0)};
	e.ng=function(a){if(!this.Wc)return a;if(!a)return null;try{var b=JSON.parse(a);if(b)for(var c=0;c<b.length;c++)n(b[c])&&this.Wf(b[c]);return ub(b)}catch(d){return this.debug("Exception parsing expected JS array - probably was not JS"),a}};e.Wf=function(a){if(!(2>a.length||(a=a[1],!n(a)||1>a.length))){var b=a[0];if("noop"!=b&&"stop"!=b&&"close"!=b)for(b=1;b<a.length;b++)a[b]=""}};
	e.Xf=function(a){if(!this.Wc)return a;if(!a)return null;var b="";a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].split("=");if(1<d.length){var f=d[0];d=d[1];var g=f.split("_");b=2<=g.length&&"type"==g[1]?b+(f+"="+d+"&"):b+(f+"=redacted&")}}return b};var M=new H;function Yb(a){D.call(this,"serverreachability",a)}x(Yb,D);function N(a){M.dispatchEvent(new Yb(M,a))}function Zb(a,b){D.call(this,"statevent",a);this.stat=b}x(Zb,D);function O(a){M.dispatchEvent(new Zb(M,a))}function $b(a,b,c){D.call(this,"timingevent",a);this.size=b;this.rtt=c}x($b,D);function ac(a,b,c){M.dispatchEvent(new $b(M,a,b,c))}function P(a,b){if(!q(a))throw Error("Fn must not be null and must be a function");return h.setTimeout(function(){a()},b)};var bc={NO_ERROR:0,Vg:1,bh:2,ah:3,Yg:4,$g:5,dh:6,Ne:7,TIMEOUT:8,gh:9};var cc={Xg:"complete",kh:"success",Oe:"error",Ne:"abort",ih:"ready",jh:"readystatechange",TIMEOUT:"timeout",eh:"incrementaldata",hh:"progress",Zg:"downloadprogress",lh:"uploadprogress"};function dc(){}dc.prototype.pd=null;dc.prototype.Vd=function(){return this.pd||(this.pd=this.Mf())};function ec(){}var Q={OPEN:"a",Wg:"b",Oe:"c",fh:"d"};function fc(){D.call(this,"d")}x(fc,D);function gc(){D.call(this,"c")}x(gc,D);var hc;function ic(){}x(ic,dc);ic.prototype.Dd=function(){var a=this.Wd();return a?new ActiveXObject(a):new XMLHttpRequest};ic.prototype.Mf=function(){var a={};this.Wd()&&(a[0]=!0,a[1]=!0);return a};
	ic.prototype.Wd=function(){if(!this.be&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var a=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],b=0;b<a.length;b++){var c=a[b];try{return new ActiveXObject(c),this.be=c}catch(d){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return this.be};hc=new ic;function R(a,b,c,d,f){this.b=a;this.a=b;this.ra=c;this.R=d;this.Xc=f||1;this.Fc=new Jb(this);this.Ua=jc;a=La?125:void 0;this.Vc=new Gb(a);this.A=null;this.S=!1;this.Da=this.pa=this.ua=this.ic=this.qb=this.hd=this.Ga=null;this.ba=[];this.h=null;this.Bb=0;this.I=this.Fa=null;this.w=-1;this.Za=!1;this.Ra=0;this.ac=null;this.lb=this.Ed=this.yc=!1}var jc=45E3;
	function kc(a,b){switch(a){case 0:return"Non-200 return code ("+b+")";case 1:return"XMLHTTP failure (no data)";case 2:return"HttpConnection timeout";default:return"Unknown error"}}var lc={},mc={};e=R.prototype;e.ga=function(a){this.A=a};e.setTimeout=function(a){this.Ua=a};e.He=function(a){this.Ra=a};e.Gg=function(a){this.ba=a};e.la=function(){return this.ba};e.kd=function(a,b){this.ic=1;this.ua=a.clone().Ub();this.Da=b;this.yc=!0;this.Ce(null)};
	e.jd=function(a,b,c){this.ic=1;this.ua=a.clone().Ub();this.Da=null;this.yc=b;this.Ce(c)};
	e.Ce=function(a){this.qb=w();this.eb();this.pa=this.ua.clone();this.pa.dc("t",this.Xc);this.Bb=0;this.h=this.b.Jb(this.b.fc()?a:null);0<this.Ra&&(this.ac=new Ib(u(this.Me,this,this.h),this.Ra));this.Fc.nb(this.h,"readystatechange",this.mg);a=this.A?Da(this.A):{};this.Da?(this.Fa||(this.Fa="POST"),a["Content-Type"]="application/x-www-form-urlencoded",this.h.send(this.pa,this.Fa,this.Da,a)):(this.Fa="GET",this.h.send(this.pa,this.Fa,null,a));N(1);this.a.Tg(this.Fa,this.pa,this.R,this.Xc,this.Da)};
	e.mg=function(a){a=a.target;var b=this.ac;b&&3==a.ma()?(this.a.debug("Throttling readystatechange."),b.mf()):this.Me(a)};e.Me=function(a){try{a==this.h?this.hg():this.a.T("Called back with an unexpected xmlhttp")}catch(c){if(this.a.debug("Failed call to OnXmlHttpReadyStateChanged_"),this.h&&this.h.ya()){var b=this;this.a.cb(c,function(){return"ResponseText: "+b.h.ya()})}else this.a.cb(c,"No response text")}finally{}};
	e.hg=function(){var a=this.h.ma(),b=this.h.Ud(),c=this.h.za();if(!(3>a||3==a&&!La&&!this.h.ya())){this.Za||4!=a||7==b||(8==b||0>=c?N(3):N(2));this.Fb();var d=this.h.za();this.w=d;b=this.h.ya();if(!b){var f=this;this.a.debug(function(){return"No response text for uri "+f.pa+" status "+d})}this.S=200==d;this.a.Ug(this.Fa,this.pa,this.R,this.Xc,a,d);if(this.S){if(this.Ig())if(c=this.sf())this.a.Wa(this.R,c,"Initial handshake response via X-HTTP-Initial-Response"),this.lb=!0,this.Yc(c);else{this.S=!1;
	this.I=3;O(12);this.a.T("XMLHTTP Missing X_HTTP_INITIAL_RESPONSE ("+this.R+")");this.Ia();this.Kb();return}this.yc?(this.Fd(a,b),La&&this.S&&3==a&&this.Ng()):(this.a.Wa(this.R,b,null),this.Yc(b));4==a&&this.Ia();this.S&&!this.Za&&(4==a?this.b.Tc(this):(this.S=!1,this.eb()))}else 400==d&&0<b.indexOf("Unknown SID")?(this.I=3,O(12),this.a.T("XMLHTTP Unknown SID ("+this.R+")")):(this.I=0,O(13),this.a.T("XMLHTTP Bad status "+d+" ("+this.R+")")),this.Ia(),this.Kb()}};e.Ig=function(){return this.Ed&&!this.lb};
	e.sf=function(){if(this.h){var a=this.h.kb("X-HTTP-Initial-Response");if(a&&!va(a))return a}return null};e.Ag=function(){this.Ed=!0};
	e.Fd=function(a,b){for(var c=!0;!this.Za&&this.Bb<b.length;){var d=this.vf(b);if(d==mc){4==a&&(this.I=4,O(14),c=!1);this.a.Wa(this.R,null,"[Incomplete Response]");break}else if(d==lc){this.I=4;O(15);this.a.Wa(this.R,b,"[Invalid Chunk]");c=!1;break}else this.a.Wa(this.R,d,null),this.Yc(d)}4==a&&0==b.length&&(this.I=1,O(16),c=!1);this.S=this.S&&c;c||(this.a.Wa(this.R,b,"[Invalid Chunked Response]"),this.Ia(),this.Kb())};
	e.kg=function(){if(this.h){var a=this.h.ma(),b=this.h.ya();this.Bb<b.length&&(this.Fb(),this.Fd(a,b),this.S&&4!=a&&this.eb())}};e.Ng=function(){this.Fc.nb(this.Vc,"tick",this.kg);this.Vc.start()};e.vf=function(a){var b=this.Bb,c=a.indexOf("\n",b);if(-1==c)return mc;b=Number(a.substring(b,c));if(isNaN(b))return lc;c+=1;if(c+b>a.length)return mc;a=a.substr(c,b);this.Bb=c+b;return a};
	e.yg=function(a){this.ic=2;this.ua=a.clone().Ub();a=!1;h.navigator&&h.navigator.sendBeacon&&(a=h.navigator.sendBeacon(this.ua.toString(),""));!a&&h.Image&&((new Image).src=this.ua,a=!0);a||(this.h=this.b.Jb(null),this.h.send(this.ua));this.qb=w();this.eb()};e.cancel=function(){this.Za=!0;this.Ia()};e.tg=function(a){a&&this.setTimeout(a);this.Ga&&(this.Fb(),this.eb())};e.eb=function(){this.hd=w()+this.Ua;this.Ke(this.Ua)};
	e.Ke=function(a){if(null!=this.Ga)throw Error("WatchDog timer not null");this.Ga=P(u(this.gg,this),a)};e.Fb=function(){this.Ga&&(h.clearTimeout(this.Ga),this.Ga=null)};e.gg=function(){this.Ga=null;var a=w();0<=a-this.hd?this.Df():(this.a.T("WatchDog timer called too early"),this.Ke(this.hd-a))};e.Df=function(){this.S&&this.a.ca("Received watchdog timeout even though request loaded successfully");this.a.Sg(this.pa);2!=this.ic&&(N(3),O(17));this.Ia();this.I=2;this.Kb()};
	e.Kb=function(){this.b.de()||this.Za||this.b.Tc(this)};e.Ia=function(){this.Fb();var a=this.ac;a&&"function"==typeof a.bb&&a.bb();this.ac=null;this.Vc.stop();this.Fc.pb();this.h&&(a=this.h,this.h=null,a.abort(),a.bb())};e.Hc=function(){return this.I};e.Yc=function(a){try{this.b.ue(this,a),N(4)}catch(b){this.a.cb(b,"Error in httprequest callback")}};function nc(a){if(a.H&&"function"==typeof a.H)return a.H();if(l(a))return a.split("");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return Ba(a)}
	function oc(a,b,c){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,c);else if(ca(a)||l(a))na(a,b,c);else{if(a.W&&"function"==typeof a.W)var d=a.W();else if(a.H&&"function"==typeof a.H)d=void 0;else if(ca(a)||l(a)){d=[];for(var f=a.length,g=0;g<f;g++)d.push(g)}else d=Ca(a);f=nc(a);g=f.length;for(var k=0;k<g;k++)b.call(c,f[k],d&&d[k],a)}};function S(a,b){this.D={};this.o=[];this.j=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else a&&this.addAll(a)}e=S.prototype;e.C=function(){return this.j};e.H=function(){this.wc();for(var a=[],b=0;b<this.o.length;b++)a.push(this.D[this.o[b]]);return a};e.W=function(){this.wc();return this.o.concat()};e.va=function(a){return T(this.D,a)};e.X=function(){return 0==this.j};
	e.clear=function(){this.D={};this.j=this.o.length=0};e.remove=function(a){return T(this.D,a)?(delete this.D[a],this.j--,this.o.length>2*this.j&&this.wc(),!0):!1};e.wc=function(){if(this.j!=this.o.length){for(var a=0,b=0;a<this.o.length;){var c=this.o[a];T(this.D,c)&&(this.o[b++]=c);a++}this.o.length=b}if(this.j!=this.o.length){var d={};for(b=a=0;a<this.o.length;)c=this.o[a],T(d,c)||(this.o[b++]=c,d[c]=1),a++;this.o.length=b}};e.get=function(a,b){return T(this.D,a)?this.D[a]:b};
	e.set=function(a,b){T(this.D,a)||(this.j++,this.o.push(a));this.D[a]=b};e.addAll=function(a){if(a instanceof S)for(var b=a.W(),c=0;c<b.length;c++)this.set(b[c],a.get(b[c]));else for(b in a)this.set(b,a[b])};e.forEach=function(a,b){for(var c=this.W(),d=0;d<c.length;d++){var f=c[d],g=this.get(f);a.call(b,g,f,this)}};e.clone=function(){return new S(this)};function T(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var pc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function qc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),f=null;if(0<=d){var g=a[c].substring(0,d);f=a[c].substring(d+1)}else g=a[c];b(g,f?decodeURIComponent(f.replace(/\+/g," ")):"")}}};function U(a,b){this.xa=this.zb=this.qa="";this.Ca=null;this.ib=this.K="";this.O=this.Qf=!1;var c;a instanceof U?(this.O=void 0!==b?b:a.O,this.tb(a.qa),this.cd(a.zb),this.rb(a.xa),this.sb(a.Ca),this.ec(a.K),this.bd(a.P.clone()),this.$c(a.ib)):a&&(c=String(a).match(pc))?(this.O=!!b,this.tb(c[1]||"",!0),this.cd(c[2]||"",!0),this.rb(c[3]||"",!0),this.sb(c[4]),this.ec(c[5]||"",!0),this.bd(c[6]||"",!0),this.$c(c[7]||"",!0)):(this.O=!!b,this.P=new rc(null,this.O))}e=U.prototype;
	e.toString=function(){var a=[],b=this.qa;b&&a.push(sc(b,tc,!0),":");var c=this.xa;if(c||"file"==b)a.push("//"),(b=this.zb)&&a.push(sc(b,tc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.Ca,null!=c&&a.push(":",String(c));if(c=this.K)this.Ic()&&"/"!=c.charAt(0)&&a.push("/"),a.push(sc(c,"/"==c.charAt(0)?uc:wc,!0));(c=this.Rd())&&a.push("?",c);(c=this.ib)&&a.push("#",sc(c,xc));return a.join("")};
	e.resolve=function(a){var b=this.clone(),c=a.Hf();c?b.tb(a.qa):c=a.If();c?b.cd(a.zb):c=a.Ic();c?b.rb(a.xa):c=a.Ff();var d=a.K;if(c)b.sb(a.Ca);else if(c=a.ae()){if("/"!=d.charAt(0))if(this.Ic()&&!this.ae())d="/"+d;else{var f=b.K.lastIndexOf("/");-1!=f&&(d=b.K.substr(0,f+1)+d)}f=d;if(".."==f||"."==f)d="";else if(-1!=f.indexOf("./")||-1!=f.indexOf("/.")){d=0==f.lastIndexOf("/",0);f=f.split("/");for(var g=[],k=0;k<f.length;){var p=f[k++];"."==p?d&&k==f.length&&g.push(""):".."==p?((1<g.length||1==g.length&&
	""!=g[0])&&g.pop(),d&&k==f.length&&g.push("")):(g.push(p),d=!0)}d=g.join("/")}else d=f}c?b.ec(d):c=a.Gf();c?b.bd(a.P.clone()):c=a.Ef();c&&b.$c(a.ib);return b};e.clone=function(){return new U(this)};e.tb=function(a,b){this.U();if(this.qa=b?yc(a,!0):a)this.qa=this.qa.replace(/:$/,"")};e.Hf=function(){return!!this.qa};e.cd=function(a,b){this.U();this.zb=b?yc(a):a};e.If=function(){return!!this.zb};e.rb=function(a,b){this.U();this.xa=b?yc(a,!0):a};e.Ic=function(){return!!this.xa};
	e.sb=function(a){this.U();if(a){a=Number(a);if(isNaN(a)||0>a)throw Error("Bad port number "+a);this.Ca=a}else this.Ca=null};e.Ff=function(){return null!=this.Ca};e.ec=function(a,b){this.U();this.K=b?yc(a,!0):a};e.ae=function(){return!!this.K};e.Gf=function(){return""!==this.P.toString()};e.bd=function(a,b){this.U();a instanceof rc?(this.P=a,this.P.ad(this.O)):(b||(a=sc(a,zc)),this.P=new rc(a,this.O))};e.Rd=function(){return this.P.toString()};e.getQuery=function(){return this.Rd()};
	e.l=function(a,b){this.U();this.P.set(a,b)};e.dc=function(a,b){this.U();n(b)||(b=[String(b)]);this.P.Ie(a,b)};e.$c=function(a,b){this.U();this.ib=b?yc(a):a};e.Ef=function(){return!!this.ib};e.Ub=function(){this.U();this.l("zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^w()).toString(36));return this};e.removeParameter=function(a){this.U();this.P.remove(a);return this};e.U=function(){if(this.Qf)throw Error("Tried to modify a read-only Uri");};
	e.ad=function(a){this.O=a;this.P&&this.P.ad(a)};function Ac(a){return a instanceof U?a.clone():new U(a,void 0)}function Bc(a,b,c,d){var f=new U(null,void 0);a&&f.tb(a);b&&f.rb(b);c&&f.sb(c);d&&f.ec(d);return f}function yc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function sc(a,b,c){return l(a)?(a=encodeURI(a).replace(b,Cc),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}
	function Cc(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var tc=/[#\/\?@]/g,wc=/[#\?:]/g,uc=/[#\?]/g,zc=/[#\?@]/g,xc=/#/g;function rc(a,b){this.j=this.m=null;this.ja=a||null;this.O=!!b}e=rc.prototype;e.$=function(){if(!this.m&&(this.m=new S,this.j=0,this.ja)){var a=this;qc(this.ja,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c)})}};e.C=function(){this.$();return this.j};
	e.add=function(a,b){this.$();this.Oa();a=this.Ma(a);var c=this.m.get(a);c||this.m.set(a,c=[]);c.push(b);this.j+=1;return this};e.remove=function(a){this.$();a=this.Ma(a);return this.m.va(a)?(this.Oa(),this.j-=this.m.get(a).length,this.m.remove(a)):!1};e.clear=function(){this.Oa();this.m=null;this.j=0};e.X=function(){this.$();return 0==this.j};e.va=function(a){this.$();a=this.Ma(a);return this.m.va(a)};
	e.forEach=function(a,b){this.$();this.m.forEach(function(c,d){na(c,function(c){a.call(b,c,d,this)},this)},this)};e.W=function(){this.$();for(var a=this.m.H(),b=this.m.W(),c=[],d=0;d<b.length;d++)for(var f=a[d],g=0;g<f.length;g++)c.push(b[d]);return c};e.H=function(a){this.$();var b=[];if(l(a))this.va(a)&&(b=ta(b,this.m.get(this.Ma(a))));else{a=this.m.H();for(var c=0;c<a.length;c++)b=ta(b,a[c])}return b};
	e.set=function(a,b){this.$();this.Oa();a=this.Ma(a);this.va(a)&&(this.j-=this.m.get(a).length);this.m.set(a,[b]);this.j+=1;return this};e.get=function(a,b){if(!a)return b;a=this.H(a);return 0<a.length?String(a[0]):b};e.Ie=function(a,b){this.remove(a);0<b.length&&(this.Oa(),this.m.set(this.Ma(a),ua(b)),this.j+=b.length)};
	e.toString=function(){if(this.ja)return this.ja;if(!this.m)return"";for(var a=[],b=this.m.W(),c=0;c<b.length;c++){var d=b[c],f=encodeURIComponent(String(d));d=this.H(d);for(var g=0;g<d.length;g++){var k=f;""!==d[g]&&(k+="="+encodeURIComponent(String(d[g])));a.push(k)}}return this.ja=a.join("&")};e.Oa=function(){this.ja=null};e.clone=function(){var a=new rc;a.ja=this.ja;this.m&&(a.m=this.m.clone(),a.j=this.j);return a};e.Ma=function(a){a=String(a);this.O&&(a=a.toLowerCase());return a};
	e.ad=function(a){a&&!this.O&&(this.$(),this.Oa(),this.m.forEach(function(a,c){var b=c.toLowerCase();c!=b&&(this.remove(c),this.Ie(b,a))},this));this.O=a};e.extend=function(a){for(var b=0;b<arguments.length;b++)oc(arguments[b],function(a,b){this.add(b,a)},this)};function Dc(){this.xe=w()}var Ec=null;Dc.prototype.set=function(a){this.xe=a};Dc.prototype.reset=function(){this.set(w())};Dc.prototype.get=function(){return this.xe};function Fc(){Ec||(Ec=new Dc)}function Gc(){Ec||(Ec=new Dc)}x(Gc,Fc);function Hc(a,b){this.b=a;this.a=b;this.f=this.A=null;this.bc=!1;this.K=null;this.w=-1;this.Ad=this.na=null}e=Hc.prototype;e.g=null;e.ga=function(a){this.A=a};e.connect=function(a){this.K=a;a=this.b.Sd(this.K);O(3);var b=this.b.Ib.$d;null!=b?(this.na=this.b.$a(b[0]),this.g=1,this.xd()):(a.dc("MODE","init"),!this.b.ta&&this.b.aa&&a.dc("X-HTTP-Session-Id",this.b.aa),this.f=new R(this,this.a,void 0,void 0,void 0),this.f.ga(this.A),this.f.jd(a,!1,null),this.g=0)};
	e.xd=function(){this.a.debug("TestConnection: starting stage 2");var a=this.b.Ib.od;if(null!=a)this.a.debug(function(){return true?"Buffered":"Unbuffered"}),O(4),a?(O(10),this.b.ub(this,!1)):(O(11),this.b.ub(this,!0));else{this.f=new R(this,this.a,void 0,void 0,void 0);this.f.ga(this.A);var b=this.b.Pd(this.na,this.K);O(4);b.dc("TYPE","xmlhttp");var c=this.b.aa,d=this.b.Kc;c&&d&&b.l(c,d);this.f.jd(b,!1,this.na)}};e.Jb=function(a){return this.b.Jb(a)};
	e.abort=function(){this.f&&(this.f.cancel(),this.f=null);this.w=-1};e.de=function(){return!1};
	e.ue=function(a,b){this.w=a.w;if(0==this.g)if(this.a.debug("TestConnection: Got data for stage 1"),this.pc(a),b){try{var c=this.b.kc.zc(b)}catch(d){this.a.cb(d);this.b.dd(this);return}this.na=this.b.$a(c[0])}else this.a.debug("TestConnection: Null responseText"),this.b.dd(this);else 1==this.g&&(this.bc?O(6):"11111"==b?(O(5),this.bc=!0,this.Ze()&&(this.w=200,this.f.cancel(),this.a.debug("Test connection succeeded; using streaming connection"),O(11),this.b.ub(this,!0))):(O(7),this.bc=!1))};
	e.Tc=function(){this.w=this.f.w;this.f.S?0==this.g?(this.g=1,this.a.debug("TestConnection: request complete for initial check"),this.xd()):1==this.g&&(this.a.debug("TestConnection: request complete for stage 2"),this.bc?(this.a.debug("Test connection succeeded; using streaming connection"),O(11),this.b.ub(this,!0)):(this.a.debug("Test connection failed; not using streaming"),O(10),this.b.ub(this,!1))):(this.a.debug("TestConnection: request failed, in state "+this.g),0==this.g?O(8):1==this.g&&O(9),
	this.b.dd(this))};e.pc=function(a){if(!this.b.ta&&(a=a.h)){var b=a.kb("X-Client-Wire-Protocol");this.Ad=b?b:null;this.b.aa&&((a=a.kb("X-HTTP-Session-Id"))?this.b.Fe(a):this.a.T("Missing X_HTTP_SESSION_ID in the handshake response"))}};e.fc=function(){return this.b.fc()};e.Ba=function(){return this.b.Ba()};e.Ze=function(){return!C||10<=Number(Ua)};function Ic(){this.od=this.$d=null};function Jc(a){this.D=new S;a&&this.addAll(a)}function Kc(a){var b=typeof a;return"object"==b&&a||"function"==b?"o"+(a[t]||(a[t]=++da)):b.substr(0,1)+a}e=Jc.prototype;e.C=function(){return this.D.C()};e.add=function(a){this.D.set(Kc(a),a)};e.addAll=function(a){a=nc(a);for(var b=a.length,c=0;c<b;c++)this.add(a[c])};e.pb=function(a){a=nc(a);for(var b=a.length,c=0;c<b;c++)this.remove(a[c])};e.remove=function(a){return this.D.remove(Kc(a))};e.clear=function(){this.D.clear()};e.X=function(){return this.D.X()};
	e.contains=function(a){return this.D.va(Kc(a))};e.H=function(){return this.D.H()};e.clone=function(){return new Jc(this)};function Lc(a,b){this.Pc=a;this.map=b;this.context=null};function Mc(a){this.me=a||Nc;h.PerformanceNavigationTiming?(a=h.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(h.vc&&h.vc.ke&&h.vc.ke()&&h.vc.ke().nh);this.Xb=a?this.me:1;this.v=null;1<this.Xb&&(this.v=new Jc);this.f=null;this.ba=[]}var Nc=10;e=Mc.prototype;e.ld=function(a){this.v||-1==a.indexOf("spdy")&&-1==a.indexOf("quic")&&-1==a.indexOf("h2")||(this.Xb=this.me,this.v=new Jc,this.f&&(this.oc(this.f),this.f=null))};
	e.ee=function(){return this.f?!0:this.v?this.v.C()>=this.Xb:!1};e.xf=function(){return this.f?1:this.v?this.v.C():0};e.Jc=function(a){return this.f?this.f==a:this.v?this.v.contains(a):!1};e.oc=function(a){this.v?this.v.add(a):this.f=a};e.ze=function(a){this.f&&this.f==a?this.f=null:this.v&&this.v.contains(a)&&this.v.remove(a)};e.cancel=function(){this.ba=this.la();this.f?(this.f.cancel(),this.f=null):this.v&&!this.v.X()&&(na(this.v.H(),function(a){a.cancel()}),this.v.clear())};
	e.la=function(){if(null!=this.f)return this.ba.concat(this.f.la());if(null!=this.v&&!this.v.X()){var a=this.ba;na(this.v.H(),function(b){a=a.concat(b.la())});return a}return ua(this.ba)};e.Re=function(a){this.ba=this.ba.concat(a)};e.$e=function(){this.ba.length=0};function Oc(){this.xg=this.rg=void 0}Oc.prototype.stringify=function(a){return h.JSON.stringify(a,this.rg)};Oc.prototype.parse=function(a){return h.JSON.parse(a,this.xg)};function Pc(){this.jg=new Oc}Pc.prototype.hf=function(a,b,c){var d=c||"";try{oc(a,function(a,c){var f=a;r(a)&&(f=ub(a));b.push(d+c+"="+encodeURIComponent(f))})}catch(f){throw b.push(d+"type="+encodeURIComponent("_badmap")),f;}};Pc.prototype.jf=function(a,b,c){for(var d=-1;;){var f=["count="+b];-1==d?0<b?(d=a[0].Pc,f.push("ofs="+d)):d=0:f.push("ofs="+d);for(var g=!0,k=0;k<b;k++){var p=a[k].Pc,Ub=a[k].map;p-=d;if(0>p)d=Math.max(0,a[k].Pc-100),g=!1;else try{this.hf(Ub,f,"req"+p+"_")}catch(md){c&&c(Ub)}}if(g)return f.join("&")}};
	Pc.prototype.zc=function(a){return this.jg.parse(a)};function Qc(a,b){var c=new Xb;c.debug("TestLoadImage: loading "+a);var d=new Image;d.onload=v(Rc,c,d,"TestLoadImage: loaded",!0,b);d.onerror=v(Rc,c,d,"TestLoadImage: error",!1,b);d.onabort=v(Rc,c,d,"TestLoadImage: abort",!1,b);d.ontimeout=v(Rc,c,d,"TestLoadImage: timeout",!1,b);h.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}function Rc(a,b,c,d,f){try{a.debug(c),b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,f(d)}catch(g){a.cb(g)}};var Sc=h.JSON.parse;function V(a){H.call(this);this.headers=new S;this.Xa=a||null;this.ha=!1;this.mc=this.c=null;this.ge=this.Tb="";this.Pa=0;this.I="";this.Aa=this.Lc=this.Qb=this.Ec=!1;this.vb=0;this.hc=null;this.Ae=Tc;this.jc=this.lg=this.Ab=!1}x(V,H);var Tc="";V.prototype.s=Vb("goog.net.XhrIo");var Uc=/^https?$/i,Vc=["POST","PUT"];e=V.prototype;e.Je=function(a){this.Ab=a};
	e.send=function(a,b,c,d){if(this.c)throw Error("[goog.net.XhrIo] Object is active with another request="+this.Tb+"; newUri="+a);b=b?b.toUpperCase():"GET";this.Tb=a;this.I="";this.Pa=0;this.ge=b;this.Ec=!1;this.ha=!0;this.c=this.df();this.mc=this.Xa?this.Xa.Vd():hc.Vd();this.c.onreadystatechange=u(this.te,this);this.lg&&"onprogress"in this.c&&(this.c.onprogress=u(function(a){this.re(a,!0)},this),this.c.upload&&(this.c.upload.onprogress=u(this.re,this)));try{L(this.s,this.da("Opening Xhr")),this.Lc=
	!0,this.c.open(b,String(a),!0),this.Lc=!1}catch(g){L(this.s,this.da("Error opening Xhr: "+g.message));this.Ld(g);return}a=c||"";var f=this.headers.clone();d&&oc(d,function(a,b){f.set(b,a)});d=pa(f.W());c=h.FormData&&a instanceof h.FormData;!(0<=la(Vc,b))||d||c||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(a,b){this.c.setRequestHeader(b,a)},this);this.Ae&&(this.c.responseType=this.Ae);"withCredentials"in this.c&&this.c.withCredentials!==this.Ab&&(this.c.withCredentials=
	this.Ab);try{this.yd(),0<this.vb&&(this.jc=Wc(this.c),L(this.s,this.da("Will abort after "+this.vb+"ms if incomplete, xhr2 "+this.jc)),this.jc?(this.c.timeout=this.vb,this.c.ontimeout=u(this.Ua,this)):this.hc=Hb(this.Ua,this.vb,this)),L(this.s,this.da("Sending request")),this.Qb=!0,this.c.send(a),this.Qb=!1}catch(g){L(this.s,this.da("Send error: "+g.message)),this.Ld(g)}};function Wc(a){return C&&Ta(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}
	function qa(a){return"content-type"==a.toLowerCase()}e.df=function(){return this.Xa?this.Xa.Dd():hc.Dd()};e.Ua=function(){"undefined"!=typeof goog&&this.c&&(this.I="Timed out after "+this.vb+"ms, aborting",this.Pa=8,L(this.s,this.da(this.I)),this.dispatchEvent("timeout"),this.abort(8))};e.Ld=function(a){this.ha=!1;this.c&&(this.Aa=!0,this.c.abort(),this.Aa=!1);this.I=a;this.Pa=5;this.Jd();this.Gb()};e.Jd=function(){this.Ec||(this.Ec=!0,this.dispatchEvent("complete"),this.dispatchEvent("error"))};
	e.abort=function(a){this.c&&this.ha&&(L(this.s,this.da("Aborting")),this.ha=!1,this.Aa=!0,this.c.abort(),this.Aa=!1,this.Pa=a||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),this.Gb())};e.F=function(){this.c&&(this.ha&&(this.ha=!1,this.Aa=!0,this.c.abort(),this.Aa=!1),this.Gb(!0));V.L.F.call(this)};e.te=function(){this.Ka||(this.Lc||this.Qb||this.Aa?this.se():this.eg())};e.eg=function(){this.se()};
	e.se=function(){if(this.ha&&"undefined"!=typeof goog)if(this.mc[1]&&4==this.ma()&&2==this.za())L(this.s,this.da("Local request error detected and ignored"));else if(this.Qb&&4==this.ma())Hb(this.te,0,this);else if(this.dispatchEvent("readystatechange"),this.Mc()){L(this.s,this.da("Request complete"));this.ha=!1;try{this.Rf()?(this.dispatchEvent("complete"),this.dispatchEvent("success")):(this.Pa=6,this.I=this.Yd()+" ["+this.za()+"]",this.Jd())}finally{this.Gb()}}};
	e.re=function(a,b){this.dispatchEvent(Xc(a,"progress"));this.dispatchEvent(Xc(a,b?"downloadprogress":"uploadprogress"))};function Xc(a,b){return{type:b,lengthComputable:a.lengthComputable,loaded:a.loaded,total:a.total}}e.Gb=function(a){if(this.c){this.yd();var b=this.c,c=this.mc[0]?aa:null;this.mc=this.c=null;a||this.dispatchEvent("ready");try{b.onreadystatechange=c}catch(d){(a=this.s)&&a.ca("Problem encountered resetting onreadystatechange: "+d.message,void 0)}}};
	e.yd=function(){this.c&&this.jc&&(this.c.ontimeout=null);this.hc&&(h.clearTimeout(this.hc),this.hc=null)};e.Ba=function(){return!!this.c};e.Mc=function(){return 4==this.ma()};e.Rf=function(){var a=this.za();a:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var b=!0;break a;default:b=!1}return b||0===a&&!this.Of()};
	e.Of=function(){var a=String(this.Tb).match(pc)[1]||null;!a&&h.self&&h.self.location&&(a=h.self.location.protocol,a=a.substr(0,a.length-1));return Uc.test(a?a.toLowerCase():"")};e.ma=function(){return this.c?this.c.readyState:0};e.za=function(){try{return 2<this.ma()?this.c.status:-1}catch(a){return-1}};e.Yd=function(){try{return 2<this.ma()?this.c.statusText:""}catch(a){return L(this.s,"Can not get status: "+a.message),""}};
	e.ya=function(){try{return this.c?this.c.responseText:""}catch(a){return L(this.s,"Can not get responseText: "+a.message),""}};e.yf=function(a){if(this.c){var b=this.c.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return Sc(b)}};e.getResponseHeader=function(a){if(this.c&&this.Mc())return a=this.c.getResponseHeader(a),null===a?void 0:a};e.getAllResponseHeaders=function(){return this.c&&this.Mc()?this.c.getAllResponseHeaders()||"":""};
	e.kb=function(a){return this.c?this.c.getResponseHeader(a):null};e.Ud=function(){return this.Pa};e.Hc=function(){return l(this.I)?this.I:String(this.I)};e.da=function(a){return a+" ["+this.ge+" "+this.Tb+" "+this.za()+"]"};function Yc(a){var b="";Aa(a,function(a,d){b+=d;b+=":";b+=a;b+="\r\n"});return b}function Zc(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=Yc(c);if(l(a)){b=encodeURIComponent(String(b));c=null!=c?"="+encodeURIComponent(String(c)):"";if(b+=c){c=a.indexOf("#");0>c&&(c=a.length);d=a.indexOf("?");if(0>d||d>c){d=c;var f=""}else f=a.substring(d+1,c);a=[a.substr(0,d),f,a.substr(c)];c=a[1];a[1]=b?c?c+"&"+b:b:c;a=a[0]+(a[1]?"?"+a[1]:"")+a[2]}return a}a.l(b,c);return a};function $c(a){this.Bd=22;this.De=0;this.M=[];this.a=new Xb;this.Ib=new Ic;this.na=this.md=this.hb=this.K=this.u=this.Kc=this.aa=this.gb=this.N=this.Rb=this.A=null;this.Te=!0;this.ag=this.Yb=0;this.kf=!!m("internalChannelParams.failFast",a);this.fd=this.Ja=this.wa=this.ia=this.ea=this.i=null;this.Se=!0;this.w=this.he=this.Sb=-1;this.rc=this.Ha=this.La=0;this.Ve=m("internalChannelParams.baseRetryDelayMs",a)||5E3;this.vg=m("internalChannelParams.retryDelaySeedMs",a)||1E4;this.nf=m("internalChannelParams.forwardChannelMaxRetries",
	a)||2;this.Od=m("internalChannelParams.forwardChannelRequestTimeoutMs",a)||2E4;this.Xa=a&&a.oh||void 0;this.Db=void 0;this.Ra=0;this.gc=a&&a.supportsCrossDomainXhr||!1;this.ra="";this.G=new Mc(a&&a.concurrentRequestLimit);this.kc=new Pc;this.ta=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;(this.Nd=a&&a.fastHandshake||!1)&&!this.ta&&(this.a.T("Force backgroundChannelTest when fastHandshake is enabled."),this.ta=!0);a&&a.Id&&this.a.Id()}e=$c.prototype;e.tc=8;e.g=1;
	e.connect=function(a,b,c,d,f){this.a.debug("connect()");O(0);this.K=b;this.gb=c||{};d&&void 0!==f&&(this.gb.OSID=d,this.gb.OAID=f);this.ta&&(this.a.debug("connect() bypassed channel-test."),this.Ib.$d=[],this.Ib.od=!1);this.bf(a)};e.disconnect=function(){this.a.debug("disconnect()");this.qd();if(3==this.g){var a=this.Yb++,b=this.hb.clone();b.l("SID",this.ra);b.l("RID",a);b.l("TYPE","terminate");this.Ya(b);(new R(this,this.a,this.ra,a,void 0)).yg(b)}this.qe()};
	e.bf=function(a){this.a.debug("connectTest_()");this.Ja=new Hc(this,this.a);null===this.N&&this.Ja.ga(this.A);var b=a;this.N&&this.A&&(b=Zc(a,this.N,this.A));this.Ja.connect(b)};e.af=function(){this.a.debug("connectChannel_()");this.hb=this.Sd(this.K);this.Dc()};e.qd=function(){this.Ja&&(this.Ja.abort(),this.Ja=null);this.u&&(this.u.cancel(),this.u=null);this.ia&&(h.clearTimeout(this.ia),this.ia=null);this.Hb();this.G.cancel();this.ea&&(h.clearTimeout(this.ea),this.ea=null)};
	e.ga=function(a){this.A=a};e.Eg=function(a){this.Rb=a};e.Cg=function(a){this.N=a};e.Dg=function(a){this.aa=a};e.Fe=function(a){this.Kc=a};e.He=function(a){this.Ra=a};e.Hg=function(){this.gc=!0};e.Ee=function(a){this.i=a};e.Nf=function(){return!this.fd};e.Zc=function(a){1E3==this.M.length&&this.a.ca(function(){return"Already have 1000 queued maps upon queueing "+ub(a)});this.M.push(new Lc(this.ag++,a));3==this.g&&this.Dc()};e.qf=function(){return this.kf?0:this.nf};e.de=function(){return 0==this.g};
	e.getState=function(){return this.g};e.Dc=function(){this.G.ee()||this.ea||(this.ea=P(u(this.we,this),0),this.La=0)};e.Yf=function(a){if(this.G.xf()>=this.G.Xb-(this.ea?1:0))return this.a.ca("Unexpected retry request is scheduled."),!1;if(this.ea)return this.a.debug("Use the retry request that is already scheduled."),this.M=a.la().concat(this.M),!0;if(1==this.g||2==this.g||this.La>=this.qf())return!1;this.a.debug("Going to retry POST");this.ea=P(u(this.we,this,a),this.Xd(this.La));this.La++;return!0};
	e.we=function(a){this.ea=null;this.Mg(a)};e.Mg=function(a){this.a.debug("startForwardChannel_");1==this.g?a?this.a.ca("Not supposed to retry the open"):(this.ig(),this.g=2):3==this.g&&(a?this.le(a):0==this.M.length?this.a.debug("startForwardChannel_ returned: nothing to send"):this.G.ee()?this.a.ca("startForwardChannel_ returned: connection already in progress"):(this.le(),this.a.debug("startForwardChannel_ finished, sent request")))};
	e.ig=function(){this.a.debug("open_()");this.Yb=Math.floor(1E5*Math.random());var a=this.Yb++,b=new R(this,this.a,"",a,void 0),c=this.A;this.Rb&&(c?(c=Da(c),Fa(c,this.Rb)):c=this.Rb);null===this.N&&b.ga(c);var d=this.Hd(b),f=this.hb.clone();f.l("RID",a);0<this.Bd&&f.l("CVER",this.Bd);this.ta&&this.aa&&f.l("X-HTTP-Session-Id",this.aa);this.Ya(f);this.N&&c&&Zc(f,this.N,c);this.G.oc(b);this.Nd?(f.l("$req",d),f.l("SID","null"),b.Ag(),b.kd(f,null)):b.kd(f,d)};
	e.le=function(a){var b=a?a.R:this.Yb++;var c=this.hb.clone();c.l("SID",this.ra);c.l("RID",b);c.l("AID",this.Sb);this.Ya(c);this.N&&this.A&&Zc(c,this.N,this.A);b=new R(this,this.a,this.ra,b,this.La+1);null===this.N&&b.ga(this.A);a&&this.sg(a);a=this.Hd(b);b.setTimeout(Math.round(.5*this.Od)+Math.round(.5*this.Od*Math.random()));this.G.oc(b);b.kd(c,a)};e.Ya=function(a){this.i&&oc({},function(b,c){a.l(c,b)})};
	e.Hd=function(a){var b=Math.min(this.M.length,1E3),c=this.i?u(this.i.Ue,this.i,this):null;c=this.kc.jf(this.M,b,c);a.Gg(this.M.splice(0,b));return c};e.sg=function(a){this.M=a.la().concat(this.M)};e.Kd=function(){if(!this.u&&!this.ia){this.rc=1;var a=this.ve;Bb||Cb();Eb||(Bb(),Eb=!0);Fb.add(a,this);this.Ha=0}};
	e.Qc=function(){if(this.u||this.ia)return this.a.ca("Request already in progress"),!1;if(3<=this.Ha)return!1;this.a.debug("Going to retry GET");this.rc++;this.ia=P(u(this.ve,this),this.Xd(this.Ha));this.Ha++;return!0};e.ve=function(){this.ia=null;this.Kg()};
	e.Kg=function(){this.a.debug("Creating new HttpRequest");this.u=new R(this,this.a,this.ra,"rpc",this.rc);null===this.N&&this.u.ga(this.A);this.u.He(this.Ra);var a=this.md.clone();a.l("RID","rpc");a.l("SID",this.ra);a.l("CI",this.fd?"0":"1");a.l("AID",this.Sb);this.Ya(a);a.l("TYPE","xmlhttp");this.N&&this.A&&Zc(a,this.N,this.A);this.Db&&this.u.setTimeout(this.Db);this.u.jd(a,!0,this.na);this.a.debug("New Request created")};
	e.ub=function(a,b){this.a.debug("Test Connection Finished");var c=a.Ad;c&&this.G.ld(c);this.fd=this.Se&&b;this.w=a.w;this.af()};e.dd=function(a){this.a.debug("Test Connection Failed");this.w=a.w;this.sa(2)};
	e.ue=function(a,b){if(0!=this.g&&(this.u==a||this.G.Jc(a)))if(this.w=a.w,!a.lb&&this.G.Jc(a)&&3==this.g){try{var c=this.kc.zc(b)}catch(d){c=null}n(c)&&3==c.length?this.Cf(c,a):(this.a.debug("Bad POST response data returned"),this.sa(11))}else(a.lb||this.u==a)&&this.Hb(),va(b)||(c=this.kc.zc(b),this.dg(c,a))};
	e.Cf=function(a,b){0==a[0]?this.Bf(b):(this.he=a[1],b=this.he-this.Sb,0<b&&(a=a[2],this.a.debug(a+" bytes (in "+b+" arrays) are outstanding on the BackChannel"),this.Jg(a)&&!this.wa&&(this.wa=P(u(this.bg,this),6E3))))};
	e.Bf=function(a){this.a.debug("Server claims our backchannel is missing.");if(this.ia)this.a.debug("But we are currently starting the request.");else{if(this.u)if(this.u.qb+3E3<a.qb)this.Hb(),this.u.cancel(),this.u=null;else return;else this.a.T("We do not have a BackChannel established");this.Qc();O(18)}};e.Jg=function(a){return 37500>a&&!this.Nf()&&0==this.Ha};e.$a=function(a){return this.Te?this.i?this.i.$a(a):a:null};
	e.bg=function(){null!=this.wa&&(this.wa=null,this.u.cancel(),this.u=null,this.Qc(),O(19))};e.Hb=function(){null!=this.wa&&(h.clearTimeout(this.wa),this.wa=null)};
	e.Tc=function(a){this.a.debug("Request complete");var b=null;if(this.u==a){this.Hb();this.u=null;var c=2}else if(this.G.Jc(a))b=a.la(),this.G.ze(a),c=1;else return;this.w=a.w;if(0!=this.g)if(a.S)1==c?(ac(a.Da?a.Da.length:0,w()-a.qb,this.La),this.Dc()):this.Kd();else{var d=a.Hc();if(3==d||0==d&&0<this.w)this.a.debug("Not retrying due to error type");else{var f=this;this.a.debug(function(){return"Maybe retrying, last error: "+kc(d,f.w)});if(1==c&&this.Yf(a)||2==c&&this.Qc())return;this.a.debug("Exceeded max number of retries")}b&&
	0<b.length&&this.G.Re(b);this.a.debug("Error: HTTP request failed");switch(d){case 1:this.sa(5);break;case 4:this.sa(10);break;case 3:this.sa(6);break;default:this.sa(2)}}};e.Xd=function(a){var b=this.Ve+Math.floor(Math.random()*this.vg);this.Ba()||(this.a.debug("Inactive channel"),b*=2);return b*a};e.pc=function(a){if(this.ta&&(a=a.h)){var b=a.kb("X-Client-Wire-Protocol");b&&this.G.ld(b);this.aa&&((a=a.kb("X-HTTP-Session-Id"))?(this.Fe(a),this.hb.l(this.aa,a)):this.a.T("Missing X_HTTP_SESSION_ID in the handshake response"))}};
	e.dg=function(a,b){for(var c=this.i&&this.i.sc?[]:null,d=0;d<a.length;d++){var f=a[d];this.Sb=f[0];f=f[1];if(2==this.g)if("c"==f[0]){this.ra=f[1];this.na=this.$a(f[2]);var g=f[3];null!=g&&(this.tc=g,this.a.info("VER="+this.tc));g=f[4];null!=g&&(this.De=g,this.a.info("SVER="+this.De));f=f[5];null!=f&&"number"==typeof f&&0<f&&(this.Db=f*=1.5,this.a.info("backChannelRequestTimeoutMs_="+f));this.pc(b);this.g=3;this.i&&this.i.wd();this.Lg(b)}else"stop"!=f[0]&&"close"!=f[0]||this.sa(7);else 3==this.g&&
	("stop"==f[0]||"close"==f[0]?(c&&0!=c.length&&(this.i.sc(this,c),c.length=0),"stop"==f[0]?this.sa(7):this.disconnect()):"noop"!=f[0]&&(c?c.push(f):this.i&&this.i.ud(f)),this.Ha=0)}c&&0!=c.length&&this.i.sc(this,c)};e.Lg=function(a){this.md=this.Pd(this.na,this.K);a.lb?(this.a.debug("Upgrade the handshake request to a backchannel."),this.G.ze(a),a.tg(this.Db),this.u=a):this.Kd()};
	e.sa=function(a){this.a.info("Error code "+a);if(2==a){var b=null;this.i&&(b=null);var c=u(this.Pg,this);b||(b=new U("//www.google.com/images/cleardot.gif"),h.location&&"http"==h.location.protocol||b.tb("https"),b.Ub());Qc(b.toString(),c)}else O(2);this.cg(a)};e.Pg=function(a){a?(this.a.info("Successfully pinged google.com"),O(2)):(this.a.info("Failed to ping google.com"),O(1))};e.cg=function(a){this.a.debug("HttpChannel: error - "+a);this.g=0;this.i&&this.i.td(a);this.qe();this.qd()};
	e.qe=function(){this.g=0;this.w=-1;if(this.i){var a=this.G.la();if(0!=a.length||0!=this.M.length){var b=this;this.a.debug(function(){return"Number of undelivered maps, pending: "+a.length+", outgoing: "+b.M.length});this.G.$e();ua(this.M);this.M.length=0}this.i.sd()}};e.Sd=function(a){a=this.Cd(null,a);this.a.debug("GetForwardChannelUri: "+a);return a};e.Pd=function(a,b){a=this.Cd(this.fc()?a:null,b);this.a.debug("GetBackChannelUri: "+a);return a};
	e.Cd=function(a,b){var c=Ac(b);if(""!=c.xa)a&&c.rb(a+"."+c.xa),c.sb(c.Ca);else{var d=h.location;c=Bc(d.protocol,a?a+"."+d.hostname:d.hostname,+d.port,b)}this.gb&&Aa(this.gb,function(a,b){c.l(b,a)});a=this.aa;b=this.Kc;a&&b&&c.l(a,b);c.l("VER",this.tc);this.Ya(c);return c};e.Jb=function(a){if(a&&!this.gc)throw Error("Can't create secondary domain capable XhrIo object.");a=new V(this.Xa);a.Je(this.gc);return a};e.Ba=function(){return!!this.i&&this.i.Ba()};e.fc=function(){return this.gc};new Gc;
	function ad(){}e=ad.prototype;e.sc=null;e.wd=function(){};e.ud=function(){};e.td=function(){};e.sd=function(){};e.Ba=function(){return!0};e.Ue=function(){};e.$a=function(a){return a};function bd(a){for(var b=arguments[0],c=1;c<arguments.length;c++){var d=arguments[c];if(0==d.lastIndexOf("/",0))b=d;else{var f;(f=""==b)||(f=b.length-1,f=0<=f&&b.indexOf("/",f)==f);b=f?b+d:b+("/"+d)}}return b};function cd(){if(C&&!(10<=Number(Ua)))throw Error("Environmental error: no available transport.");}cd.prototype.cf=function(a,b){return new W(a,b)};
	function W(a,b){H.call(this);this.b=new $c(b);this.yb=a;this.Qg=b&&b.testUrl?b.testUrl:bd(this.yb,"test");this.s=Vb("goog.labs.net.webChannel.WebChannelBaseTransport");this.Rc=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.b.ga(a);a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});
	b&&b.zd&&(a?a["X-WebChannel-Client-Profile"]=b.zd:a={"X-WebChannel-Client-Profile":b.zd});this.b.Eg(a);(a=b&&b.httpHeadersOverwriteParam)&&!va(a)&&this.b.Cg(a);this.Og=b&&b.supportsCrossDomainXhr||!1;this.zg=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!va(b)&&(this.b.Dg(b),a=this.Rc,null!==a&&b in a&&(a=this.Rc,b in a&&delete a[b],(a=this.s)&&a.T("Ignore httpSessionIdParam also specified with messageUrlParams: "+b,void 0)));this.vd=new X(this)}x(W,H);e=W.prototype;
	e.addEventListener=function(a,b,c,d){W.L.addEventListener.call(this,a,b,c,d)};e.removeEventListener=function(a,b,c,d){W.L.removeEventListener.call(this,a,b,c,d)};e.open=function(){this.b.Ee(this.vd);this.Og&&this.b.Hg();this.b.connect(this.Qg,this.yb,this.Rc||void 0)};e.close=function(){this.b.disconnect()};e.send=function(a){if(l(a)){var b={};b.__data__=a;this.b.Zc(b)}else this.zg?(b={},b.__data__=ub(a),this.b.Zc(b)):this.b.Zc(a)};
	e.F=function(){this.b.Ee(null);delete this.vd;this.b.disconnect();delete this.b;W.L.F.call(this)};function dd(a){fc.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}if(this.ne=a)a=this.ne,b=null!==b&&a in b?b[a]:void 0;this.data=b}else this.data=a}x(dd,fc);function ed(a){gc.call(this);this.status=1;this.errorCode=a}x(ed,gc);function X(a){this.b=a}x(X,ad);X.prototype.wd=function(){Wb(this.b.s,"WebChannel opened on "+this.b.yb);this.b.dispatchEvent("a")};X.prototype.ud=function(a){this.b.dispatchEvent(new dd(a))};
	X.prototype.td=function(a){Wb(this.b.s,"WebChannel aborted on "+this.b.yb+" due to channel error: "+a);this.b.dispatchEvent(new ed(a))};X.prototype.sd=function(){Wb(this.b.s,"WebChannel closed on "+this.b.yb);this.b.dispatchEvent("b")};var fd=v(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},cd);function gd(){this.V=[];this.Z=[]}e=gd.prototype;e.Vf=function(){0==this.V.length&&(this.V=this.Z,this.V.reverse(),this.Z=[])};e.enqueue=function(a){this.Z.push(a)};e.ab=function(){this.Vf();return this.V.pop()};e.C=function(){return this.V.length+this.Z.length};e.X=function(){return 0==this.V.length&&0==this.Z.length};e.clear=function(){this.V=[];this.Z=[]};e.contains=function(a){return 0<=la(this.V,a)||0<=la(this.Z,a)};
	e.remove=function(a){var b=this.V;var c=ma(b,a);0<=c?(Array.prototype.splice.call(b,c,1),b=!0):b=!1;return b||sa(this.Z,a)};e.H=function(){for(var a=[],b=this.V.length-1;0<=b;--b)a.push(this.V[b]);var c=this.Z.length;for(b=0;b<c;++b)a.push(this.Z[b]);return a};function hd(a,b){z.call(this);this.oe=a||0;this.Wb=b||10;if(this.oe>this.Wb)throw Error(id);this.fa=new gd;this.oa=new Jc;this.Ac=0;this.Nc=null;this.Cb()}x(hd,z);var id="[goog.structs.Pool] Min can not be greater than max";e=hd.prototype;e.Mb=function(){var a=w();if(!(null!=this.Nc&&a-this.Nc<this.Ac)){var b=this.qg();b&&(this.Nc=a,this.oa.add(b));return b}};e.og=function(a){return this.oa.remove(a)?(this.nc(a),!0):!1};
	e.qg=function(){for(var a;0<this.Td()&&(a=this.fa.ab(),!this.Sc(a));)this.Cb();!a&&this.C()<this.Wb&&(a=this.xc());return a};e.nc=function(a){this.oa.remove(a);this.Sc(a)&&this.C()<this.Wb?this.fa.enqueue(a):this.Bc(a)};e.Cb=function(){for(var a=this.fa;this.C()<this.oe;)a.enqueue(this.xc());for(;this.C()>this.Wb&&0<this.Td();)this.Bc(a.ab())};e.xc=function(){return{}};e.Bc=function(a){if("function"==typeof a.bb)a.bb();else for(var b in a)a[b]=null};
	e.Sc=function(a){return"function"==typeof a.Ye?a.Ye():!0};e.contains=function(a){return this.fa.contains(a)||this.oa.contains(a)};e.C=function(){return this.fa.C()+this.oa.C()};e.rf=function(){return this.oa.C()};e.Td=function(){return this.fa.C()};e.X=function(){return this.fa.X()&&this.oa.X()};e.F=function(){hd.L.F.call(this);if(0<this.rf())throw Error("[goog.structs.Pool] Objects not released");delete this.oa;for(var a=this.fa;!a.X();)this.Bc(a.ab());delete this.fa};function jd(a,b){this.fe=a;this.gd=b}jd.prototype.getKey=function(){return this.fe};jd.prototype.clone=function(){return new jd(this.fe,this.gd)};function kd(a){this.Y=[];a&&this.Lf(a)}e=kd.prototype;e.ce=function(a,b){var c=this.Y;c.push(new jd(a,b));this.$f(c.length-1)};e.Lf=function(a){if(a instanceof kd){var b=a.W();a=a.H();if(0>=this.C()){for(var c=this.Y,d=0;d<b.length;d++)c.push(new jd(b[d],a[d]));return}}else b=Ca(a),a=Ba(a);for(d=0;d<b.length;d++)this.ce(b[d],a[d])};e.remove=function(){var a=this.Y,b=a.length,c=a[0];if(!(0>=b))return 1==b?ra(a):(a[0]=a.pop(),this.Zf()),c.gd};
	e.Zf=function(){for(var a=0,b=this.Y,c=b.length,d=b[a];a<c>>1;){var f=this.tf(a),g=this.zf(a);f=g<c&&b[g].getKey()<b[f].getKey()?g:f;if(b[f].getKey()>d.getKey())break;b[a]=b[f];a=f}b[a]=d};e.$f=function(a){for(var b=this.Y,c=b[a];0<a;){var d=this.wf(a);if(b[d].getKey()>c.getKey())b[a]=b[d],a=d;else break}b[a]=c};e.tf=function(a){return 2*a+1};e.zf=function(a){return 2*a+2};e.wf=function(a){return a-1>>1};e.H=function(){for(var a=this.Y,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].gd);return b};
	e.W=function(){for(var a=this.Y,b=[],c=a.length,d=0;d<c;d++)b.push(a[d].getKey());return b};e.va=function(a){return oa(this.Y,function(b){return b.getKey()==a})};e.clone=function(){return new kd(this)};e.C=function(){return this.Y.length};e.X=function(){return 0==this.Y.length};e.clear=function(){ra(this.Y)};function ld(){kd.call(this)}x(ld,kd);ld.prototype.enqueue=function(a,b){this.ce(a,b)};ld.prototype.ab=function(){return this.remove()};function Y(a,b){this.Gd=void 0;this.cc=new ld;hd.call(this,a,b)}x(Y,hd);e=Y.prototype;e.Mb=function(a,b){if(!a)return(a=Y.L.Mb.call(this))&&this.Ac&&(this.Gd=h.setTimeout(u(this.Nb,this),this.Ac)),a;this.cc.enqueue(void 0!==b?b:100,a);this.Nb()};e.Nb=function(){for(var a=this.cc;0<a.C();){var b=this.Mb();if(b)a.ab().apply(this,[b]);else break}};e.nc=function(a){Y.L.nc.call(this,a);this.Nb()};e.Cb=function(){Y.L.Cb.call(this);this.Nb()};
	e.F=function(){Y.L.F.call(this);h.clearTimeout(this.Gd);this.cc.clear();this.cc=null};function Z(a,b,c,d){this.Jf=a;this.Ab=!!d;Y.call(this,b,c)}x(Z,Y);Z.prototype.xc=function(){var a=new V,b=this.Jf;b&&b.forEach(function(b,d){a.headers.set(d,b)});this.Ab&&a.Je(!0);return a};Z.prototype.Sc=function(a){return!a.Ka&&!a.Ba()};cd.prototype.createWebChannel=cd.prototype.cf;W.prototype.send=W.prototype.send;W.prototype.open=W.prototype.open;W.prototype.close=W.prototype.close;bc.NO_ERROR=0;bc.TIMEOUT=8;bc.HTTP_ERROR=6;cc.COMPLETE="complete";ec.EventType=Q;Q.OPEN="a";Q.CLOSE="b";Q.ERROR="c";Q.MESSAGE="d";H.prototype.listen=H.prototype.nb;Z.prototype.getObject=Z.prototype.Mb;Z.prototype.releaseObject=Z.prototype.og;V.prototype.listenOnce=V.prototype.Oc;V.prototype.getLastError=V.prototype.Hc;V.prototype.getLastErrorCode=V.prototype.Ud;
	V.prototype.getStatus=V.prototype.za;V.prototype.getStatusText=V.prototype.Yd;V.prototype.getResponseJson=V.prototype.yf;V.prototype.getResponseText=V.prototype.ya;V.prototype.getResponseText=V.prototype.ya;V.prototype.send=V.prototype.send;module.exports={createWebChannelTransport:fd,ErrorCode:bc,EventType:cc,WebChannel:ec,XhrIoPool:Z};}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {})

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var tslib_1 = __webpack_require__(24);
	var firebase = _interopDefault(__webpack_require__(22));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Standard error codes for different ways a request can fail, as defined by:
	 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
	 *
	 * This map is used primarily to convert from a backend error code string to
	 * a client SDK error code string, and make sure it's in the supported set.
	 */
	var errorCodeMap = {
	    OK: 'ok',
	    CANCELLED: 'cancelled',
	    UNKNOWN: 'unknown',
	    INVALID_ARGUMENT: 'invalid-argument',
	    DEADLINE_EXCEEDED: 'deadline-exceeded',
	    NOT_FOUND: 'not-found',
	    ALREADY_EXISTS: 'already-exists',
	    PERMISSION_DENIED: 'permission-denied',
	    UNAUTHENTICATED: 'unauthenticated',
	    RESOURCE_EXHAUSTED: 'resource-exhausted',
	    FAILED_PRECONDITION: 'failed-precondition',
	    ABORTED: 'aborted',
	    OUT_OF_RANGE: 'out-of-range',
	    UNIMPLEMENTED: 'unimplemented',
	    INTERNAL: 'internal',
	    UNAVAILABLE: 'unavailable',
	    DATA_LOSS: 'data-loss'
	};
	/**
	 * An explicit error that can be thrown from a handler to send an error to the
	 * client that called the function.
	 */
	var HttpsErrorImpl = /** @class */ (function (_super) {
	    tslib_1.__extends(HttpsErrorImpl, _super);
	    function HttpsErrorImpl(code, message, details) {
	        var _this = _super.call(this, message) || this;
	        // This is a workaround for a bug in TypeScript when extending Error:
	        // tslint:disable-next-line
	        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
	        Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);
	        _this.code = code;
	        _this.details = details;
	        return _this;
	    }
	    return HttpsErrorImpl;
	}(Error));
	/**
	 * Takes an HTTP status code and returns the corresponding ErrorCode.
	 * This is the standard HTTP status code -> error mapping defined in:
	 * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
	 *
	 * @param status An HTTP status code.
	 * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
	 */
	function codeForHTTPStatus(status) {
	    // Make sure any successful status is OK.
	    if (status >= 200 && status < 300) {
	        return 'ok';
	    }
	    switch (status) {
	        case 0:
	            // This can happen if the server returns 500.
	            return 'internal';
	        case 400:
	            return 'invalid-argument';
	        case 401:
	            return 'unauthenticated';
	        case 403:
	            return 'permission-denied';
	        case 404:
	            return 'not-found';
	        case 409:
	            return 'aborted';
	        case 429:
	            return 'resource-exhausted';
	        case 499:
	            return 'cancelled';
	        case 500:
	            return 'internal';
	        case 501:
	            return 'unimplemented';
	        case 503:
	            return 'unavailable';
	        case 504:
	            return 'deadline-exceeded';
	    }
	    return 'unknown';
	}
	/**
	 * Takes an HTTP response and returns the corresponding Error, if any.
	 */
	function _errorForResponse(status, bodyJSON, serializer) {
	    var code = codeForHTTPStatus(status);
	    // Start with reasonable defaults from the status code.
	    var description = code;
	    var details = undefined;
	    // Then look through the body for explicit details.
	    try {
	        var errorJSON = bodyJSON.error;
	        if (errorJSON) {
	            var status_1 = errorJSON.status;
	            if (typeof status_1 === 'string') {
	                if (!errorCodeMap[status_1]) {
	                    // They must've included an unknown error code in the body.
	                    return new HttpsErrorImpl('internal', 'internal');
	                }
	                code = errorCodeMap[status_1];
	            }
	            // TODO(klimt): Add better default descriptions for error enums.
	            // The default description needs to be updated for the new code.
	            description = status_1;
	            var message = errorJSON.message;
	            if (typeof message === 'string') {
	                description = message;
	            }
	            details = errorJSON.details;
	            if (details !== undefined) {
	                details = serializer.decode(details);
	            }
	        }
	    }
	    catch (e) {
	        // If we couldn't parse explicit error data, that's fine.
	    }
	    if (code === 'ok') {
	        // Technically, there's an edge case where a developer could explicitly
	        // return an error code of OK, and we will treat it as success, but that
	        // seems reasonable.
	        return null;
	    }
	    return new HttpsErrorImpl(code, description, details);
	}

	/**
	 * Helper class to get metadata that should be included with a function call.
	 */
	var ContextProvider = /** @class */ (function () {
	    function ContextProvider(app) {
	        this.app = app;
	    }
	    ContextProvider.prototype.getAuthToken = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var token, e_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, this.app.INTERNAL.getToken()];
	                    case 1:
	                        token = _a.sent();
	                        if (!token) {
	                            return [2 /*return*/, undefined];
	                        }
	                        return [2 /*return*/, token.accessToken];
	                    case 2:
	                        e_1 = _a.sent();
	                        // If there's any error when trying to get the auth token, leave it off.
	                        return [2 /*return*/, undefined];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ContextProvider.prototype.getInstanceIdToken = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var messaging, token, e_2;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        // HACK: Until we have a separate instanceId package, this is a quick way
	                        // to load in the messaging instance for this app.
	                        if (!this.app.messaging) {
	                            return [2 /*return*/, undefined];
	                        }
	                        messaging = this.app.messaging();
	                        return [4 /*yield*/, messaging.getToken()];
	                    case 1:
	                        token = _a.sent();
	                        if (!token) {
	                            return [2 /*return*/, undefined];
	                        }
	                        return [2 /*return*/, token];
	                    case 2:
	                        e_2 = _a.sent();
	                        // We don't warn on this, because it usually means messaging isn't set up.
	                        // console.warn('Failed to retrieve instance id token.', e);
	                        // If there's any error when trying to get the token, leave it off.
	                        return [2 /*return*/, undefined];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ContextProvider.prototype.getContext = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var authToken, instanceIdToken;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getAuthToken()];
	                    case 1:
	                        authToken = _a.sent();
	                        return [4 /*yield*/, this.getInstanceIdToken()];
	                    case 2:
	                        instanceIdToken = _a.sent();
	                        return [2 /*return*/, { authToken: authToken, instanceIdToken: instanceIdToken }];
	                }
	            });
	        });
	    };
	    return ContextProvider;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
	var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
	function mapValues(o, f) {
	    var result = {};
	    for (var key in o) {
	        if (o.hasOwnProperty(key)) {
	            result[key] = f(o[key]);
	        }
	    }
	    return result;
	}
	var Serializer = /** @class */ (function () {
	    function Serializer() {
	    }
	    // Takes data and encodes it in a JSON-friendly way, such that types such as
	    // Date are preserved.
	    Serializer.prototype.encode = function (data) {
	        var _this = this;
	        if (data === null || data === undefined) {
	            return null;
	        }
	        if (data instanceof Number) {
	            data = data.valueOf();
	        }
	        if (typeof data === 'number' && isFinite(data)) {
	            // Any number in JS is safe to put directly in JSON and parse as a double
	            // without any loss of precision.
	            return data;
	        }
	        if (data === true || data === false) {
	            return data;
	        }
	        if (Object.prototype.toString.call(data) === '[object String]') {
	            return data;
	        }
	        if (Array.isArray(data)) {
	            return data.map(function (x) { return _this.encode(x); });
	        }
	        if (typeof data === 'function' || typeof data === 'object') {
	            return mapValues(data, function (x) { return _this.encode(x); });
	        }
	        // If we got this far, the data is not encodable.
	        throw new Error('Data cannot be encoded in JSON: ' + data);
	    };
	    // Takes data that's been encoded in a JSON-friendly form and returns a form
	    // with richer datatypes, such as Dates, etc.
	    Serializer.prototype.decode = function (json) {
	        var _this = this;
	        if (json === null) {
	            return json;
	        }
	        if (json['@type']) {
	            switch (json['@type']) {
	                case LONG_TYPE:
	                // Fall through and handle this the same as unsigned.
	                case UNSIGNED_LONG_TYPE: {
	                    // Technically, this could work return a valid number for malformed
	                    // data if there was a number followed by garbage. But it's just not
	                    // worth all the extra code to detect that case.
	                    var value = parseFloat(json.value);
	                    if (isNaN(value)) {
	                        throw new Error('Data cannot be decoded from JSON: ' + json);
	                    }
	                    return value;
	                }
	                default: {
	                    throw new Error('Data cannot be decoded from JSON: ' + json);
	                }
	            }
	        }
	        if (Array.isArray(json)) {
	            return json.map(function (x) { return _this.decode(x); });
	        }
	        if (typeof json === 'function' || typeof json === 'object') {
	            return mapValues(json, function (x) { return _this.decode(x); });
	        }
	        // Anything else is safe to return.
	        return json;
	    };
	    return Serializer;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The main class for the Firebase Functions SDK.
	 */
	var Service = /** @class */ (function () {
	    /**
	     * Creates a new Functions service for the given app and (optional) region.
	     * @param app_ The FirebaseApp to use.
	     * @param region_ The region to call functions in.
	     */
	    function Service(app_, region_) {
	        if (region_ === void 0) { region_ = 'us-central1'; }
	        this.app_ = app_;
	        this.region_ = region_;
	        this.serializer = new Serializer();
	        this.emulatorOrigin = null;
	        this.contextProvider = new ContextProvider(app_);
	    }
	    Object.defineProperty(Service.prototype, "app", {
	        get: function () {
	            return this.app_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns the URL for a callable with the given name.
	     * @param name The name of the callable.
	     */
	    Service.prototype._url = function (name) {
	        var projectId = this.app_.options.projectId;
	        var region = this.region_;
	        if (this.emulatorOrigin !== null) {
	            var origin = this.emulatorOrigin;
	            return origin + "/" + projectId + "/" + region + "/" + name;
	        }
	        return "https://" + region + "-" + projectId + ".cloudfunctions.net/" + name;
	    };
	    /**
	     * Changes this instance to point to a Cloud Functions emulator running
	     * locally. See https://firebase.google.com/docs/functions/local-emulator
	     *
	     * @param origin The origin of the local emulator, such as
	     * "http://localhost:5005".
	     */
	    Service.prototype.useFunctionsEmulator = function (origin) {
	        this.emulatorOrigin = origin;
	    };
	    /**
	     * Returns a reference to the callable https trigger with the given name.
	     * @param name The name of the trigger.
	     */
	    Service.prototype.httpsCallable = function (name) {
	        var _this = this;
	        var callable = function (data) {
	            return _this.call(name, data);
	        };
	        return callable;
	    };
	    /**
	     * Does an HTTP POST and returns the completed response.
	     * @param url The url to post to.
	     * @param body The JSON body of the post.
	     * @param headers The HTTP headers to include in the request.
	     * @return A Promise that will succeed when the request finishes.
	     */
	    Service.prototype.postJSON = function (url, body, headers) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var response, e_1, json, e_2;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        headers.append('Content-Type', 'application/json');
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 3, , 4]);
	                        return [4 /*yield*/, fetch(url, {
	                                method: 'POST',
	                                body: JSON.stringify(body),
	                                headers: headers
	                            })];
	                    case 2:
	                        response = _a.sent();
	                        return [3 /*break*/, 4];
	                    case 3:
	                        e_1 = _a.sent();
	                        // This could be an unhandled error on the backend, or it could be a
	                        // network error. There's no way to no, since an unhandled error on the
	                        // backend will fail to set the proper CORS header, and thus will be
	                        // treated as a network error by fetch.
	                        return [2 /*return*/, {
	                                status: 0,
	                                json: null
	                            }];
	                    case 4:
	                        json = null;
	                        _a.label = 5;
	                    case 5:
	                        _a.trys.push([5, 7, , 8]);
	                        return [4 /*yield*/, response.json()];
	                    case 6:
	                        json = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 7:
	                        e_2 = _a.sent();
	                        return [3 /*break*/, 8];
	                    case 8: return [2 /*return*/, {
	                            status: response.status,
	                            json: json
	                        }];
	                }
	            });
	        });
	    };
	    /**
	     * Calls a callable function asynchronously and returns the result.
	     * @param name The name of the callable trigger.
	     * @param data The data to pass as params to the function.s
	     */
	    Service.prototype.call = function (name, data) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var url, body, headers, context, response, error, responseData, decodedData;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        url = this._url(name);
	                        // Encode any special types, such as dates, in the input data.
	                        data = this.serializer.encode(data);
	                        body = { data: data };
	                        headers = new Headers();
	                        return [4 /*yield*/, this.contextProvider.getContext()];
	                    case 1:
	                        context = _a.sent();
	                        if (context.authToken) {
	                            headers.append('Authorization', 'Bearer ' + context.authToken);
	                        }
	                        if (context.instanceIdToken) {
	                            headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);
	                        }
	                        return [4 /*yield*/, this.postJSON(url, body, headers)];
	                    case 2:
	                        response = _a.sent();
	                        error = _errorForResponse(response.status, response.json, this.serializer);
	                        if (error) {
	                            throw error;
	                        }
	                        if (!response.json) {
	                            throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');
	                        }
	                        responseData = response.json.data;
	                        // TODO(klimt): For right now, allow "result" instead of "data", for
	                        // backwards compatibility.
	                        if (typeof responseData === 'undefined') {
	                            responseData = response.json.result;
	                        }
	                        if (typeof responseData === 'undefined') {
	                            // Consider the response malformed.
	                            throw new HttpsErrorImpl('internal', 'Response is missing data field.');
	                        }
	                        decodedData = this.serializer.decode(responseData);
	                        return [2 /*return*/, { data: decodedData }];
	                }
	            });
	        });
	    };
	    return Service;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Type constant for Firebase Functions.
	 */
	var FUNCTIONS_TYPE = 'functions';
	function factory(app, unused, region) {
	    return new Service(app, region);
	}
	function registerFunctions(instance) {
	    var namespaceExports = {
	        // no-inline
	        Functions: Service
	    };
	    instance.INTERNAL.registerService(FUNCTIONS_TYPE, factory, namespaceExports, 
	    // We don't need to wait on any AppHooks.
	    undefined, 
	    // Allow multiple functions instances per app.
	    true);
	}
	registerFunctions(firebase);

	exports.registerFunctions = registerFunctions;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var util = __webpack_require__(23);
	var tslib_1 = __webpack_require__(24);
	var firebase = _interopDefault(__webpack_require__(22));

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ERROR_CODES = {
	    AVAILABLE_IN_WINDOW: 'only-available-in-window',
	    AVAILABLE_IN_SW: 'only-available-in-sw',
	    SHOULD_BE_INHERITED: 'should-be-overriden',
	    BAD_SENDER_ID: 'bad-sender-id',
	    INCORRECT_GCM_SENDER_ID: 'incorrect-gcm-sender-id',
	    PERMISSION_DEFAULT: 'permission-default',
	    PERMISSION_BLOCKED: 'permission-blocked',
	    UNSUPPORTED_BROWSER: 'unsupported-browser',
	    NOTIFICATIONS_BLOCKED: 'notifications-blocked',
	    FAILED_DEFAULT_REGISTRATION: 'failed-serviceworker-registration',
	    SW_REGISTRATION_EXPECTED: 'sw-registration-expected',
	    GET_SUBSCRIPTION_FAILED: 'get-subscription-failed',
	    INVALID_SAVED_TOKEN: 'invalid-saved-token',
	    SW_REG_REDUNDANT: 'sw-reg-redundant',
	    TOKEN_SUBSCRIBE_FAILED: 'token-subscribe-failed',
	    TOKEN_SUBSCRIBE_NO_TOKEN: 'token-subscribe-no-token',
	    TOKEN_SUBSCRIBE_NO_PUSH_SET: 'token-subscribe-no-push-set',
	    TOKEN_UNSUBSCRIBE_FAILED: 'token-unsubscribe-failed',
	    TOKEN_UPDATE_FAILED: 'token-update-failed',
	    TOKEN_UPDATE_NO_TOKEN: 'token-update-no-token',
	    USE_SW_BEFORE_GET_TOKEN: 'use-sw-before-get-token',
	    INVALID_DELETE_TOKEN: 'invalid-delete-token',
	    DELETE_TOKEN_NOT_FOUND: 'delete-token-not-found',
	    DELETE_SCOPE_NOT_FOUND: 'delete-scope-not-found',
	    BG_HANDLER_FUNCTION_EXPECTED: 'bg-handler-function-expected',
	    NO_WINDOW_CLIENT_TO_MSG: 'no-window-client-to-msg',
	    UNABLE_TO_RESUBSCRIBE: 'unable-to-resubscribe',
	    NO_FCM_TOKEN_FOR_RESUBSCRIBE: 'no-fcm-token-for-resubscribe',
	    FAILED_TO_DELETE_TOKEN: 'failed-to-delete-token',
	    NO_SW_IN_REG: 'no-sw-in-reg',
	    BAD_SCOPE: 'bad-scope',
	    BAD_VAPID_KEY: 'bad-vapid-key',
	    BAD_SUBSCRIPTION: 'bad-subscription',
	    BAD_TOKEN: 'bad-token',
	    BAD_PUSH_SET: 'bad-push-set',
	    FAILED_DELETE_VAPID_KEY: 'failed-delete-vapid-key',
	    INVALID_PUBLIC_VAPID_KEY: 'invalid-public-vapid-key',
	    USE_PUBLIC_KEY_BEFORE_GET_TOKEN: 'use-public-key-before-get-token',
	    PUBLIC_KEY_DECRYPTION_FAILED: 'public-vapid-key-decryption-failed'
	};
	var ERROR_MAP = (_a = {}, _a[ERROR_CODES.AVAILABLE_IN_WINDOW] = 'This method is available in a Window context.', _a[ERROR_CODES.AVAILABLE_IN_SW] = 'This method is available in a service worker ' + 'context.', _a[ERROR_CODES.SHOULD_BE_INHERITED] = 'This method should be overriden by ' + 'extended classes.', _a[ERROR_CODES.BAD_SENDER_ID] = "Please ensure that 'messagingSenderId' is set " +
	        'correctly in the options passed into firebase.initializeApp().', _a[ERROR_CODES.PERMISSION_DEFAULT] = 'The required permissions were not granted and ' + 'dismissed instead.', _a[ERROR_CODES.PERMISSION_BLOCKED] = 'The required permissions were not granted and ' + 'blocked instead.', _a[ERROR_CODES.UNSUPPORTED_BROWSER] = "This browser doesn't support the API's " +
	        'required to use the firebase SDK.', _a[ERROR_CODES.NOTIFICATIONS_BLOCKED] = 'Notifications have been blocked.', _a[ERROR_CODES.FAILED_DEFAULT_REGISTRATION] = 'We are unable to register the ' +
	        'default service worker. {$browserErrorMessage}', _a[ERROR_CODES.SW_REGISTRATION_EXPECTED] = 'A service worker registration was the ' + 'expected input.', _a[ERROR_CODES.GET_SUBSCRIPTION_FAILED] = 'There was an error when trying to get ' +
	        'any existing Push Subscriptions.', _a[ERROR_CODES.INVALID_SAVED_TOKEN] = 'Unable to access details of the saved token.', _a[ERROR_CODES.SW_REG_REDUNDANT] = 'The service worker being used for push was made ' + 'redundant.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_FAILED] = 'A problem occured while subscribing the ' + 'user to FCM: {$message}', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN] = 'FCM returned no token when subscribing ' + 'the user to push.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET] = 'FCM returned an invalid response ' + 'when getting an FCM token.', _a[ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_FAILED] = 'A problem occured while updating the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_NO_TOKEN] = 'FCM returned no token when updating ' + 'the user to push.', _a[ERROR_CODES.USE_SW_BEFORE_GET_TOKEN] = 'The useServiceWorker() method may only be called once and must be ' +
	        'called before calling getToken() to ensure your service worker is used.', _a[ERROR_CODES.INVALID_DELETE_TOKEN] = 'You must pass a valid token into ' +
	        'deleteToken(), i.e. the token from getToken().', _a[ERROR_CODES.DELETE_TOKEN_NOT_FOUND] = 'The deletion attempt for token could not ' +
	        'be performed as the token was not found.', _a[ERROR_CODES.DELETE_SCOPE_NOT_FOUND] = 'The deletion attempt for service worker ' +
	        'scope could not be performed as the scope was not found.', _a[ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED] = 'The input to ' + 'setBackgroundMessageHandler() must be a function.', _a[ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG] = 'An attempt was made to message a ' + 'non-existant window client.', _a[ERROR_CODES.UNABLE_TO_RESUBSCRIBE] = 'There was an error while re-subscribing ' +
	        'the FCM token for push messaging. Will have to resubscribe the ' +
	        'user on next visit. {$message}', _a[ERROR_CODES.NO_FCM_TOKEN_FOR_RESUBSCRIBE] = 'Could not find an FCM token ' +
	        'and as a result, unable to resubscribe. Will have to resubscribe the ' +
	        'user on next visit.', _a[ERROR_CODES.FAILED_TO_DELETE_TOKEN] = 'Unable to delete the currently saved token.', _a[ERROR_CODES.NO_SW_IN_REG] = 'Even though the service worker registration was ' +
	        'successful, there was a problem accessing the service worker itself.', _a[ERROR_CODES.INCORRECT_GCM_SENDER_ID] = "Please change your web app manifest's " +
	        "'gcm_sender_id' value to '103953800507' to use Firebase messaging.", _a[ERROR_CODES.BAD_SCOPE] = 'The service worker scope must be a string with at ' +
	        'least one character.', _a[ERROR_CODES.BAD_VAPID_KEY] = 'The public VAPID key is not a Uint8Array with 65 bytes.', _a[ERROR_CODES.BAD_SUBSCRIPTION] = 'The subscription must be a valid ' + 'PushSubscription.', _a[ERROR_CODES.BAD_TOKEN] = 'The FCM Token used for storage / lookup was not ' +
	        'a valid token string.', _a[ERROR_CODES.BAD_PUSH_SET] = 'The FCM push set used for storage / lookup was not ' +
	        'not a valid push set string.', _a[ERROR_CODES.FAILED_DELETE_VAPID_KEY] = 'The VAPID key could not be deleted.', _a[ERROR_CODES.INVALID_PUBLIC_VAPID_KEY] = 'The public VAPID key must be a string.', _a[ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED] = 'The public VAPID key did not equal ' + '65 bytes when decrypted.', _a);
	var errorFactory = new util.ErrorFactory('messaging', 'Messaging', ERROR_MAP);
	var _a;

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([
	    0x04,
	    0x33,
	    0x94,
	    0xf7,
	    0xdf,
	    0xa1,
	    0xeb,
	    0xb1,
	    0xdc,
	    0x03,
	    0xa2,
	    0x5e,
	    0x15,
	    0x71,
	    0xdb,
	    0x48,
	    0xd3,
	    0x2e,
	    0xed,
	    0xed,
	    0xb2,
	    0x34,
	    0xdb,
	    0xb7,
	    0x47,
	    0x3a,
	    0x0c,
	    0x8f,
	    0xc4,
	    0xcc,
	    0xe1,
	    0x6f,
	    0x3c,
	    0x8c,
	    0x84,
	    0xdf,
	    0xab,
	    0xb6,
	    0x66,
	    0x3e,
	    0xf2,
	    0x0c,
	    0xd4,
	    0x8b,
	    0xfe,
	    0xe3,
	    0xf9,
	    0x76,
	    0x2f,
	    0x14,
	    0x1c,
	    0x63,
	    0x08,
	    0x6a,
	    0x6f,
	    0x2d,
	    0xb1,
	    0x1a,
	    0x95,
	    0xb0,
	    0xce,
	    0x37,
	    0xc0,
	    0x9c,
	    0x6e
	]);
	var ENDPOINT = 'https://fcm.googleapis.com';

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var MessageParameter;
	(function (MessageParameter) {
	    MessageParameter["TYPE_OF_MSG"] = "firebase-messaging-msg-type";
	    MessageParameter["DATA"] = "firebase-messaging-msg-data";
	})(MessageParameter || (MessageParameter = {}));
	var MessageType;
	(function (MessageType) {
	    MessageType["PUSH_MSG_RECEIVED"] = "push-msg-received";
	    MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
	})(MessageType || (MessageType = {}));

	/**
	 * Copyright 2018 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function isArrayBufferEqual(a, b) {
	    if (a == null || b == null) {
	        return false;
	    }
	    if (a === b) {
	        return true;
	    }
	    if (a.byteLength !== b.byteLength) {
	        return false;
	    }
	    var viewA = new DataView(a);
	    var viewB = new DataView(b);
	    for (var i = 0; i < a.byteLength; i++) {
	        if (viewA.getUint8(i) !== viewB.getUint8(i)) {
	            return false;
	        }
	    }
	    return true;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function toBase64(arrayBuffer) {
	    var uint8Version = new Uint8Array(arrayBuffer);
	    return btoa(String.fromCharCode.apply(null, uint8Version));
	}
	function arrayBufferToBase64(arrayBuffer) {
	    var base64String = toBase64(arrayBuffer);
	    return base64String
	        .replace(/=/g, '')
	        .replace(/\+/g, '-')
	        .replace(/\//g, '_');
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var IidModel = /** @class */ (function () {
	    function IidModel() {
	    }
	    IidModel.prototype.getToken = function (senderId, subscription, publicVapidKey) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var p256dh, auth, fcmSubscribeBody, applicationPubKey, headers, subscribeOptions, responseData, response, err_1, message;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));
	                        auth = arrayBufferToBase64(subscription.getKey('auth'));
	                        fcmSubscribeBody = "authorized_entity=" + senderId + "&" +
	                            ("endpoint=" + subscription.endpoint + "&") +
	                            ("encryption_key=" + p256dh + "&") +
	                            ("encryption_auth=" + auth);
	                        if (!isArrayBufferEqual(publicVapidKey.buffer, DEFAULT_PUBLIC_VAPID_KEY.buffer)) {
	                            applicationPubKey = arrayBufferToBase64(publicVapidKey);
	                            fcmSubscribeBody += "&application_pub_key=" + applicationPubKey;
	                        }
	                        headers = new Headers();
	                        headers.append('Content-Type', 'application/x-www-form-urlencoded');
	                        subscribeOptions = {
	                            method: 'POST',
	                            headers: headers,
	                            body: fcmSubscribeBody
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 4, , 5]);
	                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/subscribe', subscribeOptions)];
	                    case 2:
	                        response = _a.sent();
	                        return [4 /*yield*/, response.json()];
	                    case 3:
	                        responseData = _a.sent();
	                        return [3 /*break*/, 5];
	                    case 4:
	                        err_1 = _a.sent();
	                        throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED);
	                    case 5:
	                        if (responseData.error) {
	                            message = responseData.error.message;
	                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED, {
	                                message: message
	                            });
	                        }
	                        if (!responseData.token) {
	                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN);
	                        }
	                        if (!responseData.pushSet) {
	                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET);
	                        }
	                        return [2 /*return*/, {
	                                token: responseData.token,
	                                pushSet: responseData.pushSet
	                            }];
	                }
	            });
	        });
	    };
	    /**
	     * Update the underlying token details for fcmToken.
	     */
	    IidModel.prototype.updateToken = function (senderId, fcmToken, fcmPushSet, subscription, publicVapidKey) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var p256dh, auth, fcmUpdateBody, applicationPubKey, headers, updateOptions, responseData, response, err_2, message;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));
	                        auth = arrayBufferToBase64(subscription.getKey('auth'));
	                        fcmUpdateBody = "push_set=" + fcmPushSet + "&" +
	                            ("token=" + fcmToken + "&") +
	                            ("authorized_entity=" + senderId + "&") +
	                            ("endpoint=" + subscription.endpoint + "&") +
	                            ("encryption_key=" + p256dh + "&") +
	                            ("encryption_auth=" + auth);
	                        if (!isArrayBufferEqual(publicVapidKey.buffer, DEFAULT_PUBLIC_VAPID_KEY.buffer)) {
	                            applicationPubKey = arrayBufferToBase64(publicVapidKey);
	                            fcmUpdateBody += "&application_pub_key=" + applicationPubKey;
	                        }
	                        headers = new Headers();
	                        headers.append('Content-Type', 'application/x-www-form-urlencoded');
	                        updateOptions = {
	                            method: 'POST',
	                            headers: headers,
	                            body: fcmUpdateBody
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 4, , 5]);
	                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/subscribe', updateOptions)];
	                    case 2:
	                        response = _a.sent();
	                        return [4 /*yield*/, response.json()];
	                    case 3:
	                        responseData = _a.sent();
	                        return [3 /*break*/, 5];
	                    case 4:
	                        err_2 = _a.sent();
	                        throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED);
	                    case 5:
	                        if (responseData.error) {
	                            message = responseData.error.message;
	                            throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED, {
	                                message: message
	                            });
	                        }
	                        if (!responseData.token) {
	                            throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_NO_TOKEN);
	                        }
	                        return [2 /*return*/, responseData.token];
	                }
	            });
	        });
	    };
	    /**
	     * Given a fcmToken, pushSet and messagingSenderId, delete an FCM token.
	     */
	    IidModel.prototype.deleteToken = function (senderId, fcmToken, fcmPushSet) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var fcmUnsubscribeBody, headers, unsubscribeOptions, response, responseData, message, err_3;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        fcmUnsubscribeBody = "authorized_entity=" + senderId + "&" +
	                            ("token=" + fcmToken + "&") +
	                            ("pushSet=" + fcmPushSet);
	                        headers = new Headers();
	                        headers.append('Content-Type', 'application/x-www-form-urlencoded');
	                        unsubscribeOptions = {
	                            method: 'POST',
	                            headers: headers,
	                            body: fcmUnsubscribeBody
	                        };
	                        _a.label = 1;
	                    case 1:
	                        _a.trys.push([1, 4, , 5]);
	                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/unsubscribe', unsubscribeOptions)];
	                    case 2:
	                        response = _a.sent();
	                        return [4 /*yield*/, response.json()];
	                    case 3:
	                        responseData = _a.sent();
	                        if (responseData.error) {
	                            message = responseData.error.message;
	                            throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED, {
	                                message: message
	                            });
	                        }
	                        return [3 /*break*/, 5];
	                    case 4:
	                        err_3 = _a.sent();
	                        throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED);
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return IidModel;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function base64ToArrayBuffer(base64String) {
	    var padding = '='.repeat((4 - base64String.length % 4) % 4);
	    var base64 = (base64String + padding)
	        .replace(/\-/g, '+')
	        .replace(/_/g, '/');
	    var rawData = atob(base64);
	    var outputArray = new Uint8Array(rawData.length);
	    for (var i = 0; i < rawData.length; ++i) {
	        outputArray[i] = rawData.charCodeAt(i);
	    }
	    return outputArray;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var OLD_DB_NAME = 'undefined';
	var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';
	function handleDb(db) {
	    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
	        // We found a database with the name 'undefined', but our expected object
	        // store isn't defined.
	        return;
	    }
	    var transaction = db.transaction(OLD_OBJECT_STORE_NAME);
	    var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);
	    var iidModel = new IidModel();
	    var openCursorRequest = objectStore.openCursor();
	    openCursorRequest.onerror = function (event) {
	        // NOOP - Nothing we can do.
	        console.warn('Unable to cleanup old IDB.', event);
	    };
	    openCursorRequest.onsuccess = function () {
	        var cursor = openCursorRequest.result;
	        if (cursor) {
	            // cursor.value contains the current record being iterated through
	            // this is where you'd do something with the result
	            var tokenDetails = cursor.value;
	            iidModel.deleteToken(tokenDetails.fcmSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet);
	            cursor.continue();
	        }
	        else {
	            db.close();
	            indexedDB.deleteDatabase(OLD_DB_NAME);
	        }
	    };
	}
	function cleanV1() {
	    var request = indexedDB.open(OLD_DB_NAME);
	    request.onerror = function (event) {
	        // NOOP - Nothing we can do.
	    };
	    request.onsuccess = function (event) {
	        var db = request.result;
	        handleDb(db);
	    };
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DbInterface = /** @class */ (function () {
	    function DbInterface() {
	        this.dbPromise = null;
	    }
	    /** Gets record(s) from the objectStore that match the given key. */
	    DbInterface.prototype.get = function (key) {
	        return this.createTransaction(function (objectStore) { return objectStore.get(key); });
	    };
	    /** Gets record(s) from the objectStore that match the given index. */
	    DbInterface.prototype.getIndex = function (index, key) {
	        function runRequest(objectStore) {
	            var idbIndex = objectStore.index(index);
	            return idbIndex.get(key);
	        }
	        return this.createTransaction(runRequest);
	    };
	    /** Assigns or overwrites the record for the given value. */
	    // tslint:disable-next-line:no-any IndexedDB values are of type "any"
	    DbInterface.prototype.put = function (value) {
	        return this.createTransaction(function (objectStore) { return objectStore.put(value); }, 'readwrite');
	    };
	    /** Deletes record(s) from the objectStore that match the given key. */
	    DbInterface.prototype.delete = function (key) {
	        return this.createTransaction(function (objectStore) { return objectStore.delete(key); }, 'readwrite');
	    };
	    /**
	     * Close the currently open database.
	     */
	    DbInterface.prototype.closeDatabase = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var db;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.dbPromise) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.dbPromise];
	                    case 1:
	                        db = _a.sent();
	                        db.close();
	                        this.dbPromise = null;
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Creates an IndexedDB Transaction and passes its objectStore to the
	     * runRequest function, which runs the database request.
	     *
	     * @return Promise that resolves with the result of the runRequest function
	     */
	    DbInterface.prototype.createTransaction = function (runRequest, mode) {
	        if (mode === void 0) { mode = 'readonly'; }
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var db, transaction, request, result;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getDb()];
	                    case 1:
	                        db = _a.sent();
	                        transaction = db.transaction(this.objectStoreName, mode);
	                        request = transaction.objectStore(this.objectStoreName);
	                        return [4 /*yield*/, promisify(runRequest(request))];
	                    case 2:
	                        result = _a.sent();
	                        return [2 /*return*/, new Promise(function (resolve, reject) {
	                                transaction.oncomplete = function () {
	                                    resolve(result);
	                                };
	                                transaction.onerror = function () {
	                                    reject(transaction.error);
	                                };
	                            })];
	                }
	            });
	        });
	    };
	    /** Gets the cached db connection or opens a new one. */
	    DbInterface.prototype.getDb = function () {
	        var _this = this;
	        if (!this.dbPromise) {
	            this.dbPromise = new Promise(function (resolve, reject) {
	                var request = indexedDB.open(_this.dbName, _this.dbVersion);
	                request.onsuccess = function () {
	                    resolve(request.result);
	                };
	                request.onerror = function () {
	                    _this.dbPromise = null;
	                    reject(request.error);
	                };
	                request.onupgradeneeded = function (event) { return _this.onDbUpgrade(request, event); };
	            });
	        }
	        return this.dbPromise;
	    };
	    return DbInterface;
	}());
	/** Promisifies an IDBRequest. Resolves with the IDBRequest's result. */
	function promisify(request) {
	    return new Promise(function (resolve, reject) {
	        request.onsuccess = function () {
	            resolve(request.result);
	        };
	        request.onerror = function () {
	            reject(request.error);
	        };
	    });
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var TokenDetailsModel = /** @class */ (function (_super) {
	    tslib_1.__extends(TokenDetailsModel, _super);
	    function TokenDetailsModel() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.dbName = 'fcm_token_details_db';
	        _this.dbVersion = 3;
	        _this.objectStoreName = 'fcm_token_object_Store';
	        return _this;
	    }
	    TokenDetailsModel.prototype.onDbUpgrade = function (request, event) {
	        var db = request.result;
	        // Lack of 'break' statements is intentional.
	        switch (event.oldVersion) {
	            case 0: {
	                // New IDB instance
	                var objectStore = db.createObjectStore(this.objectStoreName, {
	                    keyPath: 'swScope'
	                });
	                // Make sure the sender ID can be searched
	                objectStore.createIndex('fcmSenderId', 'fcmSenderId', {
	                    unique: false
	                });
	                objectStore.createIndex('fcmToken', 'fcmToken', { unique: true });
	            }
	            case 1: {
	                // Prior to version 2, we were using either 'fcm_token_details_db'
	                // or 'undefined' as the database name due to bug in the SDK
	                // So remove the old tokens and databases.
	                cleanV1();
	            }
	            case 2: {
	                var objectStore = request.transaction.objectStore(this.objectStoreName);
	                var cursorRequest_1 = objectStore.openCursor();
	                cursorRequest_1.onsuccess = function () {
	                    var cursor = cursorRequest_1.result;
	                    if (cursor) {
	                        var value = cursor.value;
	                        var newValue = tslib_1.__assign({}, value);
	                        if (!value.createTime) {
	                            newValue.createTime = Date.now();
	                        }
	                        if (typeof value.vapidKey === 'string') {
	                            newValue.vapidKey = base64ToArrayBuffer(value.vapidKey);
	                        }
	                        if (typeof value.auth === 'string') {
	                            newValue.auth = base64ToArrayBuffer(value.auth).buffer;
	                        }
	                        if (typeof value.auth === 'string') {
	                            newValue.p256dh = base64ToArrayBuffer(value.p256dh).buffer;
	                        }
	                        cursor.update(newValue);
	                        cursor.continue();
	                    }
	                };
	            }
	        }
	    };
	    /**
	     * Given a token, this method will look up the details in indexedDB.
	     */
	    TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (!fcmToken) {
	                    throw errorFactory.create(ERROR_CODES.BAD_TOKEN);
	                }
	                validateInputs({ fcmToken: fcmToken });
	                return [2 /*return*/, this.getIndex('fcmToken', fcmToken)];
	            });
	        });
	    };
	    /**
	     * Given a service worker scope, this method will look up the details in
	     * indexedDB.
	     * @return The details associated with that token.
	     */
	    TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (!swScope) {
	                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);
	                }
	                validateInputs({ swScope: swScope });
	                return [2 /*return*/, this.get(swScope)];
	            });
	        });
	    };
	    /**
	     * Save the details for the fcm token for re-use at a later date.
	     * @param input A plain js object containing args to save.
	     */
	    TokenDetailsModel.prototype.saveTokenDetails = function (tokenDetails) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (!tokenDetails.swScope) {
	                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);
	                }
	                if (!tokenDetails.vapidKey) {
	                    throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);
	                }
	                if (!tokenDetails.endpoint || !tokenDetails.auth || !tokenDetails.p256dh) {
	                    throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);
	                }
	                if (!tokenDetails.fcmSenderId) {
	                    throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);
	                }
	                if (!tokenDetails.fcmToken) {
	                    throw errorFactory.create(ERROR_CODES.BAD_TOKEN);
	                }
	                if (!tokenDetails.fcmPushSet) {
	                    throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);
	                }
	                validateInputs(tokenDetails);
	                return [2 /*return*/, this.put(tokenDetails)];
	            });
	        });
	    };
	    /**
	     * This method deletes details of the current FCM token.
	     * It's returning a promise in case we need to move to an async
	     * method for deleting at a later date.
	     *
	     * @return Resolves once the FCM token details have been deleted and returns
	     * the deleted details.
	     */
	    TokenDetailsModel.prototype.deleteToken = function (token) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var details;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (typeof token !== 'string' || token.length === 0) {
	                            return [2 /*return*/, Promise.reject(errorFactory.create(ERROR_CODES.INVALID_DELETE_TOKEN))];
	                        }
	                        return [4 /*yield*/, this.getTokenDetailsFromToken(token)];
	                    case 1:
	                        details = _a.sent();
	                        if (!details) {
	                            throw errorFactory.create(ERROR_CODES.DELETE_TOKEN_NOT_FOUND);
	                        }
	                        return [4 /*yield*/, this.delete(details.swScope)];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/, details];
	                }
	            });
	        });
	    };
	    return TokenDetailsModel;
	}(DbInterface));
	/**
	 * This method takes an object and will check for known arguments and
	 * validate the input.
	 * @return Promise that resolves if input is valid, rejects otherwise.
	 */
	function validateInputs(input) {
	    if (input.fcmToken) {
	        if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {
	            throw errorFactory.create(ERROR_CODES.BAD_TOKEN);
	        }
	    }
	    if (input.swScope) {
	        if (typeof input.swScope !== 'string' || input.swScope.length === 0) {
	            throw errorFactory.create(ERROR_CODES.BAD_SCOPE);
	        }
	    }
	    if (input.vapidKey) {
	        if (!(input.vapidKey instanceof Uint8Array) ||
	            input.vapidKey.length !== 65) {
	            throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);
	        }
	    }
	    if (input.endpoint) {
	        if (typeof input.endpoint !== 'string' || input.endpoint.length === 0) {
	            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);
	        }
	    }
	    if (input.auth) {
	        if (!(input.auth instanceof ArrayBuffer)) {
	            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);
	        }
	    }
	    if (input.p256dh) {
	        if (!(input.p256dh instanceof ArrayBuffer)) {
	            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);
	        }
	    }
	    if (input.fcmSenderId) {
	        if (typeof input.fcmSenderId !== 'string' ||
	            input.fcmSenderId.length === 0) {
	            throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);
	        }
	    }
	    if (input.fcmPushSet) {
	        if (typeof input.fcmPushSet !== 'string' || input.fcmPushSet.length === 0) {
	            throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);
	        }
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;
	var VapidDetailsModel = /** @class */ (function (_super) {
	    tslib_1.__extends(VapidDetailsModel, _super);
	    function VapidDetailsModel() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.dbName = 'fcm_vapid_details_db';
	        _this.dbVersion = 1;
	        _this.objectStoreName = 'fcm_vapid_object_Store';
	        return _this;
	    }
	    VapidDetailsModel.prototype.onDbUpgrade = function (request) {
	        var db = request.result;
	        db.createObjectStore(this.objectStoreName, { keyPath: 'swScope' });
	    };
	    /**
	     * Given a service worker scope, this method will look up the vapid key
	     * in indexedDB.
	     */
	    VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var result;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (typeof swScope !== 'string' || swScope.length === 0) {
	                            throw errorFactory.create(ERROR_CODES.BAD_SCOPE);
	                        }
	                        return [4 /*yield*/, this.get(swScope)];
	                    case 1:
	                        result = _a.sent();
	                        return [2 /*return*/, result ? result.vapidKey : undefined];
	                }
	            });
	        });
	    };
	    /**
	     * Save a vapid key against a swScope for later date.
	     */
	    VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var details;
	            return tslib_1.__generator(this, function (_a) {
	                if (typeof swScope !== 'string' || swScope.length === 0) {
	                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);
	                }
	                if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {
	                    throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);
	                }
	                details = {
	                    swScope: swScope,
	                    vapidKey: vapidKey
	                };
	                return [2 /*return*/, this.put(details)];
	            });
	        });
	    };
	    /**
	     * This method deletes details of the current FCM VAPID key for a SW scope.
	     * Resolves once the scope/vapid details have been deleted and returns the
	     * deleted vapid key.
	     */
	    VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var vapidKey;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getVapidFromSWScope(swScope)];
	                    case 1:
	                        vapidKey = _a.sent();
	                        if (!vapidKey) {
	                            throw errorFactory.create(ERROR_CODES.DELETE_SCOPE_NOT_FOUND);
	                        }
	                        return [4 /*yield*/, this.delete(swScope)];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/, vapidKey];
	                }
	            });
	        });
	    };
	    return VapidDetailsModel;
	}(DbInterface));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var SENDER_ID_OPTION_NAME = 'messagingSenderId';
	// Database cache should be invalidated once a week.
	var TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days
	var BaseController = /** @class */ (function () {
	    /**
	     * An interface of the Messaging Service API
	     */
	    function BaseController(app) {
	        var _this = this;
	        if (!app.options[SENDER_ID_OPTION_NAME] ||
	            typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {
	            throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);
	        }
	        this.messagingSenderId = app.options[SENDER_ID_OPTION_NAME];
	        this.tokenDetailsModel = new TokenDetailsModel();
	        this.vapidDetailsModel = new VapidDetailsModel();
	        this.iidModel = new IidModel();
	        this.app = app;
	        this.INTERNAL = {
	            delete: function () { return _this.delete(); }
	        };
	    }
	    /**
	     * @export
	     */
	    BaseController.prototype.getToken = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var currentPermission, swReg, publicVapidKey, pushSubscription, tokenDetails;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        currentPermission = this.getNotificationPermission_();
	                        if (currentPermission === 'denied') {
	                            throw errorFactory.create(ERROR_CODES.NOTIFICATIONS_BLOCKED);
	                        }
	                        else if (currentPermission !== 'granted') {
	                            // We must wait for permission to be granted
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this.getSWRegistration_()];
	                    case 1:
	                        swReg = _a.sent();
	                        return [4 /*yield*/, this.getPublicVapidKey_()];
	                    case 2:
	                        publicVapidKey = _a.sent();
	                        return [4 /*yield*/, this.getPushSubscription(swReg, publicVapidKey)];
	                    case 3:
	                        pushSubscription = _a.sent();
	                        return [4 /*yield*/, this.tokenDetailsModel.getTokenDetailsFromSWScope(swReg.scope)];
	                    case 4:
	                        tokenDetails = _a.sent();
	                        if (tokenDetails) {
	                            return [2 /*return*/, this.manageExistingToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];
	                        }
	                        return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];
	                }
	            });
	        });
	    };
	    /**
	     * manageExistingToken is triggered if there's an existing FCM token in the
	     * database and it can take 3 different actions:
	     * 1) Retrieve the existing FCM token from the database.
	     * 2) If VAPID details have changed: Delete the existing token and create a
	     * new one with the new VAPID key.
	     * 3) If the database cache is invalidated: Send a request to FCM to update
	     * the token, and to check if the token is still valid on FCM-side.
	     */
	    BaseController.prototype.manageExistingToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var isTokenValid, now;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        isTokenValid = isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails);
	                        if (isTokenValid) {
	                            now = Date.now();
	                            if (now < tokenDetails.createTime + TOKEN_EXPIRATION_MILLIS) {
	                                return [2 /*return*/, tokenDetails.fcmToken];
	                            }
	                            else {
	                                return [2 /*return*/, this.updateToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];
	                            }
	                        }
	                        // If the token is no longer valid (for example if the VAPID details
	                        // have changed), delete the existing token from the FCM client and server
	                        // database. No need to unsubscribe from the Service Worker as we have a
	                        // good push subscription that we'd like to use in getNewToken.
	                        return [4 /*yield*/, this.deleteTokenFromDB(tokenDetails.fcmToken)];
	                    case 1:
	                        // If the token is no longer valid (for example if the VAPID details
	                        // have changed), delete the existing token from the FCM client and server
	                        // database. No need to unsubscribe from the Service Worker as we have a
	                        // good push subscription that we'd like to use in getNewToken.
	                        _a.sent();
	                        return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];
	                }
	            });
	        });
	    };
	    BaseController.prototype.updateToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var updatedToken, allDetails, e_1;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 4, , 6]);
	                        return [4 /*yield*/, this.iidModel.updateToken(this.messagingSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet, pushSubscription, publicVapidKey)];
	                    case 1:
	                        updatedToken = _a.sent();
	                        allDetails = {
	                            swScope: swReg.scope,
	                            vapidKey: publicVapidKey,
	                            fcmSenderId: this.messagingSenderId,
	                            fcmToken: updatedToken,
	                            fcmPushSet: tokenDetails.fcmPushSet,
	                            createTime: Date.now(),
	                            endpoint: pushSubscription.endpoint,
	                            auth: pushSubscription.getKey('auth'),
	                            p256dh: pushSubscription.getKey('p256dh')
	                        };
	                        return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/, updatedToken];
	                    case 4:
	                        e_1 = _a.sent();
	                        return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];
	                    case 5:
	                        _a.sent();
	                        throw e_1;
	                    case 6: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    BaseController.prototype.getNewToken = function (swReg, pushSubscription, publicVapidKey) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var tokenDetails, allDetails;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.iidModel.getToken(this.messagingSenderId, pushSubscription, publicVapidKey)];
	                    case 1:
	                        tokenDetails = _a.sent();
	                        allDetails = {
	                            swScope: swReg.scope,
	                            vapidKey: publicVapidKey,
	                            fcmSenderId: this.messagingSenderId,
	                            fcmToken: tokenDetails.token,
	                            fcmPushSet: tokenDetails.pushSet,
	                            createTime: Date.now(),
	                            endpoint: pushSubscription.endpoint,
	                            auth: pushSubscription.getKey('auth'),
	                            p256dh: pushSubscription.getKey('p256dh')
	                        };
	                        return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];
	                    case 2:
	                        _a.sent();
	                        return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];
	                    case 3:
	                        _a.sent();
	                        return [2 /*return*/, tokenDetails.token];
	                }
	            });
	        });
	    };
	    /**
	     * This method deletes tokens that the token manager looks after,
	     * unsubscribes the token from FCM  and then unregisters the push
	     * subscription if it exists. It returns a promise that indicates
	     * whether or not the unsubscribe request was processed successfully.
	     */
	    BaseController.prototype.deleteToken = function (token) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var registration, pushSubscription;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: 
	                    // Delete the token details from the database.
	                    return [4 /*yield*/, this.deleteTokenFromDB(token)];
	                    case 1:
	                        // Delete the token details from the database.
	                        _a.sent();
	                        return [4 /*yield*/, this.getSWRegistration_()];
	                    case 2:
	                        registration = _a.sent();
	                        if (!registration) return [3 /*break*/, 4];
	                        return [4 /*yield*/, registration.pushManager.getSubscription()];
	                    case 3:
	                        pushSubscription = _a.sent();
	                        if (pushSubscription) {
	                            return [2 /*return*/, pushSubscription.unsubscribe()];
	                        }
	                        _a.label = 4;
	                    case 4: 
	                    // If there's no SW, consider it a success.
	                    return [2 /*return*/, true];
	                }
	            });
	        });
	    };
	    /**
	     * This method will delete the token from the client database, and make a
	     * call to FCM to remove it from the server DB. Does not temper with the
	     * push subscription.
	     */
	    BaseController.prototype.deleteTokenFromDB = function (token) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var details;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.tokenDetailsModel.deleteToken(token)];
	                    case 1:
	                        details = _a.sent();
	                        return [4 /*yield*/, this.iidModel.deleteToken(details.fcmSenderId, details.fcmToken, details.fcmPushSet)];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Gets a PushSubscription for the current user.
	     */
	    BaseController.prototype.getPushSubscription = function (swRegistration, publicVapidKey) {
	        return swRegistration.pushManager.getSubscription().then(function (subscription) {
	            if (subscription) {
	                return subscription;
	            }
	            return swRegistration.pushManager.subscribe({
	                userVisibleOnly: true,
	                applicationServerKey: publicVapidKey
	            });
	        });
	    };
	    //
	    // The following methods should only be available in the window.
	    //
	    BaseController.prototype.requestPermission = function () {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);
	    };
	    BaseController.prototype.useServiceWorker = function (registration) {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);
	    };
	    BaseController.prototype.usePublicVapidKey = function (b64PublicKey) {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);
	    };
	    BaseController.prototype.onMessage = function (nextOrObserver, error, completed) {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);
	    };
	    BaseController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);
	    };
	    //
	    // The following methods are used by the service worker only.
	    //
	    BaseController.prototype.setBackgroundMessageHandler = function (callback) {
	        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_SW);
	    };
	    //
	    // The following methods are used by the service themselves and not exposed
	    // publicly or not expected to be used by developers.
	    //
	    /**
	     * This method is required to adhere to the Firebase interface.
	     * It closes any currently open indexdb database connections.
	     */
	    BaseController.prototype.delete = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.all([
	                            this.tokenDetailsModel.closeDatabase(),
	                            this.vapidDetailsModel.closeDatabase()
	                        ])];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Returns the current Notification Permission state.
	     */
	    BaseController.prototype.getNotificationPermission_ = function () {
	        // TODO: Remove the cast when this issue is fixed:
	        // https://github.com/Microsoft/TypeScript/issues/14701
	        // tslint:disable-next-line no-any
	        return Notification.permission;
	    };
	    BaseController.prototype.getTokenDetailsModel = function () {
	        return this.tokenDetailsModel;
	    };
	    BaseController.prototype.getVapidDetailsModel = function () {
	        return this.vapidDetailsModel;
	    };
	    // Visible for testing
	    // TODO: make protected
	    BaseController.prototype.getIidModel = function () {
	        return this.iidModel;
	    };
	    return BaseController;
	}());
	/**
	 * Checks if the tokenDetails match the details provided in the clients.
	 */
	function isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails) {
	    if (!tokenDetails.vapidKey ||
	        !isArrayBufferEqual(publicVapidKey.buffer, tokenDetails.vapidKey.buffer)) {
	        return false;
	    }
	    var isEndpointEqual = pushSubscription.endpoint === tokenDetails.endpoint;
	    var isAuthEqual = isArrayBufferEqual(pushSubscription.getKey('auth'), tokenDetails.auth);
	    var isP256dhEqual = isArrayBufferEqual(pushSubscription.getKey('p256dh'), tokenDetails.p256dh);
	    return isEndpointEqual && isAuthEqual && isP256dhEqual;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var FCM_MSG = 'FCM_MSG';
	var SwController = /** @class */ (function (_super) {
	    tslib_1.__extends(SwController, _super);
	    function SwController(app) {
	        var _this = _super.call(this, app) || this;
	        _this.bgMessageHandler = null;
	        self.addEventListener('push', function (e) {
	            _this.onPush(e);
	        });
	        self.addEventListener('pushsubscriptionchange', function (e) {
	            _this.onSubChange(e);
	        });
	        self.addEventListener('notificationclick', function (e) {
	            _this.onNotificationClick(e);
	        });
	        return _this;
	    }
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.onPush = function (event) {
	        event.waitUntil(this.onPush_(event));
	    };
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.onSubChange = function (event) {
	        event.waitUntil(this.onSubChange_(event));
	    };
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.onNotificationClick = function (event) {
	        event.waitUntil(this.onNotificationClick_(event));
	    };
	    /**
	     * A handler for push events that shows notifications based on the content of
	     * the payload.
	     *
	     * The payload must be a JSON-encoded Object with a `notification` key. The
	     * value of the `notification` property will be used as the NotificationOptions
	     * object passed to showNotification. Additionally, the `title` property of the
	     * notification object will be used as the title.
	     *
	     * If there is no notification data in the payload then no notification will be
	     * shown.
	     */
	    SwController.prototype.onPush_ = function (event) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var msgPayload, hasVisibleClients, notificationDetails, notificationTitle, reg, actions, maxActions;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!event.data) {
	                            return [2 /*return*/];
	                        }
	                        try {
	                            msgPayload = event.data.json();
	                        }
	                        catch (err) {
	                            // Not JSON so not an FCM message
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, this.hasVisibleClients_()];
	                    case 1:
	                        hasVisibleClients = _a.sent();
	                        if (hasVisibleClients) {
	                            // App in foreground. Send to page.
	                            return [2 /*return*/, this.sendMessageToWindowClients_(msgPayload)];
	                        }
	                        notificationDetails = this.getNotificationData_(msgPayload);
	                        if (!notificationDetails) return [3 /*break*/, 3];
	                        notificationTitle = notificationDetails.title || '';
	                        return [4 /*yield*/, this.getSWRegistration_()];
	                    case 2:
	                        reg = _a.sent();
	                        actions = notificationDetails.actions;
	                        maxActions = Notification.maxActions;
	                        // tslint:enable no-any
	                        if (actions && maxActions && actions.length > maxActions) {
	                            console.warn("This browser only supports " + maxActions + " actions." +
	                                "The remaining actions will not be displayed.");
	                        }
	                        return [2 /*return*/, reg.showNotification(notificationTitle, notificationDetails)];
	                    case 3:
	                        if (!this.bgMessageHandler) return [3 /*break*/, 5];
	                        return [4 /*yield*/, this.bgMessageHandler(msgPayload)];
	                    case 4:
	                        _a.sent();
	                        return [2 /*return*/];
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    SwController.prototype.onSubChange_ = function (event) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var registration, err_1, err_2, tokenDetailsModel, tokenDetails;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, this.getSWRegistration_()];
	                    case 1:
	                        registration = _a.sent();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        err_1 = _a.sent();
	                        throw errorFactory.create(ERROR_CODES.UNABLE_TO_RESUBSCRIBE, {
	                            message: err_1
	                        });
	                    case 3:
	                        _a.trys.push([3, 5, , 8]);
	                        return [4 /*yield*/, registration.pushManager.getSubscription()];
	                    case 4:
	                        _a.sent();
	                        return [3 /*break*/, 8];
	                    case 5:
	                        err_2 = _a.sent();
	                        tokenDetailsModel = this.getTokenDetailsModel();
	                        return [4 /*yield*/, tokenDetailsModel.getTokenDetailsFromSWScope(registration.scope)];
	                    case 6:
	                        tokenDetails = _a.sent();
	                        if (!tokenDetails) {
	                            // This should rarely occure, but could if indexedDB
	                            // is corrupted or wiped
	                            throw err_2;
	                        }
	                        // Attempt to delete the token if we know it's bad
	                        return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];
	                    case 7:
	                        // Attempt to delete the token if we know it's bad
	                        _a.sent();
	                        throw err_2;
	                    case 8: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    SwController.prototype.onNotificationClick_ = function (event) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var msgPayload, link, windowClient, internalMsg;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!event.notification ||
	                            !event.notification.data ||
	                            !event.notification.data[FCM_MSG]) {
	                            // Not an FCM notification, do nothing.
	                            return [2 /*return*/];
	                        }
	                        else if (event.action) {
	                            // User clicked on an action button.
	                            // This will allow devs to act on action button clicks by using a custom
	                            // onNotificationClick listener that they define.
	                            return [2 /*return*/];
	                        }
	                        // Prevent other listeners from receiving the event
	                        event.stopImmediatePropagation();
	                        event.notification.close();
	                        msgPayload = event.notification.data[FCM_MSG];
	                        if (!msgPayload.notification) {
	                            // Nothing to do.
	                            return [2 /*return*/];
	                        }
	                        link = (msgPayload.fcmOptions && msgPayload.fcmOptions.link) ||
	                            msgPayload.notification.click_action;
	                        if (!link) {
	                            // Nothing to do.
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, this.getWindowClient_(link)];
	                    case 1:
	                        windowClient = _a.sent();
	                        if (!!windowClient) return [3 /*break*/, 3];
	                        return [4 /*yield*/, self.clients.openWindow(link)];
	                    case 2:
	                        // Unable to find window client so need to open one.
	                        windowClient = _a.sent();
	                        return [3 /*break*/, 5];
	                    case 3: return [4 /*yield*/, windowClient.focus()];
	                    case 4:
	                        windowClient = _a.sent();
	                        _a.label = 5;
	                    case 5:
	                        if (!windowClient) {
	                            // Window Client will not be returned if it's for a third party origin.
	                            return [2 /*return*/];
	                        }
	                        // Delete notification and fcmOptions data from payload before sending to
	                        // the page.
	                        delete msgPayload.notification;
	                        delete msgPayload.fcmOptions;
	                        internalMsg = createNewMsg(MessageType.NOTIFICATION_CLICKED, msgPayload);
	                        // Attempt to send a message to the client to handle the data
	                        // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728
	                        return [2 /*return*/, this.attemptToMessageClient_(windowClient, internalMsg)];
	                }
	            });
	        });
	    };
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.getNotificationData_ = function (msgPayload) {
	        if (!msgPayload) {
	            return;
	        }
	        if (typeof msgPayload.notification !== 'object') {
	            return;
	        }
	        var notificationInformation = tslib_1.__assign({}, msgPayload.notification);
	        // Put the message payload under FCM_MSG name so we can identify the
	        // notification as being an FCM notification vs a notification from
	        // somewhere else (i.e. normal web push or developer generated
	        // notification).
	        notificationInformation.data = tslib_1.__assign({}, msgPayload.notification.data, (_a = {}, _a[FCM_MSG] = msgPayload, _a));
	        return notificationInformation;
	        var _a;
	    };
	    /**
	     * Calling setBackgroundMessageHandler will opt in to some specific
	     * behaviours.
	     * 1.) If a notification doesn't need to be shown due to a window already
	     * being visible, then push messages will be sent to the page.
	     * 2.) If a notification needs to be shown, and the message contains no
	     * notification data this method will be called
	     * and the promise it returns will be passed to event.waitUntil.
	     * If you do not set this callback then all push messages will let and the
	     * developer can handle them in a their own 'push' event callback
	     *
	     * @param callback The callback to be called when a push message is received
	     * and a notification must be shown. The callback will be given the data from
	     * the push message.
	     */
	    SwController.prototype.setBackgroundMessageHandler = function (callback) {
	        if (!callback || typeof callback !== 'function') {
	            throw errorFactory.create(ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED);
	        }
	        this.bgMessageHandler = callback;
	    };
	    /**
	     * @param url The URL to look for when focusing a client.
	     * @return Returns an existing window client or a newly opened WindowClient.
	     */
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.getWindowClient_ = function (url) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var parsedURL, clientList, suitableClient, i, parsedClientUrl;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        parsedURL = new URL(url, self.location.href).href;
	                        return [4 /*yield*/, getClientList()];
	                    case 1:
	                        clientList = _a.sent();
	                        suitableClient = null;
	                        for (i = 0; i < clientList.length; i++) {
	                            parsedClientUrl = new URL(clientList[i].url, self.location.href)
	                                .href;
	                            if (parsedClientUrl === parsedURL) {
	                                suitableClient = clientList[i];
	                                break;
	                            }
	                        }
	                        return [2 /*return*/, suitableClient];
	                }
	            });
	        });
	    };
	    /**
	     * This message will attempt to send the message to a window client.
	     * @param client The WindowClient to send the message to.
	     * @param message The message to send to the client.
	     * @returns Returns a promise that resolves after sending the message. This
	     * does not guarantee that the message was successfully received.
	     */
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.attemptToMessageClient_ = function (client, message) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                // NOTE: This returns a promise in case this API is abstracted later on to
	                // do additional work
	                if (!client) {
	                    throw errorFactory.create(ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG);
	                }
	                client.postMessage(message);
	                return [2 /*return*/];
	            });
	        });
	    };
	    /**
	     * @returns If there is currently a visible WindowClient, this method will
	     * resolve to true, otherwise false.
	     */
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.hasVisibleClients_ = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var clientList;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, getClientList()];
	                    case 1:
	                        clientList = _a.sent();
	                        return [2 /*return*/, clientList.some(function (client) { return client.visibilityState === 'visible'; })];
	                }
	            });
	        });
	    };
	    /**
	     * @param msgPayload The data from the push event that should be sent to all
	     * available pages.
	     * @returns Returns a promise that resolves once the message has been sent to
	     * all WindowClients.
	     */
	    // Visible for testing
	    // TODO: Make private
	    SwController.prototype.sendMessageToWindowClients_ = function (msgPayload) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            var clientList, internalMsg;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, getClientList()];
	                    case 1:
	                        clientList = _a.sent();
	                        internalMsg = createNewMsg(MessageType.PUSH_MSG_RECEIVED, msgPayload);
	                        return [4 /*yield*/, Promise.all(clientList.map(function (client) {
	                                return _this.attemptToMessageClient_(client, internalMsg);
	                            }))];
	                    case 2:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * This will register the default service worker and return the registration.
	     * @return he service worker registration to be used for the push service.
	     */
	    SwController.prototype.getSWRegistration_ = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, self.registration];
	            });
	        });
	    };
	    /**
	     * This will return the default VAPID key or the uint8array version of the
	     * public VAPID key provided by the developer.
	     */
	    SwController.prototype.getPublicVapidKey_ = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var swReg, vapidKeyFromDatabase;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.getSWRegistration_()];
	                    case 1:
	                        swReg = _a.sent();
	                        if (!swReg) {
	                            throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);
	                        }
	                        return [4 /*yield*/, this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope)];
	                    case 2:
	                        vapidKeyFromDatabase = _a.sent();
	                        if (vapidKeyFromDatabase == null) {
	                            return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];
	                        }
	                        return [2 /*return*/, vapidKeyFromDatabase];
	                }
	            });
	        });
	    };
	    return SwController;
	}(BaseController));
	function getClientList() {
	    return self.clients.matchAll({
	        type: 'window',
	        includeUncontrolled: true
	        // TS doesn't know that "type: 'window'" means it'll return WindowClient[]
	    });
	}
	function createNewMsg(msgType, msgData) {
	    return _a = {}, _a[MessageParameter.TYPE_OF_MSG] = msgType, _a[MessageParameter.DATA] = msgData, _a;
	    var _a;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';
	var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var WindowController = /** @class */ (function (_super) {
	    tslib_1.__extends(WindowController, _super);
	    /**
	     * A service that provides a MessagingService instance.
	     */
	    function WindowController(app) {
	        var _this = _super.call(this, app) || this;
	        _this.registrationToUse = null;
	        _this.publicVapidKeyToUse = null;
	        _this.manifestCheckPromise = null;
	        _this.messageObserver = null;
	        // @ts-ignore: Unused variable error, this is not implemented yet.
	        _this.tokenRefreshObserver = null;
	        _this.onMessageInternal = util.createSubscribe(function (observer) {
	            _this.messageObserver = observer;
	        });
	        _this.onTokenRefreshInternal = util.createSubscribe(function (observer) {
	            _this.tokenRefreshObserver = observer;
	        });
	        _this.setupSWMessageListener_();
	        return _this;
	    }
	    /**
	     * This method returns an FCM token if it can be generated.
	     * The return promise will reject if the browser doesn't support
	     * FCM, if permission is denied for notifications or it's not
	     * possible to generate a token.
	     *
	     * @return Returns a promise that resolves to an FCM token or null if
	     * permission isn't granted.
	     */
	    WindowController.prototype.getToken = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.manifestCheckPromise) {
	                            this.manifestCheckPromise = manifestCheck();
	                        }
	                        return [4 /*yield*/, this.manifestCheckPromise];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, _super.prototype.getToken.call(this)];
	                }
	            });
	        });
	    };
	    /**
	     * Request permission if it is not currently granted
	     *
	     * @return Resolves if the permission was granted, otherwise rejects
	     */
	    WindowController.prototype.requestPermission = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var permissionResult;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.getNotificationPermission_() === 'granted') {
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, Notification.requestPermission()];
	                    case 1:
	                        permissionResult = _a.sent();
	                        if (permissionResult === 'granted') {
	                            return [2 /*return*/];
	                        }
	                        else if (permissionResult === 'denied') {
	                            throw errorFactory.create(ERROR_CODES.PERMISSION_BLOCKED);
	                        }
	                        else {
	                            throw errorFactory.create(ERROR_CODES.PERMISSION_DEFAULT);
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * This method allows a developer to override the default service worker and
	     * instead use a custom service worker.
	     *
	     * @param registration The service worker registration that should be used to
	     * receive the push messages.
	     */
	    WindowController.prototype.useServiceWorker = function (registration) {
	        if (!(registration instanceof ServiceWorkerRegistration)) {
	            throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);
	        }
	        if (this.registrationToUse != null) {
	            throw errorFactory.create(ERROR_CODES.USE_SW_BEFORE_GET_TOKEN);
	        }
	        this.registrationToUse = registration;
	    };
	    /**
	     * This method allows a developer to override the default vapid key
	     * and instead use a custom VAPID public key.
	     *
	     * @param publicKey A URL safe base64 encoded string.
	     */
	    WindowController.prototype.usePublicVapidKey = function (publicKey) {
	        if (typeof publicKey !== 'string') {
	            throw errorFactory.create(ERROR_CODES.INVALID_PUBLIC_VAPID_KEY);
	        }
	        if (this.publicVapidKeyToUse != null) {
	            throw errorFactory.create(ERROR_CODES.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);
	        }
	        var parsedKey = base64ToArrayBuffer(publicKey);
	        if (parsedKey.length !== 65) {
	            throw errorFactory.create(ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED);
	        }
	        this.publicVapidKeyToUse = parsedKey;
	    };
	    /**
	     * @export
	     * @param nextOrObserver An observer object or a function triggered on
	     * message.
	     * @param error A function triggered on message error.
	     * @param completed function triggered when the observer is removed.
	     * @return The unsubscribe function for the observer.
	     */
	    WindowController.prototype.onMessage = function (nextOrObserver, error, completed) {
	        if (typeof nextOrObserver === 'function') {
	            return this.onMessageInternal(nextOrObserver, error, completed);
	        }
	        else {
	            return this.onMessageInternal(nextOrObserver);
	        }
	    };
	    /**
	     * @param nextOrObserver An observer object or a function triggered on token
	     * refresh.
	     * @param error A function triggered on token refresh error.
	     * @param completed function triggered when the observer is removed.
	     * @return The unsubscribe function for the observer.
	     */
	    WindowController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {
	        if (typeof nextOrObserver === 'function') {
	            return this.onTokenRefreshInternal(nextOrObserver, error, completed);
	        }
	        else {
	            return this.onTokenRefreshInternal(nextOrObserver);
	        }
	    };
	    /**
	     * Given a registration, wait for the service worker it relates to
	     * become activer
	     * @param registration Registration to wait for service worker to become active
	     * @return Wait for service worker registration to become active
	     */
	    // Visible for testing
	    // TODO: Make private
	    WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {
	        var serviceWorker = registration.installing || registration.waiting || registration.active;
	        return new Promise(function (resolve, reject) {
	            if (!serviceWorker) {
	                // This is a rare scenario but has occured in firefox
	                reject(errorFactory.create(ERROR_CODES.NO_SW_IN_REG));
	                return;
	            }
	            // Because the Promise function is called on next tick there is a
	            // small chance that the worker became active or redundant already.
	            if (serviceWorker.state === 'activated') {
	                resolve(registration);
	                return;
	            }
	            if (serviceWorker.state === 'redundant') {
	                reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));
	                return;
	            }
	            var stateChangeListener = function () {
	                if (serviceWorker.state === 'activated') {
	                    resolve(registration);
	                }
	                else if (serviceWorker.state === 'redundant') {
	                    reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));
	                }
	                else {
	                    // Return early and wait to next state change
	                    return;
	                }
	                serviceWorker.removeEventListener('statechange', stateChangeListener);
	            };
	            serviceWorker.addEventListener('statechange', stateChangeListener);
	        });
	    };
	    /**
	     * This will register the default service worker and return the registration
	     * @return The service worker registration to be used for the push service.
	     */
	    WindowController.prototype.getSWRegistration_ = function () {
	        var _this = this;
	        if (this.registrationToUse) {
	            return this.waitForRegistrationToActivate_(this.registrationToUse);
	        }
	        // Make the registration null so we know useServiceWorker will not
	        // use a new service worker as registrationToUse is no longer undefined
	        this.registrationToUse = null;
	        return navigator.serviceWorker
	            .register(DEFAULT_SW_PATH, {
	            scope: DEFAULT_SW_SCOPE
	        })
	            .catch(function (err) {
	            throw errorFactory.create(ERROR_CODES.FAILED_DEFAULT_REGISTRATION, {
	                browserErrorMessage: err.message
	            });
	        })
	            .then(function (registration) {
	            return _this.waitForRegistrationToActivate_(registration).then(function () {
	                _this.registrationToUse = registration;
	                // We update after activation due to an issue with Firefox v49 where
	                // a race condition occassionally causes the service work to not
	                // install
	                registration.update();
	                return registration;
	            });
	        });
	    };
	    /**
	     * This will return the default VAPID key or the uint8array version of the public VAPID key
	     * provided by the developer.
	     */
	    WindowController.prototype.getPublicVapidKey_ = function () {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                if (this.publicVapidKeyToUse) {
	                    return [2 /*return*/, this.publicVapidKeyToUse];
	                }
	                return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];
	            });
	        });
	    };
	    /**
	     * This method will set up a message listener to handle
	     * events from the service worker that should trigger
	     * events in the page.
	     */
	    // Visible for testing
	    // TODO: Make private
	    WindowController.prototype.setupSWMessageListener_ = function () {
	        var _this = this;
	        navigator.serviceWorker.addEventListener('message', function (event) {
	            if (!event.data || !event.data[MessageParameter.TYPE_OF_MSG]) {
	                // Not a message from FCM
	                return;
	            }
	            var workerPageMessage = event.data;
	            switch (workerPageMessage[MessageParameter.TYPE_OF_MSG]) {
	                case MessageType.PUSH_MSG_RECEIVED:
	                case MessageType.NOTIFICATION_CLICKED:
	                    var pushMessage = workerPageMessage[MessageParameter.DATA];
	                    if (_this.messageObserver) {
	                        _this.messageObserver.next(pushMessage);
	                    }
	                    break;
	                default:
	                    // Noop.
	                    break;
	            }
	        }, false);
	    };
	    return WindowController;
	}(BaseController));
	/**
	 * The method checks that a manifest is defined and has the correct GCM
	 * sender ID.
	 * @return Returns a promise that resolves if the manifest matches
	 * our required sender ID
	 */
	// Exported for testing
	function manifestCheck() {
	    return tslib_1.__awaiter(this, void 0, void 0, function () {
	        var manifestTag, manifestContent, response, e_1;
	        return tslib_1.__generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    manifestTag = document.querySelector('link[rel="manifest"]');
	                    if (!manifestTag) {
	                        return [2 /*return*/];
	                    }
	                    _a.label = 1;
	                case 1:
	                    _a.trys.push([1, 4, , 5]);
	                    return [4 /*yield*/, fetch(manifestTag.href)];
	                case 2:
	                    response = _a.sent();
	                    return [4 /*yield*/, response.json()];
	                case 3:
	                    manifestContent = _a.sent();
	                    return [3 /*break*/, 5];
	                case 4:
	                    e_1 = _a.sent();
	                    // If the download or parsing fails allow check.
	                    // We only want to error if we KNOW that the gcm_sender_id is incorrect.
	                    return [2 /*return*/];
	                case 5:
	                    if (!manifestContent || !manifestContent.gcm_sender_id) {
	                        return [2 /*return*/];
	                    }
	                    if (manifestContent.gcm_sender_id !== '103953800507') {
	                        throw errorFactory.create(ERROR_CODES.INCORRECT_GCM_SENDER_ID);
	                    }
	                    return [2 /*return*/];
	            }
	        });
	    });
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerMessaging(instance) {
	    var messagingName = 'messaging';
	    var factoryMethod = function (app) {
	        if (!isSupported()) {
	            throw errorFactory.create(ERROR_CODES.UNSUPPORTED_BROWSER);
	        }
	        if (self && 'ServiceWorkerGlobalScope' in self) {
	            // Running in ServiceWorker context
	            return new SwController(app);
	        }
	        else {
	            // Assume we are in the window context.
	            return new WindowController(app);
	        }
	    };
	    var namespaceExports = {
	        isSupported: isSupported
	    };
	    instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);
	}
	registerMessaging(firebase);
	function isSupported() {
	    if (self && 'ServiceWorkerGlobalScope' in self) {
	        // Running in ServiceWorker context
	        return isSWControllerSupported();
	    }
	    else {
	        // Assume we are in the window context.
	        return isWindowControllerSupported();
	    }
	}
	/**
	 * Checks to see if the required APIs exist.
	 */
	function isWindowControllerSupported() {
	    return (navigator.cookieEnabled &&
	        'serviceWorker' in navigator &&
	        'PushManager' in window &&
	        'Notification' in window &&
	        'fetch' in window &&
	        ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
	        PushSubscription.prototype.hasOwnProperty('getKey'));
	}
	/**
	 * Checks to see if the required APIs exist within SW Context.
	 */
	function isSWControllerSupported() {
	    return ('PushManager' in self &&
	        'Notification' in self &&
	        ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
	        PushSubscription.prototype.hasOwnProperty('getKey'));
	}

	exports.registerMessaging = registerMessaging;
	exports.isSupported = isSupported;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var firebase = _interopDefault(__webpack_require__(22));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Constants used in the Firebase Storage library.
	 */
	/**
	 * Domain and scheme for API calls.
	 */
	var domainBase = 'https://firebasestorage.googleapis.com';
	/**
	 * Domain and scheme for object downloads.
	 */
	var downloadBase = 'https://firebasestorage.googleapis.com';
	/**
	 * Base URL for non-upload calls to the API.
	 */
	var apiBaseUrl = '/v0';
	/**
	 * Base URL for upload calls to the API.
	 */
	var apiUploadBaseUrl = '/v0';
	var configOption = 'storageBucket';
	/**
	 * 2 minutes
	 */
	var defaultMaxOperationRetryTime = 2 * 60 * 1000;
	/**
	 * 10 minutes
	 */
	var defaultMaxUploadRetryTime = 10 * 60 * 100;
	/**
	 * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
	 * enough for us to use it directly.
	 */
	var minSafeInteger = -9007199254740991;

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var FirebaseStorageError = /** @class */ (function () {
	    function FirebaseStorageError(code, message) {
	        this.code_ = prependCode(code);
	        this.message_ = 'Firebase Storage: ' + message;
	        this.serverResponse_ = null;
	        this.name_ = 'FirebaseError';
	    }
	    FirebaseStorageError.prototype.codeProp = function () {
	        return this.code;
	    };
	    FirebaseStorageError.prototype.codeEquals = function (code) {
	        return prependCode(code) === this.codeProp();
	    };
	    FirebaseStorageError.prototype.serverResponseProp = function () {
	        return this.serverResponse_;
	    };
	    FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
	        this.serverResponse_ = serverResponse;
	    };
	    Object.defineProperty(FirebaseStorageError.prototype, "name", {
	        get: function () {
	            return this.name_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseStorageError.prototype, "code", {
	        get: function () {
	            return this.code_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseStorageError.prototype, "message", {
	        get: function () {
	            return this.message_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
	        get: function () {
	            return this.serverResponse_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return FirebaseStorageError;
	}());
	var Code = {
	    // Shared between all platforms
	    UNKNOWN: 'unknown',
	    OBJECT_NOT_FOUND: 'object-not-found',
	    BUCKET_NOT_FOUND: 'bucket-not-found',
	    PROJECT_NOT_FOUND: 'project-not-found',
	    QUOTA_EXCEEDED: 'quota-exceeded',
	    UNAUTHENTICATED: 'unauthenticated',
	    UNAUTHORIZED: 'unauthorized',
	    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
	    INVALID_CHECKSUM: 'invalid-checksum',
	    CANCELED: 'canceled',
	    // JS specific
	    INVALID_EVENT_NAME: 'invalid-event-name',
	    INVALID_URL: 'invalid-url',
	    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
	    NO_DEFAULT_BUCKET: 'no-default-bucket',
	    CANNOT_SLICE_BLOB: 'cannot-slice-blob',
	    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
	    NO_DOWNLOAD_URL: 'no-download-url',
	    INVALID_ARGUMENT: 'invalid-argument',
	    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
	    APP_DELETED: 'app-deleted',
	    INVALID_ROOT_OPERATION: 'invalid-root-operation',
	    INVALID_FORMAT: 'invalid-format',
	    INTERNAL_ERROR: 'internal-error'
	};
	function prependCode(code) {
	    return 'storage/' + code;
	}
	function unknown() {
	    var message = 'An unknown error occurred, please check the error payload for ' +
	        'server response.';
	    return new FirebaseStorageError(Code.UNKNOWN, message);
	}
	function objectNotFound(path) {
	    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
	}
	function quotaExceeded(bucket) {
	    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" +
	        bucket +
	        "' exceeded, please view quota on " +
	        'https://firebase.google.com/pricing/.');
	}
	function unauthenticated() {
	    var message = 'User is not authenticated, please authenticate using Firebase ' +
	        'Authentication and try again.';
	    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
	}
	function unauthorized(path) {
	    return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
	}
	function retryLimitExceeded() {
	    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
	}
	function canceled() {
	    return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
	}
	function invalidUrl(url) {
	    return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
	}
	function invalidDefaultBucket(bucket) {
	    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
	}
	function cannotSliceBlob() {
	    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
	}
	function serverFileWrongSize() {
	    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
	}
	function noDownloadURL() {
	    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
	}
	function invalidArgument(index, fnName, message) {
	    return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
	}
	function invalidArgumentCount(argMin, argMax, fnName, real) {
	    var countPart;
	    var plural;
	    if (argMin === argMax) {
	        countPart = argMin;
	        plural = argMin === 1 ? 'argument' : 'arguments';
	    }
	    else {
	        countPart = 'between ' + argMin + ' and ' + argMax;
	        plural = 'arguments';
	    }
	    return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
	        fnName +
	        '`: Expected ' +
	        countPart +
	        ' ' +
	        plural +
	        ', received ' +
	        real +
	        '.');
	}
	function appDeleted() {
	    return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
	}
	/**
	 * @param name The name of the operation that was invalid.
	 */
	function invalidRootOperation(name) {
	    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" +
	        name +
	        "' cannot be performed on a root reference, create a non-root " +
	        "reference using child, such as .child('file.png').");
	}
	/**
	 * @param format The format that was not valid.
	 * @param message A message describing the format violation.
	 */
	function invalidFormat(format, message) {
	    return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
	}
	/**
	 * @param message A message describing the internal error.
	 */
	function internalError(message) {
	    throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var StringFormat = {
	    RAW: 'raw',
	    BASE64: 'base64',
	    BASE64URL: 'base64url',
	    DATA_URL: 'data_url'
	};
	function formatValidator(stringFormat) {
	    switch (stringFormat) {
	        case StringFormat.RAW:
	        case StringFormat.BASE64:
	        case StringFormat.BASE64URL:
	        case StringFormat.DATA_URL:
	            return;
	        default:
	            throw 'Expected one of the event types: [' +
	                StringFormat.RAW +
	                ', ' +
	                StringFormat.BASE64 +
	                ', ' +
	                StringFormat.BASE64URL +
	                ', ' +
	                StringFormat.DATA_URL +
	                '].';
	    }
	}
	/**
	 * @struct
	 */
	var StringData = /** @class */ (function () {
	    function StringData(data, opt_contentType) {
	        this.data = data;
	        this.contentType = opt_contentType || null;
	    }
	    return StringData;
	}());
	function dataFromString(format, string) {
	    switch (format) {
	        case StringFormat.RAW:
	            return new StringData(utf8Bytes_(string));
	        case StringFormat.BASE64:
	        case StringFormat.BASE64URL:
	            return new StringData(base64Bytes_(format, string));
	        case StringFormat.DATA_URL:
	            return new StringData(dataURLBytes_(string), dataURLContentType_(string));
	    }
	    // assert(false);
	    throw unknown();
	}
	function utf8Bytes_(string) {
	    var b = [];
	    for (var i = 0; i < string.length; i++) {
	        var c = string.charCodeAt(i);
	        if (c <= 127) {
	            b.push(c);
	        }
	        else {
	            if (c <= 2047) {
	                b.push(192 | (c >> 6), 128 | (c & 63));
	            }
	            else {
	                if ((c & 64512) == 55296) {
	                    // The start of a surrogate pair.
	                    var valid = i < string.length - 1 &&
	                        (string.charCodeAt(i + 1) & 64512) == 56320;
	                    if (!valid) {
	                        // The second surrogate wasn't there.
	                        b.push(239, 191, 189);
	                    }
	                    else {
	                        var hi = c;
	                        var lo = string.charCodeAt(++i);
	                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
	                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
	                    }
	                }
	                else {
	                    if ((c & 64512) == 56320) {
	                        // Invalid low surrogate.
	                        b.push(239, 191, 189);
	                    }
	                    else {
	                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
	                    }
	                }
	            }
	        }
	    }
	    return new Uint8Array(b);
	}
	function percentEncodedBytes_(string) {
	    var decoded;
	    try {
	        decoded = decodeURIComponent(string);
	    }
	    catch (e) {
	        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
	    }
	    return utf8Bytes_(decoded);
	}
	function base64Bytes_(format, string) {
	    switch (format) {
	        case StringFormat.BASE64: {
	            var hasMinus = string.indexOf('-') !== -1;
	            var hasUnder = string.indexOf('_') !== -1;
	            if (hasMinus || hasUnder) {
	                var invalidChar = hasMinus ? '-' : '_';
	                throw invalidFormat(format, "Invalid character '" +
	                    invalidChar +
	                    "' found: is it base64url encoded?");
	            }
	            break;
	        }
	        case StringFormat.BASE64URL: {
	            var hasPlus = string.indexOf('+') !== -1;
	            var hasSlash = string.indexOf('/') !== -1;
	            if (hasPlus || hasSlash) {
	                var invalidChar = hasPlus ? '+' : '/';
	                throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
	            }
	            string = string.replace(/-/g, '+').replace(/_/g, '/');
	            break;
	        }
	    }
	    var bytes;
	    try {
	        bytes = atob(string);
	    }
	    catch (e) {
	        throw invalidFormat(format, 'Invalid character found');
	    }
	    var array = new Uint8Array(bytes.length);
	    for (var i = 0; i < bytes.length; i++) {
	        array[i] = bytes.charCodeAt(i);
	    }
	    return array;
	}
	/**
	 * @struct
	 */
	var DataURLParts = /** @class */ (function () {
	    function DataURLParts(dataURL) {
	        this.base64 = false;
	        this.contentType = null;
	        var matches = dataURL.match(/^data:([^,]+)?,/);
	        if (matches === null) {
	            throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
	        }
	        var middle = matches[1] || null;
	        if (middle != null) {
	            this.base64 = endsWith(middle, ';base64');
	            this.contentType = this.base64
	                ? middle.substring(0, middle.length - ';base64'.length)
	                : middle;
	        }
	        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
	    }
	    return DataURLParts;
	}());
	function dataURLBytes_(string) {
	    var parts = new DataURLParts(string);
	    if (parts.base64) {
	        return base64Bytes_(StringFormat.BASE64, parts.rest);
	    }
	    else {
	        return percentEncodedBytes_(parts.rest);
	    }
	}
	function dataURLContentType_(string) {
	    var parts = new DataURLParts(string);
	    return parts.contentType;
	}
	function endsWith(s, end) {
	    var longEnough = s.length >= end.length;
	    if (!longEnough) {
	        return false;
	    }
	    return s.substring(s.length - end.length) === end;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var TaskEvent = {
	    /** Triggered whenever the task changes or progress is updated. */
	    STATE_CHANGED: 'state_changed'
	};
	var InternalTaskState = {
	    RUNNING: 'running',
	    PAUSING: 'pausing',
	    PAUSED: 'paused',
	    SUCCESS: 'success',
	    CANCELING: 'canceling',
	    CANCELED: 'canceled',
	    ERROR: 'error'
	};
	var TaskState = {
	    /** The task is currently transferring data. */
	    RUNNING: 'running',
	    /** The task was paused by the user. */
	    PAUSED: 'paused',
	    /** The task completed successfully. */
	    SUCCESS: 'success',
	    /** The task was canceled. */
	    CANCELED: 'canceled',
	    /** The task failed with an error. */
	    ERROR: 'error'
	};
	function taskStateFromInternalTaskState(state) {
	    switch (state) {
	        case InternalTaskState.RUNNING:
	        case InternalTaskState.PAUSING:
	        case InternalTaskState.CANCELING:
	            return TaskState.RUNNING;
	        case InternalTaskState.PAUSED:
	            return TaskState.PAUSED;
	        case InternalTaskState.SUCCESS:
	            return TaskState.SUCCESS;
	        case InternalTaskState.CANCELED:
	            return TaskState.CANCELED;
	        case InternalTaskState.ERROR:
	            return TaskState.ERROR;
	        default:
	            // TODO(andysoto): assert(false);
	            return TaskState.ERROR;
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Contains methods for working with objects.
	 */
	function contains(obj, prop) {
	    return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	function forEach(obj, f) {
	    for (var key in obj) {
	        if (contains(obj, key)) {
	            f(key, obj[key]);
	        }
	    }
	}
	function clone(obj) {
	    if (obj == null) {
	        return {};
	    }
	    var c = {};
	    forEach(obj, function (key, val) {
	        c[key] = val;
	    });
	    return c;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Implements the promise abstraction interface for external
	 * (public SDK) packaging, which just passes through to the firebase-app impl.
	 */
	/**
	 * @template T
	 * @param {function((function(T): void),
	 *                  (function(!Error): void))} resolver
	 */
	function make(resolver) {
	    return new Promise(resolver);
	}
	/**
	 * @template T
	 */
	function resolve(value) {
	    return Promise.resolve(value);
	}
	function reject(error) {
	    return Promise.reject(error);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @return False if the object is undefined or null, true otherwise.
	 */
	function isDef(p) {
	    return p != null;
	}
	function isJustDef(p) {
	    return p !== void 0;
	}
	function isFunction(p) {
	    return typeof p === 'function';
	}
	function isObject(p) {
	    return typeof p === 'object';
	}
	function isNonNullObject(p) {
	    return isObject(p) && p !== null;
	}
	function isNonArrayObject(p) {
	    return isObject(p) && !Array.isArray(p);
	}
	function isString(p) {
	    return typeof p === 'string' || p instanceof String;
	}
	function isNumber(p) {
	    return typeof p === 'number' || p instanceof Number;
	}
	function isNativeBlob(p) {
	    return isNativeBlobDefined() && p instanceof Blob;
	}
	function isNativeBlobDefined() {
	    return typeof Blob !== 'undefined';
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @enum{number}
	 */
	var ErrorCode;
	(function (ErrorCode) {
	    ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
	    ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
	    ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
	})(ErrorCode || (ErrorCode = {}));

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
	 * doesn't work in React Native on Android.
	 */
	var NetworkXhrIo = /** @class */ (function () {
	    function NetworkXhrIo() {
	        var _this = this;
	        this.sent_ = false;
	        this.xhr_ = new XMLHttpRequest();
	        this.errorCode_ = ErrorCode.NO_ERROR;
	        this.sendPromise_ = make(function (resolve$$1, reject$$1) {
	            _this.xhr_.addEventListener('abort', function (event) {
	                _this.errorCode_ = ErrorCode.ABORT;
	                resolve$$1(_this);
	            });
	            _this.xhr_.addEventListener('error', function (event) {
	                _this.errorCode_ = ErrorCode.NETWORK_ERROR;
	                resolve$$1(_this);
	            });
	            _this.xhr_.addEventListener('load', function (event) {
	                resolve$$1(_this);
	            });
	        });
	    }
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
	        var _this = this;
	        if (this.sent_) {
	            throw internalError('cannot .send() more than once');
	        }
	        this.sent_ = true;
	        this.xhr_.open(method, url, true);
	        if (isDef(opt_headers)) {
	            var headers = opt_headers;
	            forEach(headers, function (key, val) {
	                _this.xhr_.setRequestHeader(key, val.toString());
	            });
	        }
	        if (isDef(opt_body)) {
	            this.xhr_.send(opt_body);
	        }
	        else {
	            this.xhr_.send();
	        }
	        return this.sendPromise_;
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.getErrorCode = function () {
	        if (!this.sent_) {
	            throw internalError('cannot .getErrorCode() before sending');
	        }
	        return this.errorCode_;
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.getStatus = function () {
	        if (!this.sent_) {
	            throw internalError('cannot .getStatus() before sending');
	        }
	        try {
	            return this.xhr_.status;
	        }
	        catch (e) {
	            return -1;
	        }
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.getResponseText = function () {
	        if (!this.sent_) {
	            throw internalError('cannot .getResponseText() before sending');
	        }
	        return this.xhr_.responseText;
	    };
	    /**
	     * Aborts the request.
	     * @override
	     */
	    NetworkXhrIo.prototype.abort = function () {
	        this.xhr_.abort();
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.getResponseHeader = function (header) {
	        return this.xhr_.getResponseHeader(header);
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
	        if (isDef(this.xhr_.upload)) {
	            this.xhr_.upload.addEventListener('progress', listener);
	        }
	    };
	    /**
	     * @override
	     */
	    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
	        if (isDef(this.xhr_.upload)) {
	            this.xhr_.upload.removeEventListener('progress', listener);
	        }
	    };
	    return NetworkXhrIo;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Factory-like class for creating XhrIo instances.
	 */
	var XhrIoPool = /** @class */ (function () {
	    function XhrIoPool() {
	    }
	    XhrIoPool.prototype.createXhrIo = function () {
	        return new NetworkXhrIo();
	    };
	    return XhrIoPool;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns the Object resulting from parsing the given JSON, or null if the
	 * given string does not represent a JSON object.
	 */
	function jsonObjectOrNull(s) {
	    var obj;
	    try {
	        obj = JSON.parse(s);
	    }
	    catch (e) {
	        return null;
	    }
	    if (isNonArrayObject(obj)) {
	        return obj;
	    }
	    else {
	        return null;
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @struct
	 */
	var Location = /** @class */ (function () {
	    function Location(bucket, path) {
	        this.bucket = bucket;
	        this.path_ = path;
	    }
	    Object.defineProperty(Location.prototype, "path", {
	        get: function () {
	            return this.path_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Location.prototype.fullServerUrl = function () {
	        var encode = encodeURIComponent;
	        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
	    };
	    Location.prototype.bucketOnlyServerUrl = function () {
	        var encode = encodeURIComponent;
	        return '/b/' + encode(this.bucket) + '/o';
	    };
	    Location.makeFromBucketSpec = function (bucketString) {
	        var bucketLocation;
	        try {
	            bucketLocation = Location.makeFromUrl(bucketString);
	        }
	        catch (e) {
	            // Not valid URL, use as-is. This lets you put bare bucket names in
	            // config.
	            return new Location(bucketString, '');
	        }
	        if (bucketLocation.path === '') {
	            return bucketLocation;
	        }
	        else {
	            throw invalidDefaultBucket(bucketString);
	        }
	    };
	    Location.makeFromUrl = function (url) {
	        var location = null;
	        var bucketDomain = '([A-Za-z0-9.\\-_]+)';
	        function gsModify(loc) {
	            if (loc.path.charAt(loc.path.length - 1) === '/') {
	                loc.path_ = loc.path_.slice(0, -1);
	            }
	        }
	        var gsPath = '(/(.*))?$';
	        var path = '(/([^?#]*).*)?$';
	        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
	        var gsIndices = { bucket: 1, path: 3 };
	        function httpModify(loc) {
	            loc.path_ = decodeURIComponent(loc.path);
	        }
	        var version = 'v[A-Za-z0-9_]+';
	        var httpRegex = new RegExp('^https?://firebasestorage\\.googleapis\\.com/' +
	            version +
	            '/b/' +
	            bucketDomain +
	            '/o' +
	            path, 'i');
	        var httpIndices = { bucket: 1, path: 3 };
	        var groups = [
	            { regex: gsRegex, indices: gsIndices, postModify: gsModify },
	            { regex: httpRegex, indices: httpIndices, postModify: httpModify }
	        ];
	        for (var i = 0; i < groups.length; i++) {
	            var group = groups[i];
	            var captures = group.regex.exec(url);
	            if (captures) {
	                var bucketValue = captures[group.indices.bucket];
	                var pathValue = captures[group.indices.path];
	                if (!pathValue) {
	                    pathValue = '';
	                }
	                location = new Location(bucketValue, pathValue);
	                group.postModify(location);
	                break;
	            }
	        }
	        if (location == null) {
	            throw invalidUrl(url);
	        }
	        return location;
	    };
	    return Location;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Contains helper methods for manipulating paths.
	 */
	/**
	 * @return Null if the path is already at the root.
	 */
	function parent(path) {
	    if (path.length == 0) {
	        return null;
	    }
	    var index = path.lastIndexOf('/');
	    if (index === -1) {
	        return '';
	    }
	    var newPath = path.slice(0, index);
	    return newPath;
	}
	function child(path, childPath) {
	    var canonicalChildPath = childPath
	        .split('/')
	        .filter(function (component) {
	        return component.length > 0;
	    })
	        .join('/');
	    if (path.length === 0) {
	        return canonicalChildPath;
	    }
	    else {
	        return path + '/' + canonicalChildPath;
	    }
	}
	/**
	 * Returns the last component of a path.
	 * '/foo/bar' -> 'bar'
	 * '/foo/bar/baz/' -> 'baz/'
	 * '/a' -> 'a'
	 */
	function lastComponent(path) {
	    var index = path.lastIndexOf('/', path.length - 2);
	    if (index === -1) {
	        return path;
	    }
	    else {
	        return path.slice(index + 1);
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function makeNormalUrl(urlPart) {
	    return domainBase + apiBaseUrl + urlPart;
	}
	function makeDownloadUrl(urlPart) {
	    return downloadBase + apiBaseUrl + urlPart;
	}
	function makeUploadUrl(urlPart) {
	    return domainBase + apiUploadBaseUrl + urlPart;
	}
	function makeQueryString(params) {
	    var encode = encodeURIComponent;
	    var queryPart = '?';
	    forEach(params, function (key, val) {
	        var nextPart = encode(key) + '=' + encode(val);
	        queryPart = queryPart + nextPart + '&';
	    });
	    // Chop off the extra '&' or '?' on the end
	    queryPart = queryPart.slice(0, -1);
	    return queryPart;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function noXform_(metadata, value) {
	    return value;
	}
	/**
	 * @struct
	 */
	var Mapping = /** @class */ (function () {
	    function Mapping(server, opt_local, opt_writable, opt_xform) {
	        this.server = server;
	        this.local = opt_local || server;
	        this.writable = !!opt_writable;
	        this.xform = opt_xform || noXform_;
	    }
	    return Mapping;
	}());
	var mappings_ = null;
	function xformPath(fullPath) {
	    var valid = isString(fullPath);
	    if (!valid || fullPath.length < 2) {
	        return fullPath;
	    }
	    else {
	        fullPath = fullPath;
	        return lastComponent(fullPath);
	    }
	}
	function getMappings() {
	    if (mappings_) {
	        return mappings_;
	    }
	    var mappings = [];
	    mappings.push(new Mapping('bucket'));
	    mappings.push(new Mapping('generation'));
	    mappings.push(new Mapping('metageneration'));
	    mappings.push(new Mapping('name', 'fullPath', true));
	    function mappingsXformPath(metadata, fullPath) {
	        return xformPath(fullPath);
	    }
	    var nameMapping = new Mapping('name');
	    nameMapping.xform = mappingsXformPath;
	    mappings.push(nameMapping);
	    /**
	     * Coerces the second param to a number, if it is defined.
	     */
	    function xformSize(metadata, size) {
	        if (isDef(size)) {
	            return +size;
	        }
	        else {
	            return size;
	        }
	    }
	    var sizeMapping = new Mapping('size');
	    sizeMapping.xform = xformSize;
	    mappings.push(sizeMapping);
	    mappings.push(new Mapping('timeCreated'));
	    mappings.push(new Mapping('updated'));
	    mappings.push(new Mapping('md5Hash', null, true));
	    mappings.push(new Mapping('cacheControl', null, true));
	    mappings.push(new Mapping('contentDisposition', null, true));
	    mappings.push(new Mapping('contentEncoding', null, true));
	    mappings.push(new Mapping('contentLanguage', null, true));
	    mappings.push(new Mapping('contentType', null, true));
	    mappings.push(new Mapping('metadata', 'customMetadata', true));
	    mappings_ = mappings;
	    return mappings_;
	}
	function addRef(metadata, authWrapper) {
	    function generateRef() {
	        var bucket = metadata['bucket'];
	        var path = metadata['fullPath'];
	        var loc = new Location(bucket, path);
	        return authWrapper.makeStorageReference(loc);
	    }
	    Object.defineProperty(metadata, 'ref', { get: generateRef });
	}
	function fromResource(authWrapper, resource, mappings) {
	    var metadata = {};
	    metadata['type'] = 'file';
	    var len = mappings.length;
	    for (var i = 0; i < len; i++) {
	        var mapping = mappings[i];
	        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
	    }
	    addRef(metadata, authWrapper);
	    return metadata;
	}
	function fromResourceString(authWrapper, resourceString, mappings) {
	    var obj = jsonObjectOrNull(resourceString);
	    if (obj === null) {
	        return null;
	    }
	    var resource = obj;
	    return fromResource(authWrapper, resource, mappings);
	}
	function downloadUrlFromResourceString(metadata, resourceString) {
	    var obj = jsonObjectOrNull(resourceString);
	    if (obj === null) {
	        return null;
	    }
	    if (!isString(obj['downloadTokens'])) {
	        // This can happen if objects are uploaded through GCS and retrieved
	        // through list, so we don't want to throw an Error.
	        return null;
	    }
	    var tokens = obj['downloadTokens'];
	    if (tokens.length === 0) {
	        return null;
	    }
	    var encode = encodeURIComponent;
	    var tokensList = tokens.split(',');
	    var urls = tokensList.map(function (token) {
	        var bucket = metadata['bucket'];
	        var path = metadata['fullPath'];
	        var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
	        var base = makeDownloadUrl(urlPart);
	        var queryString = makeQueryString({
	            alt: 'media',
	            token: token
	        });
	        return base + queryString;
	    });
	    return urls[0];
	}
	function toResourceString(metadata, mappings) {
	    var resource = {};
	    var len = mappings.length;
	    for (var i = 0; i < len; i++) {
	        var mapping = mappings[i];
	        if (mapping.writable) {
	            resource[mapping.server] = metadata[mapping.local];
	        }
	    }
	    return JSON.stringify(resource);
	}
	function metadataValidator(p) {
	    var validType = p && isObject(p);
	    if (!validType) {
	        throw 'Expected Metadata object.';
	    }
	    for (var key in p) {
	        var val = p[key];
	        if (key === 'customMetadata') {
	            if (!isObject(val)) {
	                throw 'Expected object for \'customMetadata\' mapping.';
	            }
	        }
	        else {
	            if (isNonNullObject(val)) {
	                throw "Mapping for '" + key + "' cannot be an object.";
	            }
	        }
	    }
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param name Name of the function.
	 * @param specs Argument specs.
	 * @param passed The actual arguments passed to the function.
	 * @throws {fbs.Error} If the arguments are invalid.
	 */
	function validate(name, specs, passed) {
	    var minArgs = specs.length;
	    var maxArgs = specs.length;
	    for (var i = 0; i < specs.length; i++) {
	        if (specs[i].optional) {
	            minArgs = i;
	            break;
	        }
	    }
	    var validLength = minArgs <= passed.length && passed.length <= maxArgs;
	    if (!validLength) {
	        throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);
	    }
	    for (var i = 0; i < passed.length; i++) {
	        try {
	            specs[i].validator(passed[i]);
	        }
	        catch (e) {
	            if (e instanceof Error) {
	                throw invalidArgument(i, name, e.message);
	            }
	            else {
	                throw invalidArgument(i, name, e);
	            }
	        }
	    }
	}
	/**
	 * @struct
	 */
	var ArgSpec = /** @class */ (function () {
	    function ArgSpec(validator, opt_optional) {
	        var self = this;
	        this.validator = function (p) {
	            if (self.optional && !isJustDef(p)) {
	                return;
	            }
	            validator(p);
	        };
	        this.optional = !!opt_optional;
	    }
	    return ArgSpec;
	}());
	function and_(v1, v2) {
	    return function (p) {
	        v1(p);
	        v2(p);
	    };
	}
	function stringSpec(opt_validator, opt_optional) {
	    function stringValidator(p) {
	        if (!isString(p)) {
	            throw 'Expected string.';
	        }
	    }
	    var validator;
	    if (opt_validator) {
	        validator = and_(stringValidator, opt_validator);
	    }
	    else {
	        validator = stringValidator;
	    }
	    return new ArgSpec(validator, opt_optional);
	}
	function uploadDataSpec() {
	    function validator(p) {
	        var valid = p instanceof Uint8Array ||
	            p instanceof ArrayBuffer ||
	            (isNativeBlobDefined() && p instanceof Blob);
	        if (!valid) {
	            throw 'Expected Blob or File.';
	        }
	    }
	    return new ArgSpec(validator);
	}
	function metadataSpec(opt_optional) {
	    return new ArgSpec(metadataValidator, opt_optional);
	}
	function nonNegativeNumberSpec() {
	    function validator(p) {
	        var valid = isNumber(p) && p >= 0;
	        if (!valid) {
	            throw 'Expected a number 0 or greater.';
	        }
	    }
	    return new ArgSpec(validator);
	}
	function looseObjectSpec(opt_validator, opt_optional) {
	    function validator(p) {
	        var isLooseObject = p === null || (isDef(p) && p instanceof Object);
	        if (!isLooseObject) {
	            throw 'Expected an Object.';
	        }
	        if (opt_validator !== undefined && opt_validator !== null) {
	            opt_validator(p);
	        }
	    }
	    return new ArgSpec(validator, opt_optional);
	}
	function nullFunctionSpec(opt_optional) {
	    function validator(p) {
	        var valid = p === null || isFunction(p);
	        if (!valid) {
	            throw 'Expected a Function.';
	        }
	    }
	    return new ArgSpec(validator, opt_optional);
	}

	function getBlobBuilder() {
	    if (typeof BlobBuilder !== 'undefined') {
	        return BlobBuilder;
	    }
	    else if (typeof WebKitBlobBuilder !== 'undefined') {
	        return WebKitBlobBuilder;
	    }
	    else {
	        return undefined;
	    }
	}
	/**
	 * Concatenates one or more values together and converts them to a Blob.
	 *
	 * @param var_args The values that will make up the resulting blob.
	 * @return The blob.
	 */
	function getBlob() {
	    var var_args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        var_args[_i] = arguments[_i];
	    }
	    var BlobBuilder = getBlobBuilder();
	    if (BlobBuilder !== undefined) {
	        var bb = new BlobBuilder();
	        for (var i = 0; i < var_args.length; i++) {
	            bb.append(var_args[i]);
	        }
	        return bb.getBlob();
	    }
	    else {
	        if (isNativeBlobDefined()) {
	            return new Blob(var_args);
	        }
	        else {
	            throw Error("This browser doesn't seem to support creating Blobs");
	        }
	    }
	}
	/**
	 * Slices the blob. The returned blob contains data from the start byte
	 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
	 *
	 * @param blob The blob to be sliced.
	 * @param start Index of the starting byte.
	 * @param end Index of the ending byte.
	 * @return The blob slice or null if not supported.
	 */
	function sliceBlob(blob, start, end) {
	    if (blob.webkitSlice) {
	        return blob.webkitSlice(start, end);
	    }
	    else if (blob.mozSlice) {
	        return blob.mozSlice(start, end);
	    }
	    else if (blob.slice) {
	        return blob.slice(start, end);
	    }
	    return null;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param opt_elideCopy If true, doesn't copy mutable input data
	 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
	 *     modified after this blob's construction.
	 */
	var FbsBlob = /** @class */ (function () {
	    function FbsBlob(data, opt_elideCopy) {
	        var size = 0;
	        var blobType = '';
	        if (isNativeBlob(data)) {
	            this.data_ = data;
	            size = data.size;
	            blobType = data.type;
	        }
	        else if (data instanceof ArrayBuffer) {
	            if (opt_elideCopy) {
	                this.data_ = new Uint8Array(data);
	            }
	            else {
	                this.data_ = new Uint8Array(data.byteLength);
	                this.data_.set(new Uint8Array(data));
	            }
	            size = this.data_.length;
	        }
	        else if (data instanceof Uint8Array) {
	            if (opt_elideCopy) {
	                this.data_ = data;
	            }
	            else {
	                this.data_ = new Uint8Array(data.length);
	                this.data_.set(data);
	            }
	            size = data.length;
	        }
	        this.size_ = size;
	        this.type_ = blobType;
	    }
	    FbsBlob.prototype.size = function () {
	        return this.size_;
	    };
	    FbsBlob.prototype.type = function () {
	        return this.type_;
	    };
	    FbsBlob.prototype.slice = function (startByte, endByte) {
	        if (isNativeBlob(this.data_)) {
	            var realBlob = this.data_;
	            var sliced = sliceBlob(realBlob, startByte, endByte);
	            if (sliced === null) {
	                return null;
	            }
	            return new FbsBlob(sliced);
	        }
	        else {
	            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
	            return new FbsBlob(slice, true);
	        }
	    };
	    FbsBlob.getBlob = function () {
	        var var_args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            var_args[_i] = arguments[_i];
	        }
	        if (isNativeBlobDefined()) {
	            var blobby = var_args.map(function (val) {
	                if (val instanceof FbsBlob) {
	                    return val.data_;
	                }
	                else {
	                    return val;
	                }
	            });
	            return new FbsBlob(getBlob.apply(null, blobby));
	        }
	        else {
	            var uint8Arrays = var_args.map(function (val) {
	                if (isString(val)) {
	                    return dataFromString(StringFormat.RAW, val).data;
	                }
	                else {
	                    // Blobs don't exist, so this has to be a Uint8Array.
	                    return val.data_;
	                }
	            });
	            var finalLength_1 = 0;
	            uint8Arrays.forEach(function (array) {
	                finalLength_1 += array.byteLength;
	            });
	            var merged_1 = new Uint8Array(finalLength_1);
	            var index_1 = 0;
	            uint8Arrays.forEach(function (array) {
	                for (var i = 0; i < array.length; i++) {
	                    merged_1[index_1++] = array[i];
	                }
	            });
	            return new FbsBlob(merged_1, true);
	        }
	    };
	    FbsBlob.prototype.uploadData = function () {
	        return this.data_;
	    };
	    return FbsBlob;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns true if the object is contained in the array (compared with ===).
	 * @template T
	 */
	function contains$1(array, elem) {
	    return array.indexOf(elem) !== -1;
	}
	/**
	 * Returns a shallow copy of the array or array-like object (e.g. arguments).
	 * @template T
	 */
	function clone$1(arraylike) {
	    return Array.prototype.slice.call(arraylike);
	}
	/**
	 * Removes the given element from the given array, if it is contained.
	 * Directly modifies the passed-in array.
	 * @template T
	 */
	function remove(array, elem) {
	    var i = array.indexOf(elem);
	    if (i !== -1) {
	        array.splice(i, 1);
	    }
	}

	var RequestInfo = /** @class */ (function () {
	    function RequestInfo(url, method, 
	    /**
	     * Returns the value with which to resolve the request's promise. Only called
	     * if the request is successful. Throw from this function to reject the
	     * returned Request's promise with the thrown error.
	     * Note: The XhrIo passed to this function may be reused after this callback
	     * returns. Do not keep a reference to it in any way.
	     */
	    handler, timeout) {
	        this.url = url;
	        this.method = method;
	        this.handler = handler;
	        this.timeout = timeout;
	        this.urlParams = {};
	        this.headers = {};
	        this.body = null;
	        this.errorHandler = null;
	        /**
	         * Called with the current number of bytes uploaded and total size (-1 if not
	         * computable) of the request body (i.e. used to report upload progress).
	         */
	        this.progressCallback = null;
	        this.successCodes = [200];
	        this.additionalRetryCodes = [];
	    }
	    return RequestInfo;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
	 */
	function handlerCheck(cndn) {
	    if (!cndn) {
	        throw unknown();
	    }
	}
	function metadataHandler(authWrapper, mappings) {
	    function handler(xhr, text) {
	        var metadata = fromResourceString(authWrapper, text, mappings);
	        handlerCheck(metadata !== null);
	        return metadata;
	    }
	    return handler;
	}
	function downloadUrlHandler(authWrapper, mappings) {
	    function handler(xhr, text) {
	        var metadata = fromResourceString(authWrapper, text, mappings);
	        handlerCheck(metadata !== null);
	        return downloadUrlFromResourceString(metadata, text);
	    }
	    return handler;
	}
	function sharedErrorHandler(location) {
	    function errorHandler(xhr, err) {
	        var newErr;
	        if (xhr.getStatus() === 401) {
	            newErr = unauthenticated();
	        }
	        else {
	            if (xhr.getStatus() === 402) {
	                newErr = quotaExceeded(location.bucket);
	            }
	            else {
	                if (xhr.getStatus() === 403) {
	                    newErr = unauthorized(location.path);
	                }
	                else {
	                    newErr = err;
	                }
	            }
	        }
	        newErr.setServerResponseProp(err.serverResponseProp());
	        return newErr;
	    }
	    return errorHandler;
	}
	function objectErrorHandler(location) {
	    var shared = sharedErrorHandler(location);
	    function errorHandler(xhr, err) {
	        var newErr = shared(xhr, err);
	        if (xhr.getStatus() === 404) {
	            newErr = objectNotFound(location.path);
	        }
	        newErr.setServerResponseProp(err.serverResponseProp());
	        return newErr;
	    }
	    return errorHandler;
	}
	function getMetadata(authWrapper, location, mappings) {
	    var urlPart = location.fullServerUrl();
	    var url = makeNormalUrl(urlPart);
	    var method = 'GET';
	    var timeout = authWrapper.maxOperationRetryTime();
	    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
	    requestInfo.errorHandler = objectErrorHandler(location);
	    return requestInfo;
	}
	function getDownloadUrl(authWrapper, location, mappings) {
	    var urlPart = location.fullServerUrl();
	    var url = makeNormalUrl(urlPart);
	    var method = 'GET';
	    var timeout = authWrapper.maxOperationRetryTime();
	    var requestInfo = new RequestInfo(url, method, downloadUrlHandler(authWrapper, mappings), timeout);
	    requestInfo.errorHandler = objectErrorHandler(location);
	    return requestInfo;
	}
	function updateMetadata(authWrapper, location, metadata, mappings) {
	    var urlPart = location.fullServerUrl();
	    var url = makeNormalUrl(urlPart);
	    var method = 'PATCH';
	    var body = toResourceString(metadata, mappings);
	    var headers = { 'Content-Type': 'application/json; charset=utf-8' };
	    var timeout = authWrapper.maxOperationRetryTime();
	    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
	    requestInfo.headers = headers;
	    requestInfo.body = body;
	    requestInfo.errorHandler = objectErrorHandler(location);
	    return requestInfo;
	}
	function deleteObject(authWrapper, location) {
	    var urlPart = location.fullServerUrl();
	    var url = makeNormalUrl(urlPart);
	    var method = 'DELETE';
	    var timeout = authWrapper.maxOperationRetryTime();
	    function handler(xhr, text) { }
	    var requestInfo = new RequestInfo(url, method, handler, timeout);
	    requestInfo.successCodes = [200, 204];
	    requestInfo.errorHandler = objectErrorHandler(location);
	    return requestInfo;
	}
	function determineContentType_(metadata, blob) {
	    return ((metadata && metadata['contentType']) ||
	        (blob && blob.type()) ||
	        'application/octet-stream');
	}
	function metadataForUpload_(location, blob, opt_metadata) {
	    var metadata = clone(opt_metadata);
	    metadata['fullPath'] = location.path;
	    metadata['size'] = blob.size();
	    if (!metadata['contentType']) {
	        metadata['contentType'] = determineContentType_(null, blob);
	    }
	    return metadata;
	}
	function multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {
	    var urlPart = location.bucketOnlyServerUrl();
	    var headers = {
	        'X-Goog-Upload-Protocol': 'multipart'
	    };
	    function genBoundary() {
	        var str = '';
	        for (var i = 0; i < 2; i++) {
	            str =
	                str +
	                    Math.random()
	                        .toString()
	                        .slice(2);
	        }
	        return str;
	    }
	    var boundary = genBoundary();
	    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
	    var metadata = metadataForUpload_(location, blob, opt_metadata);
	    var metadataString = toResourceString(metadata, mappings);
	    var preBlobPart = '--' +
	        boundary +
	        '\r\n' +
	        'Content-Type: application/json; charset=utf-8\r\n\r\n' +
	        metadataString +
	        '\r\n--' +
	        boundary +
	        '\r\n' +
	        'Content-Type: ' +
	        metadata['contentType'] +
	        '\r\n\r\n';
	    var postBlobPart = '\r\n--' + boundary + '--';
	    var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
	    if (body === null) {
	        throw cannotSliceBlob();
	    }
	    var urlParams = { name: metadata['fullPath'] };
	    var url = makeUploadUrl(urlPart);
	    var method = 'POST';
	    var timeout = authWrapper.maxUploadRetryTime();
	    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
	    requestInfo.urlParams = urlParams;
	    requestInfo.headers = headers;
	    requestInfo.body = body.uploadData();
	    requestInfo.errorHandler = sharedErrorHandler(location);
	    return requestInfo;
	}
	/**
	 * @param current The number of bytes that have been uploaded so far.
	 * @param total The total number of bytes in the upload.
	 * @param opt_finalized True if the server has finished the upload.
	 * @param opt_metadata The upload metadata, should
	 *     only be passed if opt_finalized is true.
	 * @struct
	 */
	var ResumableUploadStatus = /** @class */ (function () {
	    function ResumableUploadStatus(current, total, finalized, metadata) {
	        this.current = current;
	        this.total = total;
	        this.finalized = !!finalized;
	        this.metadata = metadata || null;
	    }
	    return ResumableUploadStatus;
	}());
	function checkResumeHeader_(xhr, opt_allowed) {
	    var status;
	    try {
	        status = xhr.getResponseHeader('X-Goog-Upload-Status');
	    }
	    catch (e) {
	        handlerCheck(false);
	    }
	    var allowed = opt_allowed || ['active'];
	    handlerCheck(contains$1(allowed, status));
	    return status;
	}
	function createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {
	    var urlPart = location.bucketOnlyServerUrl();
	    var metadata = metadataForUpload_(location, blob, opt_metadata);
	    var urlParams = { name: metadata['fullPath'] };
	    var url = makeUploadUrl(urlPart);
	    var method = 'POST';
	    var headers = {
	        'X-Goog-Upload-Protocol': 'resumable',
	        'X-Goog-Upload-Command': 'start',
	        'X-Goog-Upload-Header-Content-Length': blob.size(),
	        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],
	        'Content-Type': 'application/json; charset=utf-8'
	    };
	    var body = toResourceString(metadata, mappings);
	    var timeout = authWrapper.maxUploadRetryTime();
	    function handler(xhr, text) {
	        checkResumeHeader_(xhr);
	        var url;
	        try {
	            url = xhr.getResponseHeader('X-Goog-Upload-URL');
	        }
	        catch (e) {
	            handlerCheck(false);
	        }
	        handlerCheck(isString(url));
	        return url;
	    }
	    var requestInfo = new RequestInfo(url, method, handler, timeout);
	    requestInfo.urlParams = urlParams;
	    requestInfo.headers = headers;
	    requestInfo.body = body;
	    requestInfo.errorHandler = sharedErrorHandler(location);
	    return requestInfo;
	}
	/**
	 * @param url From a call to fbs.requests.createResumableUpload.
	 */
	function getResumableUploadStatus(authWrapper, location, url, blob) {
	    var headers = { 'X-Goog-Upload-Command': 'query' };
	    function handler(xhr, text) {
	        var status = checkResumeHeader_(xhr, ['active', 'final']);
	        var sizeString;
	        try {
	            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
	        }
	        catch (e) {
	            handlerCheck(false);
	        }
	        var size = parseInt(sizeString, 10);
	        handlerCheck(!isNaN(size));
	        return new ResumableUploadStatus(size, blob.size(), status === 'final');
	    }
	    var method = 'POST';
	    var timeout = authWrapper.maxUploadRetryTime();
	    var requestInfo = new RequestInfo(url, method, handler, timeout);
	    requestInfo.headers = headers;
	    requestInfo.errorHandler = sharedErrorHandler(location);
	    return requestInfo;
	}
	/**
	 * Any uploads via the resumable upload API must transfer a number of bytes
	 * that is a multiple of this number.
	 */
	var resumableUploadChunkSize = 256 * 1024;
	/**
	 * @param url From a call to fbs.requests.createResumableUpload.
	 * @param chunkSize Number of bytes to upload.
	 * @param opt_status The previous status.
	 *     If not passed or null, we start from the beginning.
	 * @throws fbs.Error If the upload is already complete, the passed in status
	 *     has a final size inconsistent with the blob, or the blob cannot be sliced
	 *     for upload.
	 */
	function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {
	    // TODO(andysoto): standardize on internal asserts
	    // assert(!(opt_status && opt_status.finalized));
	    var status = new ResumableUploadStatus(0, 0);
	    if (opt_status) {
	        status.current = opt_status.current;
	        status.total = opt_status.total;
	    }
	    else {
	        status.current = 0;
	        status.total = blob.size();
	    }
	    if (blob.size() !== status.total) {
	        throw serverFileWrongSize();
	    }
	    var bytesLeft = status.total - status.current;
	    var bytesToUpload = bytesLeft;
	    if (chunkSize > 0) {
	        bytesToUpload = Math.min(bytesToUpload, chunkSize);
	    }
	    var startByte = status.current;
	    var endByte = startByte + bytesToUpload;
	    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
	    var headers = {
	        'X-Goog-Upload-Command': uploadCommand,
	        'X-Goog-Upload-Offset': status.current
	    };
	    var body = blob.slice(startByte, endByte);
	    if (body === null) {
	        throw cannotSliceBlob();
	    }
	    function handler(xhr, text) {
	        // TODO(andysoto): Verify the MD5 of each uploaded range:
	        // the 'x-range-md5' header comes back with status code 308 responses.
	        // We'll only be able to bail out though, because you can't re-upload a
	        // range that you previously uploaded.
	        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
	        var newCurrent = status.current + bytesToUpload;
	        var size = blob.size();
	        var metadata;
	        if (uploadStatus === 'final') {
	            metadata = metadataHandler(authWrapper, mappings)(xhr, text);
	        }
	        else {
	            metadata = null;
	        }
	        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
	    }
	    var method = 'POST';
	    var timeout = authWrapper.maxUploadRetryTime();
	    var requestInfo = new RequestInfo(url, method, handler, timeout);
	    requestInfo.headers = headers;
	    requestInfo.body = body.uploadData();
	    requestInfo.progressCallback = opt_progressCallback || null;
	    requestInfo.errorHandler = sharedErrorHandler(location);
	    return requestInfo;
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @struct
	 */
	var Observer = /** @class */ (function () {
	    function Observer(nextOrObserver, opt_error, opt_complete) {
	        var asFunctions = isFunction(nextOrObserver) ||
	            isDef(opt_error) ||
	            isDef(opt_complete);
	        if (asFunctions) {
	            this.next = nextOrObserver;
	            this.error = opt_error || null;
	            this.complete = opt_complete || null;
	        }
	        else {
	            var observer = nextOrObserver;
	            this.next = observer.next || null;
	            this.error = observer.error || null;
	            this.complete = observer.complete || null;
	        }
	    }
	    return Observer;
	}());

	var UploadTaskSnapshot = /** @class */ (function () {
	    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
	        this.bytesTransferred = bytesTransferred;
	        this.totalBytes = totalBytes;
	        this.state = state;
	        this.metadata = metadata;
	        this.task = task;
	        this.ref = ref;
	    }
	    return UploadTaskSnapshot;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns a function that invokes f with its arguments asynchronously as a
	 * microtask, i.e. as soon as possible after the current script returns back
	 * into browser code.
	 */
	function async(f) {
	    return function () {
	        var argsToForward = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            argsToForward[_i] = arguments[_i];
	        }
	        resolve(true).then(function () {
	            f.apply(null, argsToForward);
	        });
	    };
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
	 * upload and manage callbacks for various events.
	 */
	var UploadTask = /** @class */ (function () {
	    /**
	     * @param ref The firebaseStorage.Reference object this task came
	     *     from, untyped to avoid cyclic dependencies.
	     * @param blob The blob to upload.
	     */
	    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
	        if (metadata === void 0) { metadata = null; }
	        var _this = this;
	        this.transferred_ = 0;
	        this.needToFetchStatus_ = false;
	        this.needToFetchMetadata_ = false;
	        this.observers_ = [];
	        this.error_ = null;
	        this.uploadUrl_ = null;
	        this.request_ = null;
	        this.chunkMultiplier_ = 1;
	        this.resolve_ = null;
	        this.reject_ = null;
	        this.ref_ = ref;
	        this.authWrapper_ = authWrapper;
	        this.location_ = location;
	        this.blob_ = blob;
	        this.metadata_ = metadata;
	        this.mappings_ = mappings;
	        this.resumable_ = this.shouldDoResumable_(this.blob_);
	        this.state_ = InternalTaskState.RUNNING;
	        this.errorHandler_ = function (error) {
	            _this.request_ = null;
	            _this.chunkMultiplier_ = 1;
	            if (error.codeEquals(Code.CANCELED)) {
	                _this.needToFetchStatus_ = true;
	                _this.completeTransitions_();
	            }
	            else {
	                _this.error_ = error;
	                _this.transition_(InternalTaskState.ERROR);
	            }
	        };
	        this.metadataErrorHandler_ = function (error) {
	            _this.request_ = null;
	            if (error.codeEquals(Code.CANCELED)) {
	                _this.completeTransitions_();
	            }
	            else {
	                _this.error_ = error;
	                _this.transition_(InternalTaskState.ERROR);
	            }
	        };
	        this.promise_ = make(function (resolve$$1, reject$$1) {
	            _this.resolve_ = resolve$$1;
	            _this.reject_ = reject$$1;
	            _this.start_();
	        });
	        // Prevent uncaught rejections on the internal promise from bubbling out
	        // to the top level with a dummy handler.
	        this.promise_.then(null, function () { });
	    }
	    UploadTask.prototype.makeProgressCallback_ = function () {
	        var _this = this;
	        var sizeBefore = this.transferred_;
	        return function (loaded, total) {
	            _this.updateProgress_(sizeBefore + loaded);
	        };
	    };
	    UploadTask.prototype.shouldDoResumable_ = function (blob) {
	        return blob.size() > 256 * 1024;
	    };
	    UploadTask.prototype.start_ = function () {
	        if (this.state_ !== InternalTaskState.RUNNING) {
	            // This can happen if someone pauses us in a resume callback, for example.
	            return;
	        }
	        if (this.request_ !== null) {
	            return;
	        }
	        if (this.resumable_) {
	            if (this.uploadUrl_ === null) {
	                this.createResumable_();
	            }
	            else {
	                if (this.needToFetchStatus_) {
	                    this.fetchStatus_();
	                }
	                else {
	                    if (this.needToFetchMetadata_) {
	                        // Happens if we miss the metadata on upload completion.
	                        this.fetchMetadata_();
	                    }
	                    else {
	                        this.continueUpload_();
	                    }
	                }
	            }
	        }
	        else {
	            this.oneShotUpload_();
	        }
	    };
	    UploadTask.prototype.resolveToken_ = function (callback) {
	        var _this = this;
	        this.authWrapper_.getAuthToken().then(function (authToken) {
	            switch (_this.state_) {
	                case InternalTaskState.RUNNING:
	                    callback(authToken);
	                    break;
	                case InternalTaskState.CANCELING:
	                    _this.transition_(InternalTaskState.CANCELED);
	                    break;
	                case InternalTaskState.PAUSING:
	                    _this.transition_(InternalTaskState.PAUSED);
	                    break;
	                default:
	            }
	        });
	    };
	    // TODO(andysoto): assert false
	    UploadTask.prototype.createResumable_ = function () {
	        var _this = this;
	        this.resolveToken_(function (authToken) {
	            var requestInfo = createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
	            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
	            _this.request_ = createRequest;
	            createRequest.getPromise().then(function (url) {
	                _this.request_ = null;
	                _this.uploadUrl_ = url;
	                _this.needToFetchStatus_ = false;
	                _this.completeTransitions_();
	            }, _this.errorHandler_);
	        });
	    };
	    UploadTask.prototype.fetchStatus_ = function () {
	        var _this = this;
	        // TODO(andysoto): assert(this.uploadUrl_ !== null);
	        var url = this.uploadUrl_;
	        this.resolveToken_(function (authToken) {
	            var requestInfo = getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);
	            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
	            _this.request_ = statusRequest;
	            statusRequest.getPromise().then(function (status) {
	                status = status;
	                _this.request_ = null;
	                _this.updateProgress_(status.current);
	                _this.needToFetchStatus_ = false;
	                if (status.finalized) {
	                    _this.needToFetchMetadata_ = true;
	                }
	                _this.completeTransitions_();
	            }, _this.errorHandler_);
	        });
	    };
	    UploadTask.prototype.continueUpload_ = function () {
	        var _this = this;
	        var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;
	        var status = new ResumableUploadStatus(this.transferred_, this.blob_.size());
	        // TODO(andysoto): assert(this.uploadUrl_ !== null);
	        var url = this.uploadUrl_;
	        this.resolveToken_(function (authToken) {
	            var requestInfo;
	            try {
	                requestInfo = continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
	            }
	            catch (e) {
	                _this.error_ = e;
	                _this.transition_(InternalTaskState.ERROR);
	                return;
	            }
	            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
	            _this.request_ = uploadRequest;
	            uploadRequest
	                .getPromise()
	                .then(function (newStatus) {
	                _this.increaseMultiplier_();
	                _this.request_ = null;
	                _this.updateProgress_(newStatus.current);
	                if (newStatus.finalized) {
	                    _this.metadata_ = newStatus.metadata;
	                    _this.transition_(InternalTaskState.SUCCESS);
	                }
	                else {
	                    _this.completeTransitions_();
	                }
	            }, _this.errorHandler_);
	        });
	    };
	    UploadTask.prototype.increaseMultiplier_ = function () {
	        var currentSize = resumableUploadChunkSize * this.chunkMultiplier_;
	        // Max chunk size is 32M.
	        if (currentSize < 32 * 1024 * 1024) {
	            this.chunkMultiplier_ *= 2;
	        }
	    };
	    UploadTask.prototype.fetchMetadata_ = function () {
	        var _this = this;
	        this.resolveToken_(function (authToken) {
	            var requestInfo = getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);
	            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
	            _this.request_ = metadataRequest;
	            metadataRequest.getPromise().then(function (metadata) {
	                _this.request_ = null;
	                _this.metadata_ = metadata;
	                _this.transition_(InternalTaskState.SUCCESS);
	            }, _this.metadataErrorHandler_);
	        });
	    };
	    UploadTask.prototype.oneShotUpload_ = function () {
	        var _this = this;
	        this.resolveToken_(function (authToken) {
	            var requestInfo = multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
	            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
	            _this.request_ = multipartRequest;
	            multipartRequest.getPromise().then(function (metadata) {
	                _this.request_ = null;
	                _this.metadata_ = metadata;
	                _this.updateProgress_(_this.blob_.size());
	                _this.transition_(InternalTaskState.SUCCESS);
	            }, _this.errorHandler_);
	        });
	    };
	    UploadTask.prototype.updateProgress_ = function (transferred) {
	        var old = this.transferred_;
	        this.transferred_ = transferred;
	        // A progress update can make the "transferred" value smaller (e.g. a
	        // partial upload not completed by server, after which the "transferred"
	        // value may reset to the value at the beginning of the request).
	        if (this.transferred_ !== old) {
	            this.notifyObservers_();
	        }
	    };
	    UploadTask.prototype.transition_ = function (state) {
	        if (this.state_ === state) {
	            return;
	        }
	        switch (state) {
	            case InternalTaskState.CANCELING:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.RUNNING ||
	                //        this.state_ === InternalTaskState.PAUSING);
	                this.state_ = state;
	                if (this.request_ !== null) {
	                    this.request_.cancel();
	                }
	                break;
	            case InternalTaskState.PAUSING:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.RUNNING);
	                this.state_ = state;
	                if (this.request_ !== null) {
	                    this.request_.cancel();
	                }
	                break;
	            case InternalTaskState.RUNNING:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.PAUSED ||
	                //        this.state_ === InternalTaskState.PAUSING);
	                var wasPaused = this.state_ === InternalTaskState.PAUSED;
	                this.state_ = state;
	                if (wasPaused) {
	                    this.notifyObservers_();
	                    this.start_();
	                }
	                break;
	            case InternalTaskState.PAUSED:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.PAUSING);
	                this.state_ = state;
	                this.notifyObservers_();
	                break;
	            case InternalTaskState.CANCELED:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.PAUSED ||
	                //        this.state_ === InternalTaskState.CANCELING);
	                this.error_ = canceled();
	                this.state_ = state;
	                this.notifyObservers_();
	                break;
	            case InternalTaskState.ERROR:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.RUNNING ||
	                //        this.state_ === InternalTaskState.PAUSING ||
	                //        this.state_ === InternalTaskState.CANCELING);
	                this.state_ = state;
	                this.notifyObservers_();
	                break;
	            case InternalTaskState.SUCCESS:
	                // TODO(andysoto):
	                // assert(this.state_ === InternalTaskState.RUNNING ||
	                //        this.state_ === InternalTaskState.PAUSING ||
	                //        this.state_ === InternalTaskState.CANCELING);
	                this.state_ = state;
	                this.notifyObservers_();
	                break;
	        }
	    };
	    UploadTask.prototype.completeTransitions_ = function () {
	        switch (this.state_) {
	            case InternalTaskState.PAUSING:
	                this.transition_(InternalTaskState.PAUSED);
	                break;
	            case InternalTaskState.CANCELING:
	                this.transition_(InternalTaskState.CANCELED);
	                break;
	            case InternalTaskState.RUNNING:
	                this.start_();
	                break;
	            default:
	                // TODO(andysoto): assert(false);
	                break;
	        }
	    };
	    Object.defineProperty(UploadTask.prototype, "snapshot", {
	        get: function () {
	            var externalState = taskStateFromInternalTaskState(this.state_);
	            return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Adds a callback for an event.
	     * @param type The type of event to listen for.
	     */
	    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
	        if (nextOrObserver === void 0) { nextOrObserver = undefined; }
	        if (error === void 0) { error = undefined; }
	        if (completed === void 0) { completed = undefined; }
	        function typeValidator(_p) {
	            if (type !== TaskEvent.STATE_CHANGED) {
	                throw "Expected one of the event types: [" + TaskEvent.STATE_CHANGED + "].";
	            }
	        }
	        var nextOrObserverMessage = 'Expected a function or an Object with one of ' +
	            '`next`, `error`, `complete` properties.';
	        var nextValidator = nullFunctionSpec(true).validator;
	        var observerValidator = looseObjectSpec(null, true).validator;
	        function nextOrObserverValidator(p) {
	            try {
	                nextValidator(p);
	                return;
	            }
	            catch (e) { }
	            try {
	                observerValidator(p);
	                var anyDefined = isJustDef(p['next']) ||
	                    isJustDef(p['error']) ||
	                    isJustDef(p['complete']);
	                if (!anyDefined) {
	                    throw '';
	                }
	                return;
	            }
	            catch (e) {
	                throw nextOrObserverMessage;
	            }
	        }
	        var specs = [
	            stringSpec(typeValidator),
	            looseObjectSpec(nextOrObserverValidator, true),
	            nullFunctionSpec(true),
	            nullFunctionSpec(true)
	        ];
	        validate('on', specs, arguments);
	        var self = this;
	        function makeBinder(specs) {
	            function binder(nextOrObserver, error, opt_complete) {
	                if (specs !== null) {
	                    validate('on', specs, arguments);
	                }
	                var observer = new Observer(nextOrObserver, error, completed);
	                self.addObserver_(observer);
	                return function () {
	                    self.removeObserver_(observer);
	                };
	            }
	            return binder;
	        }
	        function binderNextOrObserverValidator(p) {
	            if (p === null) {
	                throw nextOrObserverMessage;
	            }
	            nextOrObserverValidator(p);
	        }
	        var binderSpecs = [
	            looseObjectSpec(binderNextOrObserverValidator),
	            nullFunctionSpec(true),
	            nullFunctionSpec(true)
	        ];
	        var typeOnly = !(isJustDef(nextOrObserver) ||
	            isJustDef(error) ||
	            isJustDef(completed));
	        if (typeOnly) {
	            return makeBinder(binderSpecs);
	        }
	        else {
	            return makeBinder(null)(nextOrObserver, error, completed);
	        }
	    };
	    /**
	     * This object behaves like a Promise, and resolves with its snapshot data
	     * when the upload completes.
	     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
	     * @param onRejected The rejection callback.
	     */
	    UploadTask.prototype.then = function (onFulfilled, onRejected) {
	        // These casts are needed so that TypeScript can infer the types of the
	        // resulting Promise.
	        return this.promise_.then(onFulfilled, onRejected);
	    };
	    /**
	     * Equivalent to calling `then(null, onRejected)`.
	     */
	    UploadTask.prototype.catch = function (onRejected) {
	        return this.then(null, onRejected);
	    };
	    /**
	     * Adds the given observer.
	     */
	    UploadTask.prototype.addObserver_ = function (observer) {
	        this.observers_.push(observer);
	        this.notifyObserver_(observer);
	    };
	    /**
	     * Removes the given observer.
	     */
	    UploadTask.prototype.removeObserver_ = function (observer) {
	        remove(this.observers_, observer);
	    };
	    UploadTask.prototype.notifyObservers_ = function () {
	        var _this = this;
	        this.finishPromise_();
	        var observers = clone$1(this.observers_);
	        observers.forEach(function (observer) {
	            _this.notifyObserver_(observer);
	        });
	    };
	    UploadTask.prototype.finishPromise_ = function () {
	        if (this.resolve_ !== null) {
	            var triggered = true;
	            switch (taskStateFromInternalTaskState(this.state_)) {
	                case TaskState.SUCCESS:
	                    async(this.resolve_.bind(null, this.snapshot))();
	                    break;
	                case TaskState.CANCELED:
	                case TaskState.ERROR:
	                    var toCall = this.reject_;
	                    async(toCall.bind(null, this.error_))();
	                    break;
	                default:
	                    triggered = false;
	                    break;
	            }
	            if (triggered) {
	                this.resolve_ = null;
	                this.reject_ = null;
	            }
	        }
	    };
	    UploadTask.prototype.notifyObserver_ = function (observer) {
	        var externalState = taskStateFromInternalTaskState(this.state_);
	        switch (externalState) {
	            case TaskState.RUNNING:
	            case TaskState.PAUSED:
	                if (observer.next !== null) {
	                    async(observer.next.bind(observer, this.snapshot))();
	                }
	                break;
	            case TaskState.SUCCESS:
	                if (observer.complete !== null) {
	                    async(observer.complete.bind(observer))();
	                }
	                break;
	            case TaskState.CANCELED:
	            case TaskState.ERROR:
	                if (observer.error !== null) {
	                    async(observer.error.bind(observer, this.error_))();
	                }
	                break;
	            default:
	                // TODO(andysoto): assert(false);
	                if (observer.error !== null) {
	                    async(observer.error.bind(observer, this.error_))();
	                }
	        }
	    };
	    /**
	     * Resumes a paused task. Has no effect on a currently running or failed task.
	     * @return True if the operation took effect, false if ignored.
	     */
	    UploadTask.prototype.resume = function () {
	        validate('resume', [], arguments);
	        var valid = this.state_ === InternalTaskState.PAUSED ||
	            this.state_ === InternalTaskState.PAUSING;
	        if (valid) {
	            this.transition_(InternalTaskState.RUNNING);
	        }
	        return valid;
	    };
	    /**
	     * Pauses a currently running task. Has no effect on a paused or failed task.
	     * @return True if the operation took effect, false if ignored.
	     */
	    UploadTask.prototype.pause = function () {
	        validate('pause', [], arguments);
	        var valid = this.state_ === InternalTaskState.RUNNING;
	        if (valid) {
	            this.transition_(InternalTaskState.PAUSING);
	        }
	        return valid;
	    };
	    /**
	     * Cancels a currently running or paused task. Has no effect on a complete or
	     * failed task.
	     * @return True if the operation took effect, false if ignored.
	     */
	    UploadTask.prototype.cancel = function () {
	        validate('cancel', [], arguments);
	        var valid = this.state_ === InternalTaskState.RUNNING ||
	            this.state_ === InternalTaskState.PAUSING;
	        if (valid) {
	            this.transition_(InternalTaskState.CANCELING);
	        }
	        return valid;
	    };
	    return UploadTask;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides methods to interact with a bucket in the Firebase Storage service.
	 * @param location An fbs.location, or the URL at
	 *     which to base this object, in one of the following forms:
	 *         gs://<bucket>/<object-path>
	 *         http[s]://firebasestorage.googleapis.com/
	 *                     <api-version>/b/<bucket>/o/<object-path>
	 *     Any query or fragment strings will be ignored in the http[s]
	 *     format. If no value is passed, the storage object will use a URL based on
	 *     the project ID of the base firebase.App instance.
	 */
	var Reference = /** @class */ (function () {
	    function Reference(authWrapper, location) {
	        this.authWrapper = authWrapper;
	        if (location instanceof Location) {
	            this.location = location;
	        }
	        else {
	            this.location = Location.makeFromUrl(location);
	        }
	    }
	    /**
	     * @return The URL for the bucket and path this object references,
	     *     in the form gs://<bucket>/<object-path>
	     * @override
	     */
	    Reference.prototype.toString = function () {
	        validate('toString', [], arguments);
	        return 'gs://' + this.location.bucket + '/' + this.location.path;
	    };
	    Reference.prototype.newRef = function (authWrapper, location) {
	        return new Reference(authWrapper, location);
	    };
	    Reference.prototype.mappings = function () {
	        return getMappings();
	    };
	    /**
	     * @return A reference to the object obtained by
	     *     appending childPath, removing any duplicate, beginning, or trailing
	     *     slashes.
	     */
	    Reference.prototype.child = function (childPath) {
	        validate('child', [stringSpec()], arguments);
	        var newPath = child(this.location.path, childPath);
	        var location = new Location(this.location.bucket, newPath);
	        return this.newRef(this.authWrapper, location);
	    };
	    Object.defineProperty(Reference.prototype, "parent", {
	        /**
	         * @return A reference to the parent of the
	         *     current object, or null if the current object is the root.
	         */
	        get: function () {
	            var newPath = parent(this.location.path);
	            if (newPath === null) {
	                return null;
	            }
	            var location = new Location(this.location.bucket, newPath);
	            return this.newRef(this.authWrapper, location);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "root", {
	        /**
	         * @return An reference to the root of this
	         *     object's bucket.
	         */
	        get: function () {
	            var location = new Location(this.location.bucket, '');
	            return this.newRef(this.authWrapper, location);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "bucket", {
	        get: function () {
	            return this.location.bucket;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "fullPath", {
	        get: function () {
	            return this.location.path;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "name", {
	        get: function () {
	            return lastComponent(this.location.path);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "storage", {
	        get: function () {
	            return this.authWrapper.service();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Uploads a blob to this object's location.
	     * @param data The blob to upload.
	     * @return An UploadTask that lets you control and
	     *     observe the upload.
	     */
	    Reference.prototype.put = function (data, metadata) {
	        if (metadata === void 0) { metadata = null; }
	        validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);
	        this.throwIfRoot_('put');
	        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);
	    };
	    /**
	     * Uploads a string to this object's location.
	     * @param string The string to upload.
	     * @param opt_format The format of the string to upload.
	     * @return An UploadTask that lets you control and
	     *     observe the upload.
	     */
	    Reference.prototype.putString = function (string, format, opt_metadata) {
	        if (format === void 0) { format = StringFormat.RAW; }
	        validate('putString', [
	            stringSpec(),
	            stringSpec(formatValidator, true),
	            metadataSpec(true)
	        ], arguments);
	        this.throwIfRoot_('putString');
	        var data = dataFromString(format, string);
	        var metadata = clone(opt_metadata);
	        if (!isDef(metadata['contentType']) && isDef(data.contentType)) {
	            metadata['contentType'] = data.contentType;
	        }
	        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);
	    };
	    /**
	     * Deletes the object at this location.
	     * @return A promise that resolves if the deletion succeeds.
	     */
	    Reference.prototype.delete = function () {
	        validate('delete', [], arguments);
	        this.throwIfRoot_('delete');
	        var self = this;
	        return this.authWrapper.getAuthToken().then(function (authToken) {
	            var requestInfo = deleteObject(self.authWrapper, self.location);
	            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
	        });
	    };
	    /**
	     *     A promise that resolves with the metadata for this object. If this
	     *     object doesn't exist or metadata cannot be retreived, the promise is
	     *     rejected.
	     */
	    Reference.prototype.getMetadata = function () {
	        validate('getMetadata', [], arguments);
	        this.throwIfRoot_('getMetadata');
	        var self = this;
	        return this.authWrapper.getAuthToken().then(function (authToken) {
	            var requestInfo = getMetadata(self.authWrapper, self.location, self.mappings());
	            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
	        });
	    };
	    /**
	     * Updates the metadata for this object.
	     * @param metadata The new metadata for the object.
	     *     Only values that have been explicitly set will be changed. Explicitly
	     *     setting a value to null will remove the metadata.
	     * @return A promise that resolves
	     *     with the new metadata for this object.
	     *     @see firebaseStorage.Reference.prototype.getMetadata
	     */
	    Reference.prototype.updateMetadata = function (metadata) {
	        validate('updateMetadata', [metadataSpec()], arguments);
	        this.throwIfRoot_('updateMetadata');
	        var self = this;
	        return this.authWrapper.getAuthToken().then(function (authToken) {
	            var requestInfo = updateMetadata(self.authWrapper, self.location, metadata, self.mappings());
	            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
	        });
	    };
	    /**
	     * @return A promise that resolves with the download
	     *     URL for this object.
	     */
	    Reference.prototype.getDownloadURL = function () {
	        validate('getDownloadURL', [], arguments);
	        this.throwIfRoot_('getDownloadURL');
	        var self = this;
	        return this.authWrapper.getAuthToken().then(function (authToken) {
	            var requestInfo = getDownloadUrl(self.authWrapper, self.location, self.mappings());
	            return self.authWrapper
	                .makeRequest(requestInfo, authToken)
	                .getPromise()
	                .then(function (url) {
	                if (url === null) {
	                    throw noDownloadURL();
	                }
	                return url;
	            });
	        });
	    };
	    Reference.prototype.throwIfRoot_ = function (name) {
	        if (this.location.path === '') {
	            throw invalidRootOperation(name);
	        }
	    };
	    return Reference;
	}());

	/**
	 * A request whose promise always fails.
	 * @struct
	 * @template T
	 */
	var FailRequest = /** @class */ (function () {
	    function FailRequest(error) {
	        this.promise_ = reject(error);
	    }
	    /** @inheritDoc */
	    FailRequest.prototype.getPromise = function () {
	        return this.promise_;
	    };
	    /** @inheritDoc */
	    FailRequest.prototype.cancel = function (appDelete) {
	        if (appDelete === void 0) { appDelete = false; }
	    };
	    return FailRequest;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @struct
	 */
	var RequestMap = /** @class */ (function () {
	    function RequestMap() {
	        this.map_ = {};
	        this.id_ = minSafeInteger;
	    }
	    /**
	     * Registers the given request with this map.
	     * The request is unregistered when it completes.
	     * @param r The request to register.
	     */
	    RequestMap.prototype.addRequest = function (r) {
	        var id = this.id_;
	        this.id_++;
	        this.map_[id] = r;
	        var self = this;
	        function unmap() {
	            delete self.map_[id];
	        }
	        r.getPromise().then(unmap, unmap);
	    };
	    /**
	     * Cancels all registered requests.
	     */
	    RequestMap.prototype.clear = function () {
	        forEach(this.map_, function (key, val) {
	            if (val) {
	                val.cancel(true);
	            }
	        });
	        this.map_ = {};
	    };
	    return RequestMap;
	}());

	/**
	 * @param app If null, getAuthToken always resolves with null.
	 * @param service The storage service associated with this auth wrapper.
	 *     Untyped to avoid circular type dependencies.
	 * @struct
	 */
	var AuthWrapper = /** @class */ (function () {
	    function AuthWrapper(app, maker, requestMaker, service, pool) {
	        this.bucket_ = null;
	        this.deleted_ = false;
	        this.app_ = app;
	        if (this.app_ !== null) {
	            var options = this.app_.options;
	            if (isDef(options)) {
	                this.bucket_ = AuthWrapper.extractBucket_(options);
	            }
	        }
	        this.storageRefMaker_ = maker;
	        this.requestMaker_ = requestMaker;
	        this.pool_ = pool;
	        this.service_ = service;
	        this.maxOperationRetryTime_ = defaultMaxOperationRetryTime;
	        this.maxUploadRetryTime_ = defaultMaxUploadRetryTime;
	        this.requestMap_ = new RequestMap();
	    }
	    AuthWrapper.extractBucket_ = function (config) {
	        var bucketString = config[configOption] || null;
	        if (bucketString == null) {
	            return null;
	        }
	        var loc = Location.makeFromBucketSpec(bucketString);
	        return loc.bucket;
	    };
	    AuthWrapper.prototype.getAuthToken = function () {
	        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
	        // (b/28673818).
	        if (this.app_ !== null &&
	            isDef(this.app_.INTERNAL) &&
	            isDef(this.app_.INTERNAL.getToken)) {
	            return this.app_.INTERNAL.getToken().then(function (response) {
	                if (response !== null) {
	                    return response.accessToken;
	                }
	                else {
	                    return null;
	                }
	            }, function (_error) {
	                return null;
	            });
	        }
	        else {
	            return resolve(null);
	        }
	    };
	    AuthWrapper.prototype.bucket = function () {
	        if (this.deleted_) {
	            throw appDeleted();
	        }
	        else {
	            return this.bucket_;
	        }
	    };
	    /**
	     * The service associated with this auth wrapper. Untyped to avoid circular
	     * type dependencies.
	     */
	    AuthWrapper.prototype.service = function () {
	        return this.service_;
	    };
	    /**
	     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
	     * at the given Location.
	     * @param loc The Location.
	     * @return Actually a firebaseStorage.Reference, typing not allowed
	     *     because of circular dependency problems.
	     */
	    AuthWrapper.prototype.makeStorageReference = function (loc) {
	        return this.storageRefMaker_(this, loc);
	    };
	    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
	        if (!this.deleted_) {
	            var request = this.requestMaker_(requestInfo, authToken, this.pool_);
	            this.requestMap_.addRequest(request);
	            return request;
	        }
	        else {
	            return new FailRequest(appDeleted());
	        }
	    };
	    /**
	     * Stop running requests and prevent more from being created.
	     */
	    AuthWrapper.prototype.deleteApp = function () {
	        this.deleted_ = true;
	        this.app_ = null;
	        this.requestMap_.clear();
	    };
	    AuthWrapper.prototype.maxUploadRetryTime = function () {
	        return this.maxUploadRetryTime_;
	    };
	    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
	        this.maxUploadRetryTime_ = time;
	    };
	    AuthWrapper.prototype.maxOperationRetryTime = function () {
	        return this.maxOperationRetryTime_;
	    };
	    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
	        this.maxOperationRetryTime_ = time;
	    };
	    return AuthWrapper;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param f May be invoked
	 *     before the function returns.
	 * @param callback Get all the arguments passed to the function
	 *     passed to f, including the initial boolean.
	 */
	function start(f, callback, timeout) {
	    // TODO(andysoto): make this code cleaner (probably refactor into an actual
	    // type instead of a bunch of functions with state shared in the closure)
	    var waitSeconds = 1;
	    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
	    var timeoutId = null;
	    var hitTimeout = false;
	    var cancelState = 0;
	    function canceled() {
	        return cancelState === 2;
	    }
	    var triggeredCallback = false;
	    function triggerCallback() {
	        if (!triggeredCallback) {
	            triggeredCallback = true;
	            callback.apply(null, arguments);
	        }
	    }
	    function callWithDelay(millis) {
	        timeoutId = setTimeout(function () {
	            timeoutId = null;
	            f(handler, canceled());
	        }, millis);
	    }
	    function handler(success) {
	        var var_args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            var_args[_i - 1] = arguments[_i];
	        }
	        if (triggeredCallback) {
	            return;
	        }
	        if (success) {
	            triggerCallback.apply(null, arguments);
	            return;
	        }
	        var mustStop = canceled() || hitTimeout;
	        if (mustStop) {
	            triggerCallback.apply(null, arguments);
	            return;
	        }
	        if (waitSeconds < 64) {
	            /* TODO(andysoto): don't back off so quickly if we know we're offline. */
	            waitSeconds *= 2;
	        }
	        var waitMillis;
	        if (cancelState === 1) {
	            cancelState = 2;
	            waitMillis = 0;
	        }
	        else {
	            waitMillis = (waitSeconds + Math.random()) * 1000;
	        }
	        callWithDelay(waitMillis);
	    }
	    var stopped = false;
	    function stop(wasTimeout) {
	        if (stopped) {
	            return;
	        }
	        stopped = true;
	        if (triggeredCallback) {
	            return;
	        }
	        if (timeoutId !== null) {
	            if (!wasTimeout) {
	                cancelState = 2;
	            }
	            clearTimeout(timeoutId);
	            callWithDelay(0);
	        }
	        else {
	            if (!wasTimeout) {
	                cancelState = 1;
	            }
	        }
	    }
	    callWithDelay(0);
	    setTimeout(function () {
	        hitTimeout = true;
	        stop(true);
	    }, timeout);
	    return stop;
	}
	/**
	 * Stops the retry loop from repeating.
	 * If the function is currently "in between" retries, it is invoked immediately
	 * with the second parameter as "true". Otherwise, it will be invoked once more
	 * after the current invocation finishes iff the current invocation would have
	 * triggered another retry.
	 */
	function stop(id) {
	    id(false);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @struct
	 * @template T
	 */
	var NetworkRequest = /** @class */ (function () {
	    function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
	        this.pendingXhr_ = null;
	        this.backoffId_ = null;
	        this.resolve_ = null;
	        this.reject_ = null;
	        this.canceled_ = false;
	        this.appDelete_ = false;
	        this.url_ = url;
	        this.method_ = method;
	        this.headers_ = headers;
	        this.body_ = body;
	        this.successCodes_ = successCodes.slice();
	        this.additionalRetryCodes_ = additionalRetryCodes.slice();
	        this.callback_ = callback;
	        this.errorCallback_ = errorCallback;
	        this.progressCallback_ = progressCallback;
	        this.timeout_ = timeout;
	        this.pool_ = pool;
	        var self = this;
	        this.promise_ = make(function (resolve$$1, reject$$1) {
	            self.resolve_ = resolve$$1;
	            self.reject_ = reject$$1;
	            self.start_();
	        });
	    }
	    /**
	     * Actually starts the retry loop.
	     */
	    NetworkRequest.prototype.start_ = function () {
	        var self = this;
	        function doTheRequest(backoffCallback, canceled$$1) {
	            if (canceled$$1) {
	                backoffCallback(false, new RequestEndStatus(false, null, true));
	                return;
	            }
	            var xhr = self.pool_.createXhrIo();
	            self.pendingXhr_ = xhr;
	            function progressListener(progressEvent) {
	                var loaded = progressEvent.loaded;
	                var total = progressEvent.lengthComputable ? progressEvent.total : -1;
	                if (self.progressCallback_ !== null) {
	                    self.progressCallback_(loaded, total);
	                }
	            }
	            if (self.progressCallback_ !== null) {
	                xhr.addUploadProgressListener(progressListener);
	            }
	            xhr
	                .send(self.url_, self.method_, self.body_, self.headers_)
	                .then(function (xhr) {
	                if (self.progressCallback_ !== null) {
	                    xhr.removeUploadProgressListener(progressListener);
	                }
	                self.pendingXhr_ = null;
	                xhr = xhr;
	                var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
	                var status = xhr.getStatus();
	                if (!hitServer || self.isRetryStatusCode_(status)) {
	                    var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
	                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
	                    return;
	                }
	                var successCode = contains$1(self.successCodes_, status);
	                backoffCallback(true, new RequestEndStatus(successCode, xhr));
	            });
	        }
	        /**
	         * @param requestWentThrough True if the request eventually went
	         *     through, false if it hit the retry limit or was canceled.
	         */
	        function backoffDone(requestWentThrough, status) {
	            var resolve$$1 = self.resolve_;
	            var reject$$1 = self.reject_;
	            var xhr = status.xhr;
	            if (status.wasSuccessCode) {
	                try {
	                    var result = self.callback_(xhr, xhr.getResponseText());
	                    if (isJustDef(result)) {
	                        resolve$$1(result);
	                    }
	                    else {
	                        resolve$$1();
	                    }
	                }
	                catch (e) {
	                    reject$$1(e);
	                }
	            }
	            else {
	                if (xhr !== null) {
	                    var err = unknown();
	                    err.setServerResponseProp(xhr.getResponseText());
	                    if (self.errorCallback_) {
	                        reject$$1(self.errorCallback_(xhr, err));
	                    }
	                    else {
	                        reject$$1(err);
	                    }
	                }
	                else {
	                    if (status.canceled) {
	                        var err = self.appDelete_
	                            ? appDeleted()
	                            : canceled();
	                        reject$$1(err);
	                    }
	                    else {
	                        var err = retryLimitExceeded();
	                        reject$$1(err);
	                    }
	                }
	            }
	        }
	        if (this.canceled_) {
	            backoffDone(false, new RequestEndStatus(false, null, true));
	        }
	        else {
	            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
	        }
	    };
	    /** @inheritDoc */
	    NetworkRequest.prototype.getPromise = function () {
	        return this.promise_;
	    };
	    /** @inheritDoc */
	    NetworkRequest.prototype.cancel = function (appDelete) {
	        this.canceled_ = true;
	        this.appDelete_ = appDelete || false;
	        if (this.backoffId_ !== null) {
	            stop(this.backoffId_);
	        }
	        if (this.pendingXhr_ !== null) {
	            this.pendingXhr_.abort();
	        }
	    };
	    NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
	        // The codes for which to retry came from this page:
	        // https://cloud.google.com/storage/docs/exponential-backoff
	        var isFiveHundredCode = status >= 500 && status < 600;
	        var extraRetryCodes = [
	            // Request Timeout: web server didn't receive full request in time.
	            408,
	            // Too Many Requests: you're getting rate-limited, basically.
	            429
	        ];
	        var isExtraRetryCode = contains$1(extraRetryCodes, status);
	        var isRequestSpecificRetryCode = contains$1(this.additionalRetryCodes_, status);
	        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
	    };
	    return NetworkRequest;
	}());
	/**
	 * A collection of information about the result of a network request.
	 * @param opt_canceled Defaults to false.
	 * @struct
	 */
	var RequestEndStatus = /** @class */ (function () {
	    function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {
	        this.wasSuccessCode = wasSuccessCode;
	        this.xhr = xhr;
	        this.canceled = !!opt_canceled;
	    }
	    return RequestEndStatus;
	}());
	function addAuthHeader_(headers, authToken) {
	    if (authToken !== null && authToken.length > 0) {
	        headers['Authorization'] = 'Firebase ' + authToken;
	    }
	}
	function addVersionHeader_(headers) {
	    var number = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';
	    headers['X-Firebase-Storage-Version'] = 'webjs/' + number;
	}
	/**
	 * @template T
	 */
	function makeRequest(requestInfo, authToken, pool) {
	    var queryPart = makeQueryString(requestInfo.urlParams);
	    var url = requestInfo.url + queryPart;
	    var headers = clone(requestInfo.headers);
	    addAuthHeader_(headers, authToken);
	    addVersionHeader_(headers);
	    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
	}

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A service that provides firebaseStorage.Reference instances.
	 * @param opt_url gs:// url to a custom Storage Bucket
	 *
	 * @struct
	 */
	var Service = /** @class */ (function () {
	    function Service(app, pool, url) {
	        this.bucket_ = null;
	        function maker(authWrapper, loc) {
	            return new Reference(authWrapper, loc);
	        }
	        this.authWrapper_ = new AuthWrapper(app, maker, makeRequest, this, pool);
	        this.app_ = app;
	        if (url != null) {
	            this.bucket_ = Location.makeFromBucketSpec(url);
	        }
	        else {
	            var authWrapperBucket = this.authWrapper_.bucket();
	            if (authWrapperBucket != null) {
	                this.bucket_ = new Location(authWrapperBucket, '');
	            }
	        }
	        this.internals_ = new ServiceInternals(this);
	    }
	    /**
	     * Returns a firebaseStorage.Reference for the given path in the default
	     * bucket.
	     */
	    Service.prototype.ref = function (path) {
	        function validator(path) {
	            if (/^[A-Za-z]+:\/\//.test(path)) {
	                throw 'Expected child path but got a URL, use refFromURL instead.';
	            }
	        }
	        validate('ref', [stringSpec(validator, true)], arguments);
	        if (this.bucket_ == null) {
	            throw new Error('No Storage Bucket defined in Firebase Options.');
	        }
	        var ref = new Reference(this.authWrapper_, this.bucket_);
	        if (path != null) {
	            return ref.child(path);
	        }
	        else {
	            return ref;
	        }
	    };
	    /**
	     * Returns a firebaseStorage.Reference object for the given absolute URL,
	     * which must be a gs:// or http[s]:// URL.
	     */
	    Service.prototype.refFromURL = function (url) {
	        function validator(p) {
	            if (!/^[A-Za-z]+:\/\//.test(p)) {
	                throw 'Expected full URL but got a child path, use ref instead.';
	            }
	            try {
	                Location.makeFromUrl(p);
	            }
	            catch (e) {
	                throw 'Expected valid full URL but got an invalid one.';
	            }
	        }
	        validate('refFromURL', [stringSpec(validator, false)], arguments);
	        return new Reference(this.authWrapper_, url);
	    };
	    Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
	        get: function () {
	            return this.authWrapper_.maxUploadRetryTime();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Service.prototype.setMaxUploadRetryTime = function (time) {
	        validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);
	        this.authWrapper_.setMaxUploadRetryTime(time);
	    };
	    Object.defineProperty(Service.prototype, "maxOperationRetryTime", {
	        get: function () {
	            return this.authWrapper_.maxOperationRetryTime();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Service.prototype.setMaxOperationRetryTime = function (time) {
	        validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);
	        this.authWrapper_.setMaxOperationRetryTime(time);
	    };
	    Object.defineProperty(Service.prototype, "app", {
	        get: function () {
	            return this.app_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Service.prototype, "INTERNAL", {
	        get: function () {
	            return this.internals_;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Service;
	}());
	/**
	 * @struct
	 */
	var ServiceInternals = /** @class */ (function () {
	    function ServiceInternals(service) {
	        this.service_ = service;
	    }
	    /**
	     * Called when the associated app is deleted.
	     * @see {!fbs.AuthWrapper.prototype.deleteApp}
	     */
	    ServiceInternals.prototype.delete = function () {
	        this.service_.authWrapper_.deleteApp();
	        return resolve(undefined);
	    };
	    return ServiceInternals;
	}());

	/**
	 * Copyright 2017 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Type constant for Firebase Storage.
	 */
	var STORAGE_TYPE = 'storage';
	function factory(app, unused, opt_url) {
	    return new Service(app, new XhrIoPool(), opt_url);
	}
	function registerStorage(instance) {
	    var namespaceExports = {
	        // no-inline
	        TaskState: TaskState,
	        TaskEvent: TaskEvent,
	        StringFormat: StringFormat,
	        Storage: Service,
	        Reference: Reference
	    };
	    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, 
	    // Allow multiple storage instances per app.
	    true);
	}
	registerStorage(firebase);

	exports.registerStorage = registerStorage;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(34);

	var _firebase = __webpack_require__(18);

	var _firebase2 = _interopRequireDefault(_firebase);

	__webpack_require__(78);

	var _app = __webpack_require__(81);

	var _app2 = _interopRequireDefault(_app);

	var _Header = __webpack_require__(85);

	var _Header2 = _interopRequireDefault(_Header);

	var _Main = __webpack_require__(88);

	var _Main2 = _interopRequireDefault(_Main);

	var _Profile = __webpack_require__(233);

	var _Profile2 = _interopRequireDefault(_Profile);

	var _Login = __webpack_require__(236);

	var _Login2 = _interopRequireDefault(_Login);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var App = function (_Component) {
	  _inherits(App, _Component);

	  function App() {
	    _classCallCheck(this, App);

	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this));

	    _this.state = {
	      //usuario es null por default hasta no loguearse
	      user: null
	    };

	    _this.handleOnAuth = _this.handleOnAuth.bind(_this);
	    _this.handleLogout = _this.handleLogout.bind(_this);
	    return _this;
	  }

	  _createClass(App, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _this2 = this;

	      _firebase2.default.auth().onAuthStateChanged(function (user) {
	        if (user) {
	          _this2.setState({ user: user });
	          console.log(user);
	        } else {
	          _this2.setState({ user: null });
	        }
	      });
	    }
	  }, {
	    key: 'handleOnAuth',
	    value: function handleOnAuth() {
	      var provider = new _firebase2.default.auth.GithubAuthProvider();

	      _firebase2.default.auth().signInWithPopup(provider).then(function (result) {
	        return console.log(result.user.email + ' ha iniciado sesion');
	      }).catch(function (error) {
	        return console.error('Error: ' + error.code + ': ' + error.message);
	      });
	    }
	  }, {
	    key: 'handleLogout',
	    value: function handleLogout() {
	      _firebase2.default.auth().signOut().then(function () {
	        return console.log('Te has desconectado correctamente.');
	      }).catch(function () {
	        return console.error('Un Error Ocurri\xF3.');
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      return _react2.default.createElement(
	        _reactRouterDom.BrowserRouter,
	        null,
	        _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(_Header2.default, null),
	          _react2.default.createElement(_reactRouterDom.Route, {
	            exact: true,
	            path: '/',
	            render: function render() {
	              if (_this3.state.user) {
	                return _react2.default.createElement(_Main2.default, { user: _this3.state.user, onLogout: _this3.handleLogout });
	              } else {
	                return _react2.default.createElement(_Login2.default, { onAuth: _this3.handleOnAuth });
	              }
	            }
	          }),
	          _react2.default.createElement(_reactRouterDom.Route, {
	            path: '/profile',
	            render: function render() {
	              return (
	                // Metodo ES6 de retorno de funcion
	                _react2.default.createElement(_Profile2.default, {
	                  picture: _this3.state.user.photoURL,
	                  username: _this3.state.user.email.split('@')[0],
	                  displayName: _this3.state.user.displayName,
	                  location: _this3.state.user.location,
	                  emailAddress: _this3.state.user.email
	                })
	              );
	            }
	          }),
	          _react2.default.createElement(_reactRouterDom.Route, {
	            path: '/user/:username',
	            render: function render(_ref) {
	              var match = _ref.match;

	              return _react2.default.createElement(_Profile2.default, { username: match.params.username });
	            }
	          })
	        )
	      );
	    }
	  }]);

	  return App;
	}(_react.Component);

	exports.default = App;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

	var _BrowserRouter2 = __webpack_require__(35);

	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);

	var _HashRouter2 = __webpack_require__(54);

	var _HashRouter3 = _interopRequireDefault(_HashRouter2);

	var _Link2 = __webpack_require__(55);

	var _Link3 = _interopRequireDefault(_Link2);

	var _MemoryRouter2 = __webpack_require__(56);

	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);

	var _NavLink2 = __webpack_require__(58);

	var _NavLink3 = _interopRequireDefault(_NavLink2);

	var _Prompt2 = __webpack_require__(64);

	var _Prompt3 = _interopRequireDefault(_Prompt2);

	var _Redirect2 = __webpack_require__(66);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(59);

	var _Route3 = _interopRequireDefault(_Route2);

	var _Router2 = __webpack_require__(52);

	var _Router3 = _interopRequireDefault(_Router2);

	var _StaticRouter2 = __webpack_require__(69);

	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);

	var _Switch2 = __webpack_require__(71);

	var _Switch3 = _interopRequireDefault(_Switch2);

	var _generatePath2 = __webpack_require__(73);

	var _generatePath3 = _interopRequireDefault(_generatePath2);

	var _matchPath2 = __webpack_require__(74);

	var _matchPath3 = _interopRequireDefault(_matchPath2);

	var _withRouter2 = __webpack_require__(75);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.generatePath = _generatePath3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(40);

	var _Router = __webpack_require__(52);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, BrowserRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createBrowserHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
	  };

	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return BrowserRouter;
	}(_react2.default.Component);

	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = process.env.NODE_ENV !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(38)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(39)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var assign = __webpack_require__(5);

	var ReactPropTypesSecret = __webpack_require__(8);
	var checkPropTypes = __webpack_require__(7);

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(8);

	function emptyFunction() {}

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

	var _LocationUtils = __webpack_require__(41);

	Object.defineProperty(exports, 'createLocation', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.createLocation;
	  }
	});
	Object.defineProperty(exports, 'locationsAreEqual', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.locationsAreEqual;
	  }
	});

	var _PathUtils = __webpack_require__(44);

	Object.defineProperty(exports, 'parsePath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.parsePath;
	  }
	});
	Object.defineProperty(exports, 'createPath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.createPath;
	  }
	});

	var _createBrowserHistory2 = __webpack_require__(45);

	var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

	var _createHashHistory2 = __webpack_require__(50);

	var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

	var _createMemoryHistory2 = __webpack_require__(51);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.createBrowserHistory = _createBrowserHistory3.default;
	exports.createHashHistory = _createHashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _resolvePathname = __webpack_require__(42);

	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

	var _valueEqual = __webpack_require__(43);

	var _valueEqual2 = _interopRequireDefault(_valueEqual);

	var _PathUtils = __webpack_require__(44);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	exports.default = resolvePathname;
	module.exports = exports['default'];

/***/ },
/* 43 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function valueEqual(a, b) {
	  if (a === b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }

	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (aType !== bType) return false;

	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);

	    if (aKeys.length !== bKeys.length) return false;

	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	exports.default = valueEqual;
	module.exports = exports['default'];

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};

	var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
	  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
	};

	var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	};

	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;


	  var path = pathname || '/';

	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

	  return path;
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(46);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(41);

	var _PathUtils = __webpack_require__(44);

	var _createTransitionManager = __webpack_require__(48);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(49);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};

	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;


	    var path = pathname + search + hash;

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path, state, key);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

	    handlePop(getDOMLocation(event.state));
	  };

	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };

	  var forceNextPop = false;

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allKeys.indexOf(fromLocation.key);

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];

	  // Public interface

	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	          nextKeys.push(location.key);
	          allKeys = nextKeys;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

	        window.location.href = href;
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);

	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

	        window.location.replace(href);
	      }
	    });
	  };

	  var go = function go(n) {
	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createBrowserHistory;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(46);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;

	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

	    prompt = nextPrompt;

	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };

	  var listeners = [];

	  var appendListener = function appendListener(fn) {
	    var isActive = true;

	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };

	    listeners.push(listener);

	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};

	exports.default = createTransitionManager;

/***/ },
/* 49 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(46);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(41);

	var _PathUtils = __webpack_require__(44);

	var _createTransitionManager = __webpack_require__(48);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(49);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;


	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var forceNextPop = false;
	  var ignorePath = null;

	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;

	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;

	      handlePop(location);
	    }
	  };

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

	  // Public interface

	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);

	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	        nextPaths.push(path);
	        allPaths = nextPaths;

	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

	        setState();
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

	      if (prevIndex !== -1) allPaths[prevIndex] = path;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createHashHistory;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(46);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(44);

	var _LocationUtils = __webpack_require__(41);

	var _createTransitionManager = __webpack_require__(48);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};

	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });

	  // Public interface

	  var createHref = _PathUtils.createPath;

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;

	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      history.entries[history.index] = location;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

	    var action = 'POP';
	    var location = history.entries[nextIndex];

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };

	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createMemoryHistory;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Router = __webpack_require__(53);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Router2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, "A <Router> may have only one child element");

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, "You cannot change <Router history>");
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? _react2.default.Children.only(children) : null;
	  };

	  return Router;
	}(_react2.default.Component);

	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(40);

	var _Router = __webpack_require__(52);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createHashHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
	  };

	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(_react2.default.Component);

	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"]),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(40);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	/**
	 * The public API for rendering a history-aware <a>.
	 */

	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);

	  function Link() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Link);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore everything but left clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();

	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;


	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        innerRef = _props.innerRef,
	        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars

	    (0, _invariant2.default)(this.context.router, "You should not use <Link> outside a <Router>");

	    (0, _invariant2.default)(to !== undefined, 'You must specify the "to" property');

	    var history = this.context.router.history;

	    var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, history.location) : to;

	    var href = history.createHref(location);
	    return _react2.default.createElement("a", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
	  };

	  return Link;
	}(_react2.default.Component);

	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
	  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _MemoryRouter = __webpack_require__(57);

	var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(40);

	var _Router = __webpack_require__(53);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MemoryRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createMemoryHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
	  };

	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return MemoryRouter;
	}(_react2.default.Component);

	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Route = __webpack_require__(59);

	var _Route2 = _interopRequireDefault(_Route);

	var _Link = __webpack_require__(55);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      ariaCurrent = _ref["aria-current"],
	      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

	  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to;

	  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
	  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");

	  return _react2.default.createElement(_Route2.default, {
	    path: escapedPath,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;

	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [className, activeClassName].filter(function (i) {
	          return i;
	        }).join(" ") : className,
	        style: isActive ? _extends({}, style, activeStyle) : style,
	        "aria-current": isActive && ariaCurrent || null
	      }, rest));
	    }
	  });
	};

	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func,
	  "aria-current": _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"])
	};

	NavLink.defaultProps = {
	  activeClassName: "active",
	  "aria-current": "page"
	};

	exports.default = NavLink;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Route = __webpack_require__(60);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Route2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _matchPath = __webpack_require__(61);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return _react2.default.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    (0, _invariant2.default)(router, "You should not use <Route> or withRouter() outside a <Router>");

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

	    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

	    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    if (component) return match ? _react2.default.createElement(component, props) : null;

	    if (render) return match ? render(props) : null;

	    if (typeof children === "function") return children(props);

	    if (children && !isEmptyChildren(children)) return _react2.default.Children.only(children);

	    return null;
	  };

	  return Route;
	}(_react2.default.Component);

	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  sensitive: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(62);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = "" + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var parent = arguments[2];

	  if (typeof options === "string") options = { path: options };

	  var _options = options,
	      path = _options.path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;


	  if (path == null) return parent;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	exports.default = matchPath;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(63)

	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }

	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'

	      keys.push(token)

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Prompt = __webpack_require__(65);

	var _Prompt2 = _interopRequireDefault(_Prompt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);

	  function Prompt() {
	    _classCallCheck(this, Prompt);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();

	    this.unblock = this.context.router.history.block(message);
	  };

	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };

	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Prompt> outside a <Router>");

	    if (this.props.when) this.enable(this.props.message);
	  };

	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };

	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };

	  Prompt.prototype.render = function render() {
	    return null;
	  };

	  return Prompt;
	}(_react2.default.Component);

	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Redirect = __webpack_require__(67);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(40);

	var _generatePath = __webpack_require__(68);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Redirect> outside a <Router>");

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = (0, _history.createLocation)(prevProps.to);
	    var nextTo = (0, _history.createLocation)(this.props.to);

	    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
	      (0, _warning2.default)(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.computeTo = function computeTo(_ref) {
	    var computedMatch = _ref.computedMatch,
	        to = _ref.to;

	    if (computedMatch) {
	      if (typeof to === "string") {
	        return (0, _generatePath2.default)(to, computedMatch.params);
	      } else {
	        return _extends({}, to, {
	          pathname: (0, _generatePath2.default)(to.pathname, computedMatch.params)
	        });
	      }
	    }

	    return to;
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var push = this.props.push;

	    var to = this.computeTo(this.props);

	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(_react2.default.Component);

	Redirect.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(62);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compileGenerator = function compileGenerator(pattern) {
	  var cacheKey = pattern;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var compiledGenerator = _pathToRegexp2.default.compile(pattern);

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledGenerator;
	    cacheCount++;
	  }

	  return compiledGenerator;
	};

	/**
	 * Public API for generating a URL pathname from a pattern and parameters.
	 */
	var generatePath = function generatePath() {
	  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (pattern === "/") {
	    return pattern;
	  }
	  var generator = compileGenerator(pattern);
	  return generator(params, { pretty: true });
	};

	exports.default = generatePath;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _StaticRouter = __webpack_require__(70);

	var _StaticRouter2 = _interopRequireDefault(_StaticRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(40);

	var _Router = __webpack_require__(53);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === "/" ? path : "/" + path;
	};

	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;

	  return _extends({}, location, {
	    pathname: addLeadingSlash(basename) + location.pathname
	  });
	};

	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;

	  var base = addLeadingSlash(basename);

	  if (location.pathname.indexOf(base) !== 0) return location;

	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};

	var createURL = function createURL(location) {
	  return typeof location === "string" ? location : (0, _history.createPath)(location);
	};

	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, "You cannot %s with <StaticRouter>", methodName);
	  };
	};

	var noop = function noop() {};

	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */

	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, StaticRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return addLeadingSlash(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;

	      context.action = "PUSH";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;

	      context.action = "REPLACE";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };

	  StaticRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
	  };

	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

	    var history = {
	      createHref: this.createHref,
	      action: "POP",
	      location: stripBasename(basename, (0, _history.createLocation)(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler("go"),
	      goBack: staticHandler("goBack"),
	      goForward: staticHandler("goForward"),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };

	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };

	  return StaticRouter;
	}(_react2.default.Component);

	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: "",
	  location: "/"
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Switch = __webpack_require__(72);

	var _Switch2 = _interopRequireDefault(_Switch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(36);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(47);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _matchPath = __webpack_require__(61);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck(this, Switch);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Switch> outside a <Router>");
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (match == null && _react2.default.isValidElement(element)) {
	        var _element$props = element.props,
	            pathProp = _element$props.path,
	            exact = _element$props.exact,
	            strict = _element$props.strict,
	            sensitive = _element$props.sensitive,
	            from = _element$props.from;

	        var path = pathProp || from;

	        child = element;
	        match = (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
	      }
	    });

	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(_react2.default.Component);

	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _generatePath = __webpack_require__(68);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _generatePath2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _matchPath = __webpack_require__(61);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _withRouter = __webpack_require__(76);

	var _withRouter2 = _interopRequireDefault(_withRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(37);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _hoistNonReactStatics = __webpack_require__(77);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _Route = __webpack_require__(60);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

	    return _react2.default.createElement(_Route2.default, {
	      children: function children(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
	          ref: wrappedComponentRef
	        }));
	      }
	    });
	  };

	  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };

	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};

	exports.default = withRouter;

/***/ },
/* 77 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	module.exports = hoistNonReactStatics;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var insert = __webpack_require__(79);
	var normalize = __webpack_require__(80);

	insert(normalize);


/***/ },
/* 79 */
/***/ function(module, exports) {

	var inserted = [];

	module.exports = function (css) {
	    if (inserted.indexOf(css) >= 0) return;
	    inserted.push(css);
	    
	    var elem = document.createElement('style');
	    var text = document.createTextNode(css);
	    elem.appendChild(text);
	    
	    if (document.head.childNodes.length) {
	        document.head.insertBefore(elem, document.head.childNodes[0]);
	    }
	    else {
	        document.head.appendChild(elem);
	    }
	};


/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = "/*! normalize.css v2.1.3 | MIT License | git.io/normalize */\n\n/* ==========================================================================\n   HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined in IE 8/9.\n */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nnav,\nsection,\nsummary {\n    display: block;\n}\n\n/**\n * Correct `inline-block` display not defined in IE 8/9.\n */\n\naudio,\ncanvas,\nvideo {\n    display: inline-block;\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n    display: none;\n    height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9.\n * Hide the `template` element in IE, Safari, and Firefox < 22.\n */\n\n[hidden],\ntemplate {\n    display: none;\n}\n\n/* ==========================================================================\n   Base\n   ========================================================================== */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n */\n\nhtml {\n    font-family: sans-serif; /* 1 */\n    -ms-text-size-adjust: 100%; /* 2 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n    margin: 0;\n}\n\n/* ==========================================================================\n   Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n    background: transparent;\n}\n\n/**\n * Address `outline` inconsistency between Chrome and other browsers.\n */\n\na:focus {\n    outline: thin dotted;\n}\n\n/**\n * Improve readability when focused and also mouse hovered in all browsers.\n */\n\na:active,\na:hover {\n    outline: 0;\n}\n\n/* ==========================================================================\n   Typography\n   ========================================================================== */\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari 5, and Chrome.\n */\n\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9, Safari 5, and Chrome.\n */\n\nabbr[title] {\n    border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.\n */\n\nb,\nstrong {\n    font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari 5 and Chrome.\n */\n\ndfn {\n    font-style: italic;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n    height: 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n    background: #ff0;\n    color: #000;\n}\n\n/**\n * Correct font family set oddly in Safari 5 and Chrome.\n */\n\ncode,\nkbd,\npre,\nsamp {\n    font-family: monospace, serif;\n    font-size: 1em;\n}\n\n/**\n * Improve readability of pre-formatted text in all browsers.\n */\n\npre {\n    white-space: pre-wrap;\n}\n\n/**\n * Set consistent quote types.\n */\n\nq {\n    quotes: \"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\";\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n    font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}\n\nsup {\n    top: -0.5em;\n}\n\nsub {\n    bottom: -0.25em;\n}\n\n/* ==========================================================================\n   Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9.\n */\n\nimg {\n    border: 0;\n}\n\n/**\n * Correct overflow displayed oddly in IE 9.\n */\n\nsvg:not(:root) {\n    overflow: hidden;\n}\n\n/* ==========================================================================\n   Figures\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari 5.\n */\n\nfigure {\n    margin: 0;\n}\n\n/* ==========================================================================\n   Forms\n   ========================================================================== */\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n    border: 1px solid #c0c0c0;\n    margin: 0 2px;\n    padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\n\nlegend {\n    border: 0; /* 1 */\n    padding: 0; /* 2 */\n}\n\n/**\n * 1. Correct font family not being inherited in all browsers.\n * 2. Correct font size not being inherited in all browsers.\n * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.\n */\n\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 2 */\n    margin: 0; /* 3 */\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\nbutton,\ninput {\n    line-height: normal;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.\n * Correct `select` style inheritance in Firefox 4+ and Opera.\n */\n\nbutton,\nselect {\n    text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton,\nhtml input[type=\"button\"], /* 1 */\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n    -webkit-appearance: button; /* 2 */\n    cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled],\nhtml input[disabled] {\n    cursor: default;\n}\n\n/**\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome\n *    (include `-moz` to future-proof).\n */\n\ninput[type=\"search\"] {\n    -webkit-appearance: textfield; /* 1 */\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box; /* 2 */\n    box-sizing: content-box;\n}\n\n/**\n * Remove inner padding and search cancel button in Safari 5 and Chrome\n * on OS X.\n */\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}\n\n/**\n * 1. Remove default vertical scrollbar in IE 8/9.\n * 2. Improve readability and alignment in all browsers.\n */\n\ntextarea {\n    overflow: auto; /* 1 */\n    vertical-align: top; /* 2 */\n}\n\n/* ==========================================================================\n   Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n"


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(82);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./app.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./app.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, "body {\r\n  margin: 0 auto;\r\n  background-color: #eee;\r\n}", ""]);

	// exports


/***/ },
/* 83 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _header = __webpack_require__(86);

	var _header2 = _interopRequireDefault(_header);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function Header() {
	  return _react2.default.createElement(
	    'header',
	    { className: _header2.default.root },
	    _react2.default.createElement(
	      'h1',
	      { className: _header2.default.logo },
	      'Reacttr'
	    )
	  );
	}

	exports.default = Header;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(87);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./header.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./header.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".header__root__2bRDo {\r\n  display: flex;\r\n  background-color: #2d84cc;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: #fff;\r\n  padding: 1em;\r\n}\r\n\r\n.header__logo__3VmQa {\r\n  margin: 0;\r\n  color: #fff;\r\n  font-size: 14pt;\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "header__root__2bRDo",
		"logo": "header__logo__3VmQa"
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _uuid = __webpack_require__(90);

	var _uuid2 = _interopRequireDefault(_uuid);

	var _firebase = __webpack_require__(18);

	var _firebase2 = _interopRequireDefault(_firebase);

	var _MessageList = __webpack_require__(95);

	var _MessageList2 = _interopRequireDefault(_MessageList);

	var _InputText = __webpack_require__(227);

	var _InputText2 = _interopRequireDefault(_InputText);

	var _ProfileBar = __webpack_require__(230);

	var _ProfileBar2 = _interopRequireDefault(_ProfileBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  user: _reactProptypes2.default.object.isRequired,
	  onLogout: _reactProptypes2.default.func.isRequired
	};

	var Main = function (_Component) {
	  _inherits(Main, _Component);

	  function Main(props) {
	    _classCallCheck(this, Main);

	    var _this = _possibleConstructorReturn(this, (Main.__proto__ || Object.getPrototypeOf(Main)).call(this, props));

	    _this.state = {
	      user: Object.assign({}, _this.props.user, { retweets: [] }, { favorites: [] }),
	      openText: false,
	      userNameToReply: '',
	      messages: []
	    };

	    _this.handleSendText = _this.handleSendText.bind(_this);
	    _this.handleCloseText = _this.handleCloseText.bind(_this);
	    _this.handleOpenText = _this.handleOpenText.bind(_this);
	    _this.handleRetweet = _this.handleRetweet.bind(_this);
	    _this.handleFavorite = _this.handleFavorite.bind(_this);
	    _this.handleReplyTweet = _this.handleReplyTweet.bind(_this);
	    return _this;
	  }

	  _createClass(Main, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _this2 = this;

	      var messageRef = _firebase2.default.database().ref().child('messages');
	      messageRef.on('child_added', function (snapshot) {
	        _this2.setState({
	          messages: _this2.state.messages.concat(snapshot.val()),
	          openText: false
	        });
	      });
	    }
	  }, {
	    key: 'handleSendText',
	    value: function handleSendText(event) {
	      event.preventDefault();
	      var newMessage = {
	        id: _uuid2.default.v4(),
	        username: this.state.user.email.split('@')[0],
	        displayName: this.state.user.displayName,
	        picture: this.state.user.photoURL,
	        date: Date.now(),
	        //target -> elemento que se envia por formulario
	        text: event.target.text.value,
	        favorites: 0,
	        retweets: 0
	      };

	      var messageRef = _firebase2.default.database().ref().child('messages');
	      var messageID = messageRef.push();
	      messageID.set(newMessage);

	      //añado el nuevo mensaje
	      this.setState({
	        messages: this.state.messages.concat([newMessage]),
	        //oculto la caja de mensajes
	        openText: false
	      });
	    }
	  }, {
	    key: 'handleReplyTweet',
	    value: function handleReplyTweet(msgId, userNameToReply) {
	      this.setState({
	        openText: true,
	        userNameToReply: userNameToReply
	      });
	    }
	  }, {
	    key: 'handleCloseText',
	    value: function handleCloseText(event) {
	      event.preventDefault();
	      this.setState({ openText: false });
	    }
	  }, {
	    key: 'handleOpenText',
	    value: function handleOpenText(event) {
	      event.preventDefault();
	      this.setState({ openText: true });
	    }
	  }, {
	    key: 'handleRetweet',
	    value: function handleRetweet(msgId) {
	      var alreadyRetweeted = this.state.user.retweets.filter(function (rt) {
	        return rt === msgId;
	      });

	      if (alreadyRetweeted.length === 0) {
	        var messages = this.state.messages.map(function (msg) {
	          if (msg.id === msgId) {
	            msg.retweets++;
	          }
	          return msg;
	        });

	        var user = Object.assign({}, this.state.user);
	        user.retweets.push(msgId);

	        this.setState({
	          messages: messages,
	          user: user
	        });
	      }
	    }
	  }, {
	    key: 'handleFavorite',
	    value: function handleFavorite(msgId) {
	      var alreadyFavorited = this.state.user.favorites.filter(function (fav) {
	        return fav === msgId;
	      });

	      if (alreadyFavorited.length === 0) {
	        var messages = this.state.messages.map(function (msg) {
	          if (msg.id === msgId) {
	            msg.favorites++;
	          }
	          return msg;
	        });

	        var user = Object.assign({}, this.state.user);
	        user.favorites.push(msgId);

	        this.setState({
	          messages: messages,
	          user: user
	        });
	      }
	    }
	  }, {
	    key: 'renderOpenText',
	    value: function renderOpenText() {
	      //si es true lo muestra
	      if (this.state.openText) {
	        return _react2.default.createElement(_InputText2.default, {
	          onSendText: this.handleSendText,
	          onCloseText: this.handleCloseText,
	          userNameToReply: this.state.userNameToReply
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_ProfileBar2.default, {
	          picture: this.props.user.photoURL,
	          username: this.props.user.email.split('@')[0],
	          onOpenText: this.handleOpenText,
	          onLogout: this.props.onLogout
	        }),
	        this.renderOpenText(),
	        _react2.default.createElement(_MessageList2.default, {
	          messages: this.state.messages,
	          onRetweet: this.handleRetweet,
	          onFavorite: this.handleFavorite,
	          onReplyTweet: this.handleReplyTweet
	        })
	      );
	    }
	  }]);

	  return Main;
	}(_react.Component);

	Main.propTypes = propTypes;

	exports.default = Main;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(37);


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var v1 = __webpack_require__(91);
	var v4 = __webpack_require__(94);

	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;

	module.exports = uuid;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var rng = __webpack_require__(92);
	var bytesToUuid = __webpack_require__(93);

	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	var _nodeId;
	var _clockseq;

	// Previous uuid creation time
	var _lastMSecs = 0;
	var _lastNSecs = 0;

	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];

	  options = options || {};
	  var node = options.node || _nodeId;
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

	  // node and clockseq need to be initialized to random values if they're not
	  // specified.  We do this lazily to minimize issues related to insufficient
	  // system entropy.  See #189
	  if (node == null || clockseq == null) {
	    var seedBytes = rng();
	    if (node == null) {
	      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	      node = _nodeId = [
	        seedBytes[0] | 0x01,
	        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
	      ];
	    }
	    if (clockseq == null) {
	      // Per 4.2.2, randomize (14 bit) clockseq
	      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
	    }
	  }

	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

	  // Time since last uuid creation (in msecs)
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }

	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }

	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;

	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;

	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;

	  // `time_mid`
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;

	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;

	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;

	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;

	  // `node`
	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }

	  return buf ? buf : bytesToUuid(b);
	}

	module.exports = v1;


/***/ },
/* 92 */
/***/ function(module, exports) {

	// Unique ID creation requires a high quality random # generator.  In the
	// browser this is a little complicated due to unknown quality of Math.random()
	// and inconsistent support for the `crypto` API.  We do the best we can via
	// feature-detection

	// getRandomValues needs to be invoked in a context where "this" is a Crypto
	// implementation. Also, find the complete implementation of crypto on IE11.
	var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
	                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

	if (getRandomValues) {
	  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
	  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

	  module.exports = function whatwgRNG() {
	    getRandomValues(rnds8);
	    return rnds8;
	  };
	} else {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var rnds = new Array(16);

	  module.exports = function mathRNG() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }

	    return rnds;
	  };
	}


/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
	  return ([bth[buf[i++]], bth[buf[i++]], 
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]],
		bth[buf[i++]], bth[buf[i++]],
		bth[buf[i++]], bth[buf[i++]]]).join('');
	}

	module.exports = bytesToUuid;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var rng = __webpack_require__(92);
	var bytesToUuid = __webpack_require__(93);

	function v4(options, buf, offset) {
	  var i = buf && offset || 0;

	  if (typeof(options) == 'string') {
	    buf = options === 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || bytesToUuid(rnds);
	}

	module.exports = v4;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _Message = __webpack_require__(96);

	var _Message2 = _interopRequireDefault(_Message);

	var _messageList = __webpack_require__(225);

	var _messageList2 = _interopRequireDefault(_messageList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var propTypes = {
	  messages: _reactProptypes2.default.arrayOf(_reactProptypes2.default.object).isRequired,
	  onRetweet: _reactProptypes2.default.func.isRequired,
	  onFavorite: _reactProptypes2.default.func.isRequired,
	  onReplyTweet: _reactProptypes2.default.func.isRequired
	};

	function MessageList(_ref) {
	  var messages = _ref.messages,
	      _onRetweet = _ref.onRetweet,
	      _onFavorite = _ref.onFavorite,
	      _onReplyTweet = _ref.onReplyTweet;

	  return _react2.default.createElement(
	    'div',
	    { className: _messageList2.default.root },
	    messages.map(function (msg) {
	      return _react2.default.createElement(_Message2.default, {
	        key: msg.id,
	        text: msg.text,
	        picture: msg.picture,
	        displayName: msg.displayName,
	        username: msg.username,
	        date: msg.date,
	        numRetweets: msg.retweets,
	        numFavorites: msg.favorites,
	        onRetweet: function onRetweet() {
	          return _onRetweet(msg.id);
	        },
	        onFavorite: function onFavorite() {
	          return _onFavorite(msg.id);
	        },
	        onReplyTweet: function onReplyTweet() {
	          return _onReplyTweet(msg.id, msg.username);
	        }
	      });
	      //muestro los ultimos mensajes primero con reverse()
	    }).reverse()
	  );
	}

	MessageList.propTypes = propTypes;

	exports.default = MessageList;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _reactRouterDom = __webpack_require__(34);

	var _moment = __webpack_require__(97);

	var _moment2 = _interopRequireDefault(_moment);

	var _message = __webpack_require__(223);

	var _message2 = _interopRequireDefault(_message);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// PropTypes se instala por separado


	// Buena practica uso de PropTypes
	var propTypes = {
	  username: _reactProptypes2.default.string.isRequired,
	  picture: _reactProptypes2.default.string.isRequired,
	  displayName: _reactProptypes2.default.string.isRequired,
	  text: _reactProptypes2.default.string.isRequired,
	  date: _reactProptypes2.default.number.isRequired,
	  numRetweets: _reactProptypes2.default.number.isRequired,
	  numFavorites: _reactProptypes2.default.number.isRequired,
	  onFavorite: _reactProptypes2.default.func.isRequired,
	  onRetweet: _reactProptypes2.default.func.isRequired,
	  onReplyTweet: _reactProptypes2.default.func.isRequired
	};

	var Message = function (_Component) {
	  _inherits(Message, _Component);

	  function Message(props) {
	    _classCallCheck(this, Message);

	    var _this = _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, props));

	    _this.state = {
	      pressFavorite: false,
	      pressRetweet: false
	    };

	    _this.onPressRetweet = _this.onPressRetweet.bind(_this);
	    _this.onPressFavorite = _this.onPressFavorite.bind(_this);
	    return _this;
	  }

	  _createClass(Message, [{
	    key: 'onPressFavorite',
	    value: function onPressFavorite() {
	      this.props.onFavorite();
	      this.setState({
	        pressFavorite: true
	      });
	    }
	  }, {
	    key: 'onPressRetweet',
	    value: function onPressRetweet() {
	      this.props.onRetweet();
	      this.setState({
	        pressRetweet: true
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var dateFormat = (0, _moment2.default)(this.props.date).fromNow();
	      var userLink = '/user/' + this.props.username;
	      return _react2.default.createElement(
	        'div',
	        { className: _message2.default.root },
	        _react2.default.createElement(
	          'div',
	          { className: _message2.default.user },
	          _react2.default.createElement(
	            _reactRouterDom.Link,
	            { to: userLink },
	            _react2.default.createElement(
	              'figure',
	              null,
	              _react2.default.createElement('img', { className: _message2.default.avatar, src: this.props.picture })
	            )
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: _message2.default.displayName },
	            this.props.displayName
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: _message2.default.username },
	            this.props.username
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: _message2.default.date },
	            dateFormat
	          )
	        ),
	        _react2.default.createElement(
	          'h3',
	          null,
	          this.props.text
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: _message2.default.buttons },
	          _react2.default.createElement(
	            'div',
	            { className: _message2.default.icon, onClick: this.props.onReplyTweet },
	            _react2.default.createElement('span', { className: 'fa fa-reply' })
	          ),
	          _react2.default.createElement(
	            'div',
	            {
	              className: this.state.pressRetweet ? _message2.default.rtGreen : '',
	              onClick: this.onPressRetweet
	            },
	            _react2.default.createElement('span', { className: 'fa fa-retweet' }),
	            _react2.default.createElement(
	              'span',
	              { className: _message2.default.num },
	              this.props.numRetweets
	            )
	          ),
	          _react2.default.createElement(
	            'div',
	            {
	              className: this.state.pressFavorite ? _message2.default.favYellow : '',
	              onClick: this.onPressFavorite
	            },
	            _react2.default.createElement('span', { className: 'fa fa-star' }),
	            _react2.default.createElement(
	              'span',
	              { className: _message2.default.num },
	              this.props.numFavorites
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Message;
	}(_react.Component);

	Message.propTypes = propTypes;

	exports.default = Message;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';

	    var hookCallback;

	    function hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return (Object.getOwnPropertyNames(obj).length === 0);
	        } else {
	            var k;
	            for (k in obj) {
	                if (obj.hasOwnProperty(k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null,
	            rfc2822         : false,
	            weekdayMismatch : false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;

	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.weekdayMismatch &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid = isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            }
	            else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid (flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function warn(msg) {
	        if (hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }

	    function set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' + (/\d{1,2}/).source);
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) &&
	                    !hasOwnProp(childConfig, prop) &&
	                    isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function calendar (key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        ss : '%d seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({unit: u, priority: priorities[u]});
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

	    var regexes = {};

	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }

	    function set$1 (mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	            }
	            else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet (units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }


	    function stringSet (units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        if (!m) {
	            return isArray(this._months) ? this._months :
	                this._months['standalone'];
	        }
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        if (!m) {
	            return isArray(this._monthsShort) ? this._monthsShort :
	                this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }

	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }

	    function createDate (y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date = new Date(y, m, d, h, M, s, ms);

	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));

	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        if (!m) {
	            return isArray(this._weekdays) ? this._weekdays :
	                this._weekdays['standalone'];
	        }
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }

	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }

	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }


	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('k',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour they want. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse
	    };

	    // internal storage for locale config files
	    var locales = {};
	    var localeFamilies = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                var aliasedRequire = require;
	                __webpack_require__(99)("./" + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {}
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	            else {
	                if ((typeof console !==  'undefined') && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, config) {
	        if (config !== null) {
	            var locale, parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);


	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale, tmpLocale, parentConfig = baseConfig;
	            // MERGE
	            tmpLocale = loadLocale(name);
	            if (tmpLocale != null) {
	                parentConfig = tmpLocale._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            var curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

	    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10)
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    var obsOffsets = {
	        UT: 0,
	        GMT: 0,
	        EDT: -4 * 60,
	        EST: -5 * 60,
	        CDT: -5 * 60,
	        CST: -6 * 60,
	        MDT: -6 * 60,
	        MST: -7 * 60,
	        PDT: -7 * 60,
	        PST: -8 * 60
	    };

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10);
	            var m = hm % 100, h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i));
	        if (match) {
	            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        // Final attempt, use Input Fallback
	        hooks.createFromInputFallback(config);
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	        'discouraged and will be removed in an upcoming major release. Please refer to ' +
	        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        }  else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if ((isObject(input) && isObjectEmpty(input)) ||
	                (isArray(input) && input.length === 0)) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other < this ? this : other;
	            } else {
	                return createInvalid();
	            }
	        }
	    );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return createInvalid();
	            }
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };

	    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	    function isDurationValid(m) {
	        for (var key in m) {
	            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	                return false;
	            }
	        }

	        var unitHasDecimal = false;
	        for (var i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // FORMATTING

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher);

	        if (matches === null) {
	            return null;
	        }

	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ?
	          0 :
	          parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            }
	            else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (isNumber(input)) {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])                         * sign,
	                h  : toInt(match[HOUR])                         * sign,
	                m  : toInt(match[MINUTE])                       * sign,
	                s  : toInt(match[SECOND])                       * sign,
	                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add      = createAdder(1, 'add');
	    var subtract = createAdder(-1, 'subtract');

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	    }

	    function calendar$1 (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse';

	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween (from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }

	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }

	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }

	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }

	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year': output = monthDiff(this, that) / 12; break;
	            case 'month': output = monthDiff(this, that); break;
	            case 'quarter': output = monthDiff(this, that) / 3; break;
	            case 'second': output = (this - that) / 1e3; break; // 1000
	            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default: output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true;
	        var m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect () {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment';
	        var zone = '';
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        var prefix = '[' + func + '("]';
	        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        var suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 createLocal(time).isValid())) {
	            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 createLocal(time).isValid())) {
	            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow (withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	            case 'date':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }

	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }

	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate () {
	        return new Date(this.valueOf());
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2 () {
	        return isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);


	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }

	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict ?
	          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	          locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add               = add;
	    proto.calendar          = calendar$1;
	    proto.clone             = clone;
	    proto.diff              = diff;
	    proto.endOf             = endOf;
	    proto.format            = format;
	    proto.from              = from;
	    proto.fromNow           = fromNow;
	    proto.to                = to;
	    proto.toNow             = toNow;
	    proto.get               = stringGet;
	    proto.invalidAt         = invalidAt;
	    proto.isAfter           = isAfter;
	    proto.isBefore          = isBefore;
	    proto.isBetween         = isBetween;
	    proto.isSame            = isSame;
	    proto.isSameOrAfter     = isSameOrAfter;
	    proto.isSameOrBefore    = isSameOrBefore;
	    proto.isValid           = isValid$2;
	    proto.lang              = lang;
	    proto.locale            = locale;
	    proto.localeData        = localeData;
	    proto.max               = prototypeMax;
	    proto.min               = prototypeMin;
	    proto.parsingFlags      = parsingFlags;
	    proto.set               = stringSet;
	    proto.startOf           = startOf;
	    proto.subtract          = subtract;
	    proto.toArray           = toArray;
	    proto.toObject          = toObject;
	    proto.toDate            = toDate;
	    proto.toISOString       = toISOString;
	    proto.inspect           = inspect;
	    proto.toJSON            = toJSON;
	    proto.toString          = toString;
	    proto.unix              = unix;
	    proto.valueOf           = valueOf;
	    proto.creationData      = creationData;
	    proto.year       = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear    = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month       = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week           = proto.weeks        = getSetWeek;
	    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	    proto.weeksInYear    = getWeeksInYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.date       = getSetDayOfMonth;
	    proto.day        = proto.days             = getSetDayOfWeek;
	    proto.weekday    = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear  = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset            = getSetOffset;
	    proto.utc                  = setOffsetToUTC;
	    proto.local                = setOffsetToLocal;
	    proto.parseZone            = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST                = isDaylightSavingTime;
	    proto.isLocal              = isLocal;
	    proto.isUtcOffset          = isUtcOffset;
	    proto.isUtc                = isUtc;
	    proto.isUTC                = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	    function createUnix (input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone () {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar        = calendar;
	    proto$1.longDateFormat  = longDateFormat;
	    proto$1.invalidDate     = invalidDate;
	    proto$1.ordinal         = ordinal;
	    proto$1.preparse        = preParsePostFormat;
	    proto$1.postformat      = preParsePostFormat;
	    proto$1.relativeTime    = relativeTime;
	    proto$1.pastFuture      = pastFuture;
	    proto$1.set             = set;

	    proto$1.months            =        localeMonths;
	    proto$1.monthsShort       =        localeMonthsShort;
	    proto$1.monthsParse       =        localeMonthsParse;
	    proto$1.monthsRegex       = monthsRegex;
	    proto$1.monthsShortRegex  = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays       =        localeWeekdays;
	    proto$1.weekdaysMin    =        localeWeekdaysMin;
	    proto$1.weekdaysShort  =        localeWeekdaysShort;
	    proto$1.weekdaysParse  =        localeWeekdaysParse;

	    proto$1.weekdaysRegex       =        weekdaysRegex;
	    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1 (format, index, field, setter) {
	        var locale = getLocale();
	        var utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl (format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports

	    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	    var mathAbs = Math.abs;

	    function abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1 (duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1 (input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1 (input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1 () {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function clone$1 () {
	        return createDuration(this);
	    }

	    function get$2 (units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        ss: 44,         // a few seconds to seconds
	        s : 45,         // seconds to minute
	        m : 45,         // minutes to hour
	        h : 22,         // hours to day
	        d : 26,         // days to month
	        M : 11          // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	        var duration = createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds <= thresholds.ss && ['s', seconds]  ||
	                seconds < thresholds.s   && ['ss', seconds] ||
	                minutes <= 1             && ['m']           ||
	                minutes < thresholds.m   && ['mm', minutes] ||
	                hours   <= 1             && ['h']           ||
	                hours   < thresholds.h   && ['hh', hours]   ||
	                days    <= 1             && ['d']           ||
	                days    < thresholds.d   && ['dd', days]    ||
	                months  <= 1             && ['M']           ||
	                months  < thresholds.M   && ['MM', months]  ||
	                years   <= 1             && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding (roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof(roundingFunction) === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize (withSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var locale = this.localeData();
	        var output = relativeTime$1(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return ((x > 0) - (x < 0)) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000;
	        var days         = abs$1(this._days);
	        var months       = abs$1(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        var totalSign = total < 0 ? '-' : '';
	        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return totalSign + 'P' +
	            (Y ? ymSign + Y + 'Y' : '') +
	            (M ? ymSign + M + 'M' : '') +
	            (D ? daysSign + D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? hmsSign + h + 'H' : '') +
	            (m ? hmsSign + m + 'M' : '') +
	            (s ? hmsSign + s + 'S' : '');
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid        = isValid$1;
	    proto$2.abs            = abs;
	    proto$2.add            = add$1;
	    proto$2.subtract       = subtract$1;
	    proto$2.as             = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds      = asSeconds;
	    proto$2.asMinutes      = asMinutes;
	    proto$2.asHours        = asHours;
	    proto$2.asDays         = asDays;
	    proto$2.asWeeks        = asWeeks;
	    proto$2.asMonths       = asMonths;
	    proto$2.asYears        = asYears;
	    proto$2.valueOf        = valueOf$1;
	    proto$2._bubble        = bubble;
	    proto$2.clone          = clone$1;
	    proto$2.get            = get$2;
	    proto$2.milliseconds   = milliseconds;
	    proto$2.seconds        = seconds;
	    proto$2.minutes        = minutes;
	    proto$2.hours          = hours;
	    proto$2.days           = days;
	    proto$2.weeks          = weeks;
	    proto$2.months         = months;
	    proto$2.years          = years;
	    proto$2.humanize       = humanize;
	    proto$2.toISOString    = toISOString$1;
	    proto$2.toString       = toISOString$1;
	    proto$2.toJSON         = toISOString$1;
	    proto$2.locale         = locale;
	    proto$2.localeData     = localeData;

	    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	    proto$2.lang = lang;

	    // Side effect imports

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    hooks.version = '2.22.2';

	    setHookCallback(createLocal);

	    hooks.fn                    = proto;
	    hooks.min                   = min;
	    hooks.max                   = max;
	    hooks.now                   = now;
	    hooks.utc                   = createUTC;
	    hooks.unix                  = createUnix;
	    hooks.months                = listMonths;
	    hooks.isDate                = isDate;
	    hooks.locale                = getSetGlobalLocale;
	    hooks.invalid               = createInvalid;
	    hooks.duration              = createDuration;
	    hooks.isMoment              = isMoment;
	    hooks.weekdays              = listWeekdays;
	    hooks.parseZone             = createInZone;
	    hooks.localeData            = getLocale;
	    hooks.isDuration            = isDuration;
	    hooks.monthsShort           = listMonthsShort;
	    hooks.weekdaysMin           = listWeekdaysMin;
	    hooks.defineLocale          = defineLocale;
	    hooks.updateLocale          = updateLocale;
	    hooks.locales               = listLocales;
	    hooks.weekdaysShort         = listWeekdaysShort;
	    hooks.normalizeUnits        = normalizeUnits;
	    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat        = getCalendarFormat;
	    hooks.prototype             = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD',                             // <input type="date" />
	        TIME: 'HH:mm',                                  // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
	        WEEK: 'YYYY-[W]WW',                             // <input type="week" />
	        MONTH: 'YYYY-MM'                                // <input type="month" />
	    };

	    return hooks;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(98)(module)))

/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 100,
		"./af.js": 100,
		"./ar": 101,
		"./ar-dz": 102,
		"./ar-dz.js": 102,
		"./ar-kw": 103,
		"./ar-kw.js": 103,
		"./ar-ly": 104,
		"./ar-ly.js": 104,
		"./ar-ma": 105,
		"./ar-ma.js": 105,
		"./ar-sa": 106,
		"./ar-sa.js": 106,
		"./ar-tn": 107,
		"./ar-tn.js": 107,
		"./ar.js": 101,
		"./az": 108,
		"./az.js": 108,
		"./be": 109,
		"./be.js": 109,
		"./bg": 110,
		"./bg.js": 110,
		"./bm": 111,
		"./bm.js": 111,
		"./bn": 112,
		"./bn.js": 112,
		"./bo": 113,
		"./bo.js": 113,
		"./br": 114,
		"./br.js": 114,
		"./bs": 115,
		"./bs.js": 115,
		"./ca": 116,
		"./ca.js": 116,
		"./cs": 117,
		"./cs.js": 117,
		"./cv": 118,
		"./cv.js": 118,
		"./cy": 119,
		"./cy.js": 119,
		"./da": 120,
		"./da.js": 120,
		"./de": 121,
		"./de-at": 122,
		"./de-at.js": 122,
		"./de-ch": 123,
		"./de-ch.js": 123,
		"./de.js": 121,
		"./dv": 124,
		"./dv.js": 124,
		"./el": 125,
		"./el.js": 125,
		"./en-au": 126,
		"./en-au.js": 126,
		"./en-ca": 127,
		"./en-ca.js": 127,
		"./en-gb": 128,
		"./en-gb.js": 128,
		"./en-ie": 129,
		"./en-ie.js": 129,
		"./en-il": 130,
		"./en-il.js": 130,
		"./en-nz": 131,
		"./en-nz.js": 131,
		"./eo": 132,
		"./eo.js": 132,
		"./es": 133,
		"./es-do": 134,
		"./es-do.js": 134,
		"./es-us": 135,
		"./es-us.js": 135,
		"./es.js": 133,
		"./et": 136,
		"./et.js": 136,
		"./eu": 137,
		"./eu.js": 137,
		"./fa": 138,
		"./fa.js": 138,
		"./fi": 139,
		"./fi.js": 139,
		"./fo": 140,
		"./fo.js": 140,
		"./fr": 141,
		"./fr-ca": 142,
		"./fr-ca.js": 142,
		"./fr-ch": 143,
		"./fr-ch.js": 143,
		"./fr.js": 141,
		"./fy": 144,
		"./fy.js": 144,
		"./gd": 145,
		"./gd.js": 145,
		"./gl": 146,
		"./gl.js": 146,
		"./gom-latn": 147,
		"./gom-latn.js": 147,
		"./gu": 148,
		"./gu.js": 148,
		"./he": 149,
		"./he.js": 149,
		"./hi": 150,
		"./hi.js": 150,
		"./hr": 151,
		"./hr.js": 151,
		"./hu": 152,
		"./hu.js": 152,
		"./hy-am": 153,
		"./hy-am.js": 153,
		"./id": 154,
		"./id.js": 154,
		"./is": 155,
		"./is.js": 155,
		"./it": 156,
		"./it.js": 156,
		"./ja": 157,
		"./ja.js": 157,
		"./jv": 158,
		"./jv.js": 158,
		"./ka": 159,
		"./ka.js": 159,
		"./kk": 160,
		"./kk.js": 160,
		"./km": 161,
		"./km.js": 161,
		"./kn": 162,
		"./kn.js": 162,
		"./ko": 163,
		"./ko.js": 163,
		"./ky": 164,
		"./ky.js": 164,
		"./lb": 165,
		"./lb.js": 165,
		"./lo": 166,
		"./lo.js": 166,
		"./lt": 167,
		"./lt.js": 167,
		"./lv": 168,
		"./lv.js": 168,
		"./me": 169,
		"./me.js": 169,
		"./mi": 170,
		"./mi.js": 170,
		"./mk": 171,
		"./mk.js": 171,
		"./ml": 172,
		"./ml.js": 172,
		"./mn": 173,
		"./mn.js": 173,
		"./mr": 174,
		"./mr.js": 174,
		"./ms": 175,
		"./ms-my": 176,
		"./ms-my.js": 176,
		"./ms.js": 175,
		"./mt": 177,
		"./mt.js": 177,
		"./my": 178,
		"./my.js": 178,
		"./nb": 179,
		"./nb.js": 179,
		"./ne": 180,
		"./ne.js": 180,
		"./nl": 181,
		"./nl-be": 182,
		"./nl-be.js": 182,
		"./nl.js": 181,
		"./nn": 183,
		"./nn.js": 183,
		"./pa-in": 184,
		"./pa-in.js": 184,
		"./pl": 185,
		"./pl.js": 185,
		"./pt": 186,
		"./pt-br": 187,
		"./pt-br.js": 187,
		"./pt.js": 186,
		"./ro": 188,
		"./ro.js": 188,
		"./ru": 189,
		"./ru.js": 189,
		"./sd": 190,
		"./sd.js": 190,
		"./se": 191,
		"./se.js": 191,
		"./si": 192,
		"./si.js": 192,
		"./sk": 193,
		"./sk.js": 193,
		"./sl": 194,
		"./sl.js": 194,
		"./sq": 195,
		"./sq.js": 195,
		"./sr": 196,
		"./sr-cyrl": 197,
		"./sr-cyrl.js": 197,
		"./sr.js": 196,
		"./ss": 198,
		"./ss.js": 198,
		"./sv": 199,
		"./sv.js": 199,
		"./sw": 200,
		"./sw.js": 200,
		"./ta": 201,
		"./ta.js": 201,
		"./te": 202,
		"./te.js": 202,
		"./tet": 203,
		"./tet.js": 203,
		"./tg": 204,
		"./tg.js": 204,
		"./th": 205,
		"./th.js": 205,
		"./tl-ph": 206,
		"./tl-ph.js": 206,
		"./tlh": 207,
		"./tlh.js": 207,
		"./tr": 208,
		"./tr.js": 208,
		"./tzl": 209,
		"./tzl.js": 209,
		"./tzm": 210,
		"./tzm-latn": 211,
		"./tzm-latn.js": 211,
		"./tzm.js": 210,
		"./ug-cn": 212,
		"./ug-cn.js": 212,
		"./uk": 213,
		"./uk.js": 213,
		"./ur": 214,
		"./ur.js": 214,
		"./uz": 215,
		"./uz-latn": 216,
		"./uz-latn.js": 216,
		"./uz.js": 215,
		"./vi": 217,
		"./vi.js": 217,
		"./x-pseudo": 218,
		"./x-pseudo.js": 218,
		"./yo": 219,
		"./yo.js": 219,
		"./zh-cn": 220,
		"./zh-cn.js": 220,
		"./zh-hk": 221,
		"./zh-hk.js": 221,
		"./zh-tw": 222,
		"./zh-tw.js": 222
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 99;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            ss : '%d sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });

	    return af;

	})));


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'يناير',
	        'فبراير',
	        'مارس',
	        'أبريل',
	        'مايو',
	        'يونيو',
	        'يوليو',
	        'أغسطس',
	        'سبتمبر',
	        'أكتوبر',
	        'نوفمبر',
	        'ديسمبر'
	    ];

	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            ss : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar;

	})));


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var arDz = moment.defineLocale('ar-dz', {
	        months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            ss : '%d ثانية',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 4  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return arDz;

	})));


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var arKw = moment.defineLocale('ar-kw', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            ss : '%d ثانية',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return arKw;

	})));


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '1',
	        '2': '2',
	        '3': '3',
	        '4': '4',
	        '5': '5',
	        '6': '6',
	        '7': '7',
	        '8': '8',
	        '9': '9',
	        '0': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'يناير',
	        'فبراير',
	        'مارس',
	        'أبريل',
	        'مايو',
	        'يونيو',
	        'يوليو',
	        'أغسطس',
	        'سبتمبر',
	        'أكتوبر',
	        'نوفمبر',
	        'ديسمبر'
	    ];

	    var arLy = moment.defineLocale('ar-ly', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            ss : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return arLy;

	})));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var arMa = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            ss : '%d ثانية',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return arMa;

	})));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    var arSa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            ss : '%d ثانية',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return arSa;

	})));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var arTn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss : '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return arTn;

	})));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };

	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyə',
	            ss : '%d saniyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return az;

	})));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    var be = moment.defineLocale('be', {
	        months : {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return be;

	})));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[В изминалата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            ss : '%d секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bg;

	})));


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var bm = moment.defineLocale('bm', {
	        months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
	        monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
	        weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
	        weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
	        weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'MMMM [tile] D [san] YYYY',
	            LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	            LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
	        },
	        calendar : {
	            sameDay : '[Bi lɛrɛ] LT',
	            nextDay : '[Sini lɛrɛ] LT',
	            nextWeek : 'dddd [don lɛrɛ] LT',
	            lastDay : '[Kunu lɛrɛ] LT',
	            lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s kɔnɔ',
	            past : 'a bɛ %s bɔ',
	            s : 'sanga dama dama',
	            ss : 'sekondi %d',
	            m : 'miniti kelen',
	            mm : 'miniti %d',
	            h : 'lɛrɛ kelen',
	            hh : 'lɛrɛ %d',
	            d : 'tile kelen',
	            dd : 'tile %d',
	            M : 'kalo kelen',
	            MM : 'kalo %d',
	            y : 'san kelen',
	            yy : 'san %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return bm;

	})));


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কয়েক সেকেন্ড',
	            ss : '%d সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'রাত' && hour >= 4) ||
	                    (meridiem === 'দুপুর' && hour < 5) ||
	                    meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bn;

	})));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };

	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            ss : '%d སྐར་ཆ།',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                    meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bo;

	})));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            ss : '%d eilenn',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return br;

	})));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            ss     : translate,
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bs;

	})));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ca = moment.defineLocale('ca', {
	        months : {
	            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
	            isFormat: /D[oD]?(\s)+MMMM/
	        },
	        monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [de] YYYY',
	            ll : 'D MMM YYYY',
	            LLL : 'D MMMM [de] YYYY [a les] H:mm',
	            lll : 'D MMM YYYY, H:mm',
	            LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
	            llll : 'ddd D MMM YYYY, H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'd\'aquí %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            ss : '%d segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ca;

	})));


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekund');
	                } else {
	                    return result + 'sekundami';
	                }
	                break;
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	                break;
	        }
	    }

	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        shortMonthsParse : (function (monthsShort) {
	            var i, _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort)),
	        longMonthsParse : (function (months) {
	            var i, _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm',
	            l : 'D. M. YYYY'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cs;

	})));


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            ss : '%d ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return cv;

	})));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            ss: '%d eiliad',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cy;

	})));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay : '[i dag kl.] LT',
	            nextDay : '[i morgen kl.] LT',
	            nextWeek : 'på dddd [kl.] LT',
	            lastDay : '[i går kl.] LT',
	            lastWeek : '[i] dddd[s kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            ss : '%d sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return da;

	})));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            ss : '%d Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de;

	})));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var deAt = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            ss : '%d Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return deAt;

	})));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var deCh = moment.defineLocale('de-ch', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            ss : '%d Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return deCh;

	})));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = [
	        'ޖެނުއަރީ',
	        'ފެބްރުއަރީ',
	        'މާރިޗު',
	        'އޭޕްރީލު',
	        'މޭ',
	        'ޖޫން',
	        'ޖުލައި',
	        'އޯގަސްޓު',
	        'ސެޕްޓެމްބަރު',
	        'އޮކްޓޯބަރު',
	        'ނޮވެމްބަރު',
	        'ޑިސެމްބަރު'
	    ], weekdays = [
	        'އާދިއްތަ',
	        'ހޯމަ',
	        'އަންގާރަ',
	        'ބުދަ',
	        'ބުރާސްފަތި',
	        'ހުކުރު',
	        'ހޮނިހިރު'
	    ];

	    var dv = moment.defineLocale('dv', {
	        months : months,
	        monthsShort : months,
	        weekdays : weekdays,
	        weekdaysShort : weekdays,
	        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat : {

	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/M/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM : function (input) {
	            return 'މފ' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar : {
	            sameDay : '[މިއަދު] LT',
	            nextDay : '[މާދަމާ] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[އިއްޔެ] LT',
	            lastWeek : '[ފާއިތުވި] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ތެރޭގައި %s',
	            past : 'ކުރިން %s',
	            s : 'ސިކުންތުކޮޅެއް',
	            ss : 'd% ސިކުންތު',
	            m : 'މިނިޓެއް',
	            mm : 'މިނިޓު %d',
	            h : 'ގަޑިއިރެއް',
	            hh : 'ގަޑިއިރު %d',
	            d : 'ދުވަހެއް',
	            dd : 'ދުވަސް %d',
	            M : 'މަހެއް',
	            MM : 'މަސް %d',
	            y : 'އަހަރެއް',
	            yy : 'އަހަރު %d'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 7,  // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return dv;

	})));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }


	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return this._monthsNominativeEl;
	            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            ss : '%d δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });

	    return el;

	})));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enAu = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return enAu;

	})));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enCa = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    return enCa;

	})));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enGb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return enGb;

	})));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enIe = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return enIe;

	})));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enIl = moment.defineLocale('en-il', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    return enIl;

	})));


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var enNz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return enNz;

	})));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	        weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	        weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-a de] MMMM, YYYY',
	            LLL : 'D[-a de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'post %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            ss : '%d sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eo;

	})));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

	    var es = moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex : monthsRegex,
	        monthsShortRegex : monthsRegex,
	        monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            ss : '%d segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es;

	})));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
	    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

	    var esDo = moment.defineLocale('es-do', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            ss : '%d segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return esDo;

	})));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var esUs = moment.defineLocale('es-us', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'MM/DD/YYYY',
	            LL : 'MMMM [de] D [de] YYYY',
	            LLL : 'MMMM [de] D [de] YYYY h:mm A',
	            LLLL : 'dddd, MMMM [de] D [de] YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            ss : '%d segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return esUs;

	})));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'ss': [number + 'sekundi', number + 'sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            ss     : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return et;

	})));


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            ss : '%d segundo',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eu;

	})));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چند ثانیه',
	            ss : 'ثانیه d%',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return fa;

	})));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'ss':
	                return isFuture ? 'sekunnin' : 'sekuntia';
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fi;

	})));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            ss : '%d sekundir',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fo;

	})));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Aujourd’hui à] LT',
	            nextDay : '[Demain à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[Hier à] LT',
	            lastWeek : 'dddd [dernier à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            ss : '%d secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                // TODO: Return 'e' when day of month > 1. Move this case inside
	                // block for masculine words below.
	                // See https://github.com/moment/moment/issues/3375
	                case 'D':
	                    return number + (number === 1 ? 'er' : '');

	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');

	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr;

	})));


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var frCa = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Aujourd’hui à] LT',
	            nextDay : '[Demain à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[Hier à] LT',
	            lastWeek : 'dddd [dernier à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            ss : '%d secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');

	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        }
	    });

	    return frCa;

	})));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var frCh = moment.defineLocale('fr-ch', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Aujourd’hui à] LT',
	            nextDay : '[Demain à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[Hier à] LT',
	            lastWeek : 'dddd [dernier à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            ss : '%d secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');

	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return frCh;

	})));


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            ss : '%d sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fy;

	})));


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = [
	        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	    ];

	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

	    var gd = moment.defineLocale('gd', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParseExact : true,
	        weekdays : weekdays,
	        weekdaysShort : weekdaysShort,
	        weekdaysMin : weekdaysMin,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[An-diugh aig] LT',
	            nextDay : '[A-màireach aig] LT',
	            nextWeek : 'dddd [aig] LT',
	            lastDay : '[An-dè aig] LT',
	            lastWeek : 'dddd [seo chaidh] [aig] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ann an %s',
	            past : 'bho chionn %s',
	            s : 'beagan diogan',
	            ss : '%d diogan',
	            m : 'mionaid',
	            mm : '%d mionaidean',
	            h : 'uair',
	            hh : '%d uairean',
	            d : 'latha',
	            dd : '%d latha',
	            M : 'mìos',
	            MM : '%d mìosan',
	            y : 'bliadhna',
	            yy : '%d bliadhna'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
	        ordinal : function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gd;

	})));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var gl = moment.defineLocale('gl', {
	        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            ss : '%d segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gl;

	})));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['thodde secondanim', 'thodde second'],
	            'ss': [number + ' secondanim', number + ' second'],
	            'm': ['eka mintan', 'ek minute'],
	            'mm': [number + ' mintanim', number + ' mintam'],
	            'h': ['eka horan', 'ek hor'],
	            'hh': [number + ' horanim', number + ' horam'],
	            'd': ['eka disan', 'ek dis'],
	            'dd': [number + ' disanim', number + ' dis'],
	            'M': ['eka mhoinean', 'ek mhoino'],
	            'MM': [number + ' mhoineanim', number + ' mhoine'],
	            'y': ['eka vorsan', 'ek voros'],
	            'yy': [number + ' vorsanim', number + ' vorsam']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var gomLatn = moment.defineLocale('gom-latn', {
	        months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
	        monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
	        weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	        weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'A h:mm [vazta]',
	            LTS : 'A h:mm:ss [vazta]',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY A h:mm [vazta]',
	            LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
	            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
	        },
	        calendar : {
	            sameDay: '[Aiz] LT',
	            nextDay: '[Faleam] LT',
	            nextWeek: '[Ieta to] dddd[,] LT',
	            lastDay: '[Kal] LT',
	            lastWeek: '[Fatlo] dddd[,] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s',
	            past : '%s adim',
	            s : processRelativeTime,
	            ss : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}(er)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                // the ordinal 'er' only applies to day of the month
	                case 'D':
	                    return number + 'er';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        },
	        meridiemParse: /rati|sokalli|donparam|sanje/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'rati') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'sokalli') {
	                return hour;
	            } else if (meridiem === 'donparam') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'sanje') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'rati';
	            } else if (hour < 12) {
	                return 'sokalli';
	            } else if (hour < 16) {
	                return 'donparam';
	            } else if (hour < 20) {
	                return 'sanje';
	            } else {
	                return 'rati';
	            }
	        }
	    });

	    return gomLatn;

	})));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	            '1': '૧',
	            '2': '૨',
	            '3': '૩',
	            '4': '૪',
	            '5': '૫',
	            '6': '૬',
	            '7': '૭',
	            '8': '૮',
	            '9': '૯',
	            '0': '૦'
	        },
	        numberMap = {
	            '૧': '1',
	            '૨': '2',
	            '૩': '3',
	            '૪': '4',
	            '૫': '5',
	            '૬': '6',
	            '૭': '7',
	            '૮': '8',
	            '૯': '9',
	            '૦': '0'
	        };

	    var gu = moment.defineLocale('gu', {
	        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
	        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
	        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
	        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm વાગ્યે',
	            LTS: 'A h:mm:ss વાગ્યે',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
	        },
	        calendar: {
	            sameDay: '[આજ] LT',
	            nextDay: '[કાલે] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ગઇકાલે] LT',
	            lastWeek: '[પાછલા] dddd, LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s મા',
	            past: '%s પેહલા',
	            s: 'અમુક પળો',
	            ss: '%d સેકંડ',
	            m: 'એક મિનિટ',
	            mm: '%d મિનિટ',
	            h: 'એક કલાક',
	            hh: '%d કલાક',
	            d: 'એક દિવસ',
	            dd: '%d દિવસ',
	            M: 'એક મહિનો',
	            MM: '%d મહિનો',
	            y: 'એક વર્ષ',
	            yy: '%d વર્ષ'
	        },
	        preparse: function (string) {
	            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
	        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'રાત') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'સવાર') {
	                return hour;
	            } else if (meridiem === 'બપોર') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'સાંજ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'રાત';
	            } else if (hour < 10) {
	                return 'સવાર';
	            } else if (hour < 17) {
	                return 'બપોર';
	            } else if (hour < 20) {
	                return 'સાંજ';
	            } else {
	                return 'રાત';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return gu;

	})));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            ss : '%d שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM : function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });

	    return he;

	})));


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            ss : '%d सेकंड',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hi;

	})));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var hr = moment.defineLocale('hr', {
	        months : {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            ss     : translate,
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hr;

	})));


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number;
	        switch (key) {
	            case 's':
	                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	            case 'ss':
	                return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return hu;

	})));


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var hyAm = moment.defineLocale('hy-am', {
	        months : {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            ss : '%d վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hyAm;

	})));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            ss : '%d detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return id;

	})));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	            case 'ss':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
	                }
	                return result + 'sekúnda';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return is;

	})));


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
	        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            ss : '%d secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return it;

	})));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日 HH:mm',
	            LLLL : 'YYYY年M月D日 dddd HH:mm',
	            l : 'YYYY/MM/DD',
	            ll : 'YYYY年M月D日',
	            lll : 'YYYY年M月D日 HH:mm',
	            llll : 'YYYY年M月D日(ddd) HH:mm'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : function (now) {
	                if (now.week() < this.week()) {
	                    return '[来週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            lastDay : '[昨日] LT',
	            lastWeek : function (now) {
	                if (this.week() < now.week()) {
	                    return '[先週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}日/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            ss : '%d秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });

	    return ja;

	})));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            ss : '%d detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return jv;

	})));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ka = moment.defineLocale('ka', {
	        months : {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            ss : '%d წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });

	    return ka;

	})));


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };

	    var kk = moment.defineLocale('kk', {
	        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгін сағат] LT',
	            nextDay : '[Ертең сағат] LT',
	            nextWeek : 'dddd [сағат] LT',
	            lastDay : '[Кеше сағат] LT',
	            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ішінде',
	            past : '%s бұрын',
	            s : 'бірнеше секунд',
	            ss : '%d секунд',
	            m : 'бір минут',
	            mm : '%d минут',
	            h : 'бір сағат',
	            hh : '%d сағат',
	            d : 'бір күн',
	            dd : '%d күн',
	            M : 'бір ай',
	            MM : '%d ай',
	            y : 'бір жыл',
	            yy : '%d жыл'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return kk;

	})));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '១',
	        '2': '២',
	        '3': '៣',
	        '4': '៤',
	        '5': '៥',
	        '6': '៦',
	        '7': '៧',
	        '8': '៨',
	        '9': '៩',
	        '0': '០'
	    }, numberMap = {
	        '១': '1',
	        '២': '2',
	        '៣': '3',
	        '៤': '4',
	        '៥': '5',
	        '៦': '6',
	        '៧': '7',
	        '៨': '8',
	        '៩': '9',
	        '០': '0'
	    };

	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	            '_'
	        ),
	        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	            '_'
	        ),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ព្រឹក|ល្ងាច/,
	        isPM: function (input) {
	            return input === 'ល្ងាច';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ព្រឹក';
	            } else {
	                return 'ល្ងាច';
	            }
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            ss: '%d វិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        dayOfMonthOrdinalParse : /ទី\d{1,2}/,
	        ordinal : 'ទី%d',
	        preparse: function (string) {
	            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return km;

	})));


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '೧',
	        '2': '೨',
	        '3': '೩',
	        '4': '೪',
	        '5': '೫',
	        '6': '೬',
	        '7': '೭',
	        '8': '೮',
	        '9': '೯',
	        '0': '೦'
	    },
	    numberMap = {
	        '೧': '1',
	        '೨': '2',
	        '೩': '3',
	        '೪': '4',
	        '೫': '5',
	        '೬': '6',
	        '೭': '7',
	        '೮': '8',
	        '೯': '9',
	        '೦': '0'
	    };

	    var kn = moment.defineLocale('kn', {
	        months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
	        monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
	        weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	        weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[ಇಂದು] LT',
	            nextDay : '[ನಾಳೆ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ನಿನ್ನೆ] LT',
	            lastWeek : '[ಕೊನೆಯ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ನಂತರ',
	            past : '%s ಹಿಂದೆ',
	            s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
	            ss : '%d ಸೆಕೆಂಡುಗಳು',
	            m : 'ಒಂದು ನಿಮಿಷ',
	            mm : '%d ನಿಮಿಷ',
	            h : 'ಒಂದು ಗಂಟೆ',
	            hh : '%d ಗಂಟೆ',
	            d : 'ಒಂದು ದಿನ',
	            dd : '%d ದಿನ',
	            M : 'ಒಂದು ತಿಂಗಳು',
	            MM : '%d ತಿಂಗಳು',
	            y : 'ಒಂದು ವರ್ಷ',
	            yy : '%d ವರ್ಷ'
	        },
	        preparse: function (string) {
	            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ರಾತ್ರಿ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	                return hour;
	            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ಸಂಜೆ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ರಾತ್ರಿ';
	            } else if (hour < 10) {
	                return 'ಬೆಳಿಗ್ಗೆ';
	            } else if (hour < 17) {
	                return 'ಮಧ್ಯಾಹ್ನ';
	            } else if (hour < 20) {
	                return 'ಸಂಜೆ';
	            } else {
	                return 'ರಾತ್ರಿ';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	        ordinal : function (number) {
	            return number + 'ನೇ';
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return kn;

	})));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h:mm',
	            LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
	            l : 'YYYY.MM.DD.',
	            ll : 'YYYY년 MMMM D일',
	            lll : 'YYYY년 MMMM D일 A h:mm',
	            llll : 'YYYY년 MMMM D일 dddd A h:mm'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇 초',
	            ss : '%d초',
	            m : '1분',
	            mm : '%d분',
	            h : '한 시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한 달',
	            MM : '%d달',
	            y : '일 년',
	            yy : '%d년'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '일';
	                case 'M':
	                    return number + '월';
	                case 'w':
	                case 'W':
	                    return number + '주';
	                default:
	                    return number;
	            }
	        },
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });

	    return ko;

	})));


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү'
	    };

	    var ky = moment.defineLocale('ky', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгүн саат] LT',
	            nextDay : '[Эртең саат] LT',
	            nextWeek : 'dddd [саат] LT',
	            lastDay : '[Кече саат] LT',
	            lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ичинде',
	            past : '%s мурун',
	            s : 'бирнече секунд',
	            ss : '%d секунд',
	            m : 'бир мүнөт',
	            mm : '%d мүнөт',
	            h : 'бир саат',
	            hh : '%d саат',
	            d : 'бир күн',
	            dd : '%d күн',
	            M : 'бир ай',
	            MM : '%d ай',
	            y : 'бир жыл',
	            yy : '%d жыл'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ky;

	})));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            ss : '%d Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lb;

	})));


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var lo = moment.defineLocale('lo', {
	        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar : {
	            sameDay : '[ມື້ນີ້ເວລາ] LT',
	            nextDay : '[ມື້ອື່ນເວລາ] LT',
	            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ອີກ %s',
	            past : '%sຜ່ານມາ',
	            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	            ss : '%d ວິນາທີ' ,
	            m : '1 ນາທີ',
	            mm : '%d ນາທີ',
	            h : '1 ຊົ່ວໂມງ',
	            hh : '%d ຊົ່ວໂມງ',
	            d : '1 ມື້',
	            dd : '%d ມື້',
	            M : '1 ເດືອນ',
	            MM : '%d ເດືອນ',
	            y : '1 ປີ',
	            yy : '%d ປີ'
	        },
	        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	        ordinal : function (number) {
	            return 'ທີ່' + number;
	        }
	    });

	    return lo;

	})));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var units = {
	        'ss' : 'sekundė_sekundžių_sekundes',
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months : {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	        },
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            ss : translate,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lt;

	})));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var units = {
	        'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }

	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            ss : relativeTimeWithPlural,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lv;

	})));


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['sekund', 'sekunda', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            ss     : translator.translate,
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return me;

	})));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            ss: '%d hēkona',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return mi;

	})));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : '[Во] dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            ss : '%d секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mk;

	})));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            ss : '%d സെക്കൻഡ്',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                    meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });

	    return ml;

	})));


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key, isFuture) {
	        switch (key) {
	            case 's':
	                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
	            case 'ss':
	                return number + (withoutSuffix ? ' секунд' : ' секундын');
	            case 'm':
	            case 'mm':
	                return number + (withoutSuffix ? ' минут' : ' минутын');
	            case 'h':
	            case 'hh':
	                return number + (withoutSuffix ? ' цаг' : ' цагийн');
	            case 'd':
	            case 'dd':
	                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
	            case 'M':
	            case 'MM':
	                return number + (withoutSuffix ? ' сар' : ' сарын');
	            case 'y':
	            case 'yy':
	                return number + (withoutSuffix ? ' жил' : ' жилийн');
	            default:
	                return number;
	        }
	    }

	    var mn = moment.defineLocale('mn', {
	        months : 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),
	        monthsShort : '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
	        weekdaysShort : 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
	        weekdaysMin : 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY оны MMMMын D',
	            LLL : 'YYYY оны MMMMын D HH:mm',
	            LLLL : 'dddd, YYYY оны MMMMын D HH:mm'
	        },
	        meridiemParse: /ҮӨ|ҮХ/i,
	        isPM : function (input) {
	            return input === 'ҮХ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ҮӨ';
	            } else {
	                return 'ҮХ';
	            }
	        },
	        calendar : {
	            sameDay : '[Өнөөдөр] LT',
	            nextDay : '[Маргааш] LT',
	            nextWeek : '[Ирэх] dddd LT',
	            lastDay : '[Өчигдөр] LT',
	            lastWeek : '[Өнгөрсөн] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s дараа',
	            past : '%s өмнө',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + ' өдөр';
	                default:
	                    return number;
	            }
	        }
	    });

	    return mn;

	})));


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    function relativeTimeMr(number, withoutSuffix, string, isFuture)
	    {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's': output = 'काही सेकंद'; break;
	                case 'ss': output = '%d सेकंद'; break;
	                case 'm': output = 'एक मिनिट'; break;
	                case 'mm': output = '%d मिनिटे'; break;
	                case 'h': output = 'एक तास'; break;
	                case 'hh': output = '%d तास'; break;
	                case 'd': output = 'एक दिवस'; break;
	                case 'dd': output = '%d दिवस'; break;
	                case 'M': output = 'एक महिना'; break;
	                case 'MM': output = '%d महिने'; break;
	                case 'y': output = 'एक वर्ष'; break;
	                case 'yy': output = '%d वर्षे'; break;
	            }
	        }
	        else {
	            switch (string) {
	                case 's': output = 'काही सेकंदां'; break;
	                case 'ss': output = '%d सेकंदां'; break;
	                case 'm': output = 'एका मिनिटा'; break;
	                case 'mm': output = '%d मिनिटां'; break;
	                case 'h': output = 'एका तासा'; break;
	                case 'hh': output = '%d तासां'; break;
	                case 'd': output = 'एका दिवसा'; break;
	                case 'dd': output = '%d दिवसां'; break;
	                case 'M': output = 'एका महिन्या'; break;
	                case 'MM': output = '%d महिन्यां'; break;
	                case 'y': output = 'एका वर्षा'; break;
	                case 'yy': output = '%d वर्षां'; break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }

	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            ss: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mr;

	})));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            ss : '%d saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms;

	})));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var msMy = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            ss : '%d saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return msMy;

	})));


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var mt = moment.defineLocale('mt', {
	        months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
	        monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
	        weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
	        weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
	        weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Illum fil-]LT',
	            nextDay : '[Għada fil-]LT',
	            nextWeek : 'dddd [fil-]LT',
	            lastDay : '[Il-bieraħ fil-]LT',
	            lastWeek : 'dddd [li għadda] [fil-]LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'f’ %s',
	            past : '%s ilu',
	            s : 'ftit sekondi',
	            ss : '%d sekondi',
	            m : 'minuta',
	            mm : '%d minuti',
	            h : 'siegħa',
	            hh : '%d siegħat',
	            d : 'ġurnata',
	            dd : '%d ġranet',
	            M : 'xahar',
	            MM : '%d xhur',
	            y : 'sena',
	            yy : '%d sni'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return mt;

	})));


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };

	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            ss : '%d စက္ကန့်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return my;

	})));


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'noen sekunder',
	            ss : '%d sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nb;

	})));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोलि] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडि',
	            s : 'केही क्षण',
	            ss : '%d सेकेण्ड',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ne;

	})));


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },

	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            ss : '%d seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nl;

	})));


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	    var nlBe = moment.defineLocale('nl-be', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },

	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            ss : '%d seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nlBe;

	})));


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s sidan',
	            s : 'nokre sekund',
	            ss : '%d sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nn;

	})));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    },
	    numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };

	    var paIn = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm ਵਜੇ',
	            LTS : 'A h:mm:ss ਵਜੇ',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar : {
	            sameDay : '[ਅਜ] LT',
	            nextDay : '[ਕਲ] LT',
	            nextWeek : '[ਅਗਲਾ] dddd, LT',
	            lastDay : '[ਕਲ] LT',
	            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ਵਿੱਚ',
	            past : '%s ਪਿਛਲੇ',
	            s : 'ਕੁਝ ਸਕਿੰਟ',
	            ss : '%d ਸਕਿੰਟ',
	            m : 'ਇਕ ਮਿੰਟ',
	            mm : '%d ਮਿੰਟ',
	            h : 'ਇੱਕ ਘੰਟਾ',
	            hh : '%d ਘੰਟੇ',
	            d : 'ਇੱਕ ਦਿਨ',
	            dd : '%d ਦਿਨ',
	            M : 'ਇੱਕ ਮਹੀਨਾ',
	            MM : '%d ਮਹੀਨੇ',
	            y : 'ਇੱਕ ਸਾਲ',
	            yy : '%d ਸਾਲ'
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return paIn;

	})));


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                return result + (plural(number) ? 'sekundy' : 'sekund');
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix  ? 'godzina'  : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return monthsNominative;
	            } else if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W niedzielę o] LT';

	                    case 2:
	                        return '[We wtorek o] LT';

	                    case 3:
	                        return '[W środę o] LT';

	                    case 6:
	                        return '[W sobotę o] LT';

	                    default:
	                        return '[W] dddd [o] LT';
	                }
	            },
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pl;

	})));


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var pt = moment.defineLocale('pt', {
	        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            ss : '%d segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pt;

	})));


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ptBr = moment.defineLocale('pt-br', {
	        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'poucos segundos',
	            ss : '%d segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });

	    return ptBr;

	})));


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'ss': 'secunde',
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }

	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            ss : relativeTimeWithPlural,
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ro;

	})));


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months : {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort : {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	        },
	        weekdays : {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // копия предыдущего
	        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // полные названия с падежами
	        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

	        // Выражение, которое соотвествует только сокращённым формам
	        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., H:mm',
	            LLLL : 'dddd, D MMMM YYYY г., H:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня, в] LT',
	            nextDay: '[Завтра, в] LT',
	            lastDay: '[Вчера, в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            ss : relativeTimeWithPlural,
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ru;

	})));


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = [
	        'جنوري',
	        'فيبروري',
	        'مارچ',
	        'اپريل',
	        'مئي',
	        'جون',
	        'جولاءِ',
	        'آگسٽ',
	        'سيپٽمبر',
	        'آڪٽوبر',
	        'نومبر',
	        'ڊسمبر'
	    ];
	    var days = [
	        'آچر',
	        'سومر',
	        'اڱارو',
	        'اربع',
	        'خميس',
	        'جمع',
	        'ڇنڇر'
	    ];

	    var sd = moment.defineLocale('sd', {
	        months : months,
	        monthsShort : months,
	        weekdays : days,
	        weekdaysShort : days,
	        weekdaysMin : days,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd، D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /صبح|شام/,
	        isPM : function (input) {
	            return 'شام' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar : {
	            sameDay : '[اڄ] LT',
	            nextDay : '[سڀاڻي] LT',
	            nextWeek : 'dddd [اڳين هفتي تي] LT',
	            lastDay : '[ڪالهه] LT',
	            lastWeek : '[گزريل هفتي] dddd [تي] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s پوء',
	            past : '%s اڳ',
	            s : 'چند سيڪنڊ',
	            ss : '%d سيڪنڊ',
	            m : 'هڪ منٽ',
	            mm : '%d منٽ',
	            h : 'هڪ ڪلاڪ',
	            hh : '%d ڪلاڪ',
	            d : 'هڪ ڏينهن',
	            dd : '%d ڏينهن',
	            M : 'هڪ مهينو',
	            MM : '%d مهينا',
	            y : 'هڪ سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sd;

	})));


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var se = moment.defineLocale('se', {
	        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'MMMM D. [b.] YYYY',
	            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s geažes',
	            past : 'maŋit %s',
	            s : 'moadde sekunddat',
	            ss: '%d sekunddat',
	            m : 'okta minuhta',
	            mm : '%d minuhtat',
	            h : 'okta diimmu',
	            hh : '%d diimmut',
	            d : 'okta beaivi',
	            dd : '%d beaivvit',
	            M : 'okta mánnu',
	            MM : '%d mánut',
	            y : 'okta jahki',
	            yy : '%d jagit'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return se;

	})));


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            ss : 'තත්පර %d',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM : function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });

	    return si;

	})));


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
	                } else {
	                    return result + 'sekundami';
	                }
	                break;
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	                break;
	        }
	    }

	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            ss : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sk;

	})));


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	            case 'ss':
	                if (number === 1) {
	                    result += withoutSuffix ? 'sekundo' : 'sekundi';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
	                } else {
	                    result += withoutSuffix || isFuture ? 'sekund' : 'sekund';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }

	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            ss     : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sl;

	})));


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            ss : '%d sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sq;

	})));


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['sekunda', 'sekunde', 'sekundi'],
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            ss     : translator.translate,
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr;

	})));


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            ss: ['секунда', 'секунде', 'секунди'],
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var srCyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            ss     : translator.translate,
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return srCyrl;

	})));


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ss = moment.defineLocale('ss', {
	        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Namuhla nga] LT',
	            nextDay : '[Kusasa nga] LT',
	            nextWeek : 'dddd [nga] LT',
	            lastDay : '[Itolo nga] LT',
	            lastWeek : 'dddd [leliphelile] [nga] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'nga %s',
	            past : 'wenteka nga %s',
	            s : 'emizuzwana lomcane',
	            ss : '%d mzuzwana',
	            m : 'umzuzu',
	            mm : '%d emizuzu',
	            h : 'lihora',
	            hh : '%d emahora',
	            d : 'lilanga',
	            dd : '%d emalanga',
	            M : 'inyanga',
	            MM : '%d tinyanga',
	            y : 'umnyaka',
	            yy : '%d iminyaka'
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal : '%d',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ss;

	})));


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            ss : '%d sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sv;

	})));


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var sw = moment.defineLocale('sw', {
	        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[leo saa] LT',
	            nextDay : '[kesho saa] LT',
	            nextWeek : '[wiki ijayo] dddd [saat] LT',
	            lastDay : '[jana] LT',
	            lastWeek : '[wiki iliyopita] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s baadaye',
	            past : 'tokea %s',
	            s : 'hivi punde',
	            ss : 'sekunde %d',
	            m : 'dakika moja',
	            mm : 'dakika %d',
	            h : 'saa limoja',
	            hh : 'masaa %d',
	            d : 'siku moja',
	            dd : 'masiku %d',
	            M : 'mwezi mmoja',
	            MM : 'miezi %d',
	            y : 'mwaka mmoja',
	            yy : 'miaka %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sw;

	})));


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    }, numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };

	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            ss : '%d விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ta;

	})));


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var te = moment.defineLocale('te', {
	        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[నేడు] LT',
	            nextDay : '[రేపు] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[నిన్న] LT',
	            lastWeek : '[గత] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s లో',
	            past : '%s క్రితం',
	            s : 'కొన్ని క్షణాలు',
	            ss : '%d సెకన్లు',
	            m : 'ఒక నిమిషం',
	            mm : '%d నిమిషాలు',
	            h : 'ఒక గంట',
	            hh : '%d గంటలు',
	            d : 'ఒక రోజు',
	            dd : '%d రోజులు',
	            M : 'ఒక నెల',
	            MM : '%d నెలలు',
	            y : 'ఒక సంవత్సరం',
	            yy : '%d సంవత్సరాలు'
	        },
	        dayOfMonthOrdinalParse : /\d{1,2}వ/,
	        ordinal : '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return te;

	})));


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var tet = moment.defineLocale('tet', {
	        months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
	        weekdaysMin : 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ohin iha] LT',
	            nextDay: '[Aban iha] LT',
	            nextWeek: 'dddd [iha] LT',
	            lastDay: '[Horiseik iha] LT',
	            lastWeek: 'dddd [semana kotuk] [iha] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'iha %s',
	            past : '%s liuba',
	            s : 'minutu balun',
	            ss : 'minutu %d',
	            m : 'minutu ida',
	            mm : 'minutu %d',
	            h : 'oras ida',
	            hh : 'oras %d',
	            d : 'loron ida',
	            dd : 'loron %d',
	            M : 'fulan ida',
	            MM : 'fulan %d',
	            y : 'tinan ida',
	            yy : 'tinan %d'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tet;

	})));


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var suffixes = {
	        0: '-ум',
	        1: '-ум',
	        2: '-юм',
	        3: '-юм',
	        4: '-ум',
	        5: '-ум',
	        6: '-ум',
	        7: '-ум',
	        8: '-ум',
	        9: '-ум',
	        10: '-ум',
	        12: '-ум',
	        13: '-ум',
	        20: '-ум',
	        30: '-юм',
	        40: '-ум',
	        50: '-ум',
	        60: '-ум',
	        70: '-ум',
	        80: '-ум',
	        90: '-ум',
	        100: '-ум'
	    };

	    var tg = moment.defineLocale('tg', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),
	        weekdaysShort : 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
	        weekdaysMin : 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Имрӯз соати] LT',
	            nextDay : '[Пагоҳ соати] LT',
	            lastDay : '[Дирӯз соати] LT',
	            nextWeek : 'dddd[и] [ҳафтаи оянда соати] LT',
	            lastWeek : 'dddd[и] [ҳафтаи гузашта соати] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'баъди %s',
	            past : '%s пеш',
	            s : 'якчанд сония',
	            m : 'як дақиқа',
	            mm : '%d дақиқа',
	            h : 'як соат',
	            hh : '%d соат',
	            d : 'як рӯз',
	            dd : '%d рӯз',
	            M : 'як моҳ',
	            MM : '%d моҳ',
	            y : 'як сол',
	            yy : '%d сол'
	        },
	        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'шаб') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'субҳ') {
	                return hour;
	            } else if (meridiem === 'рӯз') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'бегоҳ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'шаб';
	            } else if (hour < 11) {
	                return 'субҳ';
	            } else if (hour < 16) {
	                return 'рӯз';
	            } else if (hour < 19) {
	                return 'бегоҳ';
	            } else {
	                return 'шаб';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1th is the first week of the year.
	        }
	    });

	    return tg;

	})));


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H:mm',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            ss : '%d วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });

	    return th;

	})));


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var tlPh = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            ss : '%d segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tlPh;

	})));


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

	    function translateFuture(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'leS' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'waQ' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'nem' :
	        time + ' pIq';
	        return time;
	    }

	    function translatePast(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'Hu’' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'wen' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'ben' :
	        time + ' ret';
	        return time;
	    }

	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'ss':
	                return numberNoun + ' lup';
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }

	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	        ten = Math.floor((number % 100) / 10),
	        one = number % 10,
	        word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	        }
	        return (word === '') ? 'pagh' : word;
	    }

	    var tlh = moment.defineLocale('tlh', {
	        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : translateFuture,
	            past : translatePast,
	            s : 'puS lup',
	            ss : translate,
	            m : 'wa’ tup',
	            mm : translate,
	            h : 'wa’ rep',
	            hh : translate,
	            d : 'wa’ jaj',
	            dd : translate,
	            M : 'wa’ jar',
	            MM : translate,
	            y : 'wa’ DIS',
	            yy : translate
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tlh;

	})));


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';

	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };

	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[gelecek] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            ss : '%d saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'Do':
	                case 'DD':
	                    return number;
	                default:
	                    if (number === 0) {  // special case for zero
	                        return number + '\'ıncı';
	                    }
	                    var a = number % 10,
	                        b = number % 100 - a,
	                        c = number >= 100 ? 100 : null;
	                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tr;

	})));


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM : function (input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            ss : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'ss': [number + ' secunds', '' + number + ' secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	    }

	    return tzl;

	})));


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            ss : '%d ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm;

	})));


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var tzmLatn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            ss : '%d imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzmLatn;

	})));


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js language configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var ugCn = moment.defineLocale('ug-cn', {
	        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	            '_'
	        ),
	        monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	            '_'
	        ),
	        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
	            '_'
	        ),
	        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
	            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
	            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'
	        },
	        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                meridiem === 'يېرىم كېچە' ||
	                meridiem === 'سەھەر' ||
	                meridiem === 'چۈشتىن بۇرۇن'
	            ) {
	                return hour;
	            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
	                return hour + 12;
	            } else {
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return 'يېرىم كېچە';
	            } else if (hm < 900) {
	                return 'سەھەر';
	            } else if (hm < 1130) {
	                return 'چۈشتىن بۇرۇن';
	            } else if (hm < 1230) {
	                return 'چۈش';
	            } else if (hm < 1800) {
	                return 'چۈشتىن كېيىن';
	            } else {
	                return 'كەچ';
	            }
	        },
	        calendar: {
	            sameDay: '[بۈگۈن سائەت] LT',
	            nextDay: '[ئەتە سائەت] LT',
	            nextWeek: '[كېلەركى] dddd [سائەت] LT',
	            lastDay: '[تۆنۈگۈن] LT',
	            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%s كېيىن',
	            past: '%s بۇرۇن',
	            s: 'نەچچە سېكونت',
	            ss: '%d سېكونت',
	            m: 'بىر مىنۇت',
	            mm: '%d مىنۇت',
	            h: 'بىر سائەت',
	            hh: '%d سائەت',
	            d: 'بىر كۈن',
	            dd: '%d كۈن',
	            M: 'بىر ئاي',
	            MM: '%d ئاي',
	            y: 'بىر يىل',
	            yy: '%d يىل'
	        },

	        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '-كۈنى';
	                case 'w':
	                case 'W':
	                    return number + '-ھەپتە';
	                default:
	                    return number;
	            }
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 7 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ugCn;

	})));


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        };

	        if (!m) {
	            return weekdays['nominative'];
	        }

	        var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    var uk = moment.defineLocale('uk', {
	        months : {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            ss : relativeTimeWithPlural,
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return uk;

	})));


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var months = [
	        'جنوری',
	        'فروری',
	        'مارچ',
	        'اپریل',
	        'مئی',
	        'جون',
	        'جولائی',
	        'اگست',
	        'ستمبر',
	        'اکتوبر',
	        'نومبر',
	        'دسمبر'
	    ];
	    var days = [
	        'اتوار',
	        'پیر',
	        'منگل',
	        'بدھ',
	        'جمعرات',
	        'جمعہ',
	        'ہفتہ'
	    ];

	    var ur = moment.defineLocale('ur', {
	        months : months,
	        monthsShort : months,
	        weekdays : days,
	        weekdaysShort : days,
	        weekdaysMin : days,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd، D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /صبح|شام/,
	        isPM : function (input) {
	            return 'شام' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar : {
	            sameDay : '[آج بوقت] LT',
	            nextDay : '[کل بوقت] LT',
	            nextWeek : 'dddd [بوقت] LT',
	            lastDay : '[گذشتہ روز بوقت] LT',
	            lastWeek : '[گذشتہ] dddd [بوقت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s بعد',
	            past : '%s قبل',
	            s : 'چند سیکنڈ',
	            ss : '%d سیکنڈ',
	            m : 'ایک منٹ',
	            mm : '%d منٹ',
	            h : 'ایک گھنٹہ',
	            hh : '%d گھنٹے',
	            d : 'ایک دن',
	            dd : '%d دن',
	            M : 'ایک ماہ',
	            MM : '%d ماہ',
	            y : 'ایک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ur;

	})));


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var uz = moment.defineLocale('uz', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            ss : '%d фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return uz;

	})));


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var uzLatn = moment.defineLocale('uz-latn', {
	        months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
	        monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	        weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
	        weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	        weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Bugun soat] LT [da]',
	            nextDay : '[Ertaga] LT [da]',
	            nextWeek : 'dddd [kuni soat] LT [da]',
	            lastDay : '[Kecha soat] LT [da]',
	            lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Yaqin %s ichida',
	            past : 'Bir necha %s oldin',
	            s : 'soniya',
	            ss : '%d soniya',
	            m : 'bir daqiqa',
	            mm : '%d daqiqa',
	            h : 'bir soat',
	            hh : '%d soat',
	            d : 'bir kun',
	            dd : '%d kun',
	            M : 'bir oy',
	            MM : '%d oy',
	            y : 'bir yil',
	            yy : '%d yil'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return uzLatn;

	})));


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /sa|ch/i,
	        isPM : function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            ss : '%d giây' ,
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return vi;

	})));


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var xPseudo = moment.defineLocale('x-pseudo', {
	        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[T~ódá~ý át] LT',
	            nextDay : '[T~ómó~rró~w át] LT',
	            nextWeek : 'dddd [át] LT',
	            lastDay : '[Ý~ést~érdá~ý át] LT',
	            lastWeek : '[L~ást] dddd [át] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'í~ñ %s',
	            past : '%s á~gó',
	            s : 'á ~féw ~sécó~ñds',
	            ss : '%d s~écóñ~ds',
	            m : 'á ~míñ~úté',
	            mm : '%d m~íñú~tés',
	            h : 'á~ñ hó~úr',
	            hh : '%d h~óúrs',
	            d : 'á ~dáý',
	            dd : '%d d~áýs',
	            M : 'á ~móñ~th',
	            MM : '%d m~óñt~hs',
	            y : 'á ~ýéár',
	            yy : '%d ý~éárs'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return xPseudo;

	})));


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var yo = moment.defineLocale('yo', {
	        months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	        monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	        weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	        weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	        weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Ònì ni] LT',
	            nextDay : '[Ọ̀la ni] LT',
	            nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	            lastDay : '[Àna ni] LT',
	            lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ní %s',
	            past : '%s kọjá',
	            s : 'ìsẹjú aayá die',
	            ss :'aayá %d',
	            m : 'ìsẹjú kan',
	            mm : 'ìsẹjú %d',
	            h : 'wákati kan',
	            hh : 'wákati %d',
	            d : 'ọjọ́ kan',
	            dd : 'ọjọ́ %d',
	            M : 'osù kan',
	            MM : 'osù %d',
	            y : 'ọdún kan',
	            yy : 'ọdún %d'
	        },
	        dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
	        ordinal : 'ọjọ́ %d',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return yo;

	})));


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var zhCn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah点mm分',
	            LLLL : 'YYYY年M月D日ddddAh点mm分',
	            l : 'YYYY/M/D',
	            ll : 'YYYY年M月D日',
	            lll : 'YYYY年M月D日 HH:mm',
	            llll : 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            ss : '%d 秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return zhCn;

	})));


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var zhHk = moment.defineLocale('zh-hk', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日 HH:mm',
	            LLLL : 'YYYY年M月D日dddd HH:mm',
	            l : 'YYYY/M/D',
	            ll : 'YYYY年M月D日',
	            lll : 'YYYY年M月D日 HH:mm',
	            llll : 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            ss : '%d 秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zhHk;

	})));


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration

	;(function (global, factory) {
	    true ? factory(__webpack_require__(97)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	    var zhTw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日 HH:mm',
	            LLLL : 'YYYY年M月D日dddd HH:mm',
	            l : 'YYYY/M/D',
	            ll : 'YYYY年M月D日',
	            lll : 'YYYY年M月D日 HH:mm',
	            llll : 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天] LT',
	            nextDay : '[明天] LT',
	            nextWeek : '[下]dddd LT',
	            lastDay : '[昨天] LT',
	            lastWeek : '[上]dddd LT',
	            sameElse : 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            ss : '%d 秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zhTw;

	})));


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(224);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./message.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./message.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".message__root__3G3Wm {\r\n  background-color: #fff;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  margin: 0.5em;\r\n  padding: 0.75em;  \r\n}\r\n\r\n.message__text__3o1wq {\r\n  font-size: 16pt;\r\n  font-weight: 200;  \r\n}\r\n\r\n.message__user__358Wl {\r\n  display: flex;\r\n  align-items: center;  \r\n}\r\n\r\n.message__avatar__302_d {\r\n  width: 34px;\r\n  height: 34px;\r\n  border-radius: 50%;  \r\n}\r\n\r\n.message__displayName__3ZjN3 {\r\n  font-weight: bold;\r\n  padding: 0.5em;\r\n}\r\n\r\n.message__username__xsE21 {\r\n  color: #aaa;\r\n}\r\n\r\n.message__date__3LmSH {\r\n  color: #aaa;\r\n  padding: 0.5em;\r\n  font-size: 8pt;\r\n}\r\n\r\n.message__buttons__11Rvi {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  color: #aaa;\r\n}\r\n\r\n.message__icon__1eqVT {\r\n  margin-right: 3em;\r\n}\r\n\r\n.message__num__18vPM {\r\n  font-size: 10pt;\r\n  margin-right: 3em;\r\n  margin-left: 0.25em;\r\n}\r\n\r\n.message__rtGreen__3_ki_ {\r\n  color: #20883f;\r\n}\r\n\r\n.message__favYellow__2yD4J {\r\n  color: #e2c400;\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "message__root__3G3Wm",
		"text": "message__text__3o1wq",
		"user": "message__user__358Wl",
		"avatar": "message__avatar__302_d",
		"displayName": "message__displayName__3ZjN3",
		"username": "message__username__xsE21",
		"date": "message__date__3LmSH",
		"buttons": "message__buttons__11Rvi",
		"icon": "message__icon__1eqVT",
		"num": "message__num__18vPM",
		"rtGreen": "message__rtGreen__3_ki_",
		"favYellow": "message__favYellow__2yD4J"
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(226);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./message-list.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./message-list.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".message-list__root__1RBvO {\r\n  margin: 0.5em;\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "message-list__root__1RBvO"
	};

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _inputText = __webpack_require__(228);

	var _inputText2 = _interopRequireDefault(_inputText);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var propTypes = {
	  userNameToReply: _reactProptypes2.default.string.isRequired,
	  onSendText: _reactProptypes2.default.func.isRequired,
	  onCloseText: _reactProptypes2.default.func.isRequired
	};

	function InputText(_ref) {
	  var onSendText = _ref.onSendText,
	      userNameToReply = _ref.userNameToReply,
	      onCloseText = _ref.onCloseText;

	  return _react2.default.createElement(
	    'form',
	    { className: _inputText2.default.form, method: 'post', onSubmit: onSendText },
	    _react2.default.createElement(
	      'textarea',
	      { className: _inputText2.default.text, name: 'text' },
	      userNameToReply ? '@' + userNameToReply + ' ' : ''
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: _inputText2.default.buttons },
	      _react2.default.createElement(
	        'button',
	        { className: _inputText2.default.close, onClick: onCloseText },
	        'Cerrar'
	      ),
	      _react2.default.createElement(
	        'button',
	        { className: _inputText2.default.send, type: 'submit' },
	        'Enviar'
	      )
	    )
	  );
	}

	InputText.propTypes = propTypes;

	exports.default = InputText;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(229);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./input-text.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./input-text.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".input-text__text__1q46U {\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;  \r\n  /* width: 60%; */\r\n  height: 5em;\r\n  padding: 0.75em;\r\n  margin: 1em 0.5em;\r\n}\r\n\r\n.input-text__buttons__YwEWi {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.input-text__buttons__YwEWi > button {\r\n  border-radius: 5px;\r\n  padding: 0.5em 0.75em;\r\n  /* margin: 0.25em;   */\r\n}\r\n\r\n.input-text__close__12W9r {\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.input-text__send__3LNLX {\r\n  background-color: #2d84cc;\r\n  border: 1px solid #226aa6;\r\n  color: #fff;\r\n}", ""]);

	// exports
	exports.locals = {
		"text": "input-text__text__1q46U",
		"buttons": "input-text__buttons__YwEWi",
		"close": "input-text__close__12W9r",
		"send": "input-text__send__3LNLX"
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _reactRouterDom = __webpack_require__(34);

	var _profileBar = __webpack_require__(231);

	var _profileBar2 = _interopRequireDefault(_profileBar);

	var _Profile = __webpack_require__(233);

	var _Profile2 = _interopRequireDefault(_Profile);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var propTypes = {
	  picture: _reactProptypes2.default.string.isRequired,
	  username: _reactProptypes2.default.string.isRequired,
	  onOpenText: _reactProptypes2.default.func.isRequired
	};

	function ProfileBar(_ref) {
	  var picture = _ref.picture,
	      username = _ref.username,
	      onOpenText = _ref.onOpenText,
	      onLogout = _ref.onLogout;

	  return _react2.default.createElement(
	    'div',
	    { className: _profileBar2.default.root },
	    _react2.default.createElement(
	      'div',
	      { className: _profileBar2.default.profileContainer },
	      _react2.default.createElement(
	        _reactRouterDom.Link,
	        { to: '/profile' },
	        _react2.default.createElement(
	          'figure',
	          null,
	          _react2.default.createElement('img', { className: _profileBar2.default.avatar, src: picture })
	        )
	      ),
	      _react2.default.createElement(
	        'span',
	        { className: _profileBar2.default.username },
	        'Hola @',
	        username,
	        '!'
	      )
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: _profileBar2.default.buttonContainer },
	      _react2.default.createElement(
	        'button',
	        { onClick: onOpenText, className: _profileBar2.default.buttonTweet },
	        _react2.default.createElement('span', { className: 'fa fa-lg fa-edit' }),
	        ' Tweet!'
	      ),
	      _react2.default.createElement(
	        'button',
	        { onClick: onLogout, className: _profileBar2.default.buttonLogout },
	        _react2.default.createElement('span', { className: 'fa fa-sign-out' }),
	        ' Salir'
	      )
	    )
	  );
	}

	ProfileBar.propTypes = propTypes;

	exports.default = ProfileBar;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(232);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./profile-bar.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./profile-bar.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".profile-bar__root__21zOn {\r\n  display: flex;\r\n  margin: 1em;\r\n  justify-content: space-between; \r\n  flex-wrap: wrap; \r\n}\r\n\r\n.profile-bar__profileContainer__1cbrM {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n}\r\n\r\n.profile-bar__avatar__2pA03 {\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n\r\n.profile-bar__username__1-iDN {\r\n  color: #666;\r\n}\r\n\r\n.profile-bar__buttonContainer__1XG5F {\r\n  display: flex;\r\n\r\n}\r\n\r\n.profile-bar__buttonTweet__gFIMe {\r\n  background-color: #2d84cc;\r\n  color: #fff;\r\n  border: 1px solid #1f6fb1;\r\n  border-radius: 5px;\r\n  margin: 0 1em;\r\n  padding: 0.5em 0.75em;\r\n}\r\n\r\n.profile-bar__buttonLogout__9AV-_ {\r\n  background-color: #d9534f;\r\n  color: #fff;\r\n  border: 1px solid #d43f3a;\r\n  border-radius: 5px;\r\n  margin: 0 0 0 0.5em;\r\n  padding: 0.5em 0.75em;\r\n}\r\n\r\n@media (max-width:500px) {\r\n  .profile-bar__root__21zOn {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  \r\n  .profile-bar__profileContainer__1cbrM {\r\n    margin-bottom: 1em;\r\n  }\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "profile-bar__root__21zOn",
		"profileContainer": "profile-bar__profileContainer__1cbrM",
		"avatar": "profile-bar__avatar__2pA03",
		"username": "profile-bar__username__1-iDN",
		"buttonContainer": "profile-bar__buttonContainer__1XG5F",
		"buttonTweet": "profile-bar__buttonTweet__gFIMe",
		"buttonLogout": "profile-bar__buttonLogout__9AV-_"
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _profile = __webpack_require__(234);

	var _profile2 = _interopRequireDefault(_profile);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var propTypes = {
	  username: _reactProptypes2.default.string.isRequired,
	  displayName: _reactProptypes2.default.string.isRequired,
	  picture: _reactProptypes2.default.string.isRequired,
	  emailAddress: _reactProptypes2.default.string.isRequired,
	  location: _reactProptypes2.default.string.isRequired
	};

	function Profile(_ref) {
	  var username = _ref.username,
	      displayName = _ref.displayName,
	      picture = _ref.picture,
	      emailAddress = _ref.emailAddress,
	      location = _ref.location;

	  return _react2.default.createElement(
	    'div',
	    { className: _profile2.default.root },
	    _react2.default.createElement('img', { className: _profile2.default.avatar, src: picture }),
	    _react2.default.createElement(
	      'span',
	      { className: _profile2.default.name },
	      displayName
	    ),
	    _react2.default.createElement(
	      'ul',
	      { className: _profile2.default.data },
	      _react2.default.createElement(
	        'li',
	        null,
	        _react2.default.createElement('span', { className: 'fa fa-user' }),
	        ' ',
	        username
	      ),
	      _react2.default.createElement(
	        'li',
	        null,
	        _react2.default.createElement('span', { className: 'fa fa-envelope' }),
	        ' ',
	        emailAddress
	      ),
	      _react2.default.createElement(
	        'li',
	        null,
	        _react2.default.createElement('span', { className: 'fa fa-map-marker' }),
	        ' ',
	        location
	      )
	    )
	  );
	}

	Profile.propTypes = propTypes;

	exports.default = Profile;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(235);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./profile.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./profile.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".profile__root__zwUk9 {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n}\r\n\r\n.profile__avatar__1oujU {\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 50%;\r\n  margin: 1em auto;\r\n}\r\n\r\n.profile__name__3rRiA {\r\n  font-weight: 700;\r\n  font-size: 20pt;\r\n  text-align: center;\r\n}\r\n\r\n.profile__data__1ymE- {\r\n  list-style-type: none;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n.profile__data__1ymE- > li {\r\n  background-color: #fff;\r\n  padding: 1em;\r\n  margin: 0;\r\n  border: 1px solid #ddd;\r\n  color: #777;\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "profile__root__zwUk9",
		"avatar": "profile__avatar__1oujU",
		"name": "profile__name__3rRiA",
		"data": "profile__data__1ymE-"
	};

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactProptypes = __webpack_require__(89);

	var _reactProptypes2 = _interopRequireDefault(_reactProptypes);

	var _login = __webpack_require__(237);

	var _login2 = _interopRequireDefault(_login);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var propTypes = {
	  onAuth: _reactProptypes2.default.func.isRequired
	};

	function Login(_ref) {
	  var onAuth = _ref.onAuth;

	  return _react2.default.createElement(
	    'div',
	    { className: _login2.default.root },
	    _react2.default.createElement(
	      'p',
	      { className: _login2.default.text },
	      'Necesitamos que inicies sesion con tu cuenta de GitHub para que puedas leer y escribir mensajes.'
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: _login2.default.container },
	      _react2.default.createElement(
	        'button',
	        { onClick: onAuth, className: _login2.default.button },
	        _react2.default.createElement('span', { className: 'fa fa-github' }),
	        ' Login con GitHub'
	      )
	    )
	  );
	}

	Login.propTypes = propTypes;

	exports.default = Login;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(238);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(84)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./login.css", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local]__[hash:base64:5]!./login.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(83)();
	// imports


	// module
	exports.push([module.id, ".login__root__2KoAW {\r\n  margin: 0 1em;\r\n  text-align: center;  \r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  /* align-items: center; */\r\n  height: 50vh;\r\n}\r\n\r\n.login__text__fcrcX {\r\n  color: #888;\r\n}\r\n\r\n.login__container__2OxnU {\r\n  display: flex;\r\n  /* flex-direction: column; */\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n}\r\n\r\n.login__button__1PygA {\r\n  border: #666;\r\n  border-radius: 5px;\r\n  padding: 0.5em 1em;\r\n  background-color: #aaa;\r\n  color: #eaeaea;\r\n  margin-bottom: 10px;\r\n}", ""]);

	// exports
	exports.locals = {
		"root": "login__root__2KoAW",
		"text": "login__text__fcrcX",
		"container": "login__container__2OxnU",
		"button": "login__button__1PygA"
	};

/***/ }
/******/ ]);